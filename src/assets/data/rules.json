{
  "rules": [
    {
      "category": "Network Connection",
      "rules": [
        {
          "id": "W9001",
          "name": "Missing Exception Handling for Network Operations",
          "description": "Network operations must be wrapped in try-except blocks to handle network exceptions gracefully, preventing unhandled errors.",
          "severity": "Warning",
          "recommendation": "Implement exception handling for operations involving network connections."
        },
        {
          "id": "W9002",
          "name": "Missing Retry Logic with Exponential Backoff",
          "description": "Network operations should implement retry mechanisms with exponential backoff to handle transient network failures without overloading the network.",
          "severity": "Warning",
          "recommendation": "Implement retry logic to improve resilience against temporary network issues."
        },
        {
          "id": "W9003",
          "name": "Timeout Setting Missing in Network Operations",
          "description": "Set appropriate timeouts for network operations to prevent indefinite blocking.",
          "severity": "Warning",
          "recommendation": "Configure timeout parameters for all network-related calls."
        },
        {
          "id": "C9004",
          "name": "Missing Local State Saving for Network Operations",
          "description": "Ensure local state is saved after network operations to prevent data loss during network failures.",
          "severity": "Convention",
          "recommendation": "Implement local state saving as a best practice."
        },
        {
          "id": "W9005",
          "name": "State Synchronization Missing on Network Reconnection",
          "description": "Local state should synchronize with the server upon network reconnection to ensure data consistency.",
          "severity": "Warning",
          "recommendation": "Implement state synchronization on reconnection."
        }
      ]
    },
    {
      "category": "Core Drone Functionalities",
      "rules": [
        {
          "id": "W9211",
          "name": "Flight Mode Implementation",
          "description": "Ensures manual, autonomous, and intelligent flight modes are implemented.",
          "severity": "Warning",
          "recommendation": "Implement multiple flight modes for flexibility."
        },
        {
          "id": "C9212",
          "name": "Camera Feature Requirements",
          "description": "Checks for essential camera features like resolution, zoom, and stabilization.",
          "severity": "Convention",
          "recommendation": "Ensure camera supports key features for operation."
        },
        {
          "id": "W9213",
          "name": "Payload Capacity Limits",
          "description": "Ensures payload functionality includes weight limits and compatibility checks for safe operation.",
          "severity": "Warning",
          "recommendation": "Implement payload checks to maintain safety."
        },
        {
          "id": "W9215",
          "name": "Autonomous Flight Capability",
          "description": "Ensure that autonomous flight includes waypoint navigation, return-to-home, follow-me mode, and orbit mode.",
          "severity": "Warning",
          "recommendation": "Autonomous flight must include waypoint navigation, return-to-home, follow-me, and orbit mode."
        }
      ]
    },
    {
      "category": "Drone Data Validation",
      "rules": [
        {
          "id": "E9401",
          "name": "Ensure Data Type Validation for Received Drone Data",
          "description": "Ensures that data types of received data (e.g., integer, float, string) are validated. This is critical to avoid runtime errors or data corruption.",
          "severity": "Error",
          "recommendation": "Ensure data received from a sensor is of the expected type to prevent processing errors."
        },
        {
          "id": "E9402",
          "name": "Ensure Data Structure Validation (e.g., JSON, XML) Against a Schema",
          "description": "Validates the structure of received data, such as JSON or XML, against a predefined schema. This prevents schema mismatches that could lead to incorrect data processing.",
          "severity": "Error",
          "recommendation": "Validate incoming JSON payload against a schema to ensure all required fields are present."
        },
        {
          "id": "E9403",
          "name": "Check for Missing or Invalid Fields in Received Data",
          "description": "Verifies if required fields are missing or contain invalid values. Missing critical fields can lead to incomplete data processing.",
          "severity": "Error",
          "recommendation": "Ensure that all necessary fields (like timestamp, coordinates) are present in the data."
        },
        {
          "id": "E9404",
          "name": "Range Validation for Numeric Data Fields",
          "description": "Ensures that numeric values fall within acceptable ranges. Incorrect range values could indicate sensor issues or data corruption.",
          "severity": "Error",
          "recommendation": "Validate that altitude data is within a specified safe range."
        },
        {
          "id": "E9405",
          "name": "Data Consistency Checks",
          "description": "Applies consistency checks to ensure that received data points are in sync. This helps in avoiding data inconsistencies that may arise due to sensor discrepancies.",
          "severity": "Error",
          "recommendation": "Cross-check data from multiple sensors to ensure consistency (e.g., GPS and barometric data)."
        },
        {
          "id": "E9406",
          "name": "Sensor Calibration Factors",
          "description": "Ensures that calibration factors are applied to adjust for sensor biases. Without calibration, the collected data might be inaccurate.",
          "severity": "Error",
          "recommendation": "Apply a calibration factor to adjust temperature readings received from sensors."
        },
        {
          "id": "E9407",
          "name": "Error Handling and Recovery Mechanisms",
          "description": "Ensures that error handling and recovery mechanisms are implemented to handle invalid or corrupted data. Lack of proper error handling may lead to crashes or undefined behaviour.",
          "severity": "Error",
          "recommendation": "Implement try-except blocks to handle potential data parsing errors gracefully."
        },
        {
          "id": "E9408",
          "name": "Data Filtering or Smoothing for Noise Reduction",
          "description": "Ensures that filtering or smoothing techniques are applied to the data to reduce noise. Noisy data can lead to false conclusions and erroneous behaviour.",
          "severity": "Error",
          "recommendation": "Use a low-pass filter to smooth out fluctuations in sensor readings."
        }
      ]
    },
    {
      "category": "Consistency",
      "rules": [
        {
          "id": "S5542",
          "name": "Encryption algorithms should be used with secure mode and padding scheme",
          "description": "<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<p>For AES, the weakest mode is ECB (Electronic Codebook). Repeated blocks of data are encrypted to the same value, making them easy to identify and\nreducing the difficulty of recovering the original cleartext.</p>\n<p>Unauthenticated modes such as CBC (Cipher Block Chaining) may be used but are prone to attacks that manipulate the ciphertext. They must be used\nwith caution.</p>\n<p>For RSA, the weakest algorithms are either using it without padding or using the PKCS1v1.5 padding scheme.</p>\n<h3>What is the potential impact?</h3>\n<p>The cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.</p>\n<p>Below are some real-world scenarios that illustrate possible impacts of an attacker exploiting the vulnerability.</p>\n<h4>Theft of sensitive data</h4>\n<p>The encrypted message might contain data that is considered sensitive and should not be known to third parties.</p>\n<p>By using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.</p>\n<h2>How to fix it in PyCrypto</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Example with a symmetric cipher, AES:</p>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import AES\n\nAES.new(key, AES.MODE_ECB) # Noncompliant\n</pre>\n<p>Example with an asymmetric cipher, RSA:</p>\n<pre data-diff-id=\"12\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import PKCS1_v1_5\n\nPKCS1_v1_5.new(key) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>Since PyCrypto is not supported anymore, another library should be used. In the current context, Cryptodome uses a similar API.</p>\n<p>For the AES symmetric cipher, use the GCM mode:</p>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import AES\n\nAES.new(key, AES.MODE_GCM)\n</pre>\n<p>For the RSA asymmetric cipher, use the Optimal Asymmetric Encryption Padding (OAEP):</p>\n<pre data-diff-id=\"12\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import PKCS1_OAEP\n\nPKCS1_OAEP.new(key)\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.</p>\n<p>Appropriate choices are currently the following.</p>\n<h4>For AES: use authenticated encryption modes</h4>\n<p>The best-known authenticated encryption mode for AES is Galois/Counter mode (GCM).</p>\n<p>GCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.</p>\n<p>Other similar modes are:</p>\n<ul>\n  <li> CCM: <code>Counter with CBC-MAC</code> </li>\n  <li> CWC: <code>Cipher Block Chaining with Message Authentication Code</code> </li>\n  <li> EAX: <code>Encrypt-and-Authenticate</code> </li>\n  <li> IAPM: <code>Integer Authenticated Parallelizable Mode</code> </li>\n  <li> OCB: <code>Offset Codebook Mode</code> </li>\n</ul>\n<p>It is also possible to use AES-CBC with HMAC for integrity checks. However, it is considered more straightforward to use AES-GCM directly\ninstead.</p>\n<h4>For RSA: use the OAEP scheme</h4>\n<p>The Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.</p>\n<h2>How to fix it in pyca</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Example with a symmetric cipher, AES:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.ciphers import (\n    Cipher,\n    algorithms,\n    modes,\n)\nfrom cryptography.hazmat.backends import default_backend\n\nCipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend()) # Noncompliant\n</pre>\n<p>Example with an asymmetric cipher, RSA:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.asymmetric import (\n    rsa,\n    padding,\n)\n\nprivate_key = rsa.generate_private_key(\n  public_exponent=65537,\n  key_size=2048,\n  backend=default_backend()\n)\n\npublic_key = private_key.public_key()\n\npublic_key.encrypt(\n  message,\n  padding.PKCS1v15() # Noncompliant\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>For the AES symmetric cipher, use the GCM mode:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.ciphers import (\n    Cipher,\n    algorithms,\n    modes,\n)\nfrom cryptography.hazmat.backends import default_backend\n\nCipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.asymmetric import (\n    rsa,\n    padding,\n)\nfrom cryptography.hazmat.primitives import hashes\n\nprivate_key = rsa.generate_private_key(\n  public_exponent=65537,\n  key_size=2048,\n  backend=default_backend()\n)\n\npublic_key = private_key.public_key()\n\npublic_key.encrypt(\n  message,\n  padding.OAEP(\n    mgf=padding.MGF1(algorithm=hashes.SHA256()),\n    algorithm=hashes.SHA256(),\n    label=None\n  )\n)\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.</p>\n<p>Appropriate choices are currently the following.</p>\n<h4>For AES: use authenticated encryption modes</h4>\n<p>The best-known authenticated encryption mode for AES is Galois/Counter mode (GCM).</p>\n<p>GCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.</p>\n<p>Other similar modes are:</p>\n<ul>\n  <li> CCM: <code>Counter with CBC-MAC</code> </li>\n  <li> CWC: <code>Cipher Block Chaining with Message Authentication Code</code> </li>\n  <li> EAX: <code>Encrypt-and-Authenticate</code> </li>\n  <li> IAPM: <code>Integer Authenticated Parallelizable Mode</code> </li>\n  <li> OCB: <code>Offset Codebook Mode</code> </li>\n</ul>\n<p>It is also possible to use AES-CBC with HMAC for integrity checks. However, it is considered more straightforward to use AES-GCM directly\ninstead.</p>\n<h4>For RSA: use the OAEP scheme</h4>\n<p>The Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.</p>\n<h2>How to fix it in Cryptodome</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Example with a symmetric cipher, AES:</p>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import AES     # pycryptodome\nfrom Cryptodome.Cipher import AES # pycryptodomex\n\nAES.new(key, AES.MODE_ECB)  # Noncompliant\n</pre>\n<p>Example with an asymmetric cipher, RSA:</p>\n<pre data-diff-id=\"22\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import PKCS1_V1_5     # pycryptodome\nfrom Cryptodome.Cipher import PKCS1_V1_5 # pycryptodomex\n\nPKCS1_v1_5.new(key) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>For the AES symmetric cipher, use the GCM mode:</p>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import AES     # pycryptodome\nfrom Cryptodome.Cipher import AES # pycryptodomex\n\nAES.new(key, AES.MODE_GCM)\n</pre>\n<p>For the RSA asymmetric cipher, use the Optimal Asymmetric Encryption Padding (OAEP):</p>\n<pre data-diff-id=\"22\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import PKCS1_V1_5     # pycryptodome\nfrom Cryptodome.Cipher import PKCS1_V1_5 # pycryptodomex\n\nPKCS1_OAEP.new(key)\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.</p>\n<p>Appropriate choices are currently the following.</p>\n<h4>For AES: use authenticated encryption modes</h4>\n<p>The best-known authenticated encryption mode for AES is Galois/Counter mode (GCM).</p>\n<p>GCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.</p>\n<p>Other similar modes are:</p>\n<ul>\n  <li> CCM: <code>Counter with CBC-MAC</code> </li>\n  <li> CWC: <code>Cipher Block Chaining with Message Authentication Code</code> </li>\n  <li> EAX: <code>Encrypt-and-Authenticate</code> </li>\n  <li> IAPM: <code>Integer Authenticated Parallelizable Mode</code> </li>\n  <li> OCB: <code>Offset Codebook Mode</code> </li>\n</ul>\n<p>It is also possible to use AES-CBC with HMAC for integrity checks. However, it is considered more straightforward to use AES-GCM directly\ninstead.</p>\n<h4>For RSA: use the OAEP scheme</h4>\n<p>The Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.</p>\n<h2>How to fix it in pyDes</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport pyDes\n\npyDes.des(key) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>Since pyDes only provides DES, it is recommended to use another library like pyca.</p>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.ciphers import (\n    Cipher,\n    algorithms,\n    modes,\n)\nfrom cryptography.hazmat.backends import default_backend\n\nCipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.</p>\n<p>Appropriate choices are currently the following.</p>\n<h4>For AES: use authenticated encryption modes</h4>\n<p>The best-known authenticated encryption mode for AES is Galois/Counter mode (GCM).</p>\n<p>GCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.</p>\n<p>Other similar modes are:</p>\n<ul>\n  <li> CCM: <code>Counter with CBC-MAC</code> </li>\n  <li> CWC: <code>Cipher Block Chaining with Message Authentication Code</code> </li>\n  <li> EAX: <code>Encrypt-and-Authenticate</code> </li>\n  <li> IAPM: <code>Integer Authenticated Parallelizable Mode</code> </li>\n  <li> OCB: <code>Offset Codebook Mode</code> </li>\n</ul>\n<p>It is also possible to use AES-CBC with HMAC for integrity checks. However, it is considered more straightforward to use AES-GCM directly\ninstead.</p>\n<h4>For RSA: use the OAEP scheme</h4>\n<p>The Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\">Microsoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<p>For AES, the weakest mode is ECB (Electronic Codebook). Repeated blocks of data are encrypted to the same value, making them easy to identify and\nreducing the difficulty of recovering the original cleartext.</p>\n<p>Unauthenticated modes such as CBC (Cipher Block Chaining) may be used but are prone to attacks that manipulate the ciphertext. They must be used\nwith caution.</p>\n<p>For RSA, the weakest algorithms are either using it without padding or using the PKCS1v1.5 padding scheme.</p>\n<h3>What is the potential impact?</h3>\n<p>The cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.</p>\n<p>Below are some real-world scenarios that illustrate possible impacts of an attacker exploiting the vulnerability.</p>\n<h4>Theft of sensitive data</h4>\n<p>The encrypted message might contain data that is considered sensitive and should not be known to third parties.</p>\n<p>By using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.</p>\n<h2>How to fix it in PyCrypto</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Example with a symmetric cipher, AES:</p>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import AES\n\nAES.new(key, AES.MODE_ECB) # Noncompliant\n</pre>\n<p>Example with an asymmetric cipher, RSA:</p>\n<pre data-diff-id=\"12\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import PKCS1_v1_5\n\nPKCS1_v1_5.new(key) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>Since PyCrypto is not supported anymore, another library should be used. In the current context, Cryptodome uses a similar API.</p>\n<p>For the AES symmetric cipher, use the GCM mode:</p>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import AES\n\nAES.new(key, AES.MODE_GCM)\n</pre>\n<p>For the RSA asymmetric cipher, use the Optimal Asymmetric Encryption Padding (OAEP):</p>\n<pre data-diff-id=\"12\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import PKCS1_OAEP\n\nPKCS1_OAEP.new(key)\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.</p>\n<p>Appropriate choices are currently the following.</p>\n<h4>For AES: use authenticated encryption modes</h4>\n<p>The best-known authenticated encryption mode for AES is Galois/Counter mode (GCM).</p>\n<p>GCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.</p>\n<p>Other similar modes are:</p>\n<ul>\n  <li> CCM: <code>Counter with CBC-MAC</code> </li>\n  <li> CWC: <code>Cipher Block Chaining with Message Authentication Code</code> </li>\n  <li> EAX: <code>Encrypt-and-Authenticate</code> </li>\n  <li> IAPM: <code>Integer Authenticated Parallelizable Mode</code> </li>\n  <li> OCB: <code>Offset Codebook Mode</code> </li>\n</ul>\n<p>It is also possible to use AES-CBC with HMAC for integrity checks. However, it is considered more straightforward to use AES-GCM directly\ninstead.</p>\n<h4>For RSA: use the OAEP scheme</h4>\n<p>The Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.</p>\n<h2>How to fix it in pyca</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Example with a symmetric cipher, AES:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.ciphers import (\n    Cipher,\n    algorithms,\n    modes,\n)\nfrom cryptography.hazmat.backends import default_backend\n\nCipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend()) # Noncompliant\n</pre>\n<p>Example with an asymmetric cipher, RSA:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.asymmetric import (\n    rsa,\n    padding,\n)\n\nprivate_key = rsa.generate_private_key(\n  public_exponent=65537,\n  key_size=2048,\n  backend=default_backend()\n)\n\npublic_key = private_key.public_key()\n\npublic_key.encrypt(\n  message,\n  padding.PKCS1v15() # Noncompliant\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>For the AES symmetric cipher, use the GCM mode:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.ciphers import (\n    Cipher,\n    algorithms,\n    modes,\n)\nfrom cryptography.hazmat.backends import default_backend\n\nCipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.asymmetric import (\n    rsa,\n    padding,\n)\nfrom cryptography.hazmat.primitives import hashes\n\nprivate_key = rsa.generate_private_key(\n  public_exponent=65537,\n  key_size=2048,\n  backend=default_backend()\n)\n\npublic_key = private_key.public_key()\n\npublic_key.encrypt(\n  message,\n  padding.OAEP(\n    mgf=padding.MGF1(algorithm=hashes.SHA256()),\n    algorithm=hashes.SHA256(),\n    label=None\n  )\n)\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.</p>\n<p>Appropriate choices are currently the following.</p>\n<h4>For AES: use authenticated encryption modes</h4>\n<p>The best-known authenticated encryption mode for AES is Galois/Counter mode (GCM).</p>\n<p>GCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.</p>\n<p>Other similar modes are:</p>\n<ul>\n  <li> CCM: <code>Counter with CBC-MAC</code> </li>\n  <li> CWC: <code>Cipher Block Chaining with Message Authentication Code</code> </li>\n  <li> EAX: <code>Encrypt-and-Authenticate</code> </li>\n  <li> IAPM: <code>Integer Authenticated Parallelizable Mode</code> </li>\n  <li> OCB: <code>Offset Codebook Mode</code> </li>\n</ul>\n<p>It is also possible to use AES-CBC with HMAC for integrity checks. However, it is considered more straightforward to use AES-GCM directly\ninstead.</p>\n<h4>For RSA: use the OAEP scheme</h4>\n<p>The Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.</p>\n<h2>How to fix it in Cryptodome</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Example with a symmetric cipher, AES:</p>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import AES     # pycryptodome\nfrom Cryptodome.Cipher import AES # pycryptodomex\n\nAES.new(key, AES.MODE_ECB)  # Noncompliant\n</pre>\n<p>Example with an asymmetric cipher, RSA:</p>\n<pre data-diff-id=\"22\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import PKCS1_V1_5     # pycryptodome\nfrom Cryptodome.Cipher import PKCS1_V1_5 # pycryptodomex\n\nPKCS1_v1_5.new(key) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>For the AES symmetric cipher, use the GCM mode:</p>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import AES     # pycryptodome\nfrom Cryptodome.Cipher import AES # pycryptodomex\n\nAES.new(key, AES.MODE_GCM)\n</pre>\n<p>For the RSA asymmetric cipher, use the Optimal Asymmetric Encryption Padding (OAEP):</p>\n<pre data-diff-id=\"22\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import PKCS1_V1_5     # pycryptodome\nfrom Cryptodome.Cipher import PKCS1_V1_5 # pycryptodomex\n\nPKCS1_OAEP.new(key)\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.</p>\n<p>Appropriate choices are currently the following.</p>\n<h4>For AES: use authenticated encryption modes</h4>\n<p>The best-known authenticated encryption mode for AES is Galois/Counter mode (GCM).</p>\n<p>GCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.</p>\n<p>Other similar modes are:</p>\n<ul>\n  <li> CCM: <code>Counter with CBC-MAC</code> </li>\n  <li> CWC: <code>Cipher Block Chaining with Message Authentication Code</code> </li>\n  <li> EAX: <code>Encrypt-and-Authenticate</code> </li>\n  <li> IAPM: <code>Integer Authenticated Parallelizable Mode</code> </li>\n  <li> OCB: <code>Offset Codebook Mode</code> </li>\n</ul>\n<p>It is also possible to use AES-CBC with HMAC for integrity checks. However, it is considered more straightforward to use AES-GCM directly\ninstead.</p>\n<h4>For RSA: use the OAEP scheme</h4>\n<p>The Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.</p>\n<h2>How to fix it in pyDes</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport pyDes\n\npyDes.des(key) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>Since pyDes only provides DES, it is recommended to use another library like pyca.</p>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.ciphers import (\n    Cipher,\n    algorithms,\n    modes,\n)\nfrom cryptography.hazmat.backends import default_backend\n\nCipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.</p>\n<p>Appropriate choices are currently the following.</p>\n<h4>For AES: use authenticated encryption modes</h4>\n<p>The best-known authenticated encryption mode for AES is Galois/Counter mode (GCM).</p>\n<p>GCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.</p>\n<p>Other similar modes are:</p>\n<ul>\n  <li> CCM: <code>Counter with CBC-MAC</code> </li>\n  <li> CWC: <code>Cipher Block Chaining with Message Authentication Code</code> </li>\n  <li> EAX: <code>Encrypt-and-Authenticate</code> </li>\n  <li> IAPM: <code>Integer Authenticated Parallelizable Mode</code> </li>\n  <li> OCB: <code>Offset Codebook Mode</code> </li>\n</ul>\n<p>It is also possible to use AES-CBC with HMAC for integrity checks. However, it is considered more straightforward to use AES-GCM directly\ninstead.</p>\n<h4>For RSA: use the OAEP scheme</h4>\n<p>The Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\">Microsoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S3329",
          "name": "Cipher Block Chaining IVs should be unpredictable",
          "description": "<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>In the mode Cipher Block Chaining (CBC), each block is used as cryptographic input for the next block. For this reason, the first block requires an\ninitialization vector (IV), also called a \"starting variable\" (SV).</p>\n<p>If the same IV is used for multiple encryption sessions or messages, each new encryption of the same plaintext input would always produce the same\nciphertext output. This may allow an attacker to detect patterns in the ciphertext.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, a company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization\u00e2\u20ac\u2122s ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>\n<h2>How to fix it in pyca</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.ciphers import (\n    Cipher,\n    algorithms,\n    modes,\n)\n\niv     = b\"exampleIV1234567\"\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv))\n\ncipher.encryptor()  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>In this example, the code explicitly uses a number generator that is considered <strong>strong</strong>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom os import urandom\n\nfrom cryptography.hazmat.primitives.ciphers import (\n    Cipher,\n    algorithms,\n    modes,\n)\n\niv     = urandom(16)\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv))\n\ncipher.encryptor()\n</pre>\n<h3>How does this work?</h3>\n<h4>Use unique IVs</h4>\n<p>To ensure high security, initialization vectors must meet two important criteria:</p>\n<ul>\n  <li> IVs must be unique for each encryption operation. </li>\n  <li> For CBC and CFB modes, a secure FIPS-compliant random number generator should be used to generate unpredictable IVs. </li>\n</ul>\n<p>The IV does not need be secret, so the IV or information sufficient to determine the IV may be transmitted along with the ciphertext.</p>\n<p>In the previous non-compliant example, the problem is not that the IV is hard-coded.<br> It is that the same IV is used for multiple encryption\nattempts.</p>\n<h2>How to fix it in Cryptodome</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import AES\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Util.Padding import pad\n\niv     = b\"exampleIV1234567\"\ncipher = AES.new(key, AES.MODE_CBC, iv)\ncipher.encrypt(pad(data, AES.block_size))  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>In this example, the code explicitly uses a number generator that is considered <strong>strong</strong>.</p>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import AES\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Util.Padding import pad\n\niv     = get_random_bytes(AES.block_size)\ncipher = AES.new(key, AES.MODE_CBC, iv)\ncipher.encrypt(pad(data, AES.block_size))\n</pre>\n<h3>How does this work?</h3>\n<h4>Use unique IVs</h4>\n<p>To ensure high security, initialization vectors must meet two important criteria:</p>\n<ul>\n  <li> IVs must be unique for each encryption operation. </li>\n  <li> For CBC and CFB modes, a secure FIPS-compliant random number generator should be used to generate unpredictable IVs. </li>\n</ul>\n<p>The IV does not need be secret, so the IV or information sufficient to determine the IV may be transmitted along with the ciphertext.</p>\n<p>In the previous non-compliant example, the problem is not that the IV is hard-coded.<br> It is that the same IV is used for multiple encryption\nattempts.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/329\">CWE-329 - Not Using an Unpredictable IV with CBC Mode</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/780\">CWE-780 - Use of RSA Algorithm without OAEP</a> </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\">NIST, SP-800-38A</a> - Recommendation for Block Cipher\n  Modes of Operation </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>In the mode Cipher Block Chaining (CBC), each block is used as cryptographic input for the next block. For this reason, the first block requires an\ninitialization vector (IV), also called a \"starting variable\" (SV).</p>\n<p>If the same IV is used for multiple encryption sessions or messages, each new encryption of the same plaintext input would always produce the same\nciphertext output. This may allow an attacker to detect patterns in the ciphertext.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, a company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization\u00e2\u20ac\u2122s ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>\n<h2>How to fix it in pyca</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.ciphers import (\n    Cipher,\n    algorithms,\n    modes,\n)\n\niv     = b\"exampleIV1234567\"\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv))\n\ncipher.encryptor()  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>In this example, the code explicitly uses a number generator that is considered <strong>strong</strong>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom os import urandom\n\nfrom cryptography.hazmat.primitives.ciphers import (\n    Cipher,\n    algorithms,\n    modes,\n)\n\niv     = urandom(16)\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv))\n\ncipher.encryptor()\n</pre>\n<h3>How does this work?</h3>\n<h4>Use unique IVs</h4>\n<p>To ensure high security, initialization vectors must meet two important criteria:</p>\n<ul>\n  <li> IVs must be unique for each encryption operation. </li>\n  <li> For CBC and CFB modes, a secure FIPS-compliant random number generator should be used to generate unpredictable IVs. </li>\n</ul>\n<p>The IV does not need be secret, so the IV or information sufficient to determine the IV may be transmitted along with the ciphertext.</p>\n<p>In the previous non-compliant example, the problem is not that the IV is hard-coded.<br> It is that the same IV is used for multiple encryption\nattempts.</p>\n<h2>How to fix it in Cryptodome</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import AES\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Util.Padding import pad\n\niv     = b\"exampleIV1234567\"\ncipher = AES.new(key, AES.MODE_CBC, iv)\ncipher.encrypt(pad(data, AES.block_size))  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>In this example, the code explicitly uses a number generator that is considered <strong>strong</strong>.</p>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import AES\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Util.Padding import pad\n\niv     = get_random_bytes(AES.block_size)\ncipher = AES.new(key, AES.MODE_CBC, iv)\ncipher.encrypt(pad(data, AES.block_size))\n</pre>\n<h3>How does this work?</h3>\n<h4>Use unique IVs</h4>\n<p>To ensure high security, initialization vectors must meet two important criteria:</p>\n<ul>\n  <li> IVs must be unique for each encryption operation. </li>\n  <li> For CBC and CFB modes, a secure FIPS-compliant random number generator should be used to generate unpredictable IVs. </li>\n</ul>\n<p>The IV does not need be secret, so the IV or information sufficient to determine the IV may be transmitted along with the ciphertext.</p>\n<p>In the previous non-compliant example, the problem is not that the IV is hard-coded.<br> It is that the same IV is used for multiple encryption\nattempts.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/329\">CWE-329 - Not Using an Unpredictable IV with CBC Mode</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/780\">CWE-780 - Use of RSA Algorithm without OAEP</a> </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\">NIST, SP-800-38A</a> - Recommendation for Block Cipher\n  Modes of Operation </li>\n</ul>\n\n"
        },
        {
          "id": "S6002",
          "name": "Regex lookahead assertions should not be contradictory",
          "description": "<p>This rule raises an issue when a regex lookahead contradicts the rest of the regex.</p>\n<h2>Why is this an issue?</h2>\n<p>Lookahead assertions are a regex feature that makes it possible to look ahead in the input without consuming it. It is often used at the end of\nregular expressions to make sure that substrings only match when they are followed by a specific pattern.</p>\n<p>For example, the following pattern will match an \"a\" only if it is directly followed by a \"b\". This does not consume the \"b\" in the process:</p>\n<pre>\nr\"a(?=b)\"\n</pre>\n<p>However, lookaheads can also be used in the middle (or at the beginning) of a regex. In that case there is the possibility that what comes after\nthe lookahead contradicts the pattern inside the lookahead. Since the lookahead does not consume input, this makes the lookahead impossible to match\nand is a sign that there\u00e2\u20ac\u2122s a mistake in the regular expression that should be fixed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nr\"(?=a)b\" # Noncompliant, the same character can't be equal to 'a' and 'b' at the same time\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nr\"(?&lt;=a)b\"\nr\"a(?=b)\"\n</pre>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when a regex lookahead contradicts the rest of the regex.</p>\n<h2>Why is this an issue?</h2>\n<p>Lookahead assertions are a regex feature that makes it possible to look ahead in the input without consuming it. It is often used at the end of\nregular expressions to make sure that substrings only match when they are followed by a specific pattern.</p>\n<p>For example, the following pattern will match an \"a\" only if it is directly followed by a \"b\". This does not consume the \"b\" in the process:</p>\n<pre>\nr\"a(?=b)\"\n</pre>\n<p>However, lookaheads can also be used in the middle (or at the beginning) of a regex. In that case there is the possibility that what comes after\nthe lookahead contradicts the pattern inside the lookahead. Since the lookahead does not consume input, this makes the lookahead impossible to match\nand is a sign that there\u00e2\u20ac\u2122s a mistake in the regular expression that should be fixed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nr\"(?=a)b\" # Noncompliant, the same character can't be equal to 'a' and 'b' at the same time\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nr\"(?&lt;=a)b\"\nr\"a(?=b)\"\n</pre>\n\n"
        },
        {
          "id": "S5996",
          "name": "Regex boundaries should not be used in a way that can never be matched",
          "description": "<h2>Why is this an issue?</h2>\n<p>In regular expressions the boundaries <code>^</code> and <code>\\A</code> can only match at the beginning of the input (or, in case of\n<code>^</code> in combination with the <code>MULTILINE</code> flag, the beginning of the line) and <code>$</code>, <code>\\Z</code> and <code>\\z</code>\nonly at the end.</p>\n<p>These patterns can be misused, by accidentally switching <code>^</code> and <code>$</code> for example, to create a pattern that can never\nmatch.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n# This can never match because $ and ^ have been switched around\nr\"$[a-z]+^\" # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"^[a-z]+$\"\n</pre>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>In regular expressions the boundaries <code>^</code> and <code>\\A</code> can only match at the beginning of the input (or, in case of\n<code>^</code> in combination with the <code>MULTILINE</code> flag, the beginning of the line) and <code>$</code>, <code>\\Z</code> and <code>\\z</code>\nonly at the end.</p>\n<p>These patterns can be misused, by accidentally switching <code>^</code> and <code>$</code> for example, to create a pattern that can never\nmatch.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n# This can never match because $ and ^ have been switched around\nr\"$[a-z]+^\" # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"^[a-z]+$\"\n</pre>\n\n"
        },
        {
          "id": "S5994",
          "name": "Regex patterns following a possessive quantifier should not always fail",
          "description": "<h2>Why is this an issue?</h2>\n<p>Possessive quantifiers in Regex patterns like below improve performance by eliminating needless backtracking:</p>\n<pre>\n?+ , *+ , ++ , {n}+ , {n,}+ , {n,m}+\n</pre>\n<p>But because possessive quantifiers do not keep backtracking positions and never give back, the following sub-patterns should not match only similar\ncharacters. Otherwise, possessive quantifiers consume all characters that could have matched the following sub-patterns and nothing remains for the\nfollowing sub-patterns.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport re\npattern1 = re.compile(r\"a++abc\", re.DOTALL) # Noncompliant, the second 'a' never matches\npattern2 = re.compile(r\"\\d*+[02468]\", re.DOTALL) # Noncompliant, the sub-pattern \"[02468]\" never matches\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport re\npattern1 = re.compile(r\"aa++bc\", re.DOTALL) # Compliant, for example it can match \"aaaabc\"\npattern2 = re.compile(r\"\\d*+(?&lt;=[02468])\", re.DOTALL) # Compliant, for example, it can match an even number like \"1234\"\n</pre>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Possessive quantifiers in Regex patterns like below improve performance by eliminating needless backtracking:</p>\n<pre>\n?+ , *+ , ++ , {n}+ , {n,}+ , {n,m}+\n</pre>\n<p>But because possessive quantifiers do not keep backtracking positions and never give back, the following sub-patterns should not match only similar\ncharacters. Otherwise, possessive quantifiers consume all characters that could have matched the following sub-patterns and nothing remains for the\nfollowing sub-patterns.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport re\npattern1 = re.compile(r\"a++abc\", re.DOTALL) # Noncompliant, the second 'a' never matches\npattern2 = re.compile(r\"\\d*+[02468]\", re.DOTALL) # Noncompliant, the sub-pattern \"[02468]\" never matches\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport re\npattern1 = re.compile(r\"aa++bc\", re.DOTALL) # Compliant, for example it can match \"aaaabc\"\npattern2 = re.compile(r\"\\d*+(?&lt;=[02468])\", re.DOTALL) # Compliant, for example, it can match an even number like \"1234\"\n</pre>\n\n"
        },
        {
          "id": "S4828",
          "name": "Signaling processes is security-sensitive",
          "description": "<p>Signaling processes or process groups can seriously affect the stability of this application or other applications on the same system.</p>\n<p>Accidentally setting an incorrect <code>PID</code> or <code>signal</code> or allowing untrusted sources to assign arbitrary values to these\nparameters may result in a denial of service.</p>\n<p>Also, the system treats the signal differently if the destination <code>PID</code> is less than or equal to 0. This different behavior may affect\nmultiple processes with the same (E)UID simultaneously if the call is left uncontrolled.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The parameters <code>pid</code> and <code>sig</code> are untrusted (they come from an external source). </li>\n  <li> This function is triggered by non-administrators. </li>\n  <li> Signal handlers on the target processes stop important functions. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> For stateful applications with user management, ensure that only administrators trigger this code. </li>\n  <li> Verify that the <code>pid</code> and <code>sig</code> parameters are correct before using them. </li>\n  <li> Ensure that the process sending the signals runs with as few OS privileges as possible. </li>\n  <li> Isolate the process on the system based on its (E)UID. </li>\n  <li> Ensure that the signal does not interrupt any essential functions when intercepted by a target\u00e2\u20ac\u2122s signal handlers. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport os\n\n@app.route(\"/kill-pid/&lt;pid&gt;\")\ndef send_signal(pid):\n    os.kill(pid, 9)  # Sensitive\n\n@app.route(\"/kill-pgid/&lt;pgid&gt;\")\ndef send_signal(pgid):\n    os.killpg(pgid, 9)  # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport os\n\n@app.route(\"/kill-pid/&lt;pid&gt;\")\ndef send_signal(pid):\n    # Validate the untrusted PID,\n    # With a pre-approved list or authorization checks\n    if is_valid_pid(pid):\n        os.kill(pid, 9)\n\n@app.route(\"/kill-pgid/&lt;pgid&gt;\")\ndef send_signal(pgid):\n    # Validate the untrusted PGID,\n    # With a pre-approved list or authorization checks\n    if is_valid_pgid(pgid):\n        os.kill(pgid, 9)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/283\">CWE-283 - Unverified Ownership</a> </li>\n  <li> <a href=\"https://man7.org/linux/man-pages/man1/kill.1.html\">kill(1) \u00e2\u20ac\u201d Linux manual page</a> </li>\n  <li> <a href=\"https://man7.org/linux/man-pages/man2/kill.2.html\">kill(2) \u00e2\u20ac\u201d Linux manual page</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>Signaling processes or process groups can seriously affect the stability of this application or other applications on the same system.</p>\n<p>Accidentally setting an incorrect <code>PID</code> or <code>signal</code> or allowing untrusted sources to assign arbitrary values to these\nparameters may result in a denial of service.</p>\n<p>Also, the system treats the signal differently if the destination <code>PID</code> is less than or equal to 0. This different behavior may affect\nmultiple processes with the same (E)UID simultaneously if the call is left uncontrolled.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The parameters <code>pid</code> and <code>sig</code> are untrusted (they come from an external source). </li>\n  <li> This function is triggered by non-administrators. </li>\n  <li> Signal handlers on the target processes stop important functions. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> For stateful applications with user management, ensure that only administrators trigger this code. </li>\n  <li> Verify that the <code>pid</code> and <code>sig</code> parameters are correct before using them. </li>\n  <li> Ensure that the process sending the signals runs with as few OS privileges as possible. </li>\n  <li> Isolate the process on the system based on its (E)UID. </li>\n  <li> Ensure that the signal does not interrupt any essential functions when intercepted by a target\u00e2\u20ac\u2122s signal handlers. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport os\n\n@app.route(\"/kill-pid/&lt;pid&gt;\")\ndef send_signal(pid):\n    os.kill(pid, 9)  # Sensitive\n\n@app.route(\"/kill-pgid/&lt;pgid&gt;\")\ndef send_signal(pgid):\n    os.killpg(pgid, 9)  # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport os\n\n@app.route(\"/kill-pid/&lt;pid&gt;\")\ndef send_signal(pid):\n    # Validate the untrusted PID,\n    # With a pre-approved list or authorization checks\n    if is_valid_pid(pid):\n        os.kill(pid, 9)\n\n@app.route(\"/kill-pgid/&lt;pgid&gt;\")\ndef send_signal(pgid):\n    # Validate the untrusted PGID,\n    # With a pre-approved list or authorization checks\n    if is_valid_pgid(pgid):\n        os.kill(pgid, 9)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/283\">CWE-283 - Unverified Ownership</a> </li>\n  <li> <a href=\"https://man7.org/linux/man-pages/man1/kill.1.html\">kill(1) \u00e2\u20ac\u201d Linux manual page</a> </li>\n  <li> <a href=\"https://man7.org/linux/man-pages/man2/kill.2.html\">kill(2) \u00e2\u20ac\u201d Linux manual page</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2257",
          "name": "Using non-standard cryptographic algorithms is security-sensitive",
          "description": "<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>Argon2PasswordHasher</code>, <code>BCryptPasswordHasher</code>, \u00e2\u20ac\u00a6\u00e2\u20ac\u2039 should be used instead.</p>\n<p>This rule tracks creation of <code>BasePasswordHasher</code> subclasses for Django applications.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a standard algorithm instead of creating a custom one. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nclass CustomPasswordHasher(BasePasswordHasher):  # Sensitive\n    # ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>Argon2PasswordHasher</code>, <code>BCryptPasswordHasher</code>, \u00e2\u20ac\u00a6\u00e2\u20ac\u2039 should be used instead.</p>\n<p>This rule tracks creation of <code>BasePasswordHasher</code> subclasses for Django applications.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a standard algorithm instead of creating a custom one. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nclass CustomPasswordHasher(BasePasswordHasher):  # Sensitive\n    # ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5361",
          "name": "`str.replace` should be preferred to `re.sub`",
          "description": "<h2>Why is this an issue?</h2>\n<p>An <code>re.sub</code> call always performs an evaluation of the first argument as a regular expression, even if no regular expression features\nwere used. This has a significant performance cost and therefore should be used with care.</p>\n<p>When <code>re.sub</code> is used, the first argument should be a real regular expression. If it\u00e2\u20ac\u2122s not the case, <code>str.replace</code> does\nexactly the same thing as <code>re.sub</code> without the performance drawback of the regex.</p>\n<p>This rule raises an issue for each <code>re.sub</code> used with a simple string as first argument which doesn\u00e2\u20ac\u2122t contains special regex character\nor pattern.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ninit = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"Bob is\", \"It's\", init) # Noncompliant\nchanged = re.sub(r\"\\.\\.\\.\", \";\", changed) # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ninit = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = init.replace(\"Bob is\", \"It's\")\nchanged = changed.replace(\"...\", \";\")\n</pre>\n<p>Or, with a regex:</p>\n<pre>\ninit = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"\\w*\\sis\", \"It's\", init)\nchanged = re.sub(r\"\\.{3}\", \";\", changed)\n</pre>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>An <code>re.sub</code> call always performs an evaluation of the first argument as a regular expression, even if no regular expression features\nwere used. This has a significant performance cost and therefore should be used with care.</p>\n<p>When <code>re.sub</code> is used, the first argument should be a real regular expression. If it\u00e2\u20ac\u2122s not the case, <code>str.replace</code> does\nexactly the same thing as <code>re.sub</code> without the performance drawback of the regex.</p>\n<p>This rule raises an issue for each <code>re.sub</code> used with a simple string as first argument which doesn\u00e2\u20ac\u2122t contains special regex character\nor pattern.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ninit = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"Bob is\", \"It's\", init) # Noncompliant\nchanged = re.sub(r\"\\.\\.\\.\", \";\", changed) # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ninit = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = init.replace(\"Bob is\", \"It's\")\nchanged = changed.replace(\"...\", \";\")\n</pre>\n<p>Or, with a regex:</p>\n<pre>\ninit = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"\\w*\\sis\", \"It's\", init)\nchanged = re.sub(r\"\\.{3}\", \";\", changed)\n</pre>\n\n"
        },
        {
          "id": "S2638",
          "name": "Method overrides should not change contracts",
          "description": "<p>This rule raises an issue when an overriding method changes a contract defined in a superclass.</p>\n<h2>Why is this an issue?</h2>\n<p>Because a subclass instance may be used as an instance of the superclass, overriding methods should uphold the aspects of the superclass contract\nthat relate to the <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Liskov Substitution Principle</a>. Specifically, an\noverriding method should be callable with the same parameters as the overriden one.</p>\n<p>The following modifications are OK:</p>\n<ul>\n  <li> Adding an optional parameter, i.e. with a default value, as long as they don\u00e2\u20ac\u2122t change the order of positional parameters. </li>\n  <li> Renaming a positional-only parameter. </li>\n  <li> Reordering keyword-only parameters. </li>\n  <li> Adding a default value to an existing parameter. </li>\n  <li> Changing the default value of an existing parameter. </li>\n  <li> Extend the ways a parameter can be provided, i.e. change a keyword-only or positional-only parameter to a keyword-or-positional parameter. This\n  is only true if the order of positional parameters doesn\u00e2\u20ac\u2122t change. New positional parameters should be placed at the end. </li>\n  <li> Adding a vararg parameter (<code>*args</code>). </li>\n  <li> Adding a keywords parameter (<code>**kwargs</code>). </li>\n</ul>\n<p>The following modifications are not OK:</p>\n<ul>\n  <li> Removing parameters, even when they have default values. </li>\n  <li> Adding mandatory parameters, i.e. without a default value. </li>\n  <li> Removing the default value of a parameter. </li>\n  <li> Reordering parameters, except when they are keyword-only parameters. </li>\n  <li> Removing some ways of providing a parameter. If a parameter could be passed as keyword it should still be possible to pass it as keyword, and\n  the same is true for positional parameters. </li>\n  <li> Removing a vararg parameter (<code>*args</code>). </li>\n  <li> Removing a keywords parameter (<code>**kwargs</code>). </li>\n</ul>\n<p>This rule raises an issue when the signature of an overriding method does not accept the same parameters as the overriden one. Only instance\nmethods are considered, class methods and static methods are ignored.</p>\n<h3>Exceptions</h3>\n<p>In theory, renaming parameters also breaks Liskov Substitution Principle. Arguments can\u00e2\u20ac\u2122t be passed via keyword arguments anymore. However, <a\nhref=\"https://www.python.org/dev/peps/pep-0570/#consistency-in-subclasses\">PEP-570</a> indicates it is common to rename parameters when it improves\ncode readability and when arguments are always passed by position.</p>\n<p>\"Positional-Only Parameters\" were introduced in Python 3.8 to solve this problem. As most programs will need to support older versions of Python,\nthis rule won\u00e2\u20ac\u2122t raise an issue on renamed parameters.</p>\n<pre>\nclass ParentClass(object):\n    def mymethod(self, param1):\n        pass\n\nclass ChildClassRenamed(ParentClass):\n    def mymethod(self, renamed): # No issue but this is suspicious. Rename this parameter as \"param1\" or use positional only arguments if possible.\n        pass\n</pre>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass ParentClass(object):\n    def mymethod(self, param1):\n        pass\n\nclass ChildClassMore(ParentClass):\n    def mymethod(self, param1, param2, param3): # Noncompliant * 2.\n        # Remove parameter \"param2\" or provide a default value.\n        # Remove parameter \"param3\" or provide a default value.\n        pass\n\nclass ChildClassLess(ParentClass):\n    def mymethod(self): # Noncompliant. Add missing parameter \"param1\".\n        pass\n\nclass ChildClassReordered(ParentClass):\n    def mymethod(self, inserted, param1): # Noncompliant\n        # Remove parameters \"inserted\" or provide a default value.\n        pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass ParentClass(object):\n    def mymethod(self, param1):\n        pass\n\nclass ChildClassMore(ParentClass):\n    def mymethod(self, param1, param2=None, param3=None):\n        pass\n\nclass ChildClassLess(ParentClass):\n    def mymethod(self, param1=None):\n        pass\n\nclass ChildClassReordered(ParentClass):\n    def mymethod(self, param1, inserted=None):\n        pass\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> SOLID - <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Wikipedia - Liskov substitution principle</a> </li>\n  <li> Python Enhancement Proposal (PEP) 3102 - <a href=\"https://www.python.org/dev/peps/pep-3102/\">Keyword-Only Arguments</a> </li>\n  <li> Python Enhancement Proposal (PEP) 570 - <a href=\"https://www.python.org/dev/peps/pep-0570/\">Python Positional-Only Parameters</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when an overriding method changes a contract defined in a superclass.</p>\n<h2>Why is this an issue?</h2>\n<p>Because a subclass instance may be used as an instance of the superclass, overriding methods should uphold the aspects of the superclass contract\nthat relate to the <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Liskov Substitution Principle</a>. Specifically, an\noverriding method should be callable with the same parameters as the overriden one.</p>\n<p>The following modifications are OK:</p>\n<ul>\n  <li> Adding an optional parameter, i.e. with a default value, as long as they don\u00e2\u20ac\u2122t change the order of positional parameters. </li>\n  <li> Renaming a positional-only parameter. </li>\n  <li> Reordering keyword-only parameters. </li>\n  <li> Adding a default value to an existing parameter. </li>\n  <li> Changing the default value of an existing parameter. </li>\n  <li> Extend the ways a parameter can be provided, i.e. change a keyword-only or positional-only parameter to a keyword-or-positional parameter. This\n  is only true if the order of positional parameters doesn\u00e2\u20ac\u2122t change. New positional parameters should be placed at the end. </li>\n  <li> Adding a vararg parameter (<code>*args</code>). </li>\n  <li> Adding a keywords parameter (<code>**kwargs</code>). </li>\n</ul>\n<p>The following modifications are not OK:</p>\n<ul>\n  <li> Removing parameters, even when they have default values. </li>\n  <li> Adding mandatory parameters, i.e. without a default value. </li>\n  <li> Removing the default value of a parameter. </li>\n  <li> Reordering parameters, except when they are keyword-only parameters. </li>\n  <li> Removing some ways of providing a parameter. If a parameter could be passed as keyword it should still be possible to pass it as keyword, and\n  the same is true for positional parameters. </li>\n  <li> Removing a vararg parameter (<code>*args</code>). </li>\n  <li> Removing a keywords parameter (<code>**kwargs</code>). </li>\n</ul>\n<p>This rule raises an issue when the signature of an overriding method does not accept the same parameters as the overriden one. Only instance\nmethods are considered, class methods and static methods are ignored.</p>\n<h3>Exceptions</h3>\n<p>In theory, renaming parameters also breaks Liskov Substitution Principle. Arguments can\u00e2\u20ac\u2122t be passed via keyword arguments anymore. However, <a\nhref=\"https://www.python.org/dev/peps/pep-0570/#consistency-in-subclasses\">PEP-570</a> indicates it is common to rename parameters when it improves\ncode readability and when arguments are always passed by position.</p>\n<p>\"Positional-Only Parameters\" were introduced in Python 3.8 to solve this problem. As most programs will need to support older versions of Python,\nthis rule won\u00e2\u20ac\u2122t raise an issue on renamed parameters.</p>\n<pre>\nclass ParentClass(object):\n    def mymethod(self, param1):\n        pass\n\nclass ChildClassRenamed(ParentClass):\n    def mymethod(self, renamed): # No issue but this is suspicious. Rename this parameter as \"param1\" or use positional only arguments if possible.\n        pass\n</pre>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass ParentClass(object):\n    def mymethod(self, param1):\n        pass\n\nclass ChildClassMore(ParentClass):\n    def mymethod(self, param1, param2, param3): # Noncompliant * 2.\n        # Remove parameter \"param2\" or provide a default value.\n        # Remove parameter \"param3\" or provide a default value.\n        pass\n\nclass ChildClassLess(ParentClass):\n    def mymethod(self): # Noncompliant. Add missing parameter \"param1\".\n        pass\n\nclass ChildClassReordered(ParentClass):\n    def mymethod(self, inserted, param1): # Noncompliant\n        # Remove parameters \"inserted\" or provide a default value.\n        pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass ParentClass(object):\n    def mymethod(self, param1):\n        pass\n\nclass ChildClassMore(ParentClass):\n    def mymethod(self, param1, param2=None, param3=None):\n        pass\n\nclass ChildClassLess(ParentClass):\n    def mymethod(self, param1=None):\n        pass\n\nclass ChildClassReordered(ParentClass):\n    def mymethod(self, param1, inserted=None):\n        pass\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> SOLID - <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Wikipedia - Liskov substitution principle</a> </li>\n  <li> Python Enhancement Proposal (PEP) 3102 - <a href=\"https://www.python.org/dev/peps/pep-3102/\">Keyword-Only Arguments</a> </li>\n  <li> Python Enhancement Proposal (PEP) 570 - <a href=\"https://www.python.org/dev/peps/pep-0570/\">Python Positional-Only Parameters</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6680",
          "name": "Loop boundaries should not be vulnerable to injection attacks",
          "description": "<p>This vulnerability exposes the system to various operational overloads that can lead to either a technical denial of service and/or business\ndisruptions.</p>\n<h2>Why is this an issue?</h2>\n<p>Loop boundary injections occur in an application when the application retrieves data from a user or a third-party service and inserts it into a\nloop or a function acting as a loop, without sanitizing it first.</p>\n<p>If an application contains a loop that is vulnerable to injections, it is exposed to attacks that target its availability where that loop is\nused.</p>\n<p>A user with malicious intent carefully performs actions whose goal is to cause the loop to run for more iterations than the developer intended,\nresulting in unexpected behavior or even a crash of the program.</p>\n<p>After creating the malicious request, the attacker can attack the servers affected by this vulnerability without relying on any prerequisites.</p>\n<h3>What is the potential impact?</h3>\n<p>After discovering the injection point, attackers insert data into the vulnerable field to either make the affected component inaccessible, attempt\na malfunction, or read from an artifact that exceeds the developer\u00e2\u20ac\u2122s intended boundaries.</p>\n<p>In languages that don\u00e2\u20ac\u2122t enforce memory access checks, this can also lead to a buffer overflow or underflow which may result in sensitive\ninformation disclosure or remote code execution.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Self Denial of service</h4>\n<p>If the component affected by this vulnerability is not a bottleneck that acts as a single point of failure (SPOF) within the application, the\ndenial of service might only affect the attacker who initiated it.</p>\n<p>Even if the denial of service has little direct impact, it can cause secondary effects in architectures that use containers and container\norchestrators. It could cause unexpected container failures or resource overconsumption, for example.</p>\n<h4>Infrastructure SPOFs</h4>\n<p>A denial of service attack can be critical to the enterprise if it targets a SPOF component. Sometimes the SPOF is a software architecture\nvulnerability (such as a single component on which multiple critical components depend) or an operational vulnerability (for example, insufficient\ncontainer creation capabilities or failures from containers to terminate).</p>\n<p>In either case, attackers aim to exploit the infrastructure weakness by sending as many malicious payloads as possible, using potentially huge\noffensive infrastructures.</p>\n<p>These threats are particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef example():\n    limit = int(request.args.get('limit'))\n\n    for _ in range(limit):\n        # ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef example():\n    limit = int(request.args.get('limit'))\n    restricted_limit = min(10, limit)\n\n    for _ in range(restricted_limit):\n        # ...\n</pre>\n<h3>How does this work?</h3>\n<h4>Set limits</h4>\n<p>Validate loop variable values to ensure they fall within the expected bounds. If a value falls outside of these bounds, reject it as invalid or\nadjust it to bring it within bounds. This guarantees that the loop will only iterate over the expected number of elements or perform the expected\nnumber of iterations.</p>\n<p>Do not assume that users will provide sensible values. Attackers intentionally choose unusual values to cause the system to misbehave.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/606\">CWE-606 - Unchecked Input for Loop Condition</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This vulnerability exposes the system to various operational overloads that can lead to either a technical denial of service and/or business\ndisruptions.</p>\n<h2>Why is this an issue?</h2>\n<p>Loop boundary injections occur in an application when the application retrieves data from a user or a third-party service and inserts it into a\nloop or a function acting as a loop, without sanitizing it first.</p>\n<p>If an application contains a loop that is vulnerable to injections, it is exposed to attacks that target its availability where that loop is\nused.</p>\n<p>A user with malicious intent carefully performs actions whose goal is to cause the loop to run for more iterations than the developer intended,\nresulting in unexpected behavior or even a crash of the program.</p>\n<p>After creating the malicious request, the attacker can attack the servers affected by this vulnerability without relying on any prerequisites.</p>\n<h3>What is the potential impact?</h3>\n<p>After discovering the injection point, attackers insert data into the vulnerable field to either make the affected component inaccessible, attempt\na malfunction, or read from an artifact that exceeds the developer\u00e2\u20ac\u2122s intended boundaries.</p>\n<p>In languages that don\u00e2\u20ac\u2122t enforce memory access checks, this can also lead to a buffer overflow or underflow which may result in sensitive\ninformation disclosure or remote code execution.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Self Denial of service</h4>\n<p>If the component affected by this vulnerability is not a bottleneck that acts as a single point of failure (SPOF) within the application, the\ndenial of service might only affect the attacker who initiated it.</p>\n<p>Even if the denial of service has little direct impact, it can cause secondary effects in architectures that use containers and container\norchestrators. It could cause unexpected container failures or resource overconsumption, for example.</p>\n<h4>Infrastructure SPOFs</h4>\n<p>A denial of service attack can be critical to the enterprise if it targets a SPOF component. Sometimes the SPOF is a software architecture\nvulnerability (such as a single component on which multiple critical components depend) or an operational vulnerability (for example, insufficient\ncontainer creation capabilities or failures from containers to terminate).</p>\n<p>In either case, attackers aim to exploit the infrastructure weakness by sending as many malicious payloads as possible, using potentially huge\noffensive infrastructures.</p>\n<p>These threats are particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef example():\n    limit = int(request.args.get('limit'))\n\n    for _ in range(limit):\n        # ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef example():\n    limit = int(request.args.get('limit'))\n    restricted_limit = min(10, limit)\n\n    for _ in range(restricted_limit):\n        # ...\n</pre>\n<h3>How does this work?</h3>\n<h4>Set limits</h4>\n<p>Validate loop variable values to ensure they fall within the expected bounds. If a value falls outside of these bounds, reject it as invalid or\nadjust it to bring it within bounds. This guarantees that the loop will only iterate over the expected number of elements or perform the expected\nnumber of iterations.</p>\n<p>Do not assume that users will provide sensible values. Attackers intentionally choose unusual values to cause the system to misbehave.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/606\">CWE-606 - Unchecked Input for Loop Condition</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S6727",
          "name": "The abs_tol parameter should be provided when using math.isclose to compare values to 0",
          "description": "<p>This rule raises an issue when <code>math.isclose</code> is used to compare values against 0 without providing the <code>abs_tol</code>\nparameter.</p>\n<h2>Why is this an issue?</h2>\n<p>Comparing float values for equality directly is not reliable and should be avoided, due to the inherent imprecision in the binary representation of\nfloating point numbers. Such comparison is reported by {rule:python:S1244}.</p>\n<p>One common solution to this problem is to use the <code>math.isclose</code> function to perform the comparison. Behind the scenes, the\n<code>math.isclose</code> function uses a tolerance value (also called epsilon) to define an acceptable range of difference between two floats. A\ntolerance value may be relative (based on the magnitude of the numbers being compared) or absolute.</p>\n<p>Using a relative tolerance would be equivalent to:</p>\n<pre>\ndef isclose_relative(a, b, rel_tol=1e-09):\n    diff = abs(a - b)\n    max_diff = rel_tol * max(abs(a), abs(b))\n    return diff &lt;= max_diff\n</pre>\n<p>Using an absolute tolerance is equivalent to:</p>\n<pre>\ndef isclose_absolute(a, b, abs_tol=1e-09):\n    diff = abs(a - b)\n    return diff &lt;= abs_tol\n</pre>\n<p>The <code>math.isclose</code> method uses both relative and absolute tolerances and can be approximated as:</p>\n<pre>\ndef is_close(a, b, rel_tol=1e-09, abs_tol=0.0):\n    diff = abs(a - b)\n    max_diff = max(rel_tol * max(abs(a), abs(b)), abs_tol)\n    return diff &lt;= max_diff\n</pre>\n<p>Whenever comparing values that are close to 0, the value of the relative tolerance may be too small to overcome the imprecision introduced by\nfloating-point arithmetic. It is therefore important to rely on an absolute tolerance in this case.</p>\n<p>When using <code>math.isclose</code>, the absolute tolerance is defined through the parameter <code>abs_tol</code>. By default, the value of this\nparameter is <code>0.0</code>. Therefore, using <code>math.isclose</code> to compare values against zero without providing this parameter is\nequivalent to a strict equality check, which is likely not intended.</p>\n<h3>Exceptions</h3>\n<p>Note that similar methods from different libraries may behave differently. Notably, <code>numpy.isclose</code> has a default absolute tolerance of\n<code>1e-08</code>. No issue will be reported in this case. However, to ensure consistency and intentionality, it is recommended to always set the\ntolerance values.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to provide the <code>abs_tol</code> argument to the <code>math.isclose</code> function whenever comparing values\nagainst zero. If a strict equality check is intended, consider using the equality operator or providing <code>0</code> as the <code>abs_tol</code>\nparameter to make the intention clear.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport math\ndef foo(a):\n    return math.isclose(a, 0)  # Noncompliant: the default absolute tolerance is 0.0\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport math\ndef foo(a):\n    return math.isclose(a, 0, abs_tol=1e-09)  # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a\n  href=\"https://docs.python.org/3/tutorial/floatingpoint.html#floating-point-arithmetic-issues-and-limitations\">Floating Point Arithmetic: Issues and\n  Limitations</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/decimal.html#module-decimal\">Decimal fixed point and floating point\n  arithmetic</a> </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.isclose.html\">numpy.isclose</a> </li>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/stable/generated/torch.isclose.html\">torch.isclose</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S1244}: Floating point numbers should not be tested for equality </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when <code>math.isclose</code> is used to compare values against 0 without providing the <code>abs_tol</code>\nparameter.</p>\n<h2>Why is this an issue?</h2>\n<p>Comparing float values for equality directly is not reliable and should be avoided, due to the inherent imprecision in the binary representation of\nfloating point numbers. Such comparison is reported by {rule:python:S1244}.</p>\n<p>One common solution to this problem is to use the <code>math.isclose</code> function to perform the comparison. Behind the scenes, the\n<code>math.isclose</code> function uses a tolerance value (also called epsilon) to define an acceptable range of difference between two floats. A\ntolerance value may be relative (based on the magnitude of the numbers being compared) or absolute.</p>\n<p>Using a relative tolerance would be equivalent to:</p>\n<pre>\ndef isclose_relative(a, b, rel_tol=1e-09):\n    diff = abs(a - b)\n    max_diff = rel_tol * max(abs(a), abs(b))\n    return diff &lt;= max_diff\n</pre>\n<p>Using an absolute tolerance is equivalent to:</p>\n<pre>\ndef isclose_absolute(a, b, abs_tol=1e-09):\n    diff = abs(a - b)\n    return diff &lt;= abs_tol\n</pre>\n<p>The <code>math.isclose</code> method uses both relative and absolute tolerances and can be approximated as:</p>\n<pre>\ndef is_close(a, b, rel_tol=1e-09, abs_tol=0.0):\n    diff = abs(a - b)\n    max_diff = max(rel_tol * max(abs(a), abs(b)), abs_tol)\n    return diff &lt;= max_diff\n</pre>\n<p>Whenever comparing values that are close to 0, the value of the relative tolerance may be too small to overcome the imprecision introduced by\nfloating-point arithmetic. It is therefore important to rely on an absolute tolerance in this case.</p>\n<p>When using <code>math.isclose</code>, the absolute tolerance is defined through the parameter <code>abs_tol</code>. By default, the value of this\nparameter is <code>0.0</code>. Therefore, using <code>math.isclose</code> to compare values against zero without providing this parameter is\nequivalent to a strict equality check, which is likely not intended.</p>\n<h3>Exceptions</h3>\n<p>Note that similar methods from different libraries may behave differently. Notably, <code>numpy.isclose</code> has a default absolute tolerance of\n<code>1e-08</code>. No issue will be reported in this case. However, to ensure consistency and intentionality, it is recommended to always set the\ntolerance values.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to provide the <code>abs_tol</code> argument to the <code>math.isclose</code> function whenever comparing values\nagainst zero. If a strict equality check is intended, consider using the equality operator or providing <code>0</code> as the <code>abs_tol</code>\nparameter to make the intention clear.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport math\ndef foo(a):\n    return math.isclose(a, 0)  # Noncompliant: the default absolute tolerance is 0.0\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport math\ndef foo(a):\n    return math.isclose(a, 0, abs_tol=1e-09)  # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a\n  href=\"https://docs.python.org/3/tutorial/floatingpoint.html#floating-point-arithmetic-issues-and-limitations\">Floating Point Arithmetic: Issues and\n  Limitations</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/decimal.html#module-decimal\">Decimal fixed point and floating point\n  arithmetic</a> </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.isclose.html\">numpy.isclose</a> </li>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/stable/generated/torch.isclose.html\">torch.isclose</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S1244}: Floating point numbers should not be tested for equality </li>\n</ul>\n\n"
        },
        {
          "id": "S5868",
          "name": "Unicode Grapheme Clusters should be avoided inside regex character classes",
          "description": "<h2>Why is this an issue?</h2>\n<p>When placing Unicode <a href=\"https://unicode.org/glossary/#grapheme_cluster\">Grapheme Clusters</a> (characters which require to be encoded in\nmultiple <a href=\"https://unicode.org/glossary/#code_point\">Code Points</a>) inside a character class of a regular expression, this will likely lead\nto unintended behavior.</p>\n<p>For instance, the grapheme cluster <code>c\u00cc\u02c6</code> requires two code points: one for <code>'c'</code>, followed by one for the <em>umlaut</em>\nmodifier <code>'\\u{0308}'</code>. If placed within a character class, such as <code>[c\u00cc\u02c6]</code>, the regex will consider the character class being the\nenumeration <code>[c\\u{0308}]</code> instead. It will, therefore, match every <code>'c'</code> and every <em>umlaut</em> that isn\u00e2\u20ac\u2122t expressed as a\nsingle codepoint, which is extremely unlikely to be the intended behavior.</p>\n<p>This rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nre.sub(r\"[c\u00cc\u02c6d\u00cc\u02c6]\", \"X\", \"cc\u00cc\u02c6d\u00cc\u02c6d\") # Noncompliant, print \"XXXXXX\" instead of expected \"cXXd\".\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nre.sub(r\"c\u00cc\u02c6|d\u00cc\u02c6\", \"X\", \"cc\u00cc\u02c6d\u00cc\u02c6d\") # print \"cXXd\"\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>When placing Unicode <a href=\"https://unicode.org/glossary/#grapheme_cluster\">Grapheme Clusters</a> (characters which require to be encoded in\nmultiple <a href=\"https://unicode.org/glossary/#code_point\">Code Points</a>) inside a character class of a regular expression, this will likely lead\nto unintended behavior.</p>\n<p>For instance, the grapheme cluster <code>c\u00cc\u02c6</code> requires two code points: one for <code>'c'</code>, followed by one for the <em>umlaut</em>\nmodifier <code>'\\u{0308}'</code>. If placed within a character class, such as <code>[c\u00cc\u02c6]</code>, the regex will consider the character class being the\nenumeration <code>[c\\u{0308}]</code> instead. It will, therefore, match every <code>'c'</code> and every <em>umlaut</em> that isn\u00e2\u20ac\u2122t expressed as a\nsingle codepoint, which is extremely unlikely to be the intended behavior.</p>\n<p>This rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nre.sub(r\"[c\u00cc\u02c6d\u00cc\u02c6]\", \"X\", \"cc\u00cc\u02c6d\u00cc\u02c6d\") # Noncompliant, print \"XXXXXX\" instead of expected \"cXXd\".\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nre.sub(r\"c\u00cc\u02c6|d\u00cc\u02c6\", \"X\", \"cc\u00cc\u02c6d\u00cc\u02c6d\") # print \"cXXd\"\n</pre>\n\n"
        },
        {
          "id": "S5855",
          "name": "Regex alternatives should not be redundant",
          "description": "<p>This rule raises an issue when multiple branches of a regex alternative match the same input.</p>\n<h2>Why is this an issue?</h2>\n<p>If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.</p>\n<p>In the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case it\u00e2\u20ac\u2122s a sign that this regex\ndoes not match what it was intended to match and should be reworked.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nr\"[ab]|a\"   # Noncompliant: the \"|a\" is redundant because \"[ab]\" already matches \"a\"\nr\".*|a\"     # Noncompliant: .* matches everything, so any other alternative is redundant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nr\"[ab]\"\nr\".*\"\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when multiple branches of a regex alternative match the same input.</p>\n<h2>Why is this an issue?</h2>\n<p>If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.</p>\n<p>In the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case it\u00e2\u20ac\u2122s a sign that this regex\ndoes not match what it was intended to match and should be reworked.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nr\"[ab]|a\"   # Noncompliant: the \"|a\" is redundant because \"[ab]\" already matches \"a\"\nr\".*|a\"     # Noncompliant: .* matches everything, so any other alternative is redundant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nr\"[ab]\"\nr\".*\"\n</pre>\n\n"
        },
        {
          "id": "S5850",
          "name": "Alternatives in regular expressions should be grouped when used with anchors",
          "description": "<h2>Why is this an issue?</h2>\n<p>In regular expressions, anchors (<code>^</code>, <code>$</code>, <code>\\A</code>, <code>\\Z</code> and <code>\\z</code>) have higher precedence than\nthe <code>|</code> operator. So in a regular expression like <code>^alt1|alt2|alt3$</code>, <code>alt1</code> would be anchored to the beginning,\n<code>alt3</code> to the end and <code>alt2</code> wouldn\u00e2\u20ac\u2122t be anchored at all. Usually the intended behavior is that all alternatives are anchored at\nboth ends. To achieve this, a non-capturing group should be used around the alternatives.</p>\n<p>In cases where it is intended that the anchors only apply to one alternative each, adding (non-capturing) groups around the anchors and the parts\nthat they apply to will make it explicit which parts are anchored and avoid readers misunderstanding the precedence or changing it because they\nmistakenly assume the precedence was not intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"^a|b|c$\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"^(?:a|b|c)$\"\n</pre>\n<p>or</p>\n<pre>\nr\"^a$|^b$|^c$\"\n</pre>\n<p>or, if you do want the anchors to only apply to <code>a</code> and <code>c</code> respectively:</p>\n<pre>\nr\"(?:^a)|b|(?:c$)\"\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>In regular expressions, anchors (<code>^</code>, <code>$</code>, <code>\\A</code>, <code>\\Z</code> and <code>\\z</code>) have higher precedence than\nthe <code>|</code> operator. So in a regular expression like <code>^alt1|alt2|alt3$</code>, <code>alt1</code> would be anchored to the beginning,\n<code>alt3</code> to the end and <code>alt2</code> wouldn\u00e2\u20ac\u2122t be anchored at all. Usually the intended behavior is that all alternatives are anchored at\nboth ends. To achieve this, a non-capturing group should be used around the alternatives.</p>\n<p>In cases where it is intended that the anchors only apply to one alternative each, adding (non-capturing) groups around the anchors and the parts\nthat they apply to will make it explicit which parts are anchored and avoid readers misunderstanding the precedence or changing it because they\nmistakenly assume the precedence was not intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"^a|b|c$\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"^(?:a|b|c)$\"\n</pre>\n<p>or</p>\n<pre>\nr\"^a$|^b$|^c$\"\n</pre>\n<p>or, if you do want the anchors to only apply to <code>a</code> and <code>c</code> respectively:</p>\n<pre>\nr\"(?:^a)|b|(?:c$)\"\n</pre>\n\n"
        },
        {
          "id": "S5796",
          "name": "New objects should not be created only to check their identity",
          "description": "<p>This rule raises an issue when at least one operand of an identity operator is a new object which has been created just for this check.</p>\n<h2>Why is this an issue?</h2>\n<p>Identity operators <code>is</code> and <code>is not</code> check if the same object is on both sides, i.e. <code>a is b</code> returns\n<code>True</code> if <code>id(a) == id(b)</code>.</p>\n<p>When a new object is created, it will have its own identity. Thus, if an object is created and used only in an identity check, it is not possible\nfor the other operand to be the same object. The comparison is always <code>False</code> or always <code>True</code> depending on the operator used,\n<code>is</code> or <code>is not</code>.</p>\n<p>This rule raises an issue when at least one operand of an identity operator is a new object which has been created just for this check, i.e.:</p>\n<ul>\n  <li> When it is a dict, list or set literal. </li>\n  <li> When it is a call to <code>dict</code>, <code>set</code>, <code>list</code> or <code>complex</code> built-in functions. </li>\n  <li> When such a new object is assigned to only one variable and this variable is used in an identity check. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Whenever using a newly created object in a comparison, the identity operator should be replaced with the equality operator (<code>==</code> or\n<code>!=</code>), which will use <code>__eq__</code> or <code>__ne__</code> methods under the hood.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef func(param):\n    param is {1: 2}  # Noncompliant: always False\n    param is not {1, 2, 3}  # Noncompliant: always True\n    param is [1, 2, 3]  # Noncompliant: always False\n\n    param is dict(a=1)  # Noncompliant: always False\n\n    mylist = []  # mylist is assigned a new object\n    param is mylist  # Noncompliant: always False\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef func(param):\n    param == {1: 2}\n    param != {1, 2, 3}\n    param == [1, 2, 3]\n\n    param == dict(a=1)\n\n    mylist = []\n    param == mylist\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://adamj.eu/tech/2020/01/21/why-does-python-3-8-syntaxwarning-for-is-literal/\">Why does Python 3.8 log a SyntaxWarning for 'is'\n  with literals?</a> - Adam Johnson </li>\n  <li> <a href=\"https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/#Equality_vs_identity\">Equality vs identity</a> - Trey Hunner\n  </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when at least one operand of an identity operator is a new object which has been created just for this check.</p>\n<h2>Why is this an issue?</h2>\n<p>Identity operators <code>is</code> and <code>is not</code> check if the same object is on both sides, i.e. <code>a is b</code> returns\n<code>True</code> if <code>id(a) == id(b)</code>.</p>\n<p>When a new object is created, it will have its own identity. Thus, if an object is created and used only in an identity check, it is not possible\nfor the other operand to be the same object. The comparison is always <code>False</code> or always <code>True</code> depending on the operator used,\n<code>is</code> or <code>is not</code>.</p>\n<p>This rule raises an issue when at least one operand of an identity operator is a new object which has been created just for this check, i.e.:</p>\n<ul>\n  <li> When it is a dict, list or set literal. </li>\n  <li> When it is a call to <code>dict</code>, <code>set</code>, <code>list</code> or <code>complex</code> built-in functions. </li>\n  <li> When such a new object is assigned to only one variable and this variable is used in an identity check. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Whenever using a newly created object in a comparison, the identity operator should be replaced with the equality operator (<code>==</code> or\n<code>!=</code>), which will use <code>__eq__</code> or <code>__ne__</code> methods under the hood.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef func(param):\n    param is {1: 2}  # Noncompliant: always False\n    param is not {1, 2, 3}  # Noncompliant: always True\n    param is [1, 2, 3]  # Noncompliant: always False\n\n    param is dict(a=1)  # Noncompliant: always False\n\n    mylist = []  # mylist is assigned a new object\n    param is mylist  # Noncompliant: always False\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef func(param):\n    param == {1: 2}\n    param != {1, 2, 3}\n    param == [1, 2, 3]\n\n    param == dict(a=1)\n\n    mylist = []\n    param == mylist\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://adamj.eu/tech/2020/01/21/why-does-python-3-8-syntaxwarning-for-is-literal/\">Why does Python 3.8 log a SyntaxWarning for 'is'\n  with literals?</a> - Adam Johnson </li>\n  <li> <a href=\"https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/#Equality_vs_identity\">Equality vs identity</a> - Trey Hunner\n  </li>\n</ul>\n\n"
        },
        {
          "id": "S2757",
          "name": "Non-existent operators like \"=+\" should not be used",
          "description": "<h2>Why is this an issue?</h2>\n<p>Using operator pairs (<code>=+</code> or <code>=-</code>) that look like reversed single operators (<code>+=</code> or <code>-=</code>) is\nconfusing. They compile and run but do not produce the same result as their mirrored counterpart.</p>\n<pre>\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant: target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant: target = 3\n</pre>\n<p>This rule raises an issue when <code>=+</code> or <code>=-</code> are used without any space between the operators and when there is at least one\nwhitespace after.</p>\n<p>Replace the operators with a single one if that is the intention</p>\n<pre>\ntarget = -5\nnum = 3\n\ntarget -= num  # target = -8\n</pre>\n<p>Or fix the spacing to avoid confusion</p>\n<pre>\ntarget = -5\nnum = 3\n\ntarget = -num  #  target = -3\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Using operator pairs (<code>=+</code> or <code>=-</code>) that look like reversed single operators (<code>+=</code> or <code>-=</code>) is\nconfusing. They compile and run but do not produce the same result as their mirrored counterpart.</p>\n<pre>\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant: target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant: target = 3\n</pre>\n<p>This rule raises an issue when <code>=+</code> or <code>=-</code> are used without any space between the operators and when there is at least one\nwhitespace after.</p>\n<p>Replace the operators with a single one if that is the intention</p>\n<pre>\ntarget = -5\nnum = 3\n\ntarget -= num  # target = -8\n</pre>\n<p>Or fix the spacing to avoid confusion</p>\n<pre>\ntarget = -5\nnum = 3\n\ntarget = -num  #  target = -3\n</pre>\n\n"
        },
        {
          "id": "S2319",
          "name": "Increment and decrement operators should not be used",
          "description": "<p>This rule raises an issue when a pre/post increment or decrement operator is used.</p>\n<h2>Why is this an issue?</h2>\n<p>Python has no pre/post increment/decrement operator. For instance, <code>x++</code> and <code>x--</code> will fail to parse. More importantly,\n<code>++x</code> and <code>--x</code> will do nothing. To increment a number, simply write <code>x += 1</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n++x # Noncompliant: pre and post increment operators do not exist in Python.\n\nx-- # Noncompliant: pre and post decrement operators do not exist in Python.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nx += 1\n\nx -= 1\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a pre/post increment or decrement operator is used.</p>\n<h2>Why is this an issue?</h2>\n<p>Python has no pre/post increment/decrement operator. For instance, <code>x++</code> and <code>x--</code> will fail to parse. More importantly,\n<code>++x</code> and <code>--x</code> will do nothing. To increment a number, simply write <code>x += 1</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n++x # Noncompliant: pre and post increment operators do not exist in Python.\n\nx-- # Noncompliant: pre and post decrement operators do not exist in Python.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nx += 1\n\nx -= 1\n</pre>\n\n"
        },
        {
          "id": "S1763",
          "name": "All code should be reachable",
          "description": "<p>Once control flow has been moved out of the current code block, any subsequent statements become effectively unreachable.</p>\n<h2>Why is this an issue?</h2>\n<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>raise</code>) move control flow out of the current code\nblock. So any statements that come after a jump are dead code.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a       # Noncompliant\n  i += 1             # this is never executed\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/561\">CWE-561 - Dead Code</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Once control flow has been moved out of the current code block, any subsequent statements become effectively unreachable.</p>\n<h2>Why is this an issue?</h2>\n<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>raise</code>) move control flow out of the current code\nblock. So any statements that come after a jump are dead code.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a       # Noncompliant\n  i += 1             # this is never executed\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/561\">CWE-561 - Dead Code</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1751",
          "name": "Loops with at most one iteration should be refactored",
          "description": "<h2>Why is this an issue?</h2>\n<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n<code>if</code> statement should be used instead.</p>\n<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,\n<code>break</code> or <code>raise</code> statements in a more appropriate way.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nwhile node is not None:\n  node = node.parent()\n  print(node)\n  break\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nwhile node is not None:\n  node = node.parent()\n  print(node)\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n<code>if</code> statement should be used instead.</p>\n<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,\n<code>break</code> or <code>raise</code> statements in a more appropriate way.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nwhile node is not None:\n  node = node.parent()\n  print(node)\n  break\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nwhile node is not None:\n  node = node.parent()\n  print(node)\n</pre>\n\n"
        },
        {
          "id": "S1656",
          "name": "Variables should not be self-assigned",
          "description": "<h2>Why is this an issue?</h2>\n<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nname = name\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nname = other.name\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nname = name\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nname = other.name\n</pre>\n\n"
        },
        {
          "id": "S6350",
          "name": "Constructing arguments of system commands from user input is security-sensitive",
          "description": "<p>Constructing arguments of system commands from user input is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9920\">CVE-2016-9920</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29472\">CVE-2021-29472</a> </li>\n</ul>\n<p>Arguments of system commands are processed by the executed program. The arguments are usually used to configure and influence the behavior of the\nprograms. Control over a single argument might be enough for an attacker to trigger dangerous features like executing arbitrary commands or writing\nfiles into specific directories.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Malicious arguments can result in undesired behavior in the executed command. </li>\n  <li> Passing user input to a system command is not necessary. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Avoid constructing system commands from user input when possible. </li>\n  <li> Ensure that no risky arguments can be injected for the given program, e.g., type-cast the argument to an integer. </li>\n  <li> Use a more secure interface to communicate with other programs, e.g., the standard input stream (stdin). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Arguments like <code>-delete</code> or <code>-exec</code> for the <code>find</code> command can alter the expected behavior and result in\nvulnerabilities:</p>\n<pre>\nimport subprocess\ninput = request.get('input')\nsubprocess.run([\"/usr/bin/find\", input]) # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Use an allow-list to restrict the arguments to trusted values:</p>\n<pre>\nimport subprocess\ninput = request.get('input')\nif input in allowed:\n    subprocess.run([\"/usr/bin/find\", input])\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/88\">CWE-88 - Argument Injection or Modification</a> </li>\n  <li> <a href=\"https://blog.sonarsource.com/php-supply-chain-attack-on-composer\">CVE-2021-29472</a> - PHP Supply Chain Attack on Composer </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Constructing arguments of system commands from user input is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9920\">CVE-2016-9920</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29472\">CVE-2021-29472</a> </li>\n</ul>\n<p>Arguments of system commands are processed by the executed program. The arguments are usually used to configure and influence the behavior of the\nprograms. Control over a single argument might be enough for an attacker to trigger dangerous features like executing arbitrary commands or writing\nfiles into specific directories.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Malicious arguments can result in undesired behavior in the executed command. </li>\n  <li> Passing user input to a system command is not necessary. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Avoid constructing system commands from user input when possible. </li>\n  <li> Ensure that no risky arguments can be injected for the given program, e.g., type-cast the argument to an integer. </li>\n  <li> Use a more secure interface to communicate with other programs, e.g., the standard input stream (stdin). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Arguments like <code>-delete</code> or <code>-exec</code> for the <code>find</code> command can alter the expected behavior and result in\nvulnerabilities:</p>\n<pre>\nimport subprocess\ninput = request.get('input')\nsubprocess.run([\"/usr/bin/find\", input]) # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Use an allow-list to restrict the arguments to trusted values:</p>\n<pre>\nimport subprocess\ninput = request.get('input')\nif input in allowed:\n    subprocess.run([\"/usr/bin/find\", input])\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/88\">CWE-88 - Argument Injection or Modification</a> </li>\n  <li> <a href=\"https://blog.sonarsource.com/php-supply-chain-attack-on-composer\">CVE-2021-29472</a> - PHP Supply Chain Attack on Composer </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S6741",
          "name": "The \"pandas.DataFrame.to_numpy()\" method should be preferred to the \"pandas.DataFrame.values\" attribute",
          "description": "<p>This rule raises an issue when the <code>pandas.DataFrame.values</code> is used instead of the <code>pandas.DataFrame.to_numpy()</code> method.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>values</code> attribute and the <code>to_numpy()</code> method in pandas both provide a way to return a NumPy representation of the\n<code>DataFrame</code>. However, there are some reasons why the <code>to_numpy()</code> method is recommended over the <code>values</code>\nattribute:</p>\n<ul>\n  <li> <strong>Future Compatibility:</strong> The <code>values</code> attribute is considered a legacy feature, while the <code>to_numpy()</code> is\n  the recommended method to extract data and is considered more future-proof. </li>\n  <li> <strong>Data type consistency:</strong> If the <code>DataFrame</code> has columns with different data types, NumPy will choose a common data\n  type that can hold all the data. This may lead to loss of information, unexpected type conversions, or increased memory usage. The\n  <code>to_numpy()</code> allows you to select the common type manually, passing the <code>dtype</code> argument. </li>\n  <li> <strong>View vs Copy:</strong> The <code>values</code> attribute can return a view or a copy of the data depending on whether the data needs to\n  be transposed. This can lead to confusion when modifying the extracted data. On the other hand, <code>to_numpy()</code> has <code>copy</code>\n  argument allowing to force it always to return a new NumPy array, ensuring that any changes you make won\u00e2\u20ac\u2122t affect the original\n  <code>DataFrame</code>. </li>\n  <li> <strong>Missing values control:</strong> The <code>to_numpy()</code> allows to specify the default value used for missing values in the\n  <code>DataFrame</code>, while the <code>values</code> will always use <code>numpy.nan</code> for missing values. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Use the <code>to_numpy()</code> method instead of the <code>values</code> attribute to get a NumPy representation of the\n<code>DataFrame</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\n\ndf = pd.DataFrame({\n        'X': ['A', 'B', 'A', 'C'],\n        'Y': [10, 7, 12, 5]\n    })\n\narr = df.values # Noncompliant: using the 'values' attribute is not recommended\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\n\ndf = pd.DataFrame({\n        'X': ['A', 'B', 'A', 'C'],\n        'Y': [10, 7, 12, 5]\n    })\n\narr = df.to_numpy() # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas Documentation - <a\n  href=\"https://pandas.pydata.org/pandas-docs/version/2.1/reference/api/pandas.DataFrame.to_numpy.html\">pandas.DataFrame.to_numpy()</a> </li>\n  <li> Pandas Documentation - <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.values.html\">pandas.DataFrame.values</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the <code>pandas.DataFrame.values</code> is used instead of the <code>pandas.DataFrame.to_numpy()</code> method.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>values</code> attribute and the <code>to_numpy()</code> method in pandas both provide a way to return a NumPy representation of the\n<code>DataFrame</code>. However, there are some reasons why the <code>to_numpy()</code> method is recommended over the <code>values</code>\nattribute:</p>\n<ul>\n  <li> <strong>Future Compatibility:</strong> The <code>values</code> attribute is considered a legacy feature, while the <code>to_numpy()</code> is\n  the recommended method to extract data and is considered more future-proof. </li>\n  <li> <strong>Data type consistency:</strong> If the <code>DataFrame</code> has columns with different data types, NumPy will choose a common data\n  type that can hold all the data. This may lead to loss of information, unexpected type conversions, or increased memory usage. The\n  <code>to_numpy()</code> allows you to select the common type manually, passing the <code>dtype</code> argument. </li>\n  <li> <strong>View vs Copy:</strong> The <code>values</code> attribute can return a view or a copy of the data depending on whether the data needs to\n  be transposed. This can lead to confusion when modifying the extracted data. On the other hand, <code>to_numpy()</code> has <code>copy</code>\n  argument allowing to force it always to return a new NumPy array, ensuring that any changes you make won\u00e2\u20ac\u2122t affect the original\n  <code>DataFrame</code>. </li>\n  <li> <strong>Missing values control:</strong> The <code>to_numpy()</code> allows to specify the default value used for missing values in the\n  <code>DataFrame</code>, while the <code>values</code> will always use <code>numpy.nan</code> for missing values. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Use the <code>to_numpy()</code> method instead of the <code>values</code> attribute to get a NumPy representation of the\n<code>DataFrame</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\n\ndf = pd.DataFrame({\n        'X': ['A', 'B', 'A', 'C'],\n        'Y': [10, 7, 12, 5]\n    })\n\narr = df.values # Noncompliant: using the 'values' attribute is not recommended\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\n\ndf = pd.DataFrame({\n        'X': ['A', 'B', 'A', 'C'],\n        'Y': [10, 7, 12, 5]\n    })\n\narr = df.to_numpy() # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas Documentation - <a\n  href=\"https://pandas.pydata.org/pandas-docs/version/2.1/reference/api/pandas.DataFrame.to_numpy.html\">pandas.DataFrame.to_numpy()</a> </li>\n  <li> Pandas Documentation - <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.values.html\">pandas.DataFrame.values</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6396",
          "name": "Superfluous curly brace quantifiers should be avoided",
          "description": "<h2>Why is this an issue?</h2>\n<p>Curly brace quantifiers in regular expressions can be used to have a more fine-grained control over how many times the character or the\nsub-expression preceeding them should occur. They can be used to match an expression exactly n times with <code>{n}</code>, between n and m times with\n<code>{n,m}</code>, or at least n times with <code>{n,}</code>. In some cases, using such a quantifier is superfluous for the semantic of the regular\nexpression, and it can be removed to improve readability. This rule raises an issue when one of the following quantifiers is encountered:</p>\n<ul>\n  <li> <code>{1,1}</code> or <code>{1}</code>: they match the expression exactly once. The same behavior can be achieved without the quantifier. </li>\n  <li> <code>{0,0}</code> or <code>{0}</code>: they match the expression zero times. The same behavior can be achieved by removing the expression.\n  </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"ab{1,1}c\"\nr\"ab{1}c\"\nr\"ab{0,0}c\"\nr\"ab{0}c\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"abc\"\nr\"ac\"\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Curly brace quantifiers in regular expressions can be used to have a more fine-grained control over how many times the character or the\nsub-expression preceeding them should occur. They can be used to match an expression exactly n times with <code>{n}</code>, between n and m times with\n<code>{n,m}</code>, or at least n times with <code>{n,}</code>. In some cases, using such a quantifier is superfluous for the semantic of the regular\nexpression, and it can be removed to improve readability. This rule raises an issue when one of the following quantifiers is encountered:</p>\n<ul>\n  <li> <code>{1,1}</code> or <code>{1}</code>: they match the expression exactly once. The same behavior can be achieved without the quantifier. </li>\n  <li> <code>{0,0}</code> or <code>{0}</code>: they match the expression zero times. The same behavior can be achieved by removing the expression.\n  </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"ab{1,1}c\"\nr\"ab{1}c\"\nr\"ab{0,0}c\"\nr\"ab{0}c\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"abc\"\nr\"ac\"\n</pre>\n\n"
        },
        {
          "id": "S6331",
          "name": "Regular expressions should not contain empty groups",
          "description": "<h2>Why is this an issue?</h2>\n<p>There are several reasons to use a group in a regular expression:</p>\n<ul>\n  <li> to change the precedence (e.g. <code>do(g|or)</code> will match 'dog' and 'door') </li>\n  <li> to remember parenthesised part of the match in the case of capturing group </li>\n  <li> to improve readability </li>\n</ul>\n<p>In any case, having an empty group is most probably a mistake. Either it is a leftover after refactoring and should be removed, or the actual\nparentheses were intended and were not escaped.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"foo()\" # Noncompliant, will match only 'foo'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"foo\\(\\)\" # Matches 'foo()'\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>There are several reasons to use a group in a regular expression:</p>\n<ul>\n  <li> to change the precedence (e.g. <code>do(g|or)</code> will match 'dog' and 'door') </li>\n  <li> to remember parenthesised part of the match in the case of capturing group </li>\n  <li> to improve readability </li>\n</ul>\n<p>In any case, having an empty group is most probably a mistake. Either it is a leftover after refactoring and should be removed, or the actual\nparentheses were intended and were not escaped.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"foo()\" # Noncompliant, will match only 'foo'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"foo\\(\\)\" # Matches 'foo()'\n</pre>\n\n"
        },
        {
          "id": "S6035",
          "name": "Single-character alternations in regular expressions should be replaced with character classes",
          "description": "<h2>Why is this an issue?</h2>\n<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"a|b|c\" # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"[abc]\"\n# or\nr\"[a-c]\"\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"a|b|c\" # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"[abc]\"\n# or\nr\"[a-c]\"\n</pre>\n\n"
        },
        {
          "id": "S6019",
          "name": "Reluctant quantifiers in regular expressions should be followed by an expression that can't match the empty string",
          "description": "<h2>Why is this an issue?</h2>\n<p>When a reluctant (or lazy) quantifier is followed by a pattern that can match the empty string or directly by the end of the regex, it will always\nmatch zero times for <code>*?</code> or one time for <code>+?</code>. If a reluctant quantifier is followed directly by the end anchor\n(<code>$</code>), it behaves indistinguishably from a greedy quantifier while being less efficient.</p>\n<p>This is likely a sign that the regex does not work as intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nre.replace(r\"start\\w*?(end)?\", \"x\", \"start123endstart456\") # Noncompliant. In contrast to what one would expect, the result is not \"xx\"\n\nre.match(r\"^\\d*?$\", \"123456789\") # Noncompliant. Matches the same as \"/^\\d*$/\", but will backtrack in every position.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nre.replace(r\"start\\w*?(end|$)\", \"x\", \"start123endstart456\") # Result is \"xx\"\n\nre.match(r\"^\\d*$\", \"123456789\")\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>When a reluctant (or lazy) quantifier is followed by a pattern that can match the empty string or directly by the end of the regex, it will always\nmatch zero times for <code>*?</code> or one time for <code>+?</code>. If a reluctant quantifier is followed directly by the end anchor\n(<code>$</code>), it behaves indistinguishably from a greedy quantifier while being less efficient.</p>\n<p>This is likely a sign that the regex does not work as intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nre.replace(r\"start\\w*?(end)?\", \"x\", \"start123endstart456\") # Noncompliant. In contrast to what one would expect, the result is not \"xx\"\n\nre.match(r\"^\\d*?$\", \"123456789\") # Noncompliant. Matches the same as \"/^\\d*$/\", but will backtrack in every position.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nre.replace(r\"start\\w*?(end|$)\", \"x\", \"start123endstart456\") # Result is \"xx\"\n\nre.match(r\"^\\d*$\", \"123456789\")\n</pre>\n\n"
        },
        {
          "id": "S5860",
          "name": "Names of regular expressions named groups should be used",
          "description": "<h2>Why is this an issue?</h2>\n<p>Why use named groups only to never use any of them later on in the code?</p>\n<p>This rule raises issues every time named groups are:</p>\n<ul>\n  <li> referenced while not defined; </li>\n  <li> defined but called elsewhere in the code by their number instead. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nimport re\n\ndef foo():\n    pattern = re.compile(r\"(?P&lt;a&gt;.)\")\n    matches = pattern.match(\"abc\")\n    g1 = matches.group(\"b\") # Noncompliant - group \"b\" is not defined\n    g2 = matches.group(1) # Noncompliant - Directly use 'a' instead of its group number.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport re\n\ndef foo():\n    pattern = re.compile(r\"(?P&lt;a&gt;.)\")\n    matches = pattern.match(\"abc\")\n    g = matches.group(\"a\")\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Why use named groups only to never use any of them later on in the code?</p>\n<p>This rule raises issues every time named groups are:</p>\n<ul>\n  <li> referenced while not defined; </li>\n  <li> defined but called elsewhere in the code by their number instead. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nimport re\n\ndef foo():\n    pattern = re.compile(r\"(?P&lt;a&gt;.)\")\n    matches = pattern.match(\"abc\")\n    g1 = matches.group(\"b\") # Noncompliant - group \"b\" is not defined\n    g2 = matches.group(1) # Noncompliant - Directly use 'a' instead of its group number.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport re\n\ndef foo():\n    pattern = re.compile(r\"(?P&lt;a&gt;.)\")\n    matches = pattern.match(\"abc\")\n    g = matches.group(\"a\")\n</pre>\n\n"
        },
        {
          "id": "S5603",
          "name": "Unused scope-limited definitions should be removed",
          "description": "<p>This rule raises an issue when unused scope-limited definitions are found.</p>\n<h2>Why is this an issue?</h2>\n<p>When a class or function is defined in a parent function or method, it is only visible in this parent function or method\u00e2\u20ac\u2122s scope. If the defined\nclass or function is not used within this scope it is dead code (unnecessary, inoperative code) that should be removed.</p>\n<p>Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being\nintroduced.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef parent_function():\n    def nested_function():  # Noncompliant: this function is never used in this scope.\n        print(\"nested_function\")\n\n    class NestedClass:  # Noncompliant: this class is never used in this scope.\n        def __init__(self):\n            print(\"NestedClass\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef parent_function():\n    class NestedClass:\n        def __init__(self):\n            print(\"NestedClass\")\n\n    NestedClass()\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when unused scope-limited definitions are found.</p>\n<h2>Why is this an issue?</h2>\n<p>When a class or function is defined in a parent function or method, it is only visible in this parent function or method\u00e2\u20ac\u2122s scope. If the defined\nclass or function is not used within this scope it is dead code (unnecessary, inoperative code) that should be removed.</p>\n<p>Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being\nintroduced.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef parent_function():\n    def nested_function():  # Noncompliant: this function is never used in this scope.\n        print(\"nested_function\")\n\n    class NestedClass:  # Noncompliant: this class is never used in this scope.\n        def __init__(self):\n            print(\"NestedClass\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef parent_function():\n    class NestedClass:\n        def __init__(self):\n            print(\"NestedClass\")\n\n    NestedClass()\n</pre>\n\n"
        },
        {
          "id": "S2320",
          "name": "The \"print\" statement should not be used",
          "description": "<p>This rule raises an issue when the print statement is used.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>print</code> statement was removed in Python 3.0. The built-in function should be used instead.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprint '1'  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprint('1')\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the print statement is used.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>print</code> statement was removed in Python 3.0. The built-in function should be used instead.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprint '1'  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprint('1')\n</pre>\n\n"
        },
        {
          "id": "S1110",
          "name": "Redundant pairs of parentheses should be removed",
          "description": "<h2>Why is this an issue?</h2>\n<p>Parentheses can disambiguate the order of operations in complex expressions and make the code easier to understand.</p>\n<pre>\na = (b * c) + (d * e) # Compliant: the intent is clear.\n</pre>\n<p>Redundant parentheses are parenthesis that do not change the behavior of the code, and do not clarify the intent. They can mislead and complexify\nthe code. They should be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nreturn ((3))        # Noncompliant\nreturn ((x + 1))    # Noncompliant\nx = ((y / 2)) + 1   # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nreturn 3\nreturn (3)\nreturn x + 1\nreturn (x + 1)\nx = y / 2 + 1\nx = (y / 2) + 1\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Parentheses can disambiguate the order of operations in complex expressions and make the code easier to understand.</p>\n<pre>\na = (b * c) + (d * e) # Compliant: the intent is clear.\n</pre>\n<p>Redundant parentheses are parenthesis that do not change the behavior of the code, and do not clarify the intent. They can mislead and complexify\nthe code. They should be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nreturn ((3))        # Noncompliant\nreturn ((x + 1))    # Noncompliant\nx = ((y / 2)) + 1   # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nreturn 3\nreturn (3)\nreturn x + 1\nreturn (x + 1)\nx = y / 2 + 1\nx = (y / 2) + 1\n</pre>\n\n"
        },
        {
          "id": "S1066",
          "name": "Mergeable \"if\" statements should be combined",
          "description": "<h2>Why is this an issue?</h2>\n<p>Nested code - blocks of code inside blocks of code - is eventually necessary, but increases complexity. This is why keeping the code as flat as\npossible, by avoiding unnecessary nesting, is considered a good practice.</p>\n<p>Merging <code>if</code> statements when possible will decrease the nesting of the code and improve its readability.</p>\n<p>Code like</p>\n<pre>\nif condition1:\n    if condition2:             # Noncompliant\n        # ...\n</pre>\n<p>Will be more readable as</p>\n<pre>\nif condition1 and condition2:  # Compliant\n    # ...\n</pre>\n<h2>How to fix it</h2>\n<p>If merging the conditions seems to result in a more complex code, extracting the condition or part of it in a named function or variable is a\nbetter approach to fix readability.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nif file.isValid():\n  if file.isfile() or file.isdir():     # Noncompliant\n    # ...\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef isFileOrDirectory(File file):\n  return file.isFile() or file.isDirectory()\n\nif file.isValid() and isFileOrDirectory(file): # Compliant\n  # ...\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Nested code - blocks of code inside blocks of code - is eventually necessary, but increases complexity. This is why keeping the code as flat as\npossible, by avoiding unnecessary nesting, is considered a good practice.</p>\n<p>Merging <code>if</code> statements when possible will decrease the nesting of the code and improve its readability.</p>\n<p>Code like</p>\n<pre>\nif condition1:\n    if condition2:             # Noncompliant\n        # ...\n</pre>\n<p>Will be more readable as</p>\n<pre>\nif condition1 and condition2:  # Compliant\n    # ...\n</pre>\n<h2>How to fix it</h2>\n<p>If merging the conditions seems to result in a more complex code, extracting the condition or part of it in a named function or variable is a\nbetter approach to fix readability.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nif file.isValid():\n  if file.isfile() or file.isdir():     # Noncompliant\n    # ...\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef isFileOrDirectory(File file):\n  return file.isFile() or file.isDirectory()\n\nif file.isValid() and isFileOrDirectory(file): # Compliant\n  # ...\n</pre>\n\n"
        },
        {
          "id": "S5842",
          "name": "Repeated patterns in regular expressions should not match the empty string",
          "description": "<h2>Why is this an issue?</h2>\n<p>A regex should never include a repetitive pattern whose body would match the empty string. This is usually a sign that a part of the regex is\nredundant or does not do what the author intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"(?:)*\"      # same as the empty regex, the '*' accomplishes nothing\nr\"(?:|x)*\"    # same as the empty regex, the alternative has no effect\nr\"(?:x|)*\"    # same as 'x*', the empty alternative has no effect\nr\"(?:x*|y*)*\" # same as 'x*', the first alternative would always match, y* is never tried\nr\"(?:x?)*\"    # same as 'x*'\nr\"(?:x?)+\"    # same as 'x*'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"x*\"\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>A regex should never include a repetitive pattern whose body would match the empty string. This is usually a sign that a part of the regex is\nredundant or does not do what the author intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"(?:)*\"      # same as the empty regex, the '*' accomplishes nothing\nr\"(?:|x)*\"    # same as the empty regex, the alternative has no effect\nr\"(?:x|)*\"    # same as 'x*', the empty alternative has no effect\nr\"(?:x*|y*)*\" # same as 'x*', the first alternative would always match, y* is never tried\nr\"(?:x?)*\"    # same as 'x*'\nr\"(?:x?)+\"    # same as 'x*'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"x*\"\n</pre>\n\n"
        },
        {
          "id": "S1226",
          "name": "Function parameters initial values should not be ignored",
          "description": "<h2>Why is this an issue?</h2>\n<p>While it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as read-only, then at least read before reassignment.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef foo(strings, param):\n    param = 1  # NonCompliant\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>While it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as read-only, then at least read before reassignment.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef foo(strings, param):\n    param = 1  # NonCompliant\n</pre>\n\n"
        },
        {
          "id": "S3752",
          "name": "Allowing both safe and unsafe HTTP methods is security-sensitive",
          "description": "<p>An HTTP method is safe when used to perform a read-only operation, such as retrieving information. In contrast, an unsafe HTTP method is used to\nchange the state of an application, for instance to update a user\u00e2\u20ac\u2122s profile on a web application.</p>\n<p>Common safe HTTP methods are GET, HEAD, or OPTIONS.</p>\n<p>Common unsafe HTTP methods are POST, PUT and DELETE.</p>\n<p>Allowing both safe and unsafe HTTP methods to perform a specific operation on a web application could impact its security, for example CSRF\nprotections are most of the time only protecting operations performed by unsafe HTTP methods.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> HTTP methods are not defined at all for a route/controller of the application. </li>\n  <li> Safe HTTP methods are defined and used for a route/controller that can change the state of an application. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>For all the routes/controllers of an application, the authorized HTTP methods should be explicitly defined and safe HTTP methods should only be\nused to perform read-only operations.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://www.djangoproject.com/\">Django</a>:</p>\n<pre>\n# No method restriction\ndef view(request):  # Sensitive\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_http_methods([\"GET\", \"POST\"])  # Sensitive\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<p>For <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a>:</p>\n<pre>\n@methods.route('/sensitive', methods=['GET', 'POST'])  # Sensitive\ndef view():\n    return Response(\"...\", 200)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://www.djangoproject.com/\">Django</a>:</p>\n<pre>\n@require_http_methods([\"POST\"])\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_POST\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_GET\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_safe\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<p>For <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a>:</p>\n<pre>\n@methods.route('/compliant1')\ndef view():\n    return Response(\"...\", 200)\n</pre>\n<pre>\n@methods.route('/compliant2', methods=['GET'])\ndef view():\n    return Response(\"...\", 200)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/352\">CWE-352 - Cross-Site Request Forgery (CSRF)</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/csrf\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://docs.djangoproject.com/en/3.1/topics/http/decorators/#allowed-http-methods\">Django</a> - Allowed HTTP Methods </li>\n  <li> <a href=\"https://flask.palletsprojects.com/en/1.1.x/quickstart/#http-methods\">Flask</a> - HTTP Methods </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>An HTTP method is safe when used to perform a read-only operation, such as retrieving information. In contrast, an unsafe HTTP method is used to\nchange the state of an application, for instance to update a user\u00e2\u20ac\u2122s profile on a web application.</p>\n<p>Common safe HTTP methods are GET, HEAD, or OPTIONS.</p>\n<p>Common unsafe HTTP methods are POST, PUT and DELETE.</p>\n<p>Allowing both safe and unsafe HTTP methods to perform a specific operation on a web application could impact its security, for example CSRF\nprotections are most of the time only protecting operations performed by unsafe HTTP methods.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> HTTP methods are not defined at all for a route/controller of the application. </li>\n  <li> Safe HTTP methods are defined and used for a route/controller that can change the state of an application. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>For all the routes/controllers of an application, the authorized HTTP methods should be explicitly defined and safe HTTP methods should only be\nused to perform read-only operations.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://www.djangoproject.com/\">Django</a>:</p>\n<pre>\n# No method restriction\ndef view(request):  # Sensitive\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_http_methods([\"GET\", \"POST\"])  # Sensitive\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<p>For <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a>:</p>\n<pre>\n@methods.route('/sensitive', methods=['GET', 'POST'])  # Sensitive\ndef view():\n    return Response(\"...\", 200)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://www.djangoproject.com/\">Django</a>:</p>\n<pre>\n@require_http_methods([\"POST\"])\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_POST\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_GET\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_safe\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<p>For <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a>:</p>\n<pre>\n@methods.route('/compliant1')\ndef view():\n    return Response(\"...\", 200)\n</pre>\n<pre>\n@methods.route('/compliant2', methods=['GET'])\ndef view():\n    return Response(\"...\", 200)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/352\">CWE-352 - Cross-Site Request Forgery (CSRF)</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/csrf\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://docs.djangoproject.com/en/3.1/topics/http/decorators/#allowed-http-methods\">Django</a> - Allowed HTTP Methods </li>\n  <li> <a href=\"https://flask.palletsprojects.com/en/1.1.x/quickstart/#http-methods\">Flask</a> - HTTP Methods </li>\n</ul>\n\n"
        },
        {
          "id": "S2092",
          "name": "Creating cookies without the \"secure\" flag is security-sensitive",
          "description": "<p>When a cookie is protected with the <code>secure</code> attribute set to <em>true</em> it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is for instance a <em>session-cookie</em> not designed to be sent over non-HTTPS communication. </li>\n  <li> it\u00e2\u20ac\u2122s not sure that the website contains <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content\">mixed content</a> or not\n  (ie HTTPS everywhere or not) </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> It is recommended to use <code>HTTPs</code> everywhere so setting the <code>secure</code> flag to <em>true</em> should be the default behaviour\n  when creating cookies. </li>\n  <li> Set the <code>secure</code> flag to <em>true</em> for session-cookies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Flask</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value') # Sensitive\n    return response\n</pre>\n<h2>Compliant Solution</h2>\n<p>Flask</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value', secure=True) # Compliant\n    return response\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/315\">CWE-315 - Cleartext Storage of Sensitive Information in a Cookie</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/614\">CWE-614 - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222576\">Application Security and\n  Development: V-222576</a> - The application must set the secure flag on session cookies. </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>When a cookie is protected with the <code>secure</code> attribute set to <em>true</em> it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is for instance a <em>session-cookie</em> not designed to be sent over non-HTTPS communication. </li>\n  <li> it\u00e2\u20ac\u2122s not sure that the website contains <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content\">mixed content</a> or not\n  (ie HTTPS everywhere or not) </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> It is recommended to use <code>HTTPs</code> everywhere so setting the <code>secure</code> flag to <em>true</em> should be the default behaviour\n  when creating cookies. </li>\n  <li> Set the <code>secure</code> flag to <em>true</em> for session-cookies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Flask</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value') # Sensitive\n    return response\n</pre>\n<h2>Compliant Solution</h2>\n<p>Flask</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value', secure=True) # Compliant\n    return response\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/315\">CWE-315 - Cleartext Storage of Sensitive Information in a Cookie</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/614\">CWE-614 - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222576\">Application Security and\n  Development: V-222576</a> - The application must set the secure flag on session cookies. </li>\n</ul>\n\n"
        },
        {
          "id": "S1940",
          "name": "Boolean checks should not be inverted",
          "description": "<h2>Why is this an issue?</h2>\n<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif not a == 2:        # Noncompliant\n    b = not i &lt; 10    # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif a != 2 :\n    b = i &gt;= 10\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif not a == 2:        # Noncompliant\n    b = not i &lt; 10    # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif a != 2 :\n    b = i &gt;= 10\n</pre>\n\n"
        },
        {
          "id": "S117",
          "name": "Local variable and function parameter names should comply with a naming convention",
          "description": "<p>Local variables and function parameters should be named consistently to communicate intent and improve maintainability. Rename your local variable\nor function parameter to follow your project\u00e2\u20ac\u2122s naming convention to address this issue.</p>\n<h2>Why is this an issue?</h2>\n<p>A naming convention in software development is a set of guidelines for naming code elements like variables, functions, and classes.<br> Local\nvariables and function parameters hold the meaning of the written code. Their names should be meaningful and follow a consistent and easily\nrecognizable pattern.<br> Adhering to a consistent naming convention helps to make the code more readable and understandable, which makes it easier to\nmaintain and debug. It also ensures consistency in the code, especially when multiple developers are working on the same project.</p>\n<p>This rule checks that local variable and function parameter names match a provided regular expression.</p>\n<h3>What is the potential impact?</h3>\n<p>Inconsistent naming of local variables and function parameters can lead to several issues in your code:</p>\n<ul>\n  <li> <strong>Reduced Readability</strong>: Inconsistent local variable and function parameter names make the code harder to read and understand;\n  consequently, it is more difficult to identify the purpose of each variable, spot errors, or comprehend the logic. </li>\n  <li> <strong>Difficulty in Identifying Variables</strong>: The local variables and function parameters that don\u00e2\u20ac\u2122t adhere to a standard naming\n  convention are challenging to identify; thus, the coding process slows down, especially when dealing with a large codebase. </li>\n  <li> <strong>Increased Risk of Errors</strong>: Inconsistent or unclear local variable and function parameter names lead to misunderstandings about\n  what the variable represents. This ambiguity leads to incorrect assumptions and, consequently, bugs in the code. </li>\n  <li> <strong>Collaboration Difficulties</strong>: In a team setting, inconsistent naming conventions lead to confusion and miscommunication among\n  team members. </li>\n  <li> <strong>Difficulty in Code Maintenance</strong>: Inconsistent naming leads to an inconsistent codebase. The code is difficult to understand,\n  and making changes feels like refactoring constantly, as you face different naming methods. Ultimately, it makes the codebase harder to maintain.\n  </li>\n</ul>\n<p>In summary, not adhering to a naming convention for local variables and function parameters can lead to confusion, errors, and inefficiencies,\nmaking the code harder to read, understand, and maintain.</p>\n<h3>Exceptions</h3>\n<p>Loop counters of one letter are ignored by this rule.</p>\n<pre>\nfor i in range(limit):  # Compliant\n    print(i)\n</pre>\n<p>Local variables matching regular expression <code>^[_A-Z][A-Z0-9_]*$</code> are considered as constant and ignored by this rule.<br> Function\nparameters are not concerned by this exception.</p>\n<pre>\ndef print_something(important_param):\n    LOCAL_VARIABLE = \"\" # Compliant\n    print(important_param + LOCAL_VARIABLE)\n</pre>\n<h2>How to fix it</h2>\n<p>First, familiarize yourself with the particular naming convention of the project in question. Then, update the name to match the convention, as\nwell as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages at once.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>With the default regular expression <code>^[_a-z][a-z0-9_]*$</code>:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef print_something(IMPORTANT_PARAM): # Noncompliant\n    localVariable = \"\" # Noncompliant\n    print(IMPORTANT_PARAM + localVariable)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef print_something(important_param):\n    local_variable = \"\"\n    print(important_param + local_variable)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Enhancement Proposals - <a href=\"https://peps.python.org/pep-0008/#naming-conventions\">PEP8 - Naming Conventions</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Naming_convention_(programming)\">Naming Convention (programming)</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S100} - Method names should comply with a naming convention </li>\n  <li> {rule:python:S101} - Class names should comply with a naming convention </li>\n  <li> {rule:python:S116} - Field names should comply with a naming convention </li>\n  <li> {rule:python:S1542} - Function names should comply with a naming convention </li>\n  <li> {rule:python:S1578} - Module names should comply with a naming convention </li>\n  <li> {rule:python:S2710} - The first argument to class methods should follow the naming convention </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>Local variables and function parameters should be named consistently to communicate intent and improve maintainability. Rename your local variable\nor function parameter to follow your project\u00e2\u20ac\u2122s naming convention to address this issue.</p>\n<h2>Why is this an issue?</h2>\n<p>A naming convention in software development is a set of guidelines for naming code elements like variables, functions, and classes.<br> Local\nvariables and function parameters hold the meaning of the written code. Their names should be meaningful and follow a consistent and easily\nrecognizable pattern.<br> Adhering to a consistent naming convention helps to make the code more readable and understandable, which makes it easier to\nmaintain and debug. It also ensures consistency in the code, especially when multiple developers are working on the same project.</p>\n<p>This rule checks that local variable and function parameter names match a provided regular expression.</p>\n<h3>What is the potential impact?</h3>\n<p>Inconsistent naming of local variables and function parameters can lead to several issues in your code:</p>\n<ul>\n  <li> <strong>Reduced Readability</strong>: Inconsistent local variable and function parameter names make the code harder to read and understand;\n  consequently, it is more difficult to identify the purpose of each variable, spot errors, or comprehend the logic. </li>\n  <li> <strong>Difficulty in Identifying Variables</strong>: The local variables and function parameters that don\u00e2\u20ac\u2122t adhere to a standard naming\n  convention are challenging to identify; thus, the coding process slows down, especially when dealing with a large codebase. </li>\n  <li> <strong>Increased Risk of Errors</strong>: Inconsistent or unclear local variable and function parameter names lead to misunderstandings about\n  what the variable represents. This ambiguity leads to incorrect assumptions and, consequently, bugs in the code. </li>\n  <li> <strong>Collaboration Difficulties</strong>: In a team setting, inconsistent naming conventions lead to confusion and miscommunication among\n  team members. </li>\n  <li> <strong>Difficulty in Code Maintenance</strong>: Inconsistent naming leads to an inconsistent codebase. The code is difficult to understand,\n  and making changes feels like refactoring constantly, as you face different naming methods. Ultimately, it makes the codebase harder to maintain.\n  </li>\n</ul>\n<p>In summary, not adhering to a naming convention for local variables and function parameters can lead to confusion, errors, and inefficiencies,\nmaking the code harder to read, understand, and maintain.</p>\n<h3>Exceptions</h3>\n<p>Loop counters of one letter are ignored by this rule.</p>\n<pre>\nfor i in range(limit):  # Compliant\n    print(i)\n</pre>\n<p>Local variables matching regular expression <code>^[_A-Z][A-Z0-9_]*$</code> are considered as constant and ignored by this rule.<br> Function\nparameters are not concerned by this exception.</p>\n<pre>\ndef print_something(important_param):\n    LOCAL_VARIABLE = \"\" # Compliant\n    print(important_param + LOCAL_VARIABLE)\n</pre>\n<h2>How to fix it</h2>\n<p>First, familiarize yourself with the particular naming convention of the project in question. Then, update the name to match the convention, as\nwell as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages at once.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>With the default regular expression <code>^[_a-z][a-z0-9_]*$</code>:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef print_something(IMPORTANT_PARAM): # Noncompliant\n    localVariable = \"\" # Noncompliant\n    print(IMPORTANT_PARAM + localVariable)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef print_something(important_param):\n    local_variable = \"\"\n    print(important_param + local_variable)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Enhancement Proposals - <a href=\"https://peps.python.org/pep-0008/#naming-conventions\">PEP8 - Naming Conventions</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Naming_convention_(programming)\">Naming Convention (programming)</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S100} - Method names should comply with a naming convention </li>\n  <li> {rule:python:S101} - Class names should comply with a naming convention </li>\n  <li> {rule:python:S116} - Field names should comply with a naming convention </li>\n  <li> {rule:python:S1542} - Function names should comply with a naming convention </li>\n  <li> {rule:python:S1578} - Module names should comply with a naming convention </li>\n  <li> {rule:python:S2710} - The first argument to class methods should follow the naming convention </li>\n</ul>\n\n"
        },
        {
          "id": "S116",
          "name": "Field names should comply with a naming convention",
          "description": "<h2>Why is this an issue?</h2>\n<p>A naming convention in software development is a set of guidelines for naming code elements like variables, functions, and classes.</p>\n<p>The goal of a naming convention is to make the code more readable and understandable, which makes it easier to maintain and debug. It also ensures\nconsistency in the code, especially when multiple developers are working on the same project.</p>\n<p>This rule checks that field names match a provided regular expression.</p>\n<p>Using the regular expression <code>^[_a-z][_a-z0-9]*$</code>, the noncompliant code below:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n  myField = 1\n</pre>\n<p>Should be replaced with:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n  my_field = 1\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Enhancement Proposals - <a href=\"https://peps.python.org/pep-0008/#naming-conventions\">PEP8 - Naming Conventions</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Naming_convention_(programming)\">Naming Convention (programming)</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>A naming convention in software development is a set of guidelines for naming code elements like variables, functions, and classes.</p>\n<p>The goal of a naming convention is to make the code more readable and understandable, which makes it easier to maintain and debug. It also ensures\nconsistency in the code, especially when multiple developers are working on the same project.</p>\n<p>This rule checks that field names match a provided regular expression.</p>\n<p>Using the regular expression <code>^[_a-z][_a-z0-9]*$</code>, the noncompliant code below:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n  myField = 1\n</pre>\n<p>Should be replaced with:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n  my_field = 1\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Enhancement Proposals - <a href=\"https://peps.python.org/pep-0008/#naming-conventions\">PEP8 - Naming Conventions</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Naming_convention_(programming)\">Naming Convention (programming)</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S100",
          "name": "Method names should comply with a naming convention",
          "description": "<h2>Why is this an issue?</h2>\n<p>Shared naming conventions allow teams to collaborate efficiently.</p>\n<p>This rule raises an issue when a method name does not match a provided regular expression.</p>\n<p>For example, with the default provided regular expression <code>^[a-z_][a-z0-9_]*$</code>, the method:</p>\n<pre>\nclass MyClass:\n    def MyMethod(a,b): # Noncompliant\n        ...\n</pre>\n<p>should be renamed to</p>\n<pre>\nclass MyClass:\n    def my_method(a,b):\n        ...\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Shared naming conventions allow teams to collaborate efficiently.</p>\n<p>This rule raises an issue when a method name does not match a provided regular expression.</p>\n<p>For example, with the default provided regular expression <code>^[a-z_][a-z0-9_]*$</code>, the method:</p>\n<pre>\nclass MyClass:\n    def MyMethod(a,b): # Noncompliant\n        ...\n</pre>\n<p>should be renamed to</p>\n<pre>\nclass MyClass:\n    def my_method(a,b):\n        ...\n</pre>\n\n"
        },
        {
          "id": "S5300",
          "name": "Sending emails is security-sensitive",
          "description": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Sending emails is security-sensitive and can expose an application to a large range of vulnerabilities.</p>\n<p><strong>Information Exposure</strong></p>\n<p>Emails often contain sensitive information which might be exposed to an attacker if he can add an arbitrary address to the recipient list.</p>\n<p><strong>Spamming / Phishing</strong></p>\n<p>Malicious user can abuse email based feature to send spam or phishing content.</p>\n<p><strong>Dangerous Content Injection</strong></p>\n<p>Emails can contain HTML and JavaScript code, thus they can be used for XSS attacks.</p>\n<p><strong>Email Headers Injection</strong></p>\n<p>Email fields such as <code>subject</code>, <code>to</code>, <code>cc</code>, <code>bcc</code>, <code>from</code> are set in email \"headers\".&nbsp;\nUsing unvalidated user input to set those fields&nbsp;might allow attackers to inject new line characters in headers to craft malformed SMTP requests.\nAlthough modern libraries are filtering new line character by default, user data used in&nbsp;email \"headers\" should always be validated.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9801\">CVE-2017-9801</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-4803\">CVE-2016-4803</a> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Unvalidated user input are used to set email headers. </li>\n  <li> Email content contains data provided by users and it is not sanitized. </li>\n  <li> Email recipient list or body are based on user inputs. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use an email library which sanitizes headers (Flask-Mail or django.core.mail). </li>\n  <li> Use html escape functions to sanitize every piece of data used to in the email body. </li>\n  <li> Verify application logic to make sure that email base feature can not be abuse to:\n    <ul>\n      <li> Send arbitrary email for spamming or fishing </li>\n      <li> Disclose sensitive email content </li>\n    </ul>  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>smtplib</p>\n<pre>\nimport smtplib\n\ndef send(from_email, to_email, msg):\n  server = smtplib.SMTP('localhost', 1025)\n  server.sendmail(from_email, to_email, msg) # Sensitive\n</pre>\n<p>Django</p>\n<pre>\nfrom django.core.mail import send_mail\n\ndef send(subject, msg, from_email, to_email):\n  send_mail(subject, msg, from_email, [to_email]) # Sensitive\n</pre>\n<p>Flask-Mail</p>\n<pre>\nfrom flask import Flask\nfrom flask_mail import Mail, Message\n\napp = Flask(__name__)\n\ndef send(subject, msg, from_email, to_email):\n    mail = Mail(app)\n    msg = Message(subject, [to_email], body, sender=from_email)\n    mail.send(msg) # Sensitive{code}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.damonkohler.com/2008/12/email-injection.html\">Email Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/93\">CWE-93 - Improper Neutralization of CRLF Sequences ('CRLF Injection')</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/80\">CWE-80 - Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic\n  XSS)</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Sending emails is security-sensitive and can expose an application to a large range of vulnerabilities.</p>\n<p><strong>Information Exposure</strong></p>\n<p>Emails often contain sensitive information which might be exposed to an attacker if he can add an arbitrary address to the recipient list.</p>\n<p><strong>Spamming / Phishing</strong></p>\n<p>Malicious user can abuse email based feature to send spam or phishing content.</p>\n<p><strong>Dangerous Content Injection</strong></p>\n<p>Emails can contain HTML and JavaScript code, thus they can be used for XSS attacks.</p>\n<p><strong>Email Headers Injection</strong></p>\n<p>Email fields such as <code>subject</code>, <code>to</code>, <code>cc</code>, <code>bcc</code>, <code>from</code> are set in email \"headers\".&nbsp;\nUsing unvalidated user input to set those fields&nbsp;might allow attackers to inject new line characters in headers to craft malformed SMTP requests.\nAlthough modern libraries are filtering new line character by default, user data used in&nbsp;email \"headers\" should always be validated.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9801\">CVE-2017-9801</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-4803\">CVE-2016-4803</a> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Unvalidated user input are used to set email headers. </li>\n  <li> Email content contains data provided by users and it is not sanitized. </li>\n  <li> Email recipient list or body are based on user inputs. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use an email library which sanitizes headers (Flask-Mail or django.core.mail). </li>\n  <li> Use html escape functions to sanitize every piece of data used to in the email body. </li>\n  <li> Verify application logic to make sure that email base feature can not be abuse to:\n    <ul>\n      <li> Send arbitrary email for spamming or fishing </li>\n      <li> Disclose sensitive email content </li>\n    </ul>  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>smtplib</p>\n<pre>\nimport smtplib\n\ndef send(from_email, to_email, msg):\n  server = smtplib.SMTP('localhost', 1025)\n  server.sendmail(from_email, to_email, msg) # Sensitive\n</pre>\n<p>Django</p>\n<pre>\nfrom django.core.mail import send_mail\n\ndef send(subject, msg, from_email, to_email):\n  send_mail(subject, msg, from_email, [to_email]) # Sensitive\n</pre>\n<p>Flask-Mail</p>\n<pre>\nfrom flask import Flask\nfrom flask_mail import Mail, Message\n\napp = Flask(__name__)\n\ndef send(subject, msg, from_email, to_email):\n    mail = Mail(app)\n    msg = Message(subject, [to_email], body, sender=from_email)\n    mail.send(msg) # Sensitive{code}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.damonkohler.com/2008/12/email-injection.html\">Email Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/93\">CWE-93 - Improper Neutralization of CRLF Sequences ('CRLF Injection')</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/80\">CWE-80 - Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic\n  XSS)</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1523",
          "name": "Dynamically executing code is security-sensitive",
          "description": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807\">CVE-2017-9807</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802\">CVE-2017-9802</a> </li>\n</ul>\n<p>Some APIs enable the execution of dynamic code by providing it as strings at runtime. These APIs might be useful in some very specific\nmeta-programming use-cases. However most of the time their use is frowned upon because they also increase the risk of maliciously <a\nhref=\"https://owasp.org/www-community/attacks/Code_Injection\">Injected Code</a>. Such attacks can either run on the server or in the client (example:\nXSS attack) and have a huge impact on an application\u00e2\u20ac\u2122s security.</p>\n<p>This rule marks for review each occurrence of such dynamic code execution. This rule does not detect code injections. It only highlights the use of\nAPIs which should be used sparingly and very carefully.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed code may come from an untrusted source and hasn\u00e2\u20ac\u2122t been sanitized. </li>\n  <li> you really need to run code dynamically. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a <a href=\"https://en.wikipedia.org/wiki/Sandbox_(computer_security)\">sandboxed</a> environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: <a\nhref=\"https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager\">Security Managers</a> in java, <a\nhref=\"https://www.w3schools.com/tags/att_iframe_sandbox.asp\">iframes</a> and <a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">same-origin\npolicy</a> for javascript in a web browser).</p>\n<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>\n<p>Avoid using dynamic code APIs whenever possible. Hard-coded code is always safer.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport os\n\nvalue = input()\ncommand = 'os.system(\"%s\")' % value\n\ndef evaluate(command, file, mode):\n    eval(command)  # Sensitive.\n\neval(command)  # Sensitive. Dynamic code\n\ndef execute(code, file, mode):\n    exec(code)  # Sensitive.\n    exec(compile(code, file, mode))  # Sensitive.\n\nexec(command)  # Sensitive.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/95\">CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval\n  Injection')</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807\">CVE-2017-9807</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802\">CVE-2017-9802</a> </li>\n</ul>\n<p>Some APIs enable the execution of dynamic code by providing it as strings at runtime. These APIs might be useful in some very specific\nmeta-programming use-cases. However most of the time their use is frowned upon because they also increase the risk of maliciously <a\nhref=\"https://owasp.org/www-community/attacks/Code_Injection\">Injected Code</a>. Such attacks can either run on the server or in the client (example:\nXSS attack) and have a huge impact on an application\u00e2\u20ac\u2122s security.</p>\n<p>This rule marks for review each occurrence of such dynamic code execution. This rule does not detect code injections. It only highlights the use of\nAPIs which should be used sparingly and very carefully.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed code may come from an untrusted source and hasn\u00e2\u20ac\u2122t been sanitized. </li>\n  <li> you really need to run code dynamically. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a <a href=\"https://en.wikipedia.org/wiki/Sandbox_(computer_security)\">sandboxed</a> environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: <a\nhref=\"https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager\">Security Managers</a> in java, <a\nhref=\"https://www.w3schools.com/tags/att_iframe_sandbox.asp\">iframes</a> and <a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">same-origin\npolicy</a> for javascript in a web browser).</p>\n<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>\n<p>Avoid using dynamic code APIs whenever possible. Hard-coded code is always safer.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport os\n\nvalue = input()\ncommand = 'os.system(\"%s\")' % value\n\ndef evaluate(command, file, mode):\n    eval(command)  # Sensitive.\n\neval(command)  # Sensitive. Dynamic code\n\ndef execute(code, file, mode):\n    exec(code)  # Sensitive.\n    exec(compile(code, file, mode))  # Sensitive.\n\nexec(command)  # Sensitive.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/95\">CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval\n  Injection')</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1311",
          "name": "Cyclomatic Complexity of classes should not be too high",
          "description": "<p>This rule is deprecated, and will eventually be removed.</p>\n<h2>Why is this an issue?</h2>\n<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to\nunderstand and therefore to maintain.</p>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule is deprecated, and will eventually be removed.</p>\n<h2>Why is this an issue?</h2>\n<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to\nunderstand and therefore to maintain.</p>\n\n"
        },
        {
          "id": "S1717",
          "name": "\"\\\" should only be used as an escape character outside of raw strings",
          "description": "<p>This rule is deprecated, and will eventually be removed.</p>\n<h2>Why is this an issue?</h2>\n<p>Typically, backslashes are seen only as part of escape sequences. Therefore, the use of a backslash outside of a raw string or escape sequence\nlooks suspiciously like a broken escape sequence.</p>\n<p>Characters recognized as escape-able are: <code>abfnrtvox\\'\"</code></p>\n<h3>Noncompliant code example</h3>\n<pre>\ns = \"Hello \\world.\"\nt = \"Nice to \\ meet you\"\nu = \"Let's have \\ lunch\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ns = \"Hello world.\"\nt = \"Nice to \\\\ meet you\"\nu = r\"Let's have \\ lunch\"  // raw string\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule is deprecated, and will eventually be removed.</p>\n<h2>Why is this an issue?</h2>\n<p>Typically, backslashes are seen only as part of escape sequences. Therefore, the use of a backslash outside of a raw string or escape sequence\nlooks suspiciously like a broken escape sequence.</p>\n<p>Characters recognized as escape-able are: <code>abfnrtvox\\'\"</code></p>\n<h3>Noncompliant code example</h3>\n<pre>\ns = \"Hello \\world.\"\nt = \"Nice to \\ meet you\"\nu = \"Let's have \\ lunch\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ns = \"Hello world.\"\nt = \"Nice to \\\\ meet you\"\nu = r\"Let's have \\ lunch\"  // raw string\n</pre>\n\n"
        },
        {
          "id": "S4721",
          "name": "Using shell interpreter when executing OS commands is security-sensitive",
          "description": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Arbitrary OS command injection vulnerabilities are more likely when a shell is spawned rather than a new process, indeed shell meta-chars can be\nused (when parameters are user-controlled for instance) to inject OS commands.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> OS command name or parameters are user-controlled. </li>\n</ul>\n<p>There is a risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Use functions that don\u00e2\u20ac\u2122t spawn a shell.</p>\n<h2>Sensitive Code Example</h2>\n<p>Python 3</p>\n<pre>\nsubprocess.run(cmd, shell=True)  # Sensitive\nsubprocess.Popen(cmd, shell=True)  # Sensitive\nsubprocess.call(cmd, shell=True)  # Sensitive\nsubprocess.check_call(cmd, shell=True)  # Sensitive\nsubprocess.check_output(cmd, shell=True)  # Sensitive\nos.system(cmd)  # Sensitive: a shell is always spawn\n</pre>\n<p>Python 2</p>\n<pre>\ncmd = \"when a string is passed through these function, a shell is spawn\"\n(_, child_stdout, _) = os.popen2(cmd)  # Sensitive\n(_, child_stdout, _) = os.popen3(cmd)  # Sensitive\n(_, child_stdout) = os.popen4(cmd)  # Sensitive\n\n\n(child_stdout, _) = popen2.popen2(cmd)  # Sensitive\n(child_stdout, _, _) = popen2.popen3(cmd)  # Sensitive\n(child_stdout, _) = popen2.popen4(cmd)  # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Python 3</p>\n<pre>\n# by default shell=False, a shell is not spawn\nsubprocess.run(cmd)  # Compliant\nsubprocess.Popen(cmd)  # Compliant\nsubprocess.call(cmd)  # Compliant\nsubprocess.check_call(cmd)  # Compliant\nsubprocess.check_output(cmd)  # Compliant\n\n# always in a subprocess:\nos.spawnl(mode, path, *cmd)  # Compliant\nos.spawnle(mode, path, *cmd, env)  # Compliant\nos.spawnlp(mode, file, *cmd)  # Compliant\nos.spawnlpe(mode, file, *cmd, env)  # Compliant\nos.spawnv(mode, path, cmd)  # Compliant\nos.spawnve(mode, path, cmd, env)  # Compliant\nos.spawnvp(mode, file, cmd)  # Compliant\nos.spawnvpe(mode, file, cmd, env)  # Compliant\n\n(child_stdout) = os.popen(cmd, mode, 1)  # Compliant\n(_, output) = subprocess.getstatusoutput(cmd)  # Compliant\nout = subprocess.getoutput(cmd)  # Compliant\nos.startfile(path)  # Compliant\nos.execl(path, *cmd)  # Compliant\nos.execle(path, *cmd, env)  # Compliant\nos.execlp(file, *cmd)  # Compliant\nos.execlpe(file, *cmd, env)  # Compliant\nos.execv(path, cmd)  # Compliant\nos.execve(path, cmd, env)  # Compliant\nos.execvp(file, cmd)  # Compliant\nos.execvpe(file, cmd, env)  # Compliant\n</pre>\n<p>Python 2</p>\n<pre>\ncmdsargs = (\"use\", \"a\", \"sequence\", \"to\", \"directly\", \"start\", \"a\", \"subprocess\")\n\n(_, child_stdout) = os.popen2(cmdsargs)  # Compliant\n(_, child_stdout, _) = os.popen3(cmdsargs)  # Compliant\n(_, child_stdout) = os.popen4(cmdsargs)  # Compliant\n\n(child_stdout, _) = popen2.popen2(cmdsargs)  # Compliant\n(child_stdout, _, _) = popen2.popen3(cmdsargs)  # Compliant\n(child_stdout, _) = popen2.popen4(cmdsargs)  # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/78\">CWE-78 - Improper Neutralization of Special Elements used in an OS Command</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Arbitrary OS command injection vulnerabilities are more likely when a shell is spawned rather than a new process, indeed shell meta-chars can be\nused (when parameters are user-controlled for instance) to inject OS commands.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> OS command name or parameters are user-controlled. </li>\n</ul>\n<p>There is a risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Use functions that don\u00e2\u20ac\u2122t spawn a shell.</p>\n<h2>Sensitive Code Example</h2>\n<p>Python 3</p>\n<pre>\nsubprocess.run(cmd, shell=True)  # Sensitive\nsubprocess.Popen(cmd, shell=True)  # Sensitive\nsubprocess.call(cmd, shell=True)  # Sensitive\nsubprocess.check_call(cmd, shell=True)  # Sensitive\nsubprocess.check_output(cmd, shell=True)  # Sensitive\nos.system(cmd)  # Sensitive: a shell is always spawn\n</pre>\n<p>Python 2</p>\n<pre>\ncmd = \"when a string is passed through these function, a shell is spawn\"\n(_, child_stdout, _) = os.popen2(cmd)  # Sensitive\n(_, child_stdout, _) = os.popen3(cmd)  # Sensitive\n(_, child_stdout) = os.popen4(cmd)  # Sensitive\n\n\n(child_stdout, _) = popen2.popen2(cmd)  # Sensitive\n(child_stdout, _, _) = popen2.popen3(cmd)  # Sensitive\n(child_stdout, _) = popen2.popen4(cmd)  # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Python 3</p>\n<pre>\n# by default shell=False, a shell is not spawn\nsubprocess.run(cmd)  # Compliant\nsubprocess.Popen(cmd)  # Compliant\nsubprocess.call(cmd)  # Compliant\nsubprocess.check_call(cmd)  # Compliant\nsubprocess.check_output(cmd)  # Compliant\n\n# always in a subprocess:\nos.spawnl(mode, path, *cmd)  # Compliant\nos.spawnle(mode, path, *cmd, env)  # Compliant\nos.spawnlp(mode, file, *cmd)  # Compliant\nos.spawnlpe(mode, file, *cmd, env)  # Compliant\nos.spawnv(mode, path, cmd)  # Compliant\nos.spawnve(mode, path, cmd, env)  # Compliant\nos.spawnvp(mode, file, cmd)  # Compliant\nos.spawnvpe(mode, file, cmd, env)  # Compliant\n\n(child_stdout) = os.popen(cmd, mode, 1)  # Compliant\n(_, output) = subprocess.getstatusoutput(cmd)  # Compliant\nout = subprocess.getoutput(cmd)  # Compliant\nos.startfile(path)  # Compliant\nos.execl(path, *cmd)  # Compliant\nos.execle(path, *cmd, env)  # Compliant\nos.execlp(file, *cmd)  # Compliant\nos.execlpe(file, *cmd, env)  # Compliant\nos.execv(path, cmd)  # Compliant\nos.execve(path, cmd, env)  # Compliant\nos.execvp(file, cmd)  # Compliant\nos.execvpe(file, cmd, env)  # Compliant\n</pre>\n<p>Python 2</p>\n<pre>\ncmdsargs = (\"use\", \"a\", \"sequence\", \"to\", \"directly\", \"start\", \"a\", \"subprocess\")\n\n(_, child_stdout) = os.popen2(cmdsargs)  # Compliant\n(_, child_stdout, _) = os.popen3(cmdsargs)  # Compliant\n(_, child_stdout) = os.popen4(cmdsargs)  # Compliant\n\n(child_stdout, _) = popen2.popen2(cmdsargs)  # Compliant\n(child_stdout, _, _) = popen2.popen3(cmdsargs)  # Compliant\n(child_stdout, _) = popen2.popen4(cmdsargs)  # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/78\">CWE-78 - Improper Neutralization of Special Elements used in an OS Command</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S3801",
          "name": "Functions should use \"return\" consistently",
          "description": "<h2>Why is this an issue?</h2>\n<p>Because it is dynamically typed, Python does not enforce a return type on a function. This means that different paths through a function can return\ndifferent types of values, which can be very confusing to the user and significantly harder to maintain.</p>\n<p>In particular, it is consequently also possible to mix empty <code>return</code> statements (implicitly returning <code>None</code>) with some\nreturning an expression. This rule verifies that all the <code>return</code> statements from a function are consistent.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef foo(a): # Noncompliant, function will return \"true\" or None\n  if a == 1:\n    return True\n  return\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef foo(a):\n  if a == 1:\n    return True\n  return False\n</pre>\n<p>or</p>\n<pre>\ndef foo(a):\n  if a == 1:\n    return True\n  return None\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Because it is dynamically typed, Python does not enforce a return type on a function. This means that different paths through a function can return\ndifferent types of values, which can be very confusing to the user and significantly harder to maintain.</p>\n<p>In particular, it is consequently also possible to mix empty <code>return</code> statements (implicitly returning <code>None</code>) with some\nreturning an expression. This rule verifies that all the <code>return</code> statements from a function are consistent.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef foo(a): # Noncompliant, function will return \"true\" or None\n  if a == 1:\n    return True\n  return\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef foo(a):\n  if a == 1:\n    return True\n  return False\n</pre>\n<p>or</p>\n<pre>\ndef foo(a):\n  if a == 1:\n    return True\n  return None\n</pre>\n\n"
        },
        {
          "id": "S2260",
          "name": "Python parser failure",
          "description": "<h2>Why is this an issue?</h2>\n<p>When the Python parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>When the Python parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.</p>\n\n"
        },
        {
          "id": "S1291",
          "name": "Track uses of \"NOSONAR\" comments",
          "description": "<h2>Why is this an issue?</h2>\n<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfor d in lib_dirs:\n    # NOSONAR: lib_dirs is undefined\n    pass\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfor d in lib_dirs:\n    # NOSONAR: lib_dirs is undefined\n    pass\n</pre>\n\n"
        },
        {
          "id": "S122",
          "name": "Statements should be on separate lines",
          "description": "<h2>Why is this an issue?</h2>\n<p>Putting multiple statements on a single line lowers the code readability and makes debugging the code more complex.</p>\n<pre>\nif (True): print(\"hello\") # Noncompliant\n</pre>\n<p>Write one statement per line to improve readability.</p>\n<pre>\nif (True):\n    print(\"hello\")\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Putting multiple statements on a single line lowers the code readability and makes debugging the code more complex.</p>\n<pre>\nif (True): print(\"hello\") # Noncompliant\n</pre>\n<p>Write one statement per line to improve readability.</p>\n<pre>\nif (True):\n    print(\"hello\")\n</pre>\n\n"
        },
        {
          "id": "S1142",
          "name": "Functions should not contain too many return statements",
          "description": "<h2>Why is this an issue?</h2>\n<p>Having too many return statements in a function increases the function\u00e2\u20ac\u2122s essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default threshold of 3:</p>\n<pre>\ndef fun():          # Noncompliant as there are 4 return statements\n  if condition1:\n    return True\n  elif condition2:\n    return False\n  else:\n    return True\n  return False\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Having too many return statements in a function increases the function\u00e2\u20ac\u2122s essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default threshold of 3:</p>\n<pre>\ndef fun():          # Noncompliant as there are 4 return statements\n  if condition1:\n    return True\n  elif condition2:\n    return False\n  else:\n    return True\n  return False\n</pre>\n\n"
        },
        {
          "id": "S103",
          "name": "Lines should not be too long",
          "description": "<h2>Why is this an issue?</h2>\n<p>Scrolling horizontally to see a full line of code lowers the code readability.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Scrolling horizontally to see a full line of code lowers the code readability.</p>\n\n"
        },
        {
          "id": "S1722",
          "name": "New-style classes should be used",
          "description": "<h2>Why is this an issue?</h2>\n<p>The new style of class creation, with the declaration of a parent class, created a unified object model in Python, so that the type of an\ninstantiated class is equal to its class. In Python 2.2-2.7, this is not the case for old-style classes. In Python 3+ all classes are new-style\nclasses. However, since the behavior can differ from 2.2+ to 3+, explicitly inheriting from <code>object</code> (if there is no better candidate) is\nrecommended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyClass():\n    pass\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass MyClass(object):\n    pass\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>The new style of class creation, with the declaration of a parent class, created a unified object model in Python, so that the type of an\ninstantiated class is equal to its class. In Python 2.2-2.7, this is not the case for old-style classes. In Python 3+ all classes are new-style\nclasses. However, since the behavior can differ from 2.2+ to 3+, explicitly inheriting from <code>object</code> (if there is no better candidate) is\nrecommended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyClass():\n    pass\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass MyClass(object):\n    pass\n</pre>\n\n"
        },
        {
          "id": "S1721",
          "name": "Parentheses should not be used after certain keywords",
          "description": "<p>This rule is deprecated; use {rule:python:S5905} instead.</p>\n<h2>Why is this an issue?</h2>\n<p>Parentheses are not required after the <code>assert</code>, <code>del</code>, <code>elif</code>, <code>except</code>, <code>for</code>,\n<code>if</code>, <code>not</code>, <code>raise</code>, <code>return</code>, <code>while</code>, and <code>yield</code> keywords. Similarly,\nparentheses are not required after <code>in</code> in a <code>for</code> loop. Using parentheses unnecessarily impairs readability, and therefore,\nthey should be omitted.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nx = 1\nwhile (x &lt; 10):\n    print \"x is now %d\" % (x)\n    x += 1\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nx = 1\nwhile x &lt; 10:\n    print \"x is now %d\" % (x)\n    x += 1\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<p>This rule is deprecated; use {rule:python:S5905} instead.</p>\n<h2>Why is this an issue?</h2>\n<p>Parentheses are not required after the <code>assert</code>, <code>del</code>, <code>elif</code>, <code>except</code>, <code>for</code>,\n<code>if</code>, <code>not</code>, <code>raise</code>, <code>return</code>, <code>while</code>, and <code>yield</code> keywords. Similarly,\nparentheses are not required after <code>in</code> in a <code>for</code> loop. Using parentheses unnecessarily impairs readability, and therefore,\nthey should be omitted.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nx = 1\nwhile (x &lt; 10):\n    print \"x is now %d\" % (x)\n    x += 1\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nx = 1\nwhile x &lt; 10:\n    print \"x is now %d\" % (x)\n    x += 1\n</pre>\n\n"
        },
        {
          "id": "S1131",
          "name": "Lines should not end with trailing whitespaces",
          "description": "<h2>Why is this an issue?</h2>\n<p>Trailing whitespaces bring no information, they may generate noise when comparing different versions of the same file, and they can create bugs\nwhen they appear after a <code>\\</code> marking a line continuation. They should be systematically removed.</p>\n<p>An automated code formatter allows to completely avoid this family of issues and should be used wherever possible.</p>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Trailing whitespaces bring no information, they may generate noise when comparing different versions of the same file, and they can create bugs\nwhen they appear after a <code>\\</code> marking a line continuation. They should be systematically removed.</p>\n<p>An automated code formatter allows to completely avoid this family of issues and should be used wherever possible.</p>\n\n"
        }
      ]
    },
    {
      "category": "Modularity",
      "rules": [
        {
          "id": "S2076",
          "name": "OS commands should not be vulnerable to command injection attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>OS command injections occur when applications build command lines from untrusted data before executing them with a system shell.<br> In that case,\nan attacker can tamper with the command line construction and force the execution of unexpected commands. This can lead to the compromise of the\nunderlying operating system.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting an OS command injection vulnerability will be able to execute arbitrary commands on the underlying operating system.</p>\n<p>The impact depends on the access control measures taken on the target system OS. In the worst-case scenario, the process runs with root privileges,\nand therefore any OS commands or programs may be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Denial of service and data leaks</h4>\n<p>In this scenario, the attack aims to disrupt the organization\u00e2\u20ac\u2122s activities and profit from data leaks.</p>\n<p>An attacker could, for example:</p>\n<ul>\n  <li> download the internal server\u00e2\u20ac\u2122s data, most likely to sell it </li>\n  <li> modify data, send malware </li>\n  <li> stop services or exhaust resources (with fork bombs for example) </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker also manages to elevate\ntheir privileges to an administrative level and attacks other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nby a combination of OS injections and <strong>misconfiguration</strong> of:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to command injections because it is using untrusted inputs to set up a new process. Therefore an attacker can\nexecute an arbitrary program that is installed on the system.</p>\n<p>Especially, in this example, if the <strong>host</strong> request parameter contains system shell control characters, the expected\n<code>ping</code> command behavior will be changed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, request\nimport os\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef example():\n    host = request.args.get(\"host\", \"www.google.com\")\n\n    status = os.system(\"ping -c 1 %s\" % host) # Noncompliant\n    return str(status == 0)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom flask import Flask, request\nimport os\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef example():\n    host = request.args.get(\"host\", \"www.google.com\")\n\n    status = subprocess.run([\"ping\", \"-c\", \"1\", \"--\", host]).returncode\n    return str(status == 0)\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to execute operating system commands generally creates more problems than it solves.</p>\n<p>Anything that can be done via operating system commands can usually be done via a language\u00e2\u20ac\u2122s native SDK.<br> Therefore, our first suggestion is to\navoid using OS commands in the first place.<br> However, if the application requires running OS commands with user-controlled data, here are some\nsecurity suggestions.</p>\n<h4>Pre-Approved commands</h4>\n<p>If the application aims to execute only a small number of OS commands (for example, <code>ls</code>, <code>pwd</code>, and <code>grep</code>), the\ncleanest way to avoid this problem is to validate the input before using it in an OS command.</p>\n<p>Create a list of authorized and secure commands that you want the application to be able to execute. Use absolute paths to avoid any ambiguity.<br>\nIf a user input does not match an entry in this list, it should be rejected because it is considered unsafe.</p>\n<p>Depending on the number of commands you want the application to support, the list can be either a regex string or any array type. If you use\nregexes, choose simple regexes to avoid ReDOS attacks. For example, you can accept only a specific set of executables, by using\n<code>^/bin/(ls|pwd|grep)$</code>.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h4>Neutralize special characters</h4>\n<p>If the application is to execute complex commands that cannot be controlled thanks to pre-approved lists, the cleanest approach is to use special\nsanitization components, such as <code>subprocess</code>.</p>\n<p>The library helps you to get rid of common dangerous characters, such as:</p>\n<ul>\n  <li> <code>&amp;</code> </li>\n  <li> <code>|</code> </li>\n  <li> <code>;</code> </li>\n  <li> <code>$</code> </li>\n  <li> <code>&gt;</code> </li>\n  <li> <code>&lt;</code> </li>\n  <li> <code>`</code> </li>\n  <li> <code>\\</code> </li>\n  <li> <code>!</code> </li>\n</ul>\n<p>If user input is to be included in the arguments of a command, the application must ensure that dangerous options or argument delimiters are\nneutralized.<br> Argument delimiters count <code>'</code>, <code>-</code> and spaces.</p>\n<p>For example, the <code>find</code> command from UNIX supports the dangerous argument <code>-exec</code>.<br> In this case, option processing can be\nterminated with a string containing <code>--</code> or with special options. For example, <code>git</code> supports <code>--end-of-options</code> <a\nhref=\"https://github.blog/2019-11-03-highlights-from-git-2-24/#tidbits\">since its version 2.24</a>.</p>\n<p>In the example compliant code, using the <code>subprocess.run</code> function helps to escape the passed arguments. It accepts a list of command\narguments that will be properly escaped and concatenated to form the command line to execute.</p>\n<h4>Disable shell integration</h4>\n<p>In most cases, command execution libraries propose two ways to execute external program: with or without shell integration.</p>\n<p>When shell integration is allowed, an attacker with control over the command arguments can simply execute additional external programs using system\nshell features. For example, on Unix, command pipelining (<code>|</code>) or string interpolation (<code>$()</code>, <code>&lt;()</code>, etc.) can be\nused to break out of a command call.</p>\n<p>Therefore, it is generally preferable to disable shell integration.</p>\n<p>In the example compliant code, using the <code>subprocess</code> module\u00e2\u20ac\u2122s functions is preferred over older alternative as the <code>os</code> or\n<code>popen</code> modules. Indeed, <code>subprocess</code>, while still a dangerous library, disables the system shell\u00e2\u20ac\u2122s syntax interpretation by\ndefault.</p>\n<h2>How to fix it in Paramiko</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to command injections because it is using untrusted inputs to set up a new process. Therefore an attacker can\nexecute an arbitrary program that is installed on the system.</p>\n<p>In the following example, if the <strong>host</strong> request parameter contains system shell control characters, the expected <code>ping</code>\ncommand behavior will be changed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, request\nfrom paramiko.client import SSHClient\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef example():\n    client = SSHClient()\n    client.connect(\"example.org\", username=USER, password=PASS)\n\n    client.exec_command(request.args.get(\"cmd\")) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import Flask, request\nfrom paramiko.client import SSHClient\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef example():\n    client = SSHClient()\n    client.connect(\"example.org\", username=USER, password=PASS)\n\n    DIAG_CMD=[\"/bin/ping -c 1 -- %s\", \"/bin/host -- %s\"]\n    cmd = DIAG_CMD[int(request.args.get('cmdId'))]\n    cmd = cmd % shlex.quote(request.args.get('host'))\n    client.exec_command(cmd)\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to execute operating system commands generally creates more problems than it solves.</p>\n<p>Anything that can be done via operating system commands can usually be done via a language\u00e2\u20ac\u2122s native SDK.<br> Therefore, our first suggestion is to\navoid using OS commands in the first place.<br> However, if the application requires running OS commands with user-controlled data, here are some\nsecurity suggestions.</p>\n<h4>Pre-Approved commands</h4>\n<p>If the application aims to execute only a small number of OS commands (for example, <code>ls</code>, <code>pwd</code>, and <code>grep</code>), the\ncleanest way to avoid this problem is to validate the input before using it in an OS command.</p>\n<p>Create a list of authorized and secure commands that you want the application to be able to execute. Use absolute paths to avoid any ambiguity.<br>\nIf a user input does not match an entry in this list, it should be rejected because it is considered unsafe.</p>\n<p>Depending on the number of commands you want the application to support, the list can be either a regex string or any array type. If you use\nregexes, choose simple regexes to avoid ReDOS attacks. For example, you can accept only a specific set of executables, by using\n<code>^/bin/(ls|pwd|grep)$</code>.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h4>Neutralize special characters</h4>\n<p>If the application is to execute complex commands that cannot be controlled thanks to pre-approved lists, the cleanest approach is to use special\nsanitization components, such as <code>shlex</code>.</p>\n<p>The library helps you to get rid of common dangerous characters, such as:</p>\n<ul>\n  <li> <code>&amp;</code> </li>\n  <li> <code>|</code> </li>\n  <li> <code>;</code> </li>\n  <li> <code>$</code> </li>\n  <li> <code>&gt;</code> </li>\n  <li> <code>&lt;</code> </li>\n  <li> <code>`</code> </li>\n  <li> <code>\\</code> </li>\n  <li> <code>!</code> </li>\n</ul>\n<p>If user input is to be included in the arguments of a command, the application must ensure that dangerous options or argument delimiters are\nneutralized.<br> Argument delimiters count <code>'</code>, <code>-</code> and spaces.</p>\n<p>For example, the <code>find</code> command from UNIX supports the dangerous argument <code>-exec</code>.<br> In this case, option processing can be\nterminated with a string containing <code>--</code> or with special options. For example, <code>git</code> supports <code>--end-of-options</code> <a\nhref=\"https://github.blog/2019-11-03-highlights-from-git-2-24/#tidbits\">since its version 2.24</a>.</p>\n<p>In the example compliant code, the <code>quote</code> function from the <code>shlex</code> is used to encode the user-controlled command argument.\nIt escapes argument delimiters and shell control characters.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\">OWASP, OS Command Injection Defense\n  Cheaty Sheet</a> </li>\n  <li> <a href=\"https://gtfobins.github.io/#+shell\">GTFOBins, list of Unix binaries that can be used to bypass local security restrictions</a> </li>\n  <li> <a href=\"https://lolbas-project.github.io/#\">LOLBAS, list of Windows binaries that can be used to bypass local security restrictions</a> </li>\n  <li> <a href=\"https://peps.python.org/pep-0324/\">PEP 324 \u00e2\u20ac\u201c subprocess - New process module</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/78\">CWE-78 - Improper Neutralization of Special Elements used in an OS Command</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222604\">Application Security and\n  Development: V-222604</a> - The application must protect from command injection. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>OS command injections occur when applications build command lines from untrusted data before executing them with a system shell.<br> In that case,\nan attacker can tamper with the command line construction and force the execution of unexpected commands. This can lead to the compromise of the\nunderlying operating system.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting an OS command injection vulnerability will be able to execute arbitrary commands on the underlying operating system.</p>\n<p>The impact depends on the access control measures taken on the target system OS. In the worst-case scenario, the process runs with root privileges,\nand therefore any OS commands or programs may be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Denial of service and data leaks</h4>\n<p>In this scenario, the attack aims to disrupt the organization\u00e2\u20ac\u2122s activities and profit from data leaks.</p>\n<p>An attacker could, for example:</p>\n<ul>\n  <li> download the internal server\u00e2\u20ac\u2122s data, most likely to sell it </li>\n  <li> modify data, send malware </li>\n  <li> stop services or exhaust resources (with fork bombs for example) </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker also manages to elevate\ntheir privileges to an administrative level and attacks other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nby a combination of OS injections and <strong>misconfiguration</strong> of:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to command injections because it is using untrusted inputs to set up a new process. Therefore an attacker can\nexecute an arbitrary program that is installed on the system.</p>\n<p>Especially, in this example, if the <strong>host</strong> request parameter contains system shell control characters, the expected\n<code>ping</code> command behavior will be changed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, request\nimport os\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef example():\n    host = request.args.get(\"host\", \"www.google.com\")\n\n    status = os.system(\"ping -c 1 %s\" % host) # Noncompliant\n    return str(status == 0)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom flask import Flask, request\nimport os\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef example():\n    host = request.args.get(\"host\", \"www.google.com\")\n\n    status = subprocess.run([\"ping\", \"-c\", \"1\", \"--\", host]).returncode\n    return str(status == 0)\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to execute operating system commands generally creates more problems than it solves.</p>\n<p>Anything that can be done via operating system commands can usually be done via a language\u00e2\u20ac\u2122s native SDK.<br> Therefore, our first suggestion is to\navoid using OS commands in the first place.<br> However, if the application requires running OS commands with user-controlled data, here are some\nsecurity suggestions.</p>\n<h4>Pre-Approved commands</h4>\n<p>If the application aims to execute only a small number of OS commands (for example, <code>ls</code>, <code>pwd</code>, and <code>grep</code>), the\ncleanest way to avoid this problem is to validate the input before using it in an OS command.</p>\n<p>Create a list of authorized and secure commands that you want the application to be able to execute. Use absolute paths to avoid any ambiguity.<br>\nIf a user input does not match an entry in this list, it should be rejected because it is considered unsafe.</p>\n<p>Depending on the number of commands you want the application to support, the list can be either a regex string or any array type. If you use\nregexes, choose simple regexes to avoid ReDOS attacks. For example, you can accept only a specific set of executables, by using\n<code>^/bin/(ls|pwd|grep)$</code>.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h4>Neutralize special characters</h4>\n<p>If the application is to execute complex commands that cannot be controlled thanks to pre-approved lists, the cleanest approach is to use special\nsanitization components, such as <code>subprocess</code>.</p>\n<p>The library helps you to get rid of common dangerous characters, such as:</p>\n<ul>\n  <li> <code>&amp;</code> </li>\n  <li> <code>|</code> </li>\n  <li> <code>;</code> </li>\n  <li> <code>$</code> </li>\n  <li> <code>&gt;</code> </li>\n  <li> <code>&lt;</code> </li>\n  <li> <code>`</code> </li>\n  <li> <code>\\</code> </li>\n  <li> <code>!</code> </li>\n</ul>\n<p>If user input is to be included in the arguments of a command, the application must ensure that dangerous options or argument delimiters are\nneutralized.<br> Argument delimiters count <code>'</code>, <code>-</code> and spaces.</p>\n<p>For example, the <code>find</code> command from UNIX supports the dangerous argument <code>-exec</code>.<br> In this case, option processing can be\nterminated with a string containing <code>--</code> or with special options. For example, <code>git</code> supports <code>--end-of-options</code> <a\nhref=\"https://github.blog/2019-11-03-highlights-from-git-2-24/#tidbits\">since its version 2.24</a>.</p>\n<p>In the example compliant code, using the <code>subprocess.run</code> function helps to escape the passed arguments. It accepts a list of command\narguments that will be properly escaped and concatenated to form the command line to execute.</p>\n<h4>Disable shell integration</h4>\n<p>In most cases, command execution libraries propose two ways to execute external program: with or without shell integration.</p>\n<p>When shell integration is allowed, an attacker with control over the command arguments can simply execute additional external programs using system\nshell features. For example, on Unix, command pipelining (<code>|</code>) or string interpolation (<code>$()</code>, <code>&lt;()</code>, etc.) can be\nused to break out of a command call.</p>\n<p>Therefore, it is generally preferable to disable shell integration.</p>\n<p>In the example compliant code, using the <code>subprocess</code> module\u00e2\u20ac\u2122s functions is preferred over older alternative as the <code>os</code> or\n<code>popen</code> modules. Indeed, <code>subprocess</code>, while still a dangerous library, disables the system shell\u00e2\u20ac\u2122s syntax interpretation by\ndefault.</p>\n<h2>How to fix it in Paramiko</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to command injections because it is using untrusted inputs to set up a new process. Therefore an attacker can\nexecute an arbitrary program that is installed on the system.</p>\n<p>In the following example, if the <strong>host</strong> request parameter contains system shell control characters, the expected <code>ping</code>\ncommand behavior will be changed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, request\nfrom paramiko.client import SSHClient\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef example():\n    client = SSHClient()\n    client.connect(\"example.org\", username=USER, password=PASS)\n\n    client.exec_command(request.args.get(\"cmd\")) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import Flask, request\nfrom paramiko.client import SSHClient\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef example():\n    client = SSHClient()\n    client.connect(\"example.org\", username=USER, password=PASS)\n\n    DIAG_CMD=[\"/bin/ping -c 1 -- %s\", \"/bin/host -- %s\"]\n    cmd = DIAG_CMD[int(request.args.get('cmdId'))]\n    cmd = cmd % shlex.quote(request.args.get('host'))\n    client.exec_command(cmd)\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to execute operating system commands generally creates more problems than it solves.</p>\n<p>Anything that can be done via operating system commands can usually be done via a language\u00e2\u20ac\u2122s native SDK.<br> Therefore, our first suggestion is to\navoid using OS commands in the first place.<br> However, if the application requires running OS commands with user-controlled data, here are some\nsecurity suggestions.</p>\n<h4>Pre-Approved commands</h4>\n<p>If the application aims to execute only a small number of OS commands (for example, <code>ls</code>, <code>pwd</code>, and <code>grep</code>), the\ncleanest way to avoid this problem is to validate the input before using it in an OS command.</p>\n<p>Create a list of authorized and secure commands that you want the application to be able to execute. Use absolute paths to avoid any ambiguity.<br>\nIf a user input does not match an entry in this list, it should be rejected because it is considered unsafe.</p>\n<p>Depending on the number of commands you want the application to support, the list can be either a regex string or any array type. If you use\nregexes, choose simple regexes to avoid ReDOS attacks. For example, you can accept only a specific set of executables, by using\n<code>^/bin/(ls|pwd|grep)$</code>.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h4>Neutralize special characters</h4>\n<p>If the application is to execute complex commands that cannot be controlled thanks to pre-approved lists, the cleanest approach is to use special\nsanitization components, such as <code>shlex</code>.</p>\n<p>The library helps you to get rid of common dangerous characters, such as:</p>\n<ul>\n  <li> <code>&amp;</code> </li>\n  <li> <code>|</code> </li>\n  <li> <code>;</code> </li>\n  <li> <code>$</code> </li>\n  <li> <code>&gt;</code> </li>\n  <li> <code>&lt;</code> </li>\n  <li> <code>`</code> </li>\n  <li> <code>\\</code> </li>\n  <li> <code>!</code> </li>\n</ul>\n<p>If user input is to be included in the arguments of a command, the application must ensure that dangerous options or argument delimiters are\nneutralized.<br> Argument delimiters count <code>'</code>, <code>-</code> and spaces.</p>\n<p>For example, the <code>find</code> command from UNIX supports the dangerous argument <code>-exec</code>.<br> In this case, option processing can be\nterminated with a string containing <code>--</code> or with special options. For example, <code>git</code> supports <code>--end-of-options</code> <a\nhref=\"https://github.blog/2019-11-03-highlights-from-git-2-24/#tidbits\">since its version 2.24</a>.</p>\n<p>In the example compliant code, the <code>quote</code> function from the <code>shlex</code> is used to encode the user-controlled command argument.\nIt escapes argument delimiters and shell control characters.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\">OWASP, OS Command Injection Defense\n  Cheaty Sheet</a> </li>\n  <li> <a href=\"https://gtfobins.github.io/#+shell\">GTFOBins, list of Unix binaries that can be used to bypass local security restrictions</a> </li>\n  <li> <a href=\"https://lolbas-project.github.io/#\">LOLBAS, list of Windows binaries that can be used to bypass local security restrictions</a> </li>\n  <li> <a href=\"https://peps.python.org/pep-0324/\">PEP 324 \u00e2\u20ac\u201c subprocess - New process module</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/78\">CWE-78 - Improper Neutralization of Special Elements used in an OS Command</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222604\">Application Security and\n  Development: V-222604</a> - The application must protect from command injection. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S5807",
          "name": "Only defined names should be listed in \"__all__\"",
          "description": "<p>This rule raises an issue when a name listed in the <code>__all__</code> property of a module has not been defined.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>__all__</code> property of a module is used to define the list of names that will be imported when performing a wildcard import of this\nmodule, i.e. when <code>from mymodule import *</code> is used.</p>\n<p>In the following example:</p>\n<pre>\n# mymodule.py\n\ndef foo(): ...\ndef bar(): ...\n\n__all__ = [\"foo\"]\n</pre>\n<p>Executing <code>from mymodule import *</code> from a different module will only import <code>foo</code>.</p>\n<p>This list can only reference defined names, otherwise an <code>AttributeError</code> will be raised when the module is imported.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom mymodule import my_func\n\n__all__ = [\"unknown_func\"]  # Noncompliant: \"unknown_func\" is undefined\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nfrom mymodule import my_func\n\n__all__ = [\"my_func\"]\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/modules.html#importing-from-a-package\">Python documentation - importing * from a package</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when a name listed in the <code>__all__</code> property of a module has not been defined.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>__all__</code> property of a module is used to define the list of names that will be imported when performing a wildcard import of this\nmodule, i.e. when <code>from mymodule import *</code> is used.</p>\n<p>In the following example:</p>\n<pre>\n# mymodule.py\n\ndef foo(): ...\ndef bar(): ...\n\n__all__ = [\"foo\"]\n</pre>\n<p>Executing <code>from mymodule import *</code> from a different module will only import <code>foo</code>.</p>\n<p>This list can only reference defined names, otherwise an <code>AttributeError</code> will be raised when the module is imported.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom mymodule import my_func\n\n__all__ = [\"unknown_func\"]  # Noncompliant: \"unknown_func\" is undefined\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nfrom mymodule import my_func\n\n__all__ = [\"my_func\"]\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/modules.html#importing-from-a-package\">Python documentation - importing * from a package</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5722",
          "name": "Special methods should have an expected number of parameters",
          "description": "<p>This rule raises an issue when a special method is defined with an unexpected number of parameters.</p>\n<h2>Why is this an issue?</h2>\n<p>Python allows developers to customize how code is interpreted by defining special methods (also called magic methods). For example, it is possible\nto override how the multiplication operator (<code>a * b</code>) will apply to instances of a class by defining in this class the <code>__mul__</code>\nand <code>__rmul__</code> methods. Whenever a multiplication operation is performed with this class, the Python interpreter will call one of these\nmethods instead of performing the default multiplication.</p>\n<p>Each special method expects a specific number of parameters. The Python interpreter will call these methods with those parameters. Calls to a\nspecial method will throw a <code>TypeError</code> if it is defined with an incorrect number of parameters.</p>\n<h2>How to fix it</h2>\n<p>Make sure to use the same signature defined in the Python documentation for each special methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass A:\n    def __mul__(self, other, unexpected):  # Noncompliant: too many parameters\n        return 42\n\n    def __add__(self):  # Noncompliant: missing one parameter\n        return 42\n\nA() * 3  # TypeError: __mul__() missing 1 required positional argument: 'unexpected'\nA() + 3  # TypeError: __add__() takes 1 positional argument but 2 were given\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass A:\n    def __mul__(self, other):\n        return 42\n\n    def __add__(self, other):\n        return 42\n\nA() * 3\nA() + 3\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#special-method-names\">Special method names</a> - Python special methods </li>\n  <li> <a href=\"https://docs.python.org/3/library/copy.html\">Copy module</a> - Documentation of <code>__copy__</code> and <code>__deepcopy__</code>\n  </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when a special method is defined with an unexpected number of parameters.</p>\n<h2>Why is this an issue?</h2>\n<p>Python allows developers to customize how code is interpreted by defining special methods (also called magic methods). For example, it is possible\nto override how the multiplication operator (<code>a * b</code>) will apply to instances of a class by defining in this class the <code>__mul__</code>\nand <code>__rmul__</code> methods. Whenever a multiplication operation is performed with this class, the Python interpreter will call one of these\nmethods instead of performing the default multiplication.</p>\n<p>Each special method expects a specific number of parameters. The Python interpreter will call these methods with those parameters. Calls to a\nspecial method will throw a <code>TypeError</code> if it is defined with an incorrect number of parameters.</p>\n<h2>How to fix it</h2>\n<p>Make sure to use the same signature defined in the Python documentation for each special methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass A:\n    def __mul__(self, other, unexpected):  # Noncompliant: too many parameters\n        return 42\n\n    def __add__(self):  # Noncompliant: missing one parameter\n        return 42\n\nA() * 3  # TypeError: __mul__() missing 1 required positional argument: 'unexpected'\nA() + 3  # TypeError: __add__() takes 1 positional argument but 2 were given\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass A:\n    def __mul__(self, other):\n        return 42\n\n    def __add__(self, other):\n        return 42\n\nA() * 3\nA() + 3\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#special-method-names\">Special method names</a> - Python special methods </li>\n  <li> <a href=\"https://docs.python.org/3/library/copy.html\">Copy module</a> - Documentation of <code>__copy__</code> and <code>__deepcopy__</code>\n  </li>\n</ul>\n\n"
        },
        {
          "id": "S2823",
          "name": "Only strings should be listed in \"__all__\"",
          "description": "<p>This rule raises an issue when the <code>__all__</code> property of a module contains objects that aren\u00e2\u20ac\u2122t strings.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>__all__</code> property of a module is used to define the list of names that will be imported when performing a wildcard import of this\nmodule, i.e. when <code>from mymodule import *</code> is used.</p>\n<p>In the following example:</p>\n<pre>\n# mymodule.py\ndef foo(): ...\ndef bar(): ...\n__all__ = [\"foo\"]\n</pre>\n<p>Executing <code>from mymodule import *</code> from a different module will only import <code>foo</code>.</p>\n<p>This list can only contain strings. If something other than a string is listed, a <code>TypeError</code> will be raised when trying to perform a\nwildcard import of the module.</p>\n<p>To fix this issue, make sure that all properties listed in <code>__all__</code> are strings.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    pass\n\n__all__ = [\n    MyClass  # Noncompliant: wildcard import will raise a TypeError\n]\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    pass\n\n__all__ = [\n    \"MyClass\"\n]\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/modules.html#importing-from-a-package\">Python documentation - Importing * From a Package</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when the <code>__all__</code> property of a module contains objects that aren\u00e2\u20ac\u2122t strings.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>__all__</code> property of a module is used to define the list of names that will be imported when performing a wildcard import of this\nmodule, i.e. when <code>from mymodule import *</code> is used.</p>\n<p>In the following example:</p>\n<pre>\n# mymodule.py\ndef foo(): ...\ndef bar(): ...\n__all__ = [\"foo\"]\n</pre>\n<p>Executing <code>from mymodule import *</code> from a different module will only import <code>foo</code>.</p>\n<p>This list can only contain strings. If something other than a string is listed, a <code>TypeError</code> will be raised when trying to perform a\nwildcard import of the module.</p>\n<p>To fix this issue, make sure that all properties listed in <code>__all__</code> are strings.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    pass\n\n__all__ = [\n    MyClass  # Noncompliant: wildcard import will raise a TypeError\n]\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    pass\n\n__all__ = [\n    \"MyClass\"\n]\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/modules.html#importing-from-a-package\">Python documentation - Importing * From a Package</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5547",
          "name": "Cipher algorithms should be robust",
          "description": "<p>This vulnerability makes it possible that the cleartext of the encrypted message might be recoverable without prior knowledge of the key.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communication in various domains. They are used for\nseveral important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<h3>What is the potential impact?</h3>\n<p>The cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Theft of sensitive data</h4>\n<p>The encrypted message might contain data that is considered sensitive and should not be known to third parties.</p>\n<p>By using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.</p>\n<h2>How to fix it in Cryptodome</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import DES # pycryptodome\nfrom Cryptodome.Cipher import DES # pycryptodomex\n\ncipher = DES.new(key, DES.MODE_OFB) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import AES # pycryptodome\nfrom Cryptodome.Cipher import AES # pycryptodomex\n\ncipher = AES.new(key, AES.MODE_CCM)\n</pre>\n<h3>How does this work?</h3>\n<h4>Use a secure algorithm</h4>\n<p>It is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).</p>\n<p>For block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.</p>\n<h2>How to fix it in pyca</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms\nfrom cryptography.hazmat.backends import default_backend\n\ncipher = Cipher(algorithms.TripleDES(key), mode=None, backend=default_backend()) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\n\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n</pre>\n<h3>How does this work?</h3>\n<h4>Use a secure algorithm</h4>\n<p>It is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).</p>\n<p>For block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.</p>\n<h2>How to fix it in PyCrypto</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import DES\n\ncipher = DES.new(key) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>PyCrypto is deprecated, thus it is recommended to use another library like pyca.</p>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\n\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n</pre>\n<h3>How does this work?</h3>\n<h4>Use a secure algorithm</h4>\n<p>It is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).</p>\n<p>For block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.</p>\n<h2>How to fix it in pyDes</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport pyDes\n\ncipher = pyDes.des(key) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>Since pyDes only provides DES, it is recommended to use another library like pyca.</p>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\n\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n</pre>\n<h3>How does this work?</h3>\n<h4>Use a secure algorithm</h4>\n<p>It is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).</p>\n<p>For block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.</p>\n<h2>How to fix it in ssl</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"noncompliant\">\nimport ssl\n\nciphers = 'RC4-SHA:RC4-MD5'\nctx = ssl.create_default_context()\nctx.set_ciphers(ciphers)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"compliant\">\nimport ssl\n\nctx = ssl.create_default_context()\n</pre>\n<h3>How does this work?</h3>\n<p>It is recommended to not override the ciphers but instead, use the secure default ciphers of the module, as they might change over time.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222396\">Application Security and\n  Development: V-222396</a> - The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions. </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This vulnerability makes it possible that the cleartext of the encrypted message might be recoverable without prior knowledge of the key.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communication in various domains. They are used for\nseveral important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<h3>What is the potential impact?</h3>\n<p>The cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Theft of sensitive data</h4>\n<p>The encrypted message might contain data that is considered sensitive and should not be known to third parties.</p>\n<p>By using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.</p>\n<h2>How to fix it in Cryptodome</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import DES # pycryptodome\nfrom Cryptodome.Cipher import DES # pycryptodomex\n\ncipher = DES.new(key, DES.MODE_OFB) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom Crypto.Cipher import AES # pycryptodome\nfrom Cryptodome.Cipher import AES # pycryptodomex\n\ncipher = AES.new(key, AES.MODE_CCM)\n</pre>\n<h3>How does this work?</h3>\n<h4>Use a secure algorithm</h4>\n<p>It is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).</p>\n<p>For block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.</p>\n<h2>How to fix it in pyca</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms\nfrom cryptography.hazmat.backends import default_backend\n\ncipher = Cipher(algorithms.TripleDES(key), mode=None, backend=default_backend()) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\n\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n</pre>\n<h3>How does this work?</h3>\n<h4>Use a secure algorithm</h4>\n<p>It is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).</p>\n<p>For block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.</p>\n<h2>How to fix it in PyCrypto</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nfrom Crypto.Cipher import DES\n\ncipher = DES.new(key) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>PyCrypto is deprecated, thus it is recommended to use another library like pyca.</p>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\n\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n</pre>\n<h3>How does this work?</h3>\n<h4>Use a secure algorithm</h4>\n<p>It is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).</p>\n<p>For block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.</p>\n<h2>How to fix it in pyDes</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport pyDes\n\ncipher = pyDes.des(key) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>Since pyDes only provides DES, it is recommended to use another library like pyca.</p>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\n\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n</pre>\n<h3>How does this work?</h3>\n<h4>Use a secure algorithm</h4>\n<p>It is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).</p>\n<p>For block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.</p>\n<h2>How to fix it in ssl</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"noncompliant\">\nimport ssl\n\nciphers = 'RC4-SHA:RC4-MD5'\nctx = ssl.create_default_context()\nctx.set_ciphers(ciphers)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"compliant\">\nimport ssl\n\nctx = ssl.create_default_context()\n</pre>\n<h3>How does this work?</h3>\n<p>It is recommended to not override the ciphers but instead, use the secure default ciphers of the module, as they might change over time.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222396\">Application Security and\n  Development: V-222396</a> - The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions. </li>\n</ul>\n\n"
        },
        {
          "id": "S5443",
          "name": "Using publicly writable directories is security-sensitive",
          "description": "<p>Operating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n<code>/tmp</code> in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2012-2451\">CVE-2012-2451</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-1838\">CVE-2015-1838</a> </li>\n</ul>\n<p>This rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like <code>/tmp</code> (see examples bellow). It\nalso detects access to environment variables that point to publicly writable directories, e.g., <code>TMP</code> and <code>TMPDIR</code>.</p>\n<ul>\n  <li> <code>/tmp</code> </li>\n  <li> <code>/var/tmp</code> </li>\n  <li> <code>/usr/tmp</code> </li>\n  <li> <code>/dev/shm</code> </li>\n  <li> <code>/dev/mqueue</code> </li>\n  <li> <code>/run/lock</code> </li>\n  <li> <code>/var/run/lock</code> </li>\n  <li> <code>/Library/Caches</code> </li>\n  <li> <code>/Users/Shared</code> </li>\n  <li> <code>/private/tmp</code> </li>\n  <li> <code>/private/var/tmp</code> </li>\n  <li> <code>\\Windows\\Temp</code> </li>\n  <li> <code>\\Temp</code> </li>\n  <li> <code>\\TMP</code> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Files are read from or written into a publicly writable folder </li>\n  <li> The application creates files with predictable names into a publicly writable folder </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a dedicated sub-folder with tightly controlled permissions </li>\n  <li> Use secure-by-design APIs to create temporary files. Such API will make sure:\n    <ul>\n      <li> The generated filename is unpredictable </li>\n      <li> The file is readable and writable only by the creating user ID </li>\n      <li> The file descriptor is not inherited by child processes </li>\n      <li> The file will be destroyed as soon as it is closed </li>\n    </ul>  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nfile = open(\"/tmp/temporary_file\",\"w+\") # Sensitive\n</pre>\n<pre>\ntmp_dir = os.environ.get('TMPDIR') # Sensitive\nfile = open(tmp_dir+\"/temporary_file\",\"w+\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport tempfile\n\nfile = tempfile.TemporaryFile(dir=\"/tmp/my_subdirectory\", mode='\"w+\") # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/377\">CWE-377 - Insecure Temporary File</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/379\">CWE-379 - Creation of Temporary File in Directory with Incorrect Permissions</a>\n  </li>\n  <li> <a href=\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\">OWASP, Insecure Temporary File</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/tempfile.html\">Python tempfile module</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>Operating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n<code>/tmp</code> in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2012-2451\">CVE-2012-2451</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-1838\">CVE-2015-1838</a> </li>\n</ul>\n<p>This rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like <code>/tmp</code> (see examples bellow). It\nalso detects access to environment variables that point to publicly writable directories, e.g., <code>TMP</code> and <code>TMPDIR</code>.</p>\n<ul>\n  <li> <code>/tmp</code> </li>\n  <li> <code>/var/tmp</code> </li>\n  <li> <code>/usr/tmp</code> </li>\n  <li> <code>/dev/shm</code> </li>\n  <li> <code>/dev/mqueue</code> </li>\n  <li> <code>/run/lock</code> </li>\n  <li> <code>/var/run/lock</code> </li>\n  <li> <code>/Library/Caches</code> </li>\n  <li> <code>/Users/Shared</code> </li>\n  <li> <code>/private/tmp</code> </li>\n  <li> <code>/private/var/tmp</code> </li>\n  <li> <code>\\Windows\\Temp</code> </li>\n  <li> <code>\\Temp</code> </li>\n  <li> <code>\\TMP</code> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Files are read from or written into a publicly writable folder </li>\n  <li> The application creates files with predictable names into a publicly writable folder </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a dedicated sub-folder with tightly controlled permissions </li>\n  <li> Use secure-by-design APIs to create temporary files. Such API will make sure:\n    <ul>\n      <li> The generated filename is unpredictable </li>\n      <li> The file is readable and writable only by the creating user ID </li>\n      <li> The file descriptor is not inherited by child processes </li>\n      <li> The file will be destroyed as soon as it is closed </li>\n    </ul>  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nfile = open(\"/tmp/temporary_file\",\"w+\") # Sensitive\n</pre>\n<pre>\ntmp_dir = os.environ.get('TMPDIR') # Sensitive\nfile = open(tmp_dir+\"/temporary_file\",\"w+\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport tempfile\n\nfile = tempfile.TemporaryFile(dir=\"/tmp/my_subdirectory\", mode='\"w+\") # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/377\">CWE-377 - Insecure Temporary File</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/379\">CWE-379 - Creation of Temporary File in Directory with Incorrect Permissions</a>\n  </li>\n  <li> <a href=\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\">OWASP, Insecure Temporary File</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/tempfile.html\">Python tempfile module</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>\n\n"
        },
        {
          "id": "S5042",
          "name": "Expanding archive files without controlling resource consumption is security-sensitive",
          "description": "<p>Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme <a href=\"https://en.wikipedia.org/wiki/Data_compression_ratio\">compression ratio</a>, attackers will\ncompress irrelevant data (eg: a long string of repeated bytes).</p>\n<h2>Ask Yourself Whether</h2>\n<p>Archives to expand are untrusted and:</p>\n<ul>\n  <li> There is no validation of the number of entries in the archive. </li>\n  <li> There is no validation of the total size of the uncompressed data. </li>\n  <li> There is no validation of the ratio between the compressed and uncompressed archive entry. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  <li> Define and control the threshold for maximum total size of the uncompressed data. </li>\n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it\u00e2\u20ac\u2122s not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.python.org/3.5/library/tarfile.html\">tarfile</a> module:</p>\n<pre>\nimport tarfile\n\ntfile = tarfile.open(\"TarBomb.tar\")\ntfile.extractall('./tmp/')  # Sensitive\ntfile.close()\n</pre>\n<p>For <a href=\"https://docs.python.org/dev/library/zipfile.html\">zipfile</a> module:</p>\n<pre>\nimport zipfile\n\nzfile = zipfile.ZipFile('ZipBomb.zip', 'r')\nzfile.extractall('./tmp/') # Sensitive\nzfile.close()\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.python.org/3.5/library/tarfile.html\">tarfile</a> module:</p>\n<pre>\nimport tarfile\n\nTHRESHOLD_ENTRIES = 10000\nTHRESHOLD_SIZE = 1000000000\nTHRESHOLD_RATIO = 10\n\ntotalSizeArchive = 0;\ntotalEntryArchive = 0;\n\ntfile = tarfile.open(\"TarBomb.tar\")\nfor entry in tfile:\n  tarinfo = tfile.extractfile(entry)\n\n  totalEntryArchive += 1\n  sizeEntry = 0\n  result = b''\n  while True:\n    sizeEntry += 1024\n    totalSizeArchive += 1024\n\n    ratio = sizeEntry / entry.size\n    if ratio &gt; THRESHOLD_RATIO:\n      # ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack\n      break\n\n    chunk = tarinfo.read(1024)\n    if not chunk:\n      break\n\n    result += chunk\n\n  if totalEntryArchive &gt; THRESHOLD_ENTRIES:\n    # too much entries in this archive, can lead to inodes exhaustion of the system\n    break\n\n  if totalSizeArchive &gt; THRESHOLD_SIZE:\n    # the uncompressed data size is too much for the application resource capacity\n    break\n\ntfile.close()\n</pre>\n<p>For <a href=\"https://docs.python.org/dev/library/zipfile.html\">zipfile</a> module:</p>\n<pre>\nimport zipfile\n\nTHRESHOLD_ENTRIES = 10000\nTHRESHOLD_SIZE = 1000000000\nTHRESHOLD_RATIO = 10\n\ntotalSizeArchive = 0;\ntotalEntryArchive = 0;\n\nzfile = zipfile.ZipFile('ZipBomb.zip', 'r')\nfor zinfo in zfile.infolist():\n    print('File', zinfo.filename)\n    data = zfile.read(zinfo)\n\n    totalEntryArchive += 1\n\n    totalSizeArchive = totalSizeArchive + len(data)\n    ratio = len(data) / zinfo.compress_size\n    if ratio &gt; THRESHOLD_RATIO:\n      # ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack\n      break\n\n    if totalSizeArchive &gt; THRESHOLD_SIZE:\n      # the uncompressed data size is too much for the application resource capacity\n      break\n\n    if totalEntryArchive &gt; THRESHOLD_ENTRIES:\n      # too much entries in this archive, can lead to inodes exhaustion of the system\n      break\n\nzfile.close()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/409\">CWE-409 - Improper Handling of Highly Compressed Data (Data Amplification)</a> </li>\n  <li> <a href=\"https://www.bamsoftware.com/hacks/zipbomb/\">bamsoftware.com</a> - A better Zip Bomb </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme <a href=\"https://en.wikipedia.org/wiki/Data_compression_ratio\">compression ratio</a>, attackers will\ncompress irrelevant data (eg: a long string of repeated bytes).</p>\n<h2>Ask Yourself Whether</h2>\n<p>Archives to expand are untrusted and:</p>\n<ul>\n  <li> There is no validation of the number of entries in the archive. </li>\n  <li> There is no validation of the total size of the uncompressed data. </li>\n  <li> There is no validation of the ratio between the compressed and uncompressed archive entry. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  <li> Define and control the threshold for maximum total size of the uncompressed data. </li>\n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it\u00e2\u20ac\u2122s not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.python.org/3.5/library/tarfile.html\">tarfile</a> module:</p>\n<pre>\nimport tarfile\n\ntfile = tarfile.open(\"TarBomb.tar\")\ntfile.extractall('./tmp/')  # Sensitive\ntfile.close()\n</pre>\n<p>For <a href=\"https://docs.python.org/dev/library/zipfile.html\">zipfile</a> module:</p>\n<pre>\nimport zipfile\n\nzfile = zipfile.ZipFile('ZipBomb.zip', 'r')\nzfile.extractall('./tmp/') # Sensitive\nzfile.close()\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.python.org/3.5/library/tarfile.html\">tarfile</a> module:</p>\n<pre>\nimport tarfile\n\nTHRESHOLD_ENTRIES = 10000\nTHRESHOLD_SIZE = 1000000000\nTHRESHOLD_RATIO = 10\n\ntotalSizeArchive = 0;\ntotalEntryArchive = 0;\n\ntfile = tarfile.open(\"TarBomb.tar\")\nfor entry in tfile:\n  tarinfo = tfile.extractfile(entry)\n\n  totalEntryArchive += 1\n  sizeEntry = 0\n  result = b''\n  while True:\n    sizeEntry += 1024\n    totalSizeArchive += 1024\n\n    ratio = sizeEntry / entry.size\n    if ratio &gt; THRESHOLD_RATIO:\n      # ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack\n      break\n\n    chunk = tarinfo.read(1024)\n    if not chunk:\n      break\n\n    result += chunk\n\n  if totalEntryArchive &gt; THRESHOLD_ENTRIES:\n    # too much entries in this archive, can lead to inodes exhaustion of the system\n    break\n\n  if totalSizeArchive &gt; THRESHOLD_SIZE:\n    # the uncompressed data size is too much for the application resource capacity\n    break\n\ntfile.close()\n</pre>\n<p>For <a href=\"https://docs.python.org/dev/library/zipfile.html\">zipfile</a> module:</p>\n<pre>\nimport zipfile\n\nTHRESHOLD_ENTRIES = 10000\nTHRESHOLD_SIZE = 1000000000\nTHRESHOLD_RATIO = 10\n\ntotalSizeArchive = 0;\ntotalEntryArchive = 0;\n\nzfile = zipfile.ZipFile('ZipBomb.zip', 'r')\nfor zinfo in zfile.infolist():\n    print('File', zinfo.filename)\n    data = zfile.read(zinfo)\n\n    totalEntryArchive += 1\n\n    totalSizeArchive = totalSizeArchive + len(data)\n    ratio = len(data) / zinfo.compress_size\n    if ratio &gt; THRESHOLD_RATIO:\n      # ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack\n      break\n\n    if totalSizeArchive &gt; THRESHOLD_SIZE:\n      # the uncompressed data size is too much for the application resource capacity\n      break\n\n    if totalEntryArchive &gt; THRESHOLD_ENTRIES:\n      # too much entries in this archive, can lead to inodes exhaustion of the system\n      break\n\nzfile.close()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/409\">CWE-409 - Improper Handling of Highly Compressed Data (Data Amplification)</a> </li>\n  <li> <a href=\"https://www.bamsoftware.com/hacks/zipbomb/\">bamsoftware.com</a> - A better Zip Bomb </li>\n</ul>\n\n"
        },
        {
          "id": "S4790",
          "name": "Using weak hashing algorithms is security-sensitive",
          "description": "<p>Cryptographic hash algorithms such as <code>MD2</code>, <code>MD4</code>, <code>MD5</code>, <code>MD6</code>, <code>HAVAL-128</code>,\n<code>HMAC-MD5</code>, <code>DSA</code> (which uses <code>SHA-1</code>), <code>RIPEMD</code>, <code>RIPEMD-128</code>, <code>RIPEMD-160</code>,\n<code>HMACRIPEMD160</code> and <code>SHA-1</code> are no longer considered secure, because it is possible to have <code>collisions</code> (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).</p>\n<h2>Ask Yourself Whether</h2>\n<p>The hashed value is used in a security context like:</p>\n<ul>\n  <li> User-password storage. </li>\n  <li> Security token generation (used to confirm e-mail when registering on a website, reset password, etc \u00e2\u20ac\u00a6\u00e2\u20ac\u2039). </li>\n  <li> To compute some message integrity. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Safer alternatives, such as <code>SHA-256</code>, <code>SHA-512</code>, <code>SHA-3</code> are recommended, and for password hashing, it\u00e2\u20ac\u2122s even\nbetter to use algorithms that do not compute too \"quickly\", like <code>bcrypt</code>, <code>scrypt</code>, <code>argon2</code> or <code>pbkdf2</code>\nbecause it slows down <code>brute force attacks</code>.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport hashlib\nm = hashlib.md5() // Sensitive\n</pre>\n<pre>\nimport hashlib\nm = hashlib.sha1() // Sensitive\n</pre>\n<pre>\nimport md5 // Sensitive and deprecated since Python 2.5; use the hashlib module instead.\nm = md5.new()\n\nimport sha // Sensitive and deprecated since Python 2.5; use the hashlib module instead.\nm = sha.new()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport hashlib\nm = hashlib.sha512() // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1240\">CWE-1240 - Use of a Risky Cryptographic Primitive</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>Cryptographic hash algorithms such as <code>MD2</code>, <code>MD4</code>, <code>MD5</code>, <code>MD6</code>, <code>HAVAL-128</code>,\n<code>HMAC-MD5</code>, <code>DSA</code> (which uses <code>SHA-1</code>), <code>RIPEMD</code>, <code>RIPEMD-128</code>, <code>RIPEMD-160</code>,\n<code>HMACRIPEMD160</code> and <code>SHA-1</code> are no longer considered secure, because it is possible to have <code>collisions</code> (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).</p>\n<h2>Ask Yourself Whether</h2>\n<p>The hashed value is used in a security context like:</p>\n<ul>\n  <li> User-password storage. </li>\n  <li> Security token generation (used to confirm e-mail when registering on a website, reset password, etc \u00e2\u20ac\u00a6\u00e2\u20ac\u2039). </li>\n  <li> To compute some message integrity. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Safer alternatives, such as <code>SHA-256</code>, <code>SHA-512</code>, <code>SHA-3</code> are recommended, and for password hashing, it\u00e2\u20ac\u2122s even\nbetter to use algorithms that do not compute too \"quickly\", like <code>bcrypt</code>, <code>scrypt</code>, <code>argon2</code> or <code>pbkdf2</code>\nbecause it slows down <code>brute force attacks</code>.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport hashlib\nm = hashlib.md5() // Sensitive\n</pre>\n<pre>\nimport hashlib\nm = hashlib.sha1() // Sensitive\n</pre>\n<pre>\nimport md5 // Sensitive and deprecated since Python 2.5; use the hashlib module instead.\nm = md5.new()\n\nimport sha // Sensitive and deprecated since Python 2.5; use the hashlib module instead.\nm = sha.new()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport hashlib\nm = hashlib.sha512() // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1240\">CWE-1240 - Use of a Risky Cryptographic Primitive</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S4502",
          "name": "Disabling CSRF protections is security-sensitive",
          "description": "<p>A cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn\u00e2\u20ac\u2122t intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.</p>\n<p>The attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The web application uses cookies to authenticate users. </li>\n  <li> There exist sensitive operations in the web application that can be performed when the user is authenticated. </li>\n  <li> The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      <li> implemented, for example, with an unguessable CSRF token </li>\n    </ul>  </li>\n  <li> Of course all sensitive operations should not be performed with <a\n  href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">safe HTTP</a> methods like <code>GET</code> which are designed to be\n  used only for information retrieval. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>For a <a href=\"https://docs.djangoproject.com/fr/3.0/ref/csrf/\">Django</a> application, the code is sensitive when,</p>\n<ul>\n  <li> <code>django.middleware.csrf.CsrfViewMiddleware</code> is not used in the <a\n  href=\"https://docs.djangoproject.com/en/3.0/topics/settings/\">Django settings</a>: </li>\n</ul>\n<pre>\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n] # Sensitive: django.middleware.csrf.CsrfViewMiddleware is missing\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a view: </li>\n</ul>\n<pre>\n@csrf_exempt # Sensitive\ndef example(request):\n    return HttpResponse(\"default\")\n</pre>\n<p>For a <a href=\"https://flask-wtf.readthedocs.io/en/latest/csrf.html\">Flask</a> application, the code is sensitive when,</p>\n<ul>\n  <li> the <code>WTF_CSRF_ENABLED</code> setting is set to <code>false</code>: </li>\n</ul>\n<pre>\napp = Flask(__name__)\napp.config['WTF_CSRF_ENABLED'] = False # Sensitive\n</pre>\n<ul>\n  <li> the application doesn\u00e2\u20ac\u2122t use the <code>CSRFProtect</code> module: </li>\n</ul>\n<pre>\napp = Flask(__name__) # Sensitive: CSRFProtect is missing\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a view: </li>\n</ul>\n<pre>\napp = Flask(__name__)\ncsrf = CSRFProtect()\ncsrf.init_app(app)\n\n@app.route('/example/', methods=['POST'])\n@csrf.exempt # Sensitive\ndef example():\n    return 'example '\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a form: </li>\n</ul>\n<pre>\nclass unprotectedForm(FlaskForm):\n    class Meta:\n        csrf = False # Sensitive\n\n    name = TextField('name')\n    submit = SubmitField('submit')\n</pre>\n<h2>Compliant Solution</h2>\n<p>For a <a href=\"https://docs.djangoproject.com/fr/3.0/ref/csrf/\">Django</a> application,</p>\n<ul>\n  <li> it is recommended to protect all the views with <code>django.middleware.csrf.CsrfViewMiddleware</code>: </li>\n</ul>\n<pre>\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware', # Compliant\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n</pre>\n<ul>\n  <li> and to not disable the CSRF protection on specific views: </li>\n</ul>\n<pre>\ndef example(request): # Compliant\n    return HttpResponse(\"default\")\n</pre>\n<p>For a <a href=\"https://flask-wtf.readthedocs.io/en/latest/csrf.html\">Flask</a> application,</p>\n<ul>\n  <li> the <code>CSRFProtect</code> module should be used (and not disabled further with <code>WTF_CSRF_ENABLED</code> set to <code>false</code>):\n  </li>\n</ul>\n<pre>\napp = Flask(__name__)\ncsrf = CSRFProtect()\ncsrf.init_app(app) # Compliant\n</pre>\n<ul>\n  <li> and it is recommended to not disable the CSRF protection on specific views or forms: </li>\n</ul>\n<pre>\n@app.route('/example/', methods=['POST']) # Compliant\ndef example():\n    return 'example '\n\nclass unprotectedForm(FlaskForm):\n    class Meta:\n        csrf = True # Compliant\n\n    name = TextField('name')\n    submit = SubmitField('submit')\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/352\">CWE-352 - Cross-Site Request Forgery (CSRF)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-community/attacks/csrf\">Cross-Site Request Forgery</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222603\">Application Security and\n  Development: V-222603</a> - The application must protect from Cross-Site Request Forgery (CSRF) vulnerabilities. </li>\n  <li> PortSwigger - <a href=\"https://portswigger.net/research/web-storage-the-lesser-evil-for-session-tokens\">Web storage: the lesser evil for\n  session tokens</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>A cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn\u00e2\u20ac\u2122t intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.</p>\n<p>The attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The web application uses cookies to authenticate users. </li>\n  <li> There exist sensitive operations in the web application that can be performed when the user is authenticated. </li>\n  <li> The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      <li> implemented, for example, with an unguessable CSRF token </li>\n    </ul>  </li>\n  <li> Of course all sensitive operations should not be performed with <a\n  href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">safe HTTP</a> methods like <code>GET</code> which are designed to be\n  used only for information retrieval. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>For a <a href=\"https://docs.djangoproject.com/fr/3.0/ref/csrf/\">Django</a> application, the code is sensitive when,</p>\n<ul>\n  <li> <code>django.middleware.csrf.CsrfViewMiddleware</code> is not used in the <a\n  href=\"https://docs.djangoproject.com/en/3.0/topics/settings/\">Django settings</a>: </li>\n</ul>\n<pre>\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n] # Sensitive: django.middleware.csrf.CsrfViewMiddleware is missing\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a view: </li>\n</ul>\n<pre>\n@csrf_exempt # Sensitive\ndef example(request):\n    return HttpResponse(\"default\")\n</pre>\n<p>For a <a href=\"https://flask-wtf.readthedocs.io/en/latest/csrf.html\">Flask</a> application, the code is sensitive when,</p>\n<ul>\n  <li> the <code>WTF_CSRF_ENABLED</code> setting is set to <code>false</code>: </li>\n</ul>\n<pre>\napp = Flask(__name__)\napp.config['WTF_CSRF_ENABLED'] = False # Sensitive\n</pre>\n<ul>\n  <li> the application doesn\u00e2\u20ac\u2122t use the <code>CSRFProtect</code> module: </li>\n</ul>\n<pre>\napp = Flask(__name__) # Sensitive: CSRFProtect is missing\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a view: </li>\n</ul>\n<pre>\napp = Flask(__name__)\ncsrf = CSRFProtect()\ncsrf.init_app(app)\n\n@app.route('/example/', methods=['POST'])\n@csrf.exempt # Sensitive\ndef example():\n    return 'example '\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a form: </li>\n</ul>\n<pre>\nclass unprotectedForm(FlaskForm):\n    class Meta:\n        csrf = False # Sensitive\n\n    name = TextField('name')\n    submit = SubmitField('submit')\n</pre>\n<h2>Compliant Solution</h2>\n<p>For a <a href=\"https://docs.djangoproject.com/fr/3.0/ref/csrf/\">Django</a> application,</p>\n<ul>\n  <li> it is recommended to protect all the views with <code>django.middleware.csrf.CsrfViewMiddleware</code>: </li>\n</ul>\n<pre>\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware', # Compliant\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n</pre>\n<ul>\n  <li> and to not disable the CSRF protection on specific views: </li>\n</ul>\n<pre>\ndef example(request): # Compliant\n    return HttpResponse(\"default\")\n</pre>\n<p>For a <a href=\"https://flask-wtf.readthedocs.io/en/latest/csrf.html\">Flask</a> application,</p>\n<ul>\n  <li> the <code>CSRFProtect</code> module should be used (and not disabled further with <code>WTF_CSRF_ENABLED</code> set to <code>false</code>):\n  </li>\n</ul>\n<pre>\napp = Flask(__name__)\ncsrf = CSRFProtect()\ncsrf.init_app(app) # Compliant\n</pre>\n<ul>\n  <li> and it is recommended to not disable the CSRF protection on specific views or forms: </li>\n</ul>\n<pre>\n@app.route('/example/', methods=['POST']) # Compliant\ndef example():\n    return 'example '\n\nclass unprotectedForm(FlaskForm):\n    class Meta:\n        csrf = True # Compliant\n\n    name = TextField('name')\n    submit = SubmitField('submit')\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/352\">CWE-352 - Cross-Site Request Forgery (CSRF)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-community/attacks/csrf\">Cross-Site Request Forgery</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222603\">Application Security and\n  Development: V-222603</a> - The application must protect from Cross-Site Request Forgery (CSRF) vulnerabilities. </li>\n  <li> PortSwigger - <a href=\"https://portswigger.net/research/web-storage-the-lesser-evil-for-session-tokens\">Web storage: the lesser evil for\n  session tokens</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5717",
          "name": "Function parameters' default values should not be modified or assigned",
          "description": "<p>This rule raises an issue when the default value of a function parameter is mutated.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python, function parameters can have default values.</p>\n<p>These default values are expressions which are evalutated when the function is defined, i.e. only once. The same default value will be used every\ntime the function is called. Therefore, modifying it will have an effect on every subsequent call. This can lead to confusing bugs.</p>\n<pre>\ndef myfunction(param=foo()):  # foo is called only once, when the function is defined.\n    ...\n</pre>\n<p>For the same reason, it is also a bad idea to store mutable default values in another object (ex: as an attribute). Multiple instances will then\nshare the same value and modifying one object will modify all of them.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> a default value is either modified in the function or assigned to anything other than a variable and it has one of the following types:\n    <ul>\n      <li> <a href=\"https://docs.python.org/3/library/collections.html\">collections</a> module: deque, UserList, ChainMap, Counter, OrderedDict,\n      defaultdict, UserDict. </li>\n    </ul>  </li>\n  <li> an attribute of a default value is assigned. </li>\n</ul>\n<h3>Exceptions</h3>\n<p>In some rare cases, modifying a default value is intentional. For example, default values can be used as a cache.</p>\n<p>No issue will be raised when the parameter\u00e2\u20ac\u2122s name contains \"cache\" or \"memo\" (as in memoization).</p>\n<h2>How to fix it</h2>\n<p>When a parameter default value is meant to be a mutable object, it is best to keep the parameter optional and instantiate the mutable object in the\nfunction\u00e2\u20ac\u2122s body directly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>In the following example, the parameter \"param\" has <code>list()</code> as a default value. This list is created only once and then reused in every\ncall. Thus when appending <code>'a'</code> to this list in the body of the function, the next call will have <code>['a']</code> as a default\nvalue.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef myfunction(param=list()):  # Noncompliant: param is a list that gets mutated\n    param.append('a')  # modification of the default value.\n    return param\n\nprint(myfunction()) # returns ['a']\nprint(myfunction()) # returns ['a', 'a']\nprint(myfunction()) # returns ['a', 'a', 'a']\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef myfunction(param=None):\n    if param is None:\n        param = list()\n    param.append('a')\n    return param\n\nprint(myfunction()) # returns ['a']\nprint(myfunction()) # returns ['a']\nprint(myfunction()) # returns ['a']\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#function-definitions\">Function definitions</a> </li>\n</ul>\n<h3>External coding guidelines</h3>\n<ul>\n  <li> The Hitchhiker\u00e2\u20ac\u2122s Guide to Python - <a href=\"https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments\">Common Gotchas</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when the default value of a function parameter is mutated.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python, function parameters can have default values.</p>\n<p>These default values are expressions which are evalutated when the function is defined, i.e. only once. The same default value will be used every\ntime the function is called. Therefore, modifying it will have an effect on every subsequent call. This can lead to confusing bugs.</p>\n<pre>\ndef myfunction(param=foo()):  # foo is called only once, when the function is defined.\n    ...\n</pre>\n<p>For the same reason, it is also a bad idea to store mutable default values in another object (ex: as an attribute). Multiple instances will then\nshare the same value and modifying one object will modify all of them.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> a default value is either modified in the function or assigned to anything other than a variable and it has one of the following types:\n    <ul>\n      <li> <a href=\"https://docs.python.org/3/library/collections.html\">collections</a> module: deque, UserList, ChainMap, Counter, OrderedDict,\n      defaultdict, UserDict. </li>\n    </ul>  </li>\n  <li> an attribute of a default value is assigned. </li>\n</ul>\n<h3>Exceptions</h3>\n<p>In some rare cases, modifying a default value is intentional. For example, default values can be used as a cache.</p>\n<p>No issue will be raised when the parameter\u00e2\u20ac\u2122s name contains \"cache\" or \"memo\" (as in memoization).</p>\n<h2>How to fix it</h2>\n<p>When a parameter default value is meant to be a mutable object, it is best to keep the parameter optional and instantiate the mutable object in the\nfunction\u00e2\u20ac\u2122s body directly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>In the following example, the parameter \"param\" has <code>list()</code> as a default value. This list is created only once and then reused in every\ncall. Thus when appending <code>'a'</code> to this list in the body of the function, the next call will have <code>['a']</code> as a default\nvalue.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef myfunction(param=list()):  # Noncompliant: param is a list that gets mutated\n    param.append('a')  # modification of the default value.\n    return param\n\nprint(myfunction()) # returns ['a']\nprint(myfunction()) # returns ['a', 'a']\nprint(myfunction()) # returns ['a', 'a', 'a']\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef myfunction(param=None):\n    if param is None:\n        param = list()\n    param.append('a')\n    return param\n\nprint(myfunction()) # returns ['a']\nprint(myfunction()) # returns ['a']\nprint(myfunction()) # returns ['a']\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#function-definitions\">Function definitions</a> </li>\n</ul>\n<h3>External coding guidelines</h3>\n<ul>\n  <li> The Hitchhiker\u00e2\u20ac\u2122s Guide to Python - <a href=\"https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments\">Common Gotchas</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2208",
          "name": "Wildcard imports should not be used",
          "description": "<h2>Why is this an issue?</h2>\n<p>Importing every public name from a module using a wildcard (<code>from mymodule import *</code>) is a bad idea because:</p>\n<ul>\n  <li> It could lead to conflicts between names defined locally and the ones imported. </li>\n  <li> It reduces code readability as developers will have a hard time knowing where names come from. </li>\n  <li> It clutters the local namespace, which makes debugging more difficult. </li>\n</ul>\n<p>Remember that imported names can change when you update your dependencies. A wildcard import that works today might be broken tomorrow.</p>\n<h3>Exceptions</h3>\n<p>No issue will be raised in <code>__init__.py</code> files. Wildcard imports are a common way of populating these modules.</p>\n<p>No issue will be raised in modules doing only imports. Local modules are sometimes created as a proxy for third-party modules.</p>\n<pre>\n# file: mylibrary/pyplot.py\ntry:\n    from guiqwt.pyplot import *  # Ok\nexcept Exception:\n    from matplotlib.pyplot import *  # Ok\n</pre>\n<p>Just keep in mind that wildcard imports might still create issues in these cases. It\u00e2\u20ac\u2122s always better to import only what you need.</p>\n<h2>How to fix it</h2>\n<p>There are two ways to avoid a wildcard import:</p>\n<ul>\n  <li> Replace it with <code>import mymodule</code> and access module members as <code>mymodule.myfunction</code>. If the module name is too long,\n  alias it to a shorter name. Example: <code>import pandas as pd</code> </li>\n  <li> List every imported name. If necessary import statements can be split on multiple lines using parentheses (preferred solution) or backslashes.\n  </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom math import *  # Noncompliant\ndef exp(x):\n    pass\nprint(exp(0))   # \"None\" will be printed\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nimport math\ndef exp(x):\n    pass\nprint(math.exp(0))   # \"1.0\" will be printed\n</pre>\n<p>Or</p>\n<pre>\nfrom math import exp as m_exp\ndef exp(x):\n    pass\nprint(m_exp(0))   # \"1.0\" will be printed\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/reference/simple_stmts.html#import\">Python documentation - The import statement</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Importing every public name from a module using a wildcard (<code>from mymodule import *</code>) is a bad idea because:</p>\n<ul>\n  <li> It could lead to conflicts between names defined locally and the ones imported. </li>\n  <li> It reduces code readability as developers will have a hard time knowing where names come from. </li>\n  <li> It clutters the local namespace, which makes debugging more difficult. </li>\n</ul>\n<p>Remember that imported names can change when you update your dependencies. A wildcard import that works today might be broken tomorrow.</p>\n<h3>Exceptions</h3>\n<p>No issue will be raised in <code>__init__.py</code> files. Wildcard imports are a common way of populating these modules.</p>\n<p>No issue will be raised in modules doing only imports. Local modules are sometimes created as a proxy for third-party modules.</p>\n<pre>\n# file: mylibrary/pyplot.py\ntry:\n    from guiqwt.pyplot import *  # Ok\nexcept Exception:\n    from matplotlib.pyplot import *  # Ok\n</pre>\n<p>Just keep in mind that wildcard imports might still create issues in these cases. It\u00e2\u20ac\u2122s always better to import only what you need.</p>\n<h2>How to fix it</h2>\n<p>There are two ways to avoid a wildcard import:</p>\n<ul>\n  <li> Replace it with <code>import mymodule</code> and access module members as <code>mymodule.myfunction</code>. If the module name is too long,\n  alias it to a shorter name. Example: <code>import pandas as pd</code> </li>\n  <li> List every imported name. If necessary import statements can be split on multiple lines using parentheses (preferred solution) or backslashes.\n  </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom math import *  # Noncompliant\ndef exp(x):\n    pass\nprint(exp(0))   # \"None\" will be printed\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nimport math\ndef exp(x):\n    pass\nprint(math.exp(0))   # \"1.0\" will be printed\n</pre>\n<p>Or</p>\n<pre>\nfrom math import exp as m_exp\ndef exp(x):\n    pass\nprint(m_exp(0))   # \"1.0\" will be printed\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/reference/simple_stmts.html#import\">Python documentation - The import statement</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6786",
          "name": "GraphQL introspection should be disabled in production",
          "description": "<p>This vulnerability exposes information about all the APIs available on a GraphQL API server. This information can be used to discover weaknesses in\nthe API that can be exploited.</p>\n<h2>Why is this an issue?</h2>\n<p>GraphQL introspection is a feature that allows client applications to query the schema of a GraphQL API at runtime. It provides a way for\ndevelopers to explore and understand the available data and operations supported by the API.</p>\n<p>This feature is a diagnostic tool that should only be used in the development phase as its presence also creates risks.</p>\n<p>Clear documentation and API references should be considered better discoverability tools for a public GraphQL API.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker can use introspection to identify all of the operations and data types supported by the server. This information can then be used to\nidentify potential targets for attacks.</p>\n<h4>Exploitation of private APIs</h4>\n<p>Even when a GraphQL API server is open to access by third-party applications, it may contain APIs that are intended only for private use.\nIntrospection allows these private APIs to be discovered.</p>\n<p>Private APIs often do not receive the same level of security rigor as public APIs. For example, they may skip input validation because the API is\nonly expected to be called from trusted applications. This can create avenues for attack that are not present on public APIs.</p>\n<h4>Exposure of sensitive data</h4>\n<p>GraphQL allows for multiple related objects to be retrieved using a single API call. This provides an efficient method of obtaining data for use in\na client application.</p>\n<p>An attacker may be able to use these relationships between objects to traverse the data structure. They may be able to find a link to sensitive\ndata that the developer did not intentionally make available.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom graphql_server.flask import GraphQLView\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(  # Noncompliant\n        name=\"api\",\n        schema=schema,\n    )\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>Make sure that introspection is disabled in production environments. You can use the following code sample as a reference, in conjunction with your\nown methods for distinguishing between production and non-production environments.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom graphql_server.flask import GraphQLView\n\n# Only one of the following needs to be used\nfrom graphql.validation import NoSchemaIntrospectionCustomRule # graphql-core v3\nfrom graphene.validation import DisableIntrospection           # graphene v3\n\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(\n        name=\"api\",\n        schema=schema,\n        validation_rules=[\n            NoSchemaIntrospectionCustomRule,\n            DisableIntrospection,\n        ]\n    )\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Disabling introspection</h4>\n<p>The GraphQL server framework should be instructed to disable introspection in production environments. This prevents any attacker attempt to\nretrieve schema information from the server at runtime.</p>\n<p>Each GraphQL framework will have a different method of doing this, possibly including:</p>\n<ul>\n  <li> Changing a simple boolean setting. </li>\n  <li> Adding a middleware module to the request processing chain. </li>\n  <li> Adding a GraphQL validator that rejects introspection keywords. </li>\n</ul>\n<p>If introspection is required, it should only be made available to the smallest possible audience. This could include development environments,\nusers with a specific right, or requests from a specific set of IP addresses.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP Web Security Testing Guide - <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL#introspection-queries\">Testing GraphQL</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This vulnerability exposes information about all the APIs available on a GraphQL API server. This information can be used to discover weaknesses in\nthe API that can be exploited.</p>\n<h2>Why is this an issue?</h2>\n<p>GraphQL introspection is a feature that allows client applications to query the schema of a GraphQL API at runtime. It provides a way for\ndevelopers to explore and understand the available data and operations supported by the API.</p>\n<p>This feature is a diagnostic tool that should only be used in the development phase as its presence also creates risks.</p>\n<p>Clear documentation and API references should be considered better discoverability tools for a public GraphQL API.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker can use introspection to identify all of the operations and data types supported by the server. This information can then be used to\nidentify potential targets for attacks.</p>\n<h4>Exploitation of private APIs</h4>\n<p>Even when a GraphQL API server is open to access by third-party applications, it may contain APIs that are intended only for private use.\nIntrospection allows these private APIs to be discovered.</p>\n<p>Private APIs often do not receive the same level of security rigor as public APIs. For example, they may skip input validation because the API is\nonly expected to be called from trusted applications. This can create avenues for attack that are not present on public APIs.</p>\n<h4>Exposure of sensitive data</h4>\n<p>GraphQL allows for multiple related objects to be retrieved using a single API call. This provides an efficient method of obtaining data for use in\na client application.</p>\n<p>An attacker may be able to use these relationships between objects to traverse the data structure. They may be able to find a link to sensitive\ndata that the developer did not intentionally make available.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom graphql_server.flask import GraphQLView\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(  # Noncompliant\n        name=\"api\",\n        schema=schema,\n    )\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>Make sure that introspection is disabled in production environments. You can use the following code sample as a reference, in conjunction with your\nown methods for distinguishing between production and non-production environments.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom graphql_server.flask import GraphQLView\n\n# Only one of the following needs to be used\nfrom graphql.validation import NoSchemaIntrospectionCustomRule # graphql-core v3\nfrom graphene.validation import DisableIntrospection           # graphene v3\n\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(\n        name=\"api\",\n        schema=schema,\n        validation_rules=[\n            NoSchemaIntrospectionCustomRule,\n            DisableIntrospection,\n        ]\n    )\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Disabling introspection</h4>\n<p>The GraphQL server framework should be instructed to disable introspection in production environments. This prevents any attacker attempt to\nretrieve schema information from the server at runtime.</p>\n<p>Each GraphQL framework will have a different method of doing this, possibly including:</p>\n<ul>\n  <li> Changing a simple boolean setting. </li>\n  <li> Adding a middleware module to the request processing chain. </li>\n  <li> Adding a GraphQL validator that rejects introspection keywords. </li>\n</ul>\n<p>If introspection is required, it should only be made available to the smallest possible audience. This could include development environments,\nusers with a specific right, or requests from a specific set of IP addresses.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP Web Security Testing Guide - <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL#introspection-queries\">Testing GraphQL</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6639",
          "name": "Memory allocations should not be vulnerable to Denial of Service attacks",
          "description": "<p>Memory allocation injections occur when an application computes the size of a piece of memory to be allocated from an untrusted source. In such a\ncase, an attacker could be able to make the application unwillingly consume an important amount of memory by enforcing a large allocation size.</p>\n<h2>Why is this an issue?</h2>\n<p>By repeatedly requesting a feature that consumes a lot of memory, attackers can constantly occupy an important part of an application\u00e2\u20ac\u2122s hosting\nserver memory. Depending on the application\u00e2\u20ac\u2122s deployment architecture, hosting server resources and attackers' capabilities, this can lead to an\nexhaustion of the available server\u00e2\u20ac\u2122s memory.</p>\n<h3>What is the potential impact?</h3>\n<p>A server that faces a memory exhaustion situation can become unstable. The exact impact will depend on how the affected application is deployed and\nhow well the hosting server configuration is hardened.</p>\n<p>In the worst case, when the application is deployed in an uncontained environment, directly on its host system, the memory exhaustion will affect\nthe whole hosting server. The server\u00e2\u20ac\u2122s operating system might start killing arbitrary memory-intensive processes, including the main application or\nother sensitive ones. This will result in a general operating failure, also known as a Denial of Service (DoS).</p>\n<p>In cases where the application is deployed in a virtualized or otherwise contained environment, or where memory usage limits are in place, the\nconsequences are limited to the vulnerable application only. In that case, other processes and applications hosted on the same server may keep on\nrunning without perturbation. The mainly affected application will still stop working properly.</p>\n<p>In general, that kind of DoS attack can have severe financial consequences. They are particularly important when the affected systems are\nbusiness-critical.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef example():\n    limit = int(request.args.get('limit'))\n\n    data = '#' * limit  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef example():\n    limit = int(request.args.get('limit'))\n    restricted_limit = min(10, limit)\n\n    data = '#' * restricted_limit\n</pre>\n<h3>How does this work?</h3>\n<h4>Enforce an upper limit</h4>\n<p>When performing a memory allocation whose size depends on a user-controlled parameter, it is of prime importance to enforce an upper limit to the\nsize being allocated. This will prevent any overly big memory slot from being consumed by a single allocation.</p>\n<p>Note that forcing an upper limit will not prevent Denial of Service attacks. When an allocation size is restricted to a reasonable amount,\nattackers can still request the allocating feature multiple times until the combined allocation size becomes big enough to cause exhaustion. However,\nthe smaller the allowed allocation size, the higher the number of necessary requests and, thus, the higher the required resources on the attacker\nside. As for most of the DoS attack vectors, a trade-off must be found to prevent most attackers from causing exhaustion while keeping a good level of\nperformance and usability.</p>\n<p>Here, the example compliant code uses the <code>min</code> function to enforce a reasonable upper bound to the allocation size. In that case, no\nmore than 10 bytes can be allocated at a time.</p>\n<h4>Harden the execution environment configuration</h4>\n<p>As a defense in depth measure, it is advised to harden the execution environment configuration regarding memory usage. This can effectively reduce\nthe scope of a successful Denial of Service attack and prevent a complete outage, potentially ranging over multiple applications.</p>\n<p>When running the application in a contained environment, like a Docker container, it is usually possible to limit the amount of memory provided to\nthe contained environment. In that case, memory exhaustion will only impact the application hosting container and not the host system.</p>\n<p>When running the application directly on a physical or heavy virtualized server, memory limits can sometimes be set on the application\u00e2\u20ac\u2122s associated\nservice account. For example, the <code>ulimit</code> mechanism of Unix based operating systems can be used for that purpose. With such a limit set\nup, memory exhaustion only impacts the applications and processes owned by the related service account.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Denial_of_Service\">OWASP</a> - Denial of Service </li>\n  <li> <a href=\"https://www.linux.org/docs/man8/pam_limits.html\">Linux.org</a> - pam_limits - PAM module to limit resources </li>\n  <li> <a href=\"https://access.redhat.com/solutions/1257953\">RedHat</a> - How to set limits for services in RHEL and systemd </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/789\">CWE-789 - Memory Allocation with Excessive Size Value</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222594\">Application Security and\n  Development: V-222594</a> - The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information\n  systems. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222667\">Application Security and\n  Development: V-222667</a> - Protections against DoS attacks must be implemented. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Memory allocation injections occur when an application computes the size of a piece of memory to be allocated from an untrusted source. In such a\ncase, an attacker could be able to make the application unwillingly consume an important amount of memory by enforcing a large allocation size.</p>\n<h2>Why is this an issue?</h2>\n<p>By repeatedly requesting a feature that consumes a lot of memory, attackers can constantly occupy an important part of an application\u00e2\u20ac\u2122s hosting\nserver memory. Depending on the application\u00e2\u20ac\u2122s deployment architecture, hosting server resources and attackers' capabilities, this can lead to an\nexhaustion of the available server\u00e2\u20ac\u2122s memory.</p>\n<h3>What is the potential impact?</h3>\n<p>A server that faces a memory exhaustion situation can become unstable. The exact impact will depend on how the affected application is deployed and\nhow well the hosting server configuration is hardened.</p>\n<p>In the worst case, when the application is deployed in an uncontained environment, directly on its host system, the memory exhaustion will affect\nthe whole hosting server. The server\u00e2\u20ac\u2122s operating system might start killing arbitrary memory-intensive processes, including the main application or\nother sensitive ones. This will result in a general operating failure, also known as a Denial of Service (DoS).</p>\n<p>In cases where the application is deployed in a virtualized or otherwise contained environment, or where memory usage limits are in place, the\nconsequences are limited to the vulnerable application only. In that case, other processes and applications hosted on the same server may keep on\nrunning without perturbation. The mainly affected application will still stop working properly.</p>\n<p>In general, that kind of DoS attack can have severe financial consequences. They are particularly important when the affected systems are\nbusiness-critical.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef example():\n    limit = int(request.args.get('limit'))\n\n    data = '#' * limit  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef example():\n    limit = int(request.args.get('limit'))\n    restricted_limit = min(10, limit)\n\n    data = '#' * restricted_limit\n</pre>\n<h3>How does this work?</h3>\n<h4>Enforce an upper limit</h4>\n<p>When performing a memory allocation whose size depends on a user-controlled parameter, it is of prime importance to enforce an upper limit to the\nsize being allocated. This will prevent any overly big memory slot from being consumed by a single allocation.</p>\n<p>Note that forcing an upper limit will not prevent Denial of Service attacks. When an allocation size is restricted to a reasonable amount,\nattackers can still request the allocating feature multiple times until the combined allocation size becomes big enough to cause exhaustion. However,\nthe smaller the allowed allocation size, the higher the number of necessary requests and, thus, the higher the required resources on the attacker\nside. As for most of the DoS attack vectors, a trade-off must be found to prevent most attackers from causing exhaustion while keeping a good level of\nperformance and usability.</p>\n<p>Here, the example compliant code uses the <code>min</code> function to enforce a reasonable upper bound to the allocation size. In that case, no\nmore than 10 bytes can be allocated at a time.</p>\n<h4>Harden the execution environment configuration</h4>\n<p>As a defense in depth measure, it is advised to harden the execution environment configuration regarding memory usage. This can effectively reduce\nthe scope of a successful Denial of Service attack and prevent a complete outage, potentially ranging over multiple applications.</p>\n<p>When running the application in a contained environment, like a Docker container, it is usually possible to limit the amount of memory provided to\nthe contained environment. In that case, memory exhaustion will only impact the application hosting container and not the host system.</p>\n<p>When running the application directly on a physical or heavy virtualized server, memory limits can sometimes be set on the application\u00e2\u20ac\u2122s associated\nservice account. For example, the <code>ulimit</code> mechanism of Unix based operating systems can be used for that purpose. With such a limit set\nup, memory exhaustion only impacts the applications and processes owned by the related service account.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Denial_of_Service\">OWASP</a> - Denial of Service </li>\n  <li> <a href=\"https://www.linux.org/docs/man8/pam_limits.html\">Linux.org</a> - pam_limits - PAM module to limit resources </li>\n  <li> <a href=\"https://access.redhat.com/solutions/1257953\">RedHat</a> - How to set limits for services in RHEL and systemd </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/789\">CWE-789 - Memory Allocation with Excessive Size Value</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222594\">Application Security and\n  Development: V-222594</a> - The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information\n  systems. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222667\">Application Security and\n  Development: V-222667</a> - Protections against DoS attacks must be implemented. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S6978",
          "name": "Subclasses of \"torch.nn.Module\" should call the initializer",
          "description": "<p>This rule raises an issue when a class is a Pytorch module and does not call the <code>super().__init__()</code> method in its constructor.</p>\n<h2>Why is this an issue?</h2>\n<p>To provide the AutoGrad functionality, the Pytorch library needs to set up the necessary data structures in the base class. If the\n<code>super().__init__()</code> method is not called, the module will not be able to keep track of its parameters and other attributes.</p>\n<p>For example, when trying to instantiate a module like <code>nn.Linear</code> without calling the <code>super().__init__()</code> method, the\ninstantiation will fail when it tries to register it as a submodule of the parent module.</p>\n<pre>\nimport torch.nn as nn\n\nclass MyCustomModule(nn.Module):\n    def __init__(self, input_size, output_size):\n        self.fc = nn.Linear(input_size, output_size)\n\nmodel = MyCustomModule(10, 5) # AttributeError: cannot assign module before Module.__init__() call\n</pre>\n<h2>How to fix it</h2>\n<p>Add a call to <code>super().__init__()</code> at the beginning of the constructor of the class.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport torch.nn as nn\n\nclass MyCustomModule(nn.Module):\n    def __init__(self, input_size, output_size):\n        self.fc = nn.Linear(input_size, output_size) # Noncompliant: creating an nn.Linear without calling super().__init__()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport torch.nn as nn\n\nclass MyCustomModule(nn.Module):\n    def __init__(self, input_size, output_size):\n        super().__init__()\n        self.fc = nn.Linear(input_size, output_size)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pytorch documentation - <a href=\"https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module\">torch.nn.Module</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a class is a Pytorch module and does not call the <code>super().__init__()</code> method in its constructor.</p>\n<h2>Why is this an issue?</h2>\n<p>To provide the AutoGrad functionality, the Pytorch library needs to set up the necessary data structures in the base class. If the\n<code>super().__init__()</code> method is not called, the module will not be able to keep track of its parameters and other attributes.</p>\n<p>For example, when trying to instantiate a module like <code>nn.Linear</code> without calling the <code>super().__init__()</code> method, the\ninstantiation will fail when it tries to register it as a submodule of the parent module.</p>\n<pre>\nimport torch.nn as nn\n\nclass MyCustomModule(nn.Module):\n    def __init__(self, input_size, output_size):\n        self.fc = nn.Linear(input_size, output_size)\n\nmodel = MyCustomModule(10, 5) # AttributeError: cannot assign module before Module.__init__() call\n</pre>\n<h2>How to fix it</h2>\n<p>Add a call to <code>super().__init__()</code> at the beginning of the constructor of the class.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport torch.nn as nn\n\nclass MyCustomModule(nn.Module):\n    def __init__(self, input_size, output_size):\n        self.fc = nn.Linear(input_size, output_size) # Noncompliant: creating an nn.Linear without calling super().__init__()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport torch.nn as nn\n\nclass MyCustomModule(nn.Module):\n    def __init__(self, input_size, output_size):\n        super().__init__()\n        self.fc = nn.Linear(input_size, output_size)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pytorch documentation - <a href=\"https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module\">torch.nn.Module</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6971",
          "name": "Transformers should not be accessed directly when a Scikit-Learn Pipeline uses caching",
          "description": "<p>This rule raises an issue when trying to access a Scikit-Learn transformer used in a pipeline with caching directly.</p>\n<h2>Why is this an issue?</h2>\n<p>When using a pipeline with a cache and passing the transformer objects as an instance from a variable, it is possible to access the transformer\nobjects directly.</p>\n<p>This is an issue since all the transformers are cloned when the Pipeline is fitted, and therefore, the objects outside the Pipeline are not updated\nand will yield unexpected results.</p>\n<h2>How to fix it</h2>\n<p>Replace the direct access to the transformer with an access to the <code>named_steps</code> attribute of the pipeline.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.pipeline import Pipeline\n\ndiabetes = load_diabetes()\nscaler = RobustScaler()\nknn = KNeighborsRegressor(n_neighbors=5)\n\npipeline = Pipeline([\n    ('scaler', scaler),\n    ('knn', knn)\n], memory=\"cache\")\n\npipeline.fit(diabetes.data, diabetes.target)\nprint(scaler.center_) # Noncompliant : raises an AttributeError\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.pipeline import Pipeline\n\ndiabetes = load_diabetes()\nscaler = RobustScaler()\nknn = KNeighborsRegressor(n_neighbors=5)\n\npipeline = Pipeline([\n    ('scaler', scaler),\n    ('knn', knn)\n], memory=\"cache\")\n\npipeline.fit(diabetes.data, diabetes.target)\nprint(pipeline.named_steps['scaler'].center_) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Scikit-Learn - Pipelines and composite estimators : <a\n  href=\"https://scikit-learn.org/stable/modules/compose.html#warning:-side-effect-of-caching-transformers\">Side effect of caching transformers</a>\n  </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when trying to access a Scikit-Learn transformer used in a pipeline with caching directly.</p>\n<h2>Why is this an issue?</h2>\n<p>When using a pipeline with a cache and passing the transformer objects as an instance from a variable, it is possible to access the transformer\nobjects directly.</p>\n<p>This is an issue since all the transformers are cloned when the Pipeline is fitted, and therefore, the objects outside the Pipeline are not updated\nand will yield unexpected results.</p>\n<h2>How to fix it</h2>\n<p>Replace the direct access to the transformer with an access to the <code>named_steps</code> attribute of the pipeline.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.pipeline import Pipeline\n\ndiabetes = load_diabetes()\nscaler = RobustScaler()\nknn = KNeighborsRegressor(n_neighbors=5)\n\npipeline = Pipeline([\n    ('scaler', scaler),\n    ('knn', knn)\n], memory=\"cache\")\n\npipeline.fit(diabetes.data, diabetes.target)\nprint(scaler.center_) # Noncompliant : raises an AttributeError\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.pipeline import Pipeline\n\ndiabetes = load_diabetes()\nscaler = RobustScaler()\nknn = KNeighborsRegressor(n_neighbors=5)\n\npipeline = Pipeline([\n    ('scaler', scaler),\n    ('knn', knn)\n], memory=\"cache\")\n\npipeline.fit(diabetes.data, diabetes.target)\nprint(pipeline.named_steps['scaler'].center_) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Scikit-Learn - Pipelines and composite estimators : <a\n  href=\"https://scikit-learn.org/stable/modules/compose.html#warning:-side-effect-of-caching-transformers\">Side effect of caching transformers</a>\n  </li>\n</ul>\n\n"
        },
        {
          "id": "S1244",
          "name": "Floating point numbers should not be tested for equality",
          "description": "<p>This rule raises an issue when direct and indirect equality/inequality checks are made on floats.</p>\n<h2>Why is this an issue?</h2>\n<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation.</p>\n<p>In base 10, the fraction <code>1/3</code> is represented as <code>0.333\u00e2\u20ac\u00a6\u00e2\u20ac\u2039</code> which, for a given number of significant digit, will never exactly\nbe <code>1/3</code>. The same problem happens when trying to represent <code>1/10</code> in base 2, with leads to the infinitely repeating fraction\n<code>0.0001100110011\u00e2\u20ac\u00a6\u00e2\u20ac\u2039</code>. This makes floating point representations inherently imprecise.</p>\n<p>Even worse, floating point math is not associative; push a <code>float</code> through a series of simple mathematical operations and the answer\nwill be different based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple, as can be vizualized using the <code>format</code> function to check for significant\ndigits:</p>\n<pre>\n&gt;&gt;&gt; format(0.1, \".17g\")\n'0.10000000000000001'\n</pre>\n<p>This can also be vizualized as a fraction using the <code>as_integer_ratio</code> method:</p>\n<pre>\n&gt;&gt;&gt; my_float = 0.1\n&gt;&gt;&gt; numerator, denominator = my_float.as_integer_ratio()\n&gt;&gt;&gt; f\"{numerator} / {denominator}\"\n'3602879701896397 / 36028797018963968'\n</pre>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> values is almost always\nerroneous.</p>\n<h2>How to fix it</h2>\n<p>Whenever attempting to compare float values, it is important to consider the inherent imprecision of floating-point arithmetic.</p>\n<p>One common solution to this problem is to use a tolerance value (also called epsilon) to define an acceptable range of difference between two\nfloats. A tolerance value may be relative (based on the magnitude of the numbers being compared) or absolute. Note that comparing a value to 0 is a\nspecial case: as it has no magnitude, it is important to use an absolute tolerance value.</p>\n<p>The <code>math.isclose</code> function allows to compare floats with a relative and absolute tolerance. One should however be careful when\ncomparing values to 0, as by default, the absolute tolerance of <code>math.isclose</code> is <code>0.0</code> (this case is covered by rule\n{rule:python:S6727}) . Depending on the library you\u00e2\u20ac\u2122re using, equivalent functions exist, with possibly different default tolerances (e.g\n<code>numpy.isclose</code> or <code>torch.isclose</code> which are respectively designed to work with <code>numpy</code> arrays and\n<code>pytorch</code> tensors).</p>\n<p>If precise decimal arithmetic is needed, another option is to use the <code>Decimal</code> class of the <code>decimal</code> module, which allows\nfor exact decimal arithmetic.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo(a, b):\n    return a == b - 0.1\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport math\ndef foo(a, b):\n    return math.isclose(a, b - 0.1, rel_tol=1e-09, abs_tol=1e-09)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a\n  href=\"https://docs.python.org/3/tutorial/floatingpoint.html#floating-point-arithmetic-issues-and-limitations\">Floating Point Arithmetic: Issues and\n  Limitations</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/decimal.html#module-decimal\">Decimal fixed point and floating point\n  arithmetic</a> </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.isclose.html\">numpy.isclose</a> </li>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/stable/generated/torch.isclose.html\">torch.isclose</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S6727} - The <code>abs_tol</code> parameter should be provided when using <code>math.isclose</code> to compare values to\n  <code>0</code> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when direct and indirect equality/inequality checks are made on floats.</p>\n<h2>Why is this an issue?</h2>\n<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation.</p>\n<p>In base 10, the fraction <code>1/3</code> is represented as <code>0.333\u00e2\u20ac\u00a6\u00e2\u20ac\u2039</code> which, for a given number of significant digit, will never exactly\nbe <code>1/3</code>. The same problem happens when trying to represent <code>1/10</code> in base 2, with leads to the infinitely repeating fraction\n<code>0.0001100110011\u00e2\u20ac\u00a6\u00e2\u20ac\u2039</code>. This makes floating point representations inherently imprecise.</p>\n<p>Even worse, floating point math is not associative; push a <code>float</code> through a series of simple mathematical operations and the answer\nwill be different based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple, as can be vizualized using the <code>format</code> function to check for significant\ndigits:</p>\n<pre>\n&gt;&gt;&gt; format(0.1, \".17g\")\n'0.10000000000000001'\n</pre>\n<p>This can also be vizualized as a fraction using the <code>as_integer_ratio</code> method:</p>\n<pre>\n&gt;&gt;&gt; my_float = 0.1\n&gt;&gt;&gt; numerator, denominator = my_float.as_integer_ratio()\n&gt;&gt;&gt; f\"{numerator} / {denominator}\"\n'3602879701896397 / 36028797018963968'\n</pre>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> values is almost always\nerroneous.</p>\n<h2>How to fix it</h2>\n<p>Whenever attempting to compare float values, it is important to consider the inherent imprecision of floating-point arithmetic.</p>\n<p>One common solution to this problem is to use a tolerance value (also called epsilon) to define an acceptable range of difference between two\nfloats. A tolerance value may be relative (based on the magnitude of the numbers being compared) or absolute. Note that comparing a value to 0 is a\nspecial case: as it has no magnitude, it is important to use an absolute tolerance value.</p>\n<p>The <code>math.isclose</code> function allows to compare floats with a relative and absolute tolerance. One should however be careful when\ncomparing values to 0, as by default, the absolute tolerance of <code>math.isclose</code> is <code>0.0</code> (this case is covered by rule\n{rule:python:S6727}) . Depending on the library you\u00e2\u20ac\u2122re using, equivalent functions exist, with possibly different default tolerances (e.g\n<code>numpy.isclose</code> or <code>torch.isclose</code> which are respectively designed to work with <code>numpy</code> arrays and\n<code>pytorch</code> tensors).</p>\n<p>If precise decimal arithmetic is needed, another option is to use the <code>Decimal</code> class of the <code>decimal</code> module, which allows\nfor exact decimal arithmetic.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo(a, b):\n    return a == b - 0.1\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport math\ndef foo(a, b):\n    return math.isclose(a, b - 0.1, rel_tol=1e-09, abs_tol=1e-09)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a\n  href=\"https://docs.python.org/3/tutorial/floatingpoint.html#floating-point-arithmetic-issues-and-limitations\">Floating Point Arithmetic: Issues and\n  Limitations</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/decimal.html#module-decimal\">Decimal fixed point and floating point\n  arithmetic</a> </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.isclose.html\">numpy.isclose</a> </li>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/stable/generated/torch.isclose.html\">torch.isclose</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S6727} - The <code>abs_tol</code> parameter should be provided when using <code>math.isclose</code> to compare values to\n  <code>0</code> </li>\n</ul>\n\n"
        },
        {
          "id": "S6982",
          "name": "\"model.eval()\" or \"model.train()\" should be called after loading the state of a PyTorch model",
          "description": "<p>This rule raises an issue when a PyTorch model state is loaded and <code>torch.nn.Module.eval()</code> or <code>torch.nn.Module.train()</code> is\nnot called.</p>\n<h2>Why is this an issue?</h2>\n<p>When using PyTorch it is common practice to load and save a model\u00e2\u20ac\u2122s state from/to a <code>.pth</code> file. Doing so allows, for example, to\ninstantiate an untrained model and load learned parameters coming from another pre-trained model. Once the learned parameters are loaded to the model\nit is important, before inferencing, to clearly state the intention by calling <code>torch.nn.Module.eval()</code> method to set the model in\nevaluation mode or calling <code>torch.nn.Module.train()</code> to indicate the training will resume. Failing to call\n<code>torch.nn.Module.eval()</code> would leave the model in training mode which may not be the intention.</p>\n<h2>How to fix it</h2>\n<p>Call the <code>torch.nn.Module.eval()</code> or <code>torch.nn.Module.train()</code> method on the model.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth')) # Noncompliant: model.train() or model.eval() was not called.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth'))\nmodel.eval()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.eval\">eval - reference</a>\n  </li>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.train\">train - reference</a>\n  </li>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/stable/notes/autograd.html#evaluation-mode-nn-module-eval\">Autograd - Evaluation\n  Mode</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a PyTorch model state is loaded and <code>torch.nn.Module.eval()</code> or <code>torch.nn.Module.train()</code> is\nnot called.</p>\n<h2>Why is this an issue?</h2>\n<p>When using PyTorch it is common practice to load and save a model\u00e2\u20ac\u2122s state from/to a <code>.pth</code> file. Doing so allows, for example, to\ninstantiate an untrained model and load learned parameters coming from another pre-trained model. Once the learned parameters are loaded to the model\nit is important, before inferencing, to clearly state the intention by calling <code>torch.nn.Module.eval()</code> method to set the model in\nevaluation mode or calling <code>torch.nn.Module.train()</code> to indicate the training will resume. Failing to call\n<code>torch.nn.Module.eval()</code> would leave the model in training mode which may not be the intention.</p>\n<h2>How to fix it</h2>\n<p>Call the <code>torch.nn.Module.eval()</code> or <code>torch.nn.Module.train()</code> method on the model.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth')) # Noncompliant: model.train() or model.eval() was not called.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport torch\nimport torchvision.models as models\n\nmodel = models.vgg16()\nmodel.load_state_dict(torch.load('model_weights.pth'))\nmodel.eval()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.eval\">eval - reference</a>\n  </li>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.train\">train - reference</a>\n  </li>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/stable/notes/autograd.html#evaluation-mode-nn-module-eval\">Autograd - Evaluation\n  Mode</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6972",
          "name": "Nested estimator parameters modification in a Pipeline should refer to valid parameters",
          "description": "<p>This rule raises an issue when an invalid nested estimator parameter is set on a Pipeline.</p>\n<h2>Why is this an issue?</h2>\n<p>In the sklearn library, when using the <code>Pipeline</code> class, it is possible to modify the parameters of the nested estimators. This\nmodification can be done by using the <code>Pipeline</code> method <code>set_params</code> and specifying the name of the estimator and the parameter\nto update separated by a double underscore <code>__</code>.</p>\n<pre>\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\n\npipe = Pipeline(steps=[(\"clf\", SVC())])\npipe.set_params(clf__C=10)\n</pre>\n<p>In the example above, the regularization parameter <code>C</code> is set to the value <code>10</code> for the classifier called <code>clf</code>.\nSetting such parameters can be done as well with the help of the <code>param_grid</code> parameter for example when using\n<code>GridSearchCV</code>.</p>\n<p>Providing invalid parameters that do not exist on the estimator can lead to unexpected behavior or runtime errors.</p>\n<p>This rule checks that the parameters provided to the <code>set_params</code> method of a Pipeline instance or through the <code>param_grid</code>\nparameters of a <code>GridSearchCV</code> are valid for the nested estimators.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue provide valid parameters to the nested estimators.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA\n\npipe = Pipeline(steps=[('reduce_dim', PCA())])\npipe.set_params(reduce_dim__C=2) # Noncompliant: the parameter C does not exists for the PCA estimator\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA\n\npipe = Pipeline(steps=[('reduce_dim', PCA())])\npipe.set_params(reduce_dim__n_components=2) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Scikit-Learn documentation - <a href=\"https://scikit-learn.org/stable/modules/compose.html#access-to-nested-parameters\">Access to nested\n  parameters</a> </li>\n  <li> Scikit-Learn documentation - <a\n  href=\"https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn-model-selection-gridsearchcv\">GridSearchCV\n  reference</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when an invalid nested estimator parameter is set on a Pipeline.</p>\n<h2>Why is this an issue?</h2>\n<p>In the sklearn library, when using the <code>Pipeline</code> class, it is possible to modify the parameters of the nested estimators. This\nmodification can be done by using the <code>Pipeline</code> method <code>set_params</code> and specifying the name of the estimator and the parameter\nto update separated by a double underscore <code>__</code>.</p>\n<pre>\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\n\npipe = Pipeline(steps=[(\"clf\", SVC())])\npipe.set_params(clf__C=10)\n</pre>\n<p>In the example above, the regularization parameter <code>C</code> is set to the value <code>10</code> for the classifier called <code>clf</code>.\nSetting such parameters can be done as well with the help of the <code>param_grid</code> parameter for example when using\n<code>GridSearchCV</code>.</p>\n<p>Providing invalid parameters that do not exist on the estimator can lead to unexpected behavior or runtime errors.</p>\n<p>This rule checks that the parameters provided to the <code>set_params</code> method of a Pipeline instance or through the <code>param_grid</code>\nparameters of a <code>GridSearchCV</code> are valid for the nested estimators.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue provide valid parameters to the nested estimators.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA\n\npipe = Pipeline(steps=[('reduce_dim', PCA())])\npipe.set_params(reduce_dim__C=2) # Noncompliant: the parameter C does not exists for the PCA estimator\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA\n\npipe = Pipeline(steps=[('reduce_dim', PCA())])\npipe.set_params(reduce_dim__n_components=2) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Scikit-Learn documentation - <a href=\"https://scikit-learn.org/stable/modules/compose.html#access-to-nested-parameters\">Access to nested\n  parameters</a> </li>\n  <li> Scikit-Learn documentation - <a\n  href=\"https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn-model-selection-gridsearchcv\">GridSearchCV\n  reference</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6969",
          "name": "\"memory\" parameter should be specified for Scikit-Learn Pipeline",
          "description": "<p>This rule raises an issue when a Scikit-Learn Pipeline is created without specifying the <code>memory</code> argument.</p>\n<h2>Why is this an issue?</h2>\n<p>When the <code>memory</code> argument is not specified, the pipeline will recompute the transformers every time the pipeline is fitted. This can be\ntime-consuming if the transformers are expensive to compute or if the dataset is large.</p>\n<p>However, if the intent is to recompute the transformers everytime, the memory argument should be set explicitly to <code>None</code>. This way the\nintention is clear.</p>\n<h2>How to fix it</h2>\n<p>Specify the <code>memory</code> argument when creating a Scikit-Learn Pipeline.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classifier', LinearDiscriminantAnalysis())\n]) # Noncompliant: the memory parameter is not provided\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classifier', LinearDiscriminantAnalysis())\n], memory=\"cache_folder\") # Compliant\n</pre>\n<h3>Pitfalls</h3>\n<p>If the pipeline is used with different datasets, the cache may not be helpful and can consume a lot of space. This is true when using\n<code>sklearn.model_selection.HalvingGridSearchCV</code> or <code>sklearn.model_selection.HalvingRandomSearchCV</code> because the size of the dataset\nchanges every iteration when using the default configuration.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Scikit-Learn documentation - <a\n  href=\"https://scikit-learn.org/stable/modules/compose.html#caching-transformers-avoid-repeated-computation\">Pipeline</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a Scikit-Learn Pipeline is created without specifying the <code>memory</code> argument.</p>\n<h2>Why is this an issue?</h2>\n<p>When the <code>memory</code> argument is not specified, the pipeline will recompute the transformers every time the pipeline is fitted. This can be\ntime-consuming if the transformers are expensive to compute or if the dataset is large.</p>\n<p>However, if the intent is to recompute the transformers everytime, the memory argument should be set explicitly to <code>None</code>. This way the\nintention is clear.</p>\n<h2>How to fix it</h2>\n<p>Specify the <code>memory</code> argument when creating a Scikit-Learn Pipeline.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classifier', LinearDiscriminantAnalysis())\n]) # Noncompliant: the memory parameter is not provided\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classifier', LinearDiscriminantAnalysis())\n], memory=\"cache_folder\") # Compliant\n</pre>\n<h3>Pitfalls</h3>\n<p>If the pipeline is used with different datasets, the cache may not be helpful and can consume a lot of space. This is true when using\n<code>sklearn.model_selection.HalvingGridSearchCV</code> or <code>sklearn.model_selection.HalvingRandomSearchCV</code> because the size of the dataset\nchanges every iteration when using the default configuration.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Scikit-Learn documentation - <a\n  href=\"https://scikit-learn.org/stable/modules/compose.html#caching-transformers-avoid-repeated-computation\">Pipeline</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6919",
          "name": "The \"input_shape\" parameter should not be specified for \"tf.keras.Model\" subclasses",
          "description": "<p>This rule raises an issue when the <code>input_shape</code> is specified in a <code>tensorflow.keras.Model</code> subclass.</p>\n<h2>Why is this an issue?</h2>\n<p>Keras provides a full-featured model class called <code>tensorflow.keras.Model</code>. It inherits from <code>tensorflow.keras.layers.Layer</code>,\nso a Keras model can be used and nested in the same way as Keras layers. Keras models come with extra functionality that makes them easy to train,\nevaluate, load, save, and even train on multiple machines.</p>\n<p>As the <code>tensorflow.keras.Model</code> class inherits from the 'tensorflow.keras.layers' you do not need to specify <code>input_shape</code> in\na subclassed model; this argument will be ignored.</p>\n<h2>How to fix it</h2>\n<p>Do not specify <code>input_shape</code> in a <code>tf.keras.Model</code> subclasses</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\nclass MyModel(tf.keras.Model):\n    def __init__(self):\n        super(MyModel, self).__init__(input_shape=...)  # Noncompliant: this parameter will be ignored\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\nclass MyModel(tf.keras.Model):\n    def __init__(self):\n        super(MyModel, self).__init__()  # OK\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Tensorflow documentation - <a href=\"https://www.tensorflow.org/guide/intro_to_modules#keras_models\">Keras models</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the <code>input_shape</code> is specified in a <code>tensorflow.keras.Model</code> subclass.</p>\n<h2>Why is this an issue?</h2>\n<p>Keras provides a full-featured model class called <code>tensorflow.keras.Model</code>. It inherits from <code>tensorflow.keras.layers.Layer</code>,\nso a Keras model can be used and nested in the same way as Keras layers. Keras models come with extra functionality that makes them easy to train,\nevaluate, load, save, and even train on multiple machines.</p>\n<p>As the <code>tensorflow.keras.Model</code> class inherits from the 'tensorflow.keras.layers' you do not need to specify <code>input_shape</code> in\na subclassed model; this argument will be ignored.</p>\n<h2>How to fix it</h2>\n<p>Do not specify <code>input_shape</code> in a <code>tf.keras.Model</code> subclasses</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\nclass MyModel(tf.keras.Model):\n    def __init__(self):\n        super(MyModel, self).__init__(input_shape=...)  # Noncompliant: this parameter will be ignored\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\nclass MyModel(tf.keras.Model):\n    def __init__(self):\n        super(MyModel, self).__init__()  # OK\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Tensorflow documentation - <a href=\"https://www.tensorflow.org/guide/intro_to_modules#keras_models\">Keras models</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6918",
          "name": "\"tf.Variable\" objects should be singletons when created inside of a \"tf.function\"",
          "description": "<p>This rule raises an issue when a <code>tensorflow.Variable</code> created inside of a <code>tensorflow.function</code> is not a singleton.</p>\n<h2>Why is this an issue?</h2>\n<p><code>tensorflow.function</code>s only supports singleton <code>tensorflow.Variable</code>s. This means the variable will be created on the first\ncall of the <code>tensorflow.function</code> and will be reused across the subsequent calls. Creating a <code>tensorflow.Variable</code> that is not a\nsingleton will raise a <code>ValueError</code>.</p>\n<pre>\nimport tensorflow as tf\n\n@tf.function\ndef f(x):\n  v = tf.Variable(1.0)\n  return v\n</pre>\n<p>In the example above each time the function <code>f</code> will be called a new <code>tensorflow.Variable</code> will be created.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue use the singleton pattern to avoid the creation of a <code>tensorflow.Variable</code> multiple times.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\nclass Count(tf.Module):\n  def __init__(self):\n    self.count = None\n\n  @tf.function\n  def __call__(self):\n    self.count = tf.Variable(0) # Noncompliant: the variable will be re-created for each call\n    return self.count.assign_add(1)\n\nc = Count()\nc() # ValueError is raised\nc()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\nclass Count(tf.Module):\n  def __init__(self):\n    self.count = None\n\n  @tf.function\n  def __call__(self):\n    if self.count is None:\n      self.count = tf.Variable(0) # Compliant: the variable is created only on during the first call\n    return self.count.assign_add(1)\n\nc = Count()\nc()\nc()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/guide/function#creating_tfvariables\">Creating tf.Variables</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a <code>tensorflow.Variable</code> created inside of a <code>tensorflow.function</code> is not a singleton.</p>\n<h2>Why is this an issue?</h2>\n<p><code>tensorflow.function</code>s only supports singleton <code>tensorflow.Variable</code>s. This means the variable will be created on the first\ncall of the <code>tensorflow.function</code> and will be reused across the subsequent calls. Creating a <code>tensorflow.Variable</code> that is not a\nsingleton will raise a <code>ValueError</code>.</p>\n<pre>\nimport tensorflow as tf\n\n@tf.function\ndef f(x):\n  v = tf.Variable(1.0)\n  return v\n</pre>\n<p>In the example above each time the function <code>f</code> will be called a new <code>tensorflow.Variable</code> will be created.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue use the singleton pattern to avoid the creation of a <code>tensorflow.Variable</code> multiple times.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\nclass Count(tf.Module):\n  def __init__(self):\n    self.count = None\n\n  @tf.function\n  def __call__(self):\n    self.count = tf.Variable(0) # Noncompliant: the variable will be re-created for each call\n    return self.count.assign_add(1)\n\nc = Count()\nc() # ValueError is raised\nc()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\nclass Count(tf.Module):\n  def __init__(self):\n    self.count = None\n\n  @tf.function\n  def __call__(self):\n    if self.count is None:\n      self.count = tf.Variable(0) # Compliant: the variable is created only on during the first call\n    return self.count.assign_add(1)\n\nc = Count()\nc()\nc()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/guide/function#creating_tfvariables\">Creating tf.Variables</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6890",
          "name": "\"zoneinfo\" should be preferred to \"pytz\" when using Python 3.9 and later",
          "description": "<p>This rule raises an issue when using the <code>pytz</code> library on a codebase using Python 3.9 or later.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python 3.9 and later, the <code>zoneinfo</code> module is the recommended tool for handling timezones, replacing the <code>pytz</code> library.\nThis recommendation is based on several key advantages.</p>\n<p>First, <code>zoneinfo</code> is part of Python\u00e2\u20ac\u2122s standard library, making it readily available without needing additional installation, unlike\n<code>pytz</code>.</p>\n<p>Second, <code>zoneinfo</code> integrates seamlessly with Python\u00e2\u20ac\u2122s datetime module. You can directly use <code>zoneinfo</code> timezone objects when\ncreating <code>datetime</code> objects, making it more intuitive and less error-prone than <code>pytz</code>, which requires a separate localize\nmethod for this purpose.</p>\n<p>Third, <code>zoneinfo</code> handles historical timezone changes more accurately than <code>pytz</code>. When a <code>pytz</code> timezone object\nis used, it defaults to the earliest known offset, which can lead to unexpected results. <code>zoneinfo</code> does not have this issue.</p>\n<p>Lastly, <code>zoneinfo</code> uses the system\u00e2\u20ac\u2122s IANA time zone database when available, ensuring it works with the most up-to-date timezone data.\nIn contrast, <code>pytz</code> includes its own copy of the IANA database, which may not be as current.</p>\n<p>In summary, <code>zoneinfo</code> offers a more modern, intuitive, and reliable approach to handling timezones in Python 3.9 and later, making it\nthe preferred choice over <code>pytz</code>.</p>\n<h2>How to fix it</h2>\n<p>To fix this is issue use a <code>zoneinfo</code> timezone object when constructing a <code>datetime</code> instead of the <code>pytz</code>\nlibrary.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\nimport pytz\n\ndt = pytz.timezone('America/New_York'').localize(datetime(2022, 1, 1))  # Noncompliant: the localize method is needed to avoid bugs (see S6887)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\ndt = datetime(2022, 1, 1, tzinfo=ZoneInfo('America/New_York'))  # OK: timezone object can be used safely through the datetime constructor\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP 615 - <a href=\"https://peps.python.org/pep-0615/\">Support for the IANA Time Zone Database in the Standard Library</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S6887} - pytz.timezone should not be passed to the datetime.datetime constructor </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when using the <code>pytz</code> library on a codebase using Python 3.9 or later.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python 3.9 and later, the <code>zoneinfo</code> module is the recommended tool for handling timezones, replacing the <code>pytz</code> library.\nThis recommendation is based on several key advantages.</p>\n<p>First, <code>zoneinfo</code> is part of Python\u00e2\u20ac\u2122s standard library, making it readily available without needing additional installation, unlike\n<code>pytz</code>.</p>\n<p>Second, <code>zoneinfo</code> integrates seamlessly with Python\u00e2\u20ac\u2122s datetime module. You can directly use <code>zoneinfo</code> timezone objects when\ncreating <code>datetime</code> objects, making it more intuitive and less error-prone than <code>pytz</code>, which requires a separate localize\nmethod for this purpose.</p>\n<p>Third, <code>zoneinfo</code> handles historical timezone changes more accurately than <code>pytz</code>. When a <code>pytz</code> timezone object\nis used, it defaults to the earliest known offset, which can lead to unexpected results. <code>zoneinfo</code> does not have this issue.</p>\n<p>Lastly, <code>zoneinfo</code> uses the system\u00e2\u20ac\u2122s IANA time zone database when available, ensuring it works with the most up-to-date timezone data.\nIn contrast, <code>pytz</code> includes its own copy of the IANA database, which may not be as current.</p>\n<p>In summary, <code>zoneinfo</code> offers a more modern, intuitive, and reliable approach to handling timezones in Python 3.9 and later, making it\nthe preferred choice over <code>pytz</code>.</p>\n<h2>How to fix it</h2>\n<p>To fix this is issue use a <code>zoneinfo</code> timezone object when constructing a <code>datetime</code> instead of the <code>pytz</code>\nlibrary.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\nimport pytz\n\ndt = pytz.timezone('America/New_York'').localize(datetime(2022, 1, 1))  # Noncompliant: the localize method is needed to avoid bugs (see S6887)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\ndt = datetime(2022, 1, 1, tzinfo=ZoneInfo('America/New_York'))  # OK: timezone object can be used safely through the datetime constructor\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP 615 - <a href=\"https://peps.python.org/pep-0615/\">Support for the IANA Time Zone Database in the Standard Library</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S6887} - pytz.timezone should not be passed to the datetime.datetime constructor </li>\n</ul>\n\n"
        },
        {
          "id": "S6887",
          "name": "\"pytz.timezone\" should not be passed to the \"datetime.datetime\" constructor",
          "description": "<p>This rule raises an issue when passing a <code>pytz.timezone</code> to the <code>datetime.datetime</code> constructor.</p>\n<h2>Why is this an issue?</h2>\n<p>When working with timezones in Python, it\u00e2\u20ac\u2122s important to understand that the <code>datetime.datetime</code> constructor and <code>pytz</code>\ntimezone objects handle timezones differently. This difference can lead to unexpected results if a <code>pytz</code> object is used as the\n<code>tzinfo</code> argument in the <code>datetime.datetime</code> constructor.</p>\n<p>The <code>datetime.datetime</code> constructor expects a <code>tzinfo</code> object that is a subclass of the <code>datetime.tzinfo</code> base\nclass. <code>pytz</code> timezone objects do provide this interface, but they implement it in a way that\u00e2\u20ac\u2122s not fully compatible with\n<code>datetime.datetime</code>.</p>\n<p>One key difference is how they handle historical changes in timezone offsets. The <code>datetime</code> module uses the IANA time zone database,\nwhich includes historical changes.</p>\n<p>When you create a <code>datetime</code> object with a <code>pytz</code> timezone object as the <code>tzinfo</code> argument, it uses the earliest\nknown offset for that timezone. This can lead to unexpected offsets, as the earliest known offset may not match the current or most commonly used\noffset for that timezone.</p>\n<p>For example, if you were to use 'US/Eastern' as your timezone, you might expect the offset to be either -5 hours (Eastern Standard Time) or -4\nhours (Eastern Daylight Time), depending on the time of the year. However, due to historical changes, the actual offset might be something different,\nlike -4 hours and 56 minutes. This can lead to subtle bugs in your code, especially if you\u00e2\u20ac\u2122re doing calculations with datetime objects.</p>\n<p>Note that, when using Python 3.9 and later, it is recommended to use the <code>zoneinfo</code> package from the standard library over\n<code>pytz</code>.</p>\n<h2>How to fix it</h2>\n<p>To avoid these issues, it\u00e2\u20ac\u2122s recommended to use the localize method of <code>pytz</code> timezone objects to attach a timezone to a\n<code>datetime</code> object. This method correctly handles historical changes and other timezone-related issues.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport datetime\nimport pytz\n\ndt = datetime.datetime(2022, 1, 1, tzinfo=pytz.timezone('US/Eastern'))  # Noncompliant: 2022-01-01 00:00:00-04:56\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport datetime\nimport pytz\n\ndt = pytz.timezone('US/Eastern').localize(datetime.datetime(2022, 1, 1))  # OK: 2022-01-01 00:00:00-05:00\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP 615 - <a href=\"https://peps.python.org/pep-0615/\">Support for the IANA Time Zone Database in the Standard Library</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when passing a <code>pytz.timezone</code> to the <code>datetime.datetime</code> constructor.</p>\n<h2>Why is this an issue?</h2>\n<p>When working with timezones in Python, it\u00e2\u20ac\u2122s important to understand that the <code>datetime.datetime</code> constructor and <code>pytz</code>\ntimezone objects handle timezones differently. This difference can lead to unexpected results if a <code>pytz</code> object is used as the\n<code>tzinfo</code> argument in the <code>datetime.datetime</code> constructor.</p>\n<p>The <code>datetime.datetime</code> constructor expects a <code>tzinfo</code> object that is a subclass of the <code>datetime.tzinfo</code> base\nclass. <code>pytz</code> timezone objects do provide this interface, but they implement it in a way that\u00e2\u20ac\u2122s not fully compatible with\n<code>datetime.datetime</code>.</p>\n<p>One key difference is how they handle historical changes in timezone offsets. The <code>datetime</code> module uses the IANA time zone database,\nwhich includes historical changes.</p>\n<p>When you create a <code>datetime</code> object with a <code>pytz</code> timezone object as the <code>tzinfo</code> argument, it uses the earliest\nknown offset for that timezone. This can lead to unexpected offsets, as the earliest known offset may not match the current or most commonly used\noffset for that timezone.</p>\n<p>For example, if you were to use 'US/Eastern' as your timezone, you might expect the offset to be either -5 hours (Eastern Standard Time) or -4\nhours (Eastern Daylight Time), depending on the time of the year. However, due to historical changes, the actual offset might be something different,\nlike -4 hours and 56 minutes. This can lead to subtle bugs in your code, especially if you\u00e2\u20ac\u2122re doing calculations with datetime objects.</p>\n<p>Note that, when using Python 3.9 and later, it is recommended to use the <code>zoneinfo</code> package from the standard library over\n<code>pytz</code>.</p>\n<h2>How to fix it</h2>\n<p>To avoid these issues, it\u00e2\u20ac\u2122s recommended to use the localize method of <code>pytz</code> timezone objects to attach a timezone to a\n<code>datetime</code> object. This method correctly handles historical changes and other timezone-related issues.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport datetime\nimport pytz\n\ndt = datetime.datetime(2022, 1, 1, tzinfo=pytz.timezone('US/Eastern'))  # Noncompliant: 2022-01-01 00:00:00-04:56\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport datetime\nimport pytz\n\ndt = pytz.timezone('US/Eastern').localize(datetime.datetime(2022, 1, 1))  # OK: 2022-01-01 00:00:00-05:00\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP 615 - <a href=\"https://peps.python.org/pep-0615/\">Support for the IANA Time Zone Database in the Standard Library</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6794",
          "name": "Type aliases should be declared with a \"type\" statement",
          "description": "<p>This rule raises an issue when a type alias is declared outside of a <code>type</code> statement.</p>\n<h2>Why is this an issue?</h2>\n<p>Since Python 3.12 the keyword <code>type</code> is used to defined type aliases. It replaces the following construct:</p>\n<pre>\nfrom typing import TypeAlias, TypeVar\n\n_T = TypeVar(\"_T\")\n\nMyTypeAlias: TypeAlias = set[_T]\n</pre>\n<p>Using the <code>type</code> statement to define type aliases allows for a more concise code and thus better readability. This also makes it\npossible to declutter the code, as imports from the <code>typing</code> module (<code>TypeAlias</code> and <code>TyperVar</code>) can be removed.</p>\n<pre>\ntype MyTypeAlias[T] = set[T]\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will only raise an issue when the Python version of the analyzed project is set to 3.12 or higher.</p>\n<h2>How to fix it</h2>\n<p>Use a <code>type</code> statement to declare the <code>TypeAlias</code> instead of using a regular assignment.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom typing import TypeAlias\n\nMyStringAlias: TypeAlias = str # Noncompliant: this TypeAlias can be more concise with the help of the type statement.\n\n_T = TypeVar(\"_T\")\nMyGenericAlias: TypeAlias = list[_T]  # Noncompliant: the type statement can help replace both the TypeVar and the TypeAlias statements.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntype MyStringAlias = str # Compliant\n\ntype MyGenericAlias[T] = list[T]  # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.12/reference/simple_stmts.html#type\">The type statement</a> </li>\n  <li> Python 3.12 Release Notes - <a href=\"https://docs.python.org/3.12/whatsnew/3.12.html#pep-695-type-parameter-syntax\">PEP 695: Type Parameter\n  Syntax</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a type alias is declared outside of a <code>type</code> statement.</p>\n<h2>Why is this an issue?</h2>\n<p>Since Python 3.12 the keyword <code>type</code> is used to defined type aliases. It replaces the following construct:</p>\n<pre>\nfrom typing import TypeAlias, TypeVar\n\n_T = TypeVar(\"_T\")\n\nMyTypeAlias: TypeAlias = set[_T]\n</pre>\n<p>Using the <code>type</code> statement to define type aliases allows for a more concise code and thus better readability. This also makes it\npossible to declutter the code, as imports from the <code>typing</code> module (<code>TypeAlias</code> and <code>TyperVar</code>) can be removed.</p>\n<pre>\ntype MyTypeAlias[T] = set[T]\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will only raise an issue when the Python version of the analyzed project is set to 3.12 or higher.</p>\n<h2>How to fix it</h2>\n<p>Use a <code>type</code> statement to declare the <code>TypeAlias</code> instead of using a regular assignment.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom typing import TypeAlias\n\nMyStringAlias: TypeAlias = str # Noncompliant: this TypeAlias can be more concise with the help of the type statement.\n\n_T = TypeVar(\"_T\")\nMyGenericAlias: TypeAlias = list[_T]  # Noncompliant: the type statement can help replace both the TypeVar and the TypeAlias statements.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntype MyStringAlias = str # Compliant\n\ntype MyGenericAlias[T] = list[T]  # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.12/reference/simple_stmts.html#type\">The type statement</a> </li>\n  <li> Python 3.12 Release Notes - <a href=\"https://docs.python.org/3.12/whatsnew/3.12.html#pep-695-type-parameter-syntax\">PEP 695: Type Parameter\n  Syntax</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6792",
          "name": "Generic classes should be defined using the type parameter syntax",
          "description": "<p>This rule raises an issue when a generic class is defined through explicit inheritance of <code>typing.Generic</code> instead of using the type\nparameter syntax.</p>\n<h2>Why is this an issue?</h2>\n<p>Through <a href=\"https://peps.python.org/pep-0695/\">PEP 695</a>, Python 3.12 introduces the type parameter syntax to allow for a more compact and\nexplicit way to define generic classes and functions.</p>\n<p>Prior to Python 3.12, defining a generic class would be done through the following syntax:</p>\n<pre>\nfrom typing import Generic, TypeVar\n\n_T_co = TypeVar(\"_T_co\", covariant=True, bound=str)\n\nclass ClassA(Generic[_T_co]):\n    def method1(self) -&gt; _T_co:\n        ...\n</pre>\n<p>Since Python 3.12, it can be done with the following syntax:</p>\n<pre>\nclass ClassA[T: str]:\n    def method1(self) -&gt; T:\n        ...\n</pre>\n<p>Using the former syntax requires importing <code>TypeVar</code> and <code>Generic</code> symbols from the <code>typing</code> module. It also\nrequires the explicit definition of a type variable in the global scope, with a redundant name provided in quotes (<code>T = TypeVar(\"T\")</code>).\nThis makes the definition of generic classes verbose and confusing.</p>\n<p>It is therefore recommended to use the type parameter syntax when working with Python 3.12 and later.</p>\n<h3>Exceptions</h3>\n<p>This rule will only raise an issue when the Python version of the analyzed project is set to 3.12 or higher.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to use the type parameter syntax whenever defining a generic class.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom typing import Generic, TypeVar\n\n_T_co = TypeVar(\"_T_co\", covariant=True, bound=str)\n\nclass ClassA(Generic[_T_co]):  # Noncompliant: Explicit definition of a TypeVar and inheritance from typing.Generic is verbose\n    def method1(self) -&gt; _T_co:\n        ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass ClassA[T: str]:  # Compliant: Concise syntax for type parameter is used\n    def method1(self) -&gt; T:\n        ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.12/reference/compound_stmts.html#generic-classes\">Generic classes</a> </li>\n  <li> Python 3.12 Release Notes - <a href=\"https://docs.python.org/3.12/whatsnew/3.12.html#pep-695-type-parameter-syntax\">PEP 695: Type Parameter\n  Syntax</a> </li>\n  <li> PEP 695 - <a href=\"https://peps.python.org/pep-0695/\">Type Parameter Syntax</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a generic class is defined through explicit inheritance of <code>typing.Generic</code> instead of using the type\nparameter syntax.</p>\n<h2>Why is this an issue?</h2>\n<p>Through <a href=\"https://peps.python.org/pep-0695/\">PEP 695</a>, Python 3.12 introduces the type parameter syntax to allow for a more compact and\nexplicit way to define generic classes and functions.</p>\n<p>Prior to Python 3.12, defining a generic class would be done through the following syntax:</p>\n<pre>\nfrom typing import Generic, TypeVar\n\n_T_co = TypeVar(\"_T_co\", covariant=True, bound=str)\n\nclass ClassA(Generic[_T_co]):\n    def method1(self) -&gt; _T_co:\n        ...\n</pre>\n<p>Since Python 3.12, it can be done with the following syntax:</p>\n<pre>\nclass ClassA[T: str]:\n    def method1(self) -&gt; T:\n        ...\n</pre>\n<p>Using the former syntax requires importing <code>TypeVar</code> and <code>Generic</code> symbols from the <code>typing</code> module. It also\nrequires the explicit definition of a type variable in the global scope, with a redundant name provided in quotes (<code>T = TypeVar(\"T\")</code>).\nThis makes the definition of generic classes verbose and confusing.</p>\n<p>It is therefore recommended to use the type parameter syntax when working with Python 3.12 and later.</p>\n<h3>Exceptions</h3>\n<p>This rule will only raise an issue when the Python version of the analyzed project is set to 3.12 or higher.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to use the type parameter syntax whenever defining a generic class.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom typing import Generic, TypeVar\n\n_T_co = TypeVar(\"_T_co\", covariant=True, bound=str)\n\nclass ClassA(Generic[_T_co]):  # Noncompliant: Explicit definition of a TypeVar and inheritance from typing.Generic is verbose\n    def method1(self) -&gt; _T_co:\n        ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass ClassA[T: str]:  # Compliant: Concise syntax for type parameter is used\n    def method1(self) -&gt; T:\n        ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.12/reference/compound_stmts.html#generic-classes\">Generic classes</a> </li>\n  <li> Python 3.12 Release Notes - <a href=\"https://docs.python.org/3.12/whatsnew/3.12.html#pep-695-type-parameter-syntax\">PEP 695: Type Parameter\n  Syntax</a> </li>\n  <li> PEP 695 - <a href=\"https://peps.python.org/pep-0695/\">Type Parameter Syntax</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5914",
          "name": "Assertions should not fail or succeed unconditionally",
          "description": "<p>This rule raises an issue when an assertion result is constant.</p>\n<h2>Why is this an issue?</h2>\n<p>Assertions are meant to detect when code behaves as expected. An assertion which fails or succeeds all the time does not achieve this. Either it is\nredundant and should be removed to improve readabity or it is a mistake and the assertion should be corrected.</p>\n<p>This rule raises an issue when an assertion method is given parameters which will make it succeed or fail all the time. It covers three cases:</p>\n<ul>\n  <li> an <code>assert</code> statement or a unittest\u00e2\u20ac\u2122s <code>assertTrue</code> or <code>assertFalse</code> method is called with a value which will\n  be always True or always False. </li>\n  <li> a unittest\u00e2\u20ac\u2122s <code>assertIsNotNone</code> or <code>assertIsNone</code> method is called with a value which will always be None or never be\n  None. </li>\n  <li> a unittest\u00e2\u20ac\u2122s <code>assertIsNot</code> or <code>assertIs</code> method is called with a literal expression creating a new object every time (ex:\n  <code>[1, 2, 3]</code>). </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport unittest\n\nclass MyTestCase(unittest.TestCase):\n    def expect_not_none(self):\n        self.assertIsNotNone(round(1.5))  # Noncompliant: This assertion always succeeds because \"round\" returns a number, not None.\n\n    def helper_compare(param):\n        self.assertIs(param, [1, 2, 3])  # Noncompliant: This assertion always fails because [1, 2, 3] creates a new object.\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport unittest\n\nclass MyTestCase(unittest.TestCase):\n    def expect_not_none(self):\n        self.assertNotEqual(round(1.5), 0)\n\n    def helper_compare(param):\n        self.assertEqual(param, [1, 2, 3])\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/unittest.html\">Python documentation - the <code>unittest</code> module</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement\">Python documentation - the <code>assert</code>\n  statement</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when an assertion result is constant.</p>\n<h2>Why is this an issue?</h2>\n<p>Assertions are meant to detect when code behaves as expected. An assertion which fails or succeeds all the time does not achieve this. Either it is\nredundant and should be removed to improve readabity or it is a mistake and the assertion should be corrected.</p>\n<p>This rule raises an issue when an assertion method is given parameters which will make it succeed or fail all the time. It covers three cases:</p>\n<ul>\n  <li> an <code>assert</code> statement or a unittest\u00e2\u20ac\u2122s <code>assertTrue</code> or <code>assertFalse</code> method is called with a value which will\n  be always True or always False. </li>\n  <li> a unittest\u00e2\u20ac\u2122s <code>assertIsNotNone</code> or <code>assertIsNone</code> method is called with a value which will always be None or never be\n  None. </li>\n  <li> a unittest\u00e2\u20ac\u2122s <code>assertIsNot</code> or <code>assertIs</code> method is called with a literal expression creating a new object every time (ex:\n  <code>[1, 2, 3]</code>). </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport unittest\n\nclass MyTestCase(unittest.TestCase):\n    def expect_not_none(self):\n        self.assertIsNotNone(round(1.5))  # Noncompliant: This assertion always succeeds because \"round\" returns a number, not None.\n\n    def helper_compare(param):\n        self.assertIs(param, [1, 2, 3])  # Noncompliant: This assertion always fails because [1, 2, 3] creates a new object.\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport unittest\n\nclass MyTestCase(unittest.TestCase):\n    def expect_not_none(self):\n        self.assertNotEqual(round(1.5), 0)\n\n    def helper_compare(param):\n        self.assertEqual(param, [1, 2, 3])\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/unittest.html\">Python documentation - the <code>unittest</code> module</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement\">Python documentation - the <code>assert</code>\n  statement</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S3457",
          "name": "String formatting should be used correctly",
          "description": "<h2>Why is this an issue?</h2>\n<p>A format string is a string that contains placeholders, usually represented by special characters such as \"%s\" or \"{}\", depending on the technology\nin use. These placeholders are replaced by values when the string is printed or logged. Thus, it is required that a string is valid and arguments\nmatch replacement fields in this string.</p>\n<p>This applies to <a href=\"https://docs.python.org/3/tutorial/inputoutput.html#old-string-formatting\">the % operator</a>, the <a\nhref=\"https://docs.python.org/3/tutorial/inputoutput.html#the-string-format-method\">str.format</a> method, and loggers from the <a\nhref=\"https://docs.python.org/3/library/logging.html\">logging</a> module. Internally, the latter use the <code>%-formatting</code>. The only\ndifference is that they will log an error instead of raising an exception when the provided arguments are invalid.</p>\n<p>Formatted string literals (also called \"f-strings\"; available since Python 3.6) are generally simpler to use, and any syntax mistake will cause a\nfailure at compile time. However, it is easy to forget curly braces, which will not lead to any detectable errors.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> A string formatted with <code>%</code> will not return the expected text because some arguments are unused. </li>\n  <li> A string formatted with <code>str.format</code> will not return the expected string because some arguments are unused. </li>\n  <li> An \"f-string\" doesn\u00e2\u20ac\u2122t contain any replacement field, which probably means some curly braces are missing. </li>\n  <li> Loggers will log an error because their message is not formatted properly. </li>\n</ul>\n<p>Rule {rule:python:S2275} covers cases where formatting a string will raise an exception.</p>\n<h2>How to fix it</h2>\n<p>A <code>printf-</code>-style format string is a string that contains placeholders, which are replaced by values when the string is printed or\nlogged. Mismatch in the format specifiers and the arguments provided can lead to incorrect strings being created.</p>\n<p>To avoid issues, a developer should ensure that the provided arguments match format specifiers.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n\"Error %(message)s\" % {\"message\": \"something failed\", \"extra\": \"some dead code\"}  # Noncompliant. Remove the unused argument \"extra\" or add a replacement field.\n\n\"Error: User {} has not been able to access []\".format(\"Alice\", \"MyFile\")  # Noncompliant. Remove 1 unexpected argument or add a replacement field.\n\nuser = \"Alice\"\nresource = \"MyFile\"\nmessage = f\"Error: User [user] has not been able to access [resource]\"  # Noncompliant. Add replacement fields or use a normal string instead of an f-string.\n\nimport logging\nlogging.error(\"Error: User %s has not been able to access %s\", \"Alice\")  # Noncompliant. Add 1 missing argument.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n\"Error %(message)s\" % {\"message\": \"something failed\"}\n\n\"Error: User {} has not been able to access {}\".format(\"Alice\", \"MyFile\")\n\nuser = \"Alice\"\nresource = \"MyFile\"\nmessage = f\"Error: User {user} has not been able to access {resource}\"\n\nimport logging\nlogging.error(\"Error: User %s has not been able to access %s\", \"Alice\", \"MyFile\")\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">Python documentation - Format String Syntax</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\">Python documentation - printf-style String\n  Formatting</a> </li>\n  <li> <a href=\"https://docs.python.org/3/howto/logging.html#loggers\">Python documentation - Loggers</a> </li>\n  <li> <a href=\"https://docs.python.org/3/howto/logging-cookbook.html#using-particular-formatting-styles-throughout-your-application\">Python\n  documentation - Using particular formatting styles throughout your application</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals\">Python documentation - Formatted string\n  literals</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>A format string is a string that contains placeholders, usually represented by special characters such as \"%s\" or \"{}\", depending on the technology\nin use. These placeholders are replaced by values when the string is printed or logged. Thus, it is required that a string is valid and arguments\nmatch replacement fields in this string.</p>\n<p>This applies to <a href=\"https://docs.python.org/3/tutorial/inputoutput.html#old-string-formatting\">the % operator</a>, the <a\nhref=\"https://docs.python.org/3/tutorial/inputoutput.html#the-string-format-method\">str.format</a> method, and loggers from the <a\nhref=\"https://docs.python.org/3/library/logging.html\">logging</a> module. Internally, the latter use the <code>%-formatting</code>. The only\ndifference is that they will log an error instead of raising an exception when the provided arguments are invalid.</p>\n<p>Formatted string literals (also called \"f-strings\"; available since Python 3.6) are generally simpler to use, and any syntax mistake will cause a\nfailure at compile time. However, it is easy to forget curly braces, which will not lead to any detectable errors.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> A string formatted with <code>%</code> will not return the expected text because some arguments are unused. </li>\n  <li> A string formatted with <code>str.format</code> will not return the expected string because some arguments are unused. </li>\n  <li> An \"f-string\" doesn\u00e2\u20ac\u2122t contain any replacement field, which probably means some curly braces are missing. </li>\n  <li> Loggers will log an error because their message is not formatted properly. </li>\n</ul>\n<p>Rule {rule:python:S2275} covers cases where formatting a string will raise an exception.</p>\n<h2>How to fix it</h2>\n<p>A <code>printf-</code>-style format string is a string that contains placeholders, which are replaced by values when the string is printed or\nlogged. Mismatch in the format specifiers and the arguments provided can lead to incorrect strings being created.</p>\n<p>To avoid issues, a developer should ensure that the provided arguments match format specifiers.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n\"Error %(message)s\" % {\"message\": \"something failed\", \"extra\": \"some dead code\"}  # Noncompliant. Remove the unused argument \"extra\" or add a replacement field.\n\n\"Error: User {} has not been able to access []\".format(\"Alice\", \"MyFile\")  # Noncompliant. Remove 1 unexpected argument or add a replacement field.\n\nuser = \"Alice\"\nresource = \"MyFile\"\nmessage = f\"Error: User [user] has not been able to access [resource]\"  # Noncompliant. Add replacement fields or use a normal string instead of an f-string.\n\nimport logging\nlogging.error(\"Error: User %s has not been able to access %s\", \"Alice\")  # Noncompliant. Add 1 missing argument.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n\"Error %(message)s\" % {\"message\": \"something failed\"}\n\n\"Error: User {} has not been able to access {}\".format(\"Alice\", \"MyFile\")\n\nuser = \"Alice\"\nresource = \"MyFile\"\nmessage = f\"Error: User {user} has not been able to access {resource}\"\n\nimport logging\nlogging.error(\"Error: User %s has not been able to access %s\", \"Alice\", \"MyFile\")\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">Python documentation - Format String Syntax</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\">Python documentation - printf-style String\n  Formatting</a> </li>\n  <li> <a href=\"https://docs.python.org/3/howto/logging.html#loggers\">Python documentation - Loggers</a> </li>\n  <li> <a href=\"https://docs.python.org/3/howto/logging-cookbook.html#using-particular-formatting-styles-throughout-your-application\">Python\n  documentation - Using particular formatting styles throughout your application</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals\">Python documentation - Formatted string\n  literals</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5906",
          "name": "The most specific \"unittest\" assertion should be used",
          "description": "<h2>Why is this an issue?</h2>\n<p>The <code>unittest</code> module provides assertion methods specific to common types and operations. Both versions will test the same things, but\nthe dedicated one will provide a better error message, simplifying the debugging process.</p>\n<p>This rule reports an issue when an assertion can be simplified by using a more specific function. The array below gives a list of assertions on\nwhich an issue will be raised, and which function should be used instead:</p>\n<p>||Original||Dedicated||</p>\n<p>|<code>assertTrue(x == y)</code>|<code>assertEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x != y)</code>|<code>assertNotEqual(x, y)</code>|</p>\n<p>|<code>assertFalse(x == y)</code>|<code>assertNotEqual(x, y)</code>|</p>\n<p>|<code>assertFalse(x != y)</code>|<code>assertEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x &lt; y)</code>|<code>assertLess(x, y)</code>|</p>\n<p>|<code>assertTrue(x &lt;= y)</code>|<code>assertLessEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x &gt; y)</code>|<code>assertGreater(x, y)</code>|</p>\n<p>|<code>assertTrue(x &gt;= y)</code>|<code>assertGreaterEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x is y)</code>|<code>assertIs(x, y)</code>|</p>\n<p>|<code>assertTrue(x is not y)</code>|<code>assertIsNot(x, y)</code>|</p>\n<p>|<code>assertFalse(x is y)</code>|<code>assertIsNot(x, y)</code>|</p>\n<p>|<code>assertFalse(x is not y)</code>|<code>assertIs(x, y)</code>|</p>\n<p>|<code>assertTrue(x in y)</code>|<code>assertIn(x, y)</code>|</p>\n<p>|<code>assertFalse(x in y)</code>|<code>assertNotIn(x, y)</code>|</p>\n<p>|<code>assertTrue(isinstance(x, y))</code>|<code>assertIsInstance(x, y)</code>|</p>\n<p>|<code>assertFalse(isinstance(x, y))</code>|<code>assertNotIsInstance(x, y)</code>|</p>\n<p>|<code>assertEqual(x, round(y, z))</code>|<code>assertAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertAlmostEqual(x, round(y, z))</code>|<code>assertAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertNotEqual(x, round(y, z))</code>|<code>assertNotAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertNotAlmostEqual(x, round(y, z))</code>|<code>assertNotAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertEqual(x, None)</code>|<code>assertIsNone(x)</code>|</p>\n<p>|<code>assertNotEqual(x, None)</code>|<code>assertIsNotNone(x)</code>|</p>\n<p>|<code>assertTrue(x is None)</code>|<code>assertIsNone(x)</code>|</p>\n<p>|<code>assertTrue(x is not None)</code>|<code>assertIsNotNone(x)</code>|</p>\n<p>|<code>assertFalse(x is None)</code>|<code>assertIsNotNone(x)</code>|</p>\n<p>|<code>assertFalse(x is not None)</code>|<code>assertIsNone(x)</code>|</p>\n<p>|<code>assertEqual(x, True)</code>|<code>assertTrue(x)</code>|</p>\n<p>|<code>assertEqual(x, False)</code>|<code>assertFalse(x)</code>|</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport unittest\nclass SomeTest(unittest.TestCase):\n  def test_something(self):\n    x = foo()\n    y = bar()\n    self.assertFalse(x == y)  # Noncompliant\n    self.assertTrue(x &lt; y)  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass SomeTest(unittest.TestCase):\n  def test_something(self):\n    x = foo()\n    y = bar()\n    self.assertNotEqual(x, y)\n    self.assertLess(x, y)\n</pre>\n<h2>Resources</h2>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual\">Python documentation - the <code>unittest</code>\nmodule</a></p>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>The <code>unittest</code> module provides assertion methods specific to common types and operations. Both versions will test the same things, but\nthe dedicated one will provide a better error message, simplifying the debugging process.</p>\n<p>This rule reports an issue when an assertion can be simplified by using a more specific function. The array below gives a list of assertions on\nwhich an issue will be raised, and which function should be used instead:</p>\n<p>||Original||Dedicated||</p>\n<p>|<code>assertTrue(x == y)</code>|<code>assertEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x != y)</code>|<code>assertNotEqual(x, y)</code>|</p>\n<p>|<code>assertFalse(x == y)</code>|<code>assertNotEqual(x, y)</code>|</p>\n<p>|<code>assertFalse(x != y)</code>|<code>assertEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x &lt; y)</code>|<code>assertLess(x, y)</code>|</p>\n<p>|<code>assertTrue(x &lt;= y)</code>|<code>assertLessEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x &gt; y)</code>|<code>assertGreater(x, y)</code>|</p>\n<p>|<code>assertTrue(x &gt;= y)</code>|<code>assertGreaterEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x is y)</code>|<code>assertIs(x, y)</code>|</p>\n<p>|<code>assertTrue(x is not y)</code>|<code>assertIsNot(x, y)</code>|</p>\n<p>|<code>assertFalse(x is y)</code>|<code>assertIsNot(x, y)</code>|</p>\n<p>|<code>assertFalse(x is not y)</code>|<code>assertIs(x, y)</code>|</p>\n<p>|<code>assertTrue(x in y)</code>|<code>assertIn(x, y)</code>|</p>\n<p>|<code>assertFalse(x in y)</code>|<code>assertNotIn(x, y)</code>|</p>\n<p>|<code>assertTrue(isinstance(x, y))</code>|<code>assertIsInstance(x, y)</code>|</p>\n<p>|<code>assertFalse(isinstance(x, y))</code>|<code>assertNotIsInstance(x, y)</code>|</p>\n<p>|<code>assertEqual(x, round(y, z))</code>|<code>assertAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertAlmostEqual(x, round(y, z))</code>|<code>assertAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertNotEqual(x, round(y, z))</code>|<code>assertNotAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertNotAlmostEqual(x, round(y, z))</code>|<code>assertNotAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertEqual(x, None)</code>|<code>assertIsNone(x)</code>|</p>\n<p>|<code>assertNotEqual(x, None)</code>|<code>assertIsNotNone(x)</code>|</p>\n<p>|<code>assertTrue(x is None)</code>|<code>assertIsNone(x)</code>|</p>\n<p>|<code>assertTrue(x is not None)</code>|<code>assertIsNotNone(x)</code>|</p>\n<p>|<code>assertFalse(x is None)</code>|<code>assertIsNotNone(x)</code>|</p>\n<p>|<code>assertFalse(x is not None)</code>|<code>assertIsNone(x)</code>|</p>\n<p>|<code>assertEqual(x, True)</code>|<code>assertTrue(x)</code>|</p>\n<p>|<code>assertEqual(x, False)</code>|<code>assertFalse(x)</code>|</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport unittest\nclass SomeTest(unittest.TestCase):\n  def test_something(self):\n    x = foo()\n    y = bar()\n    self.assertFalse(x == y)  # Noncompliant\n    self.assertTrue(x &lt; y)  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass SomeTest(unittest.TestCase):\n  def test_something(self):\n    x = foo()\n    y = bar()\n    self.assertNotEqual(x, y)\n    self.assertLess(x, y)\n</pre>\n<h2>Resources</h2>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual\">Python documentation - the <code>unittest</code>\nmodule</a></p>\n\n"
        },
        {
          "id": "S4787",
          "name": "Encrypting data is security-sensitive",
          "description": "<p>This rule is deprecated; use {rule:python:S4426}, {rule:python:S5542}, {rule:python:S5547} instead.</p>\n<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902\">CVE-2017-7902</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378\">CVE-2006-1378</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376\">CVE-2003-1376</a> </li>\n</ul>\n<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed\nregularly. However these are not the only means to defeat or weaken an encryption.</p>\n<p>This rule flags function calls that initiate encryption/decryption.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>\n  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>\n  <li> the key exchange is made without properly authenticating the receiver. </li>\n  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time\n  passes. </li>\n  <li> the chosen encryption library is deemed unsafe. </li>\n  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>\n  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.\n  </li>\n  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it\u00e2\u20ac\u2122s IV (Initialization Vector) is not generated using a secure random\n  algorithm, or it is reused. </li>\n  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.\n  </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Generate encryption keys using secure random algorithms. </li>\n  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force\n  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.\n  </li>\n  <li> Regenerate the keys regularly. </li>\n  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>\n  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>\n  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are\n  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most\n  probably have flaws. </li>\n  <li> When a nonce is used, generate it randomly every time. </li>\n  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>\n  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks\n  like \"Chosen-Plaintext Attacks\". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption\n  cycle, because the IV\u00e2\u20ac\u2122s purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>\n  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be\n  preferred to the following combinations which are not secured:\n    <ul>\n      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it\n      does not hide data patterns well. In some senses, it doesn\u00e2\u20ac\u2122t provide serious message confidentiality, and it is not recommended for use in\n      cryptographic protocols at all. </li>\n      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>\n    </ul>  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><code>cryptography</code> module</p>\n<pre>\nfrom cryptography.fernet import Fernet\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305, AESGCM, AESCCM\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.ciphers import Cipher\n\n\ndef encrypt(key):\n    Fernet(key)  # Sensitive\n    ChaCha20Poly1305(key)  # Sensitive\n    AESGCM(key)  # Sensitive\n    AESCCM(key)  # Sensitive\n\n\nprivate_key = rsa.generate_private_key()  # Sensitive\n\n\ndef encrypt2(algorithm, mode, backend):\n    Cipher(algorithm, mode, backend)  # Sensitive\n</pre>\n<p><code>pynacl</code> library</p>\n<pre>\nfrom nacl.public import Box\nfrom nacl.secret import SecretBox\n\n\ndef public_encrypt(secret_key, public_key):\n    Box(secret_key, public_key)  # Sensitive\n\n\ndef secret_encrypt(key):\n    SecretBox(key)  # Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/321\">CWE-321 - Use of Hard-coded Cryptographic Key</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/322\">CWE-322 - Key Exchange without Entity Authentication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/323\">CWE-323 - Reusing a Nonce, Key Pair in Encryption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/324\">CWE-324 - Use of a Key Past its Expiration Date</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/325\">CWE-325 - Missing Required Cryptographic Step</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/326\">CWE-326 - Inadequate Encryption Strength</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule is deprecated; use {rule:python:S4426}, {rule:python:S5542}, {rule:python:S5547} instead.</p>\n<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902\">CVE-2017-7902</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378\">CVE-2006-1378</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376\">CVE-2003-1376</a> </li>\n</ul>\n<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed\nregularly. However these are not the only means to defeat or weaken an encryption.</p>\n<p>This rule flags function calls that initiate encryption/decryption.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>\n  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>\n  <li> the key exchange is made without properly authenticating the receiver. </li>\n  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time\n  passes. </li>\n  <li> the chosen encryption library is deemed unsafe. </li>\n  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>\n  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.\n  </li>\n  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it\u00e2\u20ac\u2122s IV (Initialization Vector) is not generated using a secure random\n  algorithm, or it is reused. </li>\n  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.\n  </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Generate encryption keys using secure random algorithms. </li>\n  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force\n  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.\n  </li>\n  <li> Regenerate the keys regularly. </li>\n  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>\n  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>\n  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are\n  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most\n  probably have flaws. </li>\n  <li> When a nonce is used, generate it randomly every time. </li>\n  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>\n  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks\n  like \"Chosen-Plaintext Attacks\". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption\n  cycle, because the IV\u00e2\u20ac\u2122s purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>\n  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be\n  preferred to the following combinations which are not secured:\n    <ul>\n      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it\n      does not hide data patterns well. In some senses, it doesn\u00e2\u20ac\u2122t provide serious message confidentiality, and it is not recommended for use in\n      cryptographic protocols at all. </li>\n      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>\n    </ul>  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><code>cryptography</code> module</p>\n<pre>\nfrom cryptography.fernet import Fernet\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305, AESGCM, AESCCM\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.ciphers import Cipher\n\n\ndef encrypt(key):\n    Fernet(key)  # Sensitive\n    ChaCha20Poly1305(key)  # Sensitive\n    AESGCM(key)  # Sensitive\n    AESCCM(key)  # Sensitive\n\n\nprivate_key = rsa.generate_private_key()  # Sensitive\n\n\ndef encrypt2(algorithm, mode, backend):\n    Cipher(algorithm, mode, backend)  # Sensitive\n</pre>\n<p><code>pynacl</code> library</p>\n<pre>\nfrom nacl.public import Box\nfrom nacl.secret import SecretBox\n\n\ndef public_encrypt(secret_key, public_key):\n    Box(secret_key, public_key)  # Sensitive\n\n\ndef secret_encrypt(key):\n    SecretBox(key)  # Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/321\">CWE-321 - Use of Hard-coded Cryptographic Key</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/322\">CWE-322 - Key Exchange without Entity Authentication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/323\">CWE-323 - Reusing a Nonce, Key Pair in Encryption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/324\">CWE-324 - Use of a Key Past its Expiration Date</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/325\">CWE-325 - Missing Required Cryptographic Step</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/326\">CWE-326 - Inadequate Encryption Strength</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S4784",
          "name": "Using regular expressions is security-sensitive",
          "description": "<p>This rule is deprecated; use {rule:python:S5852}, {rule:pythonsecurity:S2631} instead.</p>\n<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021\">CVE-2017-16021</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863\">CVE-2018-13863</a> </li>\n</ul>\n<p>Evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions such as\n<code>(a+)+s</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaabs</code>. The problem is that with\nevery additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular\nexpression, <code>a+s</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>\n<p>Evaluating such regular expressions opens the door to <a\nhref=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">Regular expression Denial of Service (ReDoS)</a> attacks.\nIn the context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making\nthe service inaccessible to genuine users.</p>\n<p>This rule flags any execution of a hardcoded regular expression which has at least 3 characters and at least two instances of any of the following\ncharacters: <code>*+{</code>.</p>\n<p>Example: <code>(a+)*</code></p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed regular expression is sensitive and a user can provide a string which will be analyzed by this regular expression. </li>\n  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for\nvulnerability reports mentioning the one engine you\u00e2\u20ac\u2122re are using.</p>\n<p>Use if possible a library which is not vulnerable to Redos Attacks such as <a href=\"https://github.com/google/re2\">Google Re2</a>.</p>\n<p>Remember also that a ReDos attack is possible if a user-provided regular expression is executed. This rule won\u00e2\u20ac\u2122t detect this kind of injection.</p>\n<h2>Sensitive Code Example</h2>\n<p>Django</p>\n<pre>\nfrom django.core.validators import RegexValidator\nfrom django.urls import re_path\n\nRegexValidator('(a*)*b')  # Sensitive\n\ndef define_http_endpoint(view):\n    re_path(r'^(a*)*b/$', view)  # Sensitive\n</pre>\n<p><code>re</code> module</p>\n<pre>\nimport re\nfrom re import compile, match, search, fullmatch, split, findall, finditer, sub, subn\n\n\ninput = 'input string'\nreplacement = 'replacement'\n\nre.compile('(a*)*b')  # Sensitive\nre.match('(a*)*b', input)  # Sensitive\nre.search('(a*)*b', input)  # Sensitive\nre.fullmatch('(a*)*b', input)  # Sensitive\nre.split('(a*)*b', input)  # Sensitive\nre.findall('(a*)*b', input)  # Sensitive\nre.finditer('(a*)*b',input)  # Sensitive\nre.sub('(a*)*b', replacement, input)  # Sensitive\nre.subn('(a*)*b', replacement, input)  # Sensitive\n</pre>\n<p><code>regex</code> module</p>\n<pre>\nimport regex\nfrom regex import compile, match, search, fullmatch, split, findall, finditer, sub, subn, subf, subfn, splititer\n\ninput = 'input string'\nreplacement = 'replacement'\n\nregex.subf('(a*)*b', replacement, input)  # Sensitive\nregex.subfn('(a*)*b', replacement, input)  # Sensitive\nregex.splititer('(a*)*b', input)  # Sensitive\n\nregex.compile('(a*)*b')  # Sensitive\nregex.match('(a*)*b', input)  # Sensitive\nregex.search('(a*)*b', input)  # Sensitive\nregex.fullmatch('(a*)*b', input)  # Sensitive\nregex.split('(a*)*b', input)  # Sensitive\nregex.findall('(a*)*b', input)  # Sensitive\nregex.finditer('(a*)*b',input)  # Sensitive\nregex.sub('(a*)*b', replacement, input)  # Sensitive\nregex.subn('(a*)*b', replacement, input)  # Sensitive\n</pre>\n<h2>Exceptions</h2>\n<p>Some corner-case regular expressions will not raise an issue even though they might be vulnerable. For example: <code>(a|aa)+</code>,\n<code>(a|a?)+</code>.</p>\n<p>It is a good idea to test your regular expression if it has the same pattern on both side of a \"<code>|</code>\".</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">CWE-624 - Executable Regular Expression\n  Error</a> </li>\n  <li> OWASP Regular expression Denial of Service - ReDoS </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule is deprecated; use {rule:python:S5852}, {rule:pythonsecurity:S2631} instead.</p>\n<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021\">CVE-2017-16021</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863\">CVE-2018-13863</a> </li>\n</ul>\n<p>Evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions such as\n<code>(a+)+s</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaabs</code>. The problem is that with\nevery additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular\nexpression, <code>a+s</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>\n<p>Evaluating such regular expressions opens the door to <a\nhref=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">Regular expression Denial of Service (ReDoS)</a> attacks.\nIn the context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making\nthe service inaccessible to genuine users.</p>\n<p>This rule flags any execution of a hardcoded regular expression which has at least 3 characters and at least two instances of any of the following\ncharacters: <code>*+{</code>.</p>\n<p>Example: <code>(a+)*</code></p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed regular expression is sensitive and a user can provide a string which will be analyzed by this regular expression. </li>\n  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for\nvulnerability reports mentioning the one engine you\u00e2\u20ac\u2122re are using.</p>\n<p>Use if possible a library which is not vulnerable to Redos Attacks such as <a href=\"https://github.com/google/re2\">Google Re2</a>.</p>\n<p>Remember also that a ReDos attack is possible if a user-provided regular expression is executed. This rule won\u00e2\u20ac\u2122t detect this kind of injection.</p>\n<h2>Sensitive Code Example</h2>\n<p>Django</p>\n<pre>\nfrom django.core.validators import RegexValidator\nfrom django.urls import re_path\n\nRegexValidator('(a*)*b')  # Sensitive\n\ndef define_http_endpoint(view):\n    re_path(r'^(a*)*b/$', view)  # Sensitive\n</pre>\n<p><code>re</code> module</p>\n<pre>\nimport re\nfrom re import compile, match, search, fullmatch, split, findall, finditer, sub, subn\n\n\ninput = 'input string'\nreplacement = 'replacement'\n\nre.compile('(a*)*b')  # Sensitive\nre.match('(a*)*b', input)  # Sensitive\nre.search('(a*)*b', input)  # Sensitive\nre.fullmatch('(a*)*b', input)  # Sensitive\nre.split('(a*)*b', input)  # Sensitive\nre.findall('(a*)*b', input)  # Sensitive\nre.finditer('(a*)*b',input)  # Sensitive\nre.sub('(a*)*b', replacement, input)  # Sensitive\nre.subn('(a*)*b', replacement, input)  # Sensitive\n</pre>\n<p><code>regex</code> module</p>\n<pre>\nimport regex\nfrom regex import compile, match, search, fullmatch, split, findall, finditer, sub, subn, subf, subfn, splititer\n\ninput = 'input string'\nreplacement = 'replacement'\n\nregex.subf('(a*)*b', replacement, input)  # Sensitive\nregex.subfn('(a*)*b', replacement, input)  # Sensitive\nregex.splititer('(a*)*b', input)  # Sensitive\n\nregex.compile('(a*)*b')  # Sensitive\nregex.match('(a*)*b', input)  # Sensitive\nregex.search('(a*)*b', input)  # Sensitive\nregex.fullmatch('(a*)*b', input)  # Sensitive\nregex.split('(a*)*b', input)  # Sensitive\nregex.findall('(a*)*b', input)  # Sensitive\nregex.finditer('(a*)*b',input)  # Sensitive\nregex.sub('(a*)*b', replacement, input)  # Sensitive\nregex.subn('(a*)*b', replacement, input)  # Sensitive\n</pre>\n<h2>Exceptions</h2>\n<p>Some corner-case regular expressions will not raise an issue even though they might be vulnerable. For example: <code>(a|aa)+</code>,\n<code>(a|a?)+</code>.</p>\n<p>It is a good idea to test your regular expression if it has the same pattern on both side of a \"<code>|</code>\".</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">CWE-624 - Executable Regular Expression\n  Error</a> </li>\n  <li> OWASP Regular expression Denial of Service - ReDoS </li>\n</ul>\n\n"
        },
        {
          "id": "S1720",
          "name": "Docstrings should be defined",
          "description": "<h2>Why is this an issue?</h2>\n<p>A string literal that is the first statement in a module, function, class, or method is a docstring. A docstring should document what a caller\nneeds to know about the code. Information about what it does, what it returns, and what it requires are all valid candidates for documentation. Well\nwritten docstrings allow callers to use your code without having to first read it and understand its logic.</p>\n<p>By convention, docstrings are enclosed in three sets of double-quotes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef my_function(a,b):\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef my_function(a,b):\n      \"\"\"Do X\"\"\"\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>A string literal that is the first statement in a module, function, class, or method is a docstring. A docstring should document what a caller\nneeds to know about the code. Information about what it does, what it returns, and what it requires are all valid candidates for documentation. Well\nwritten docstrings allow callers to use your code without having to first read it and understand its logic.</p>\n<p>By convention, docstrings are enclosed in three sets of double-quotes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef my_function(a,b):\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef my_function(a,b):\n      \"\"\"Do X\"\"\"\n</pre>\n\n"
        },
        {
          "id": "S6661",
          "name": "Assignments of lambdas to variables should be replaced by function definitions",
          "description": "<p>This rule raises an issue when a lambda is directly assigned to a variable.</p>\n<h2>Why is this an issue?</h2>\n<p>Assigning a lambda to a variable is not inherently wrong or discouraged in Python. Lambdas are anonymous functions that can be useful for short and\nsimple expressions or as function arguments. However, there are a few reasons why you might consider alternatives to assigning a lambda to a\nvariable:</p>\n<ol>\n  <li> <strong>Readability and clarity:</strong> Lambdas can be concise, but they may become less readable as the expression or logic becomes more\n  complex. For more complex or longer functions, using a regular named function defined with def can make the code more readable and self-explanatory.\n  </li>\n  <li> <strong>Reusability:</strong> Lambdas are often used for one-off or small, isolated tasks. If you find that you need to reuse a piece of\n  functionality in multiple places within your code or across modules, it is better to define a named function using def. This promotes code\n  modularity and maintainability. </li>\n  <li> <strong>Documentation:</strong> Lambdas do not support docstrings, which are important for providing clear and comprehensive documentation for\n  your functions. If you need to document the purpose, parameters, or behavior of a function, it is best to define a named function using def and\n  include a docstring. </li>\n  <li> <strong>Debugging and error handling:</strong> Lambdas are anonymous functions, which means that when an error occurs during execution, the\n  traceback will not provide a specific name associated with the lambda function. This can make it more challenging to identify and troubleshoot\n  errors. Named functions defined with def provide more meaningful tracebacks. </li>\n</ol>\n<p>Using a def statements rather than assigning lambdas to variable is also recommended by <a href=\"https://peps.python.org/pep-0008/\">PEP8</a>.</p>\n<h2>How to fix it</h2>\n<p>Use function definition using <code>def</code> statement instead of assigning lambda to a variable.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n  multiply = lambda x, y: x * y # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n  def multiply(x, y):\n    return x * y\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/tutorial/controlflow.html#defining-functions\">Defining Functions</a> </li>\n  <li> Style Guide for Python Code - <a href=\"https://peps.python.org/pep-0008/\">PEP8</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>This rule raises an issue when a lambda is directly assigned to a variable.</p>\n<h2>Why is this an issue?</h2>\n<p>Assigning a lambda to a variable is not inherently wrong or discouraged in Python. Lambdas are anonymous functions that can be useful for short and\nsimple expressions or as function arguments. However, there are a few reasons why you might consider alternatives to assigning a lambda to a\nvariable:</p>\n<ol>\n  <li> <strong>Readability and clarity:</strong> Lambdas can be concise, but they may become less readable as the expression or logic becomes more\n  complex. For more complex or longer functions, using a regular named function defined with def can make the code more readable and self-explanatory.\n  </li>\n  <li> <strong>Reusability:</strong> Lambdas are often used for one-off or small, isolated tasks. If you find that you need to reuse a piece of\n  functionality in multiple places within your code or across modules, it is better to define a named function using def. This promotes code\n  modularity and maintainability. </li>\n  <li> <strong>Documentation:</strong> Lambdas do not support docstrings, which are important for providing clear and comprehensive documentation for\n  your functions. If you need to document the purpose, parameters, or behavior of a function, it is best to define a named function using def and\n  include a docstring. </li>\n  <li> <strong>Debugging and error handling:</strong> Lambdas are anonymous functions, which means that when an error occurs during execution, the\n  traceback will not provide a specific name associated with the lambda function. This can make it more challenging to identify and troubleshoot\n  errors. Named functions defined with def provide more meaningful tracebacks. </li>\n</ol>\n<p>Using a def statements rather than assigning lambdas to variable is also recommended by <a href=\"https://peps.python.org/pep-0008/\">PEP8</a>.</p>\n<h2>How to fix it</h2>\n<p>Use function definition using <code>def</code> statement instead of assigning lambda to a variable.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n  multiply = lambda x, y: x * y # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n  def multiply(x, y):\n    return x * y\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/tutorial/controlflow.html#defining-functions\">Defining Functions</a> </li>\n  <li> Style Guide for Python Code - <a href=\"https://peps.python.org/pep-0008/\">PEP8</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6545",
          "name": "Built-in generic types should be preferred over the typing module in type hints",
          "description": "<h2>Why is this an issue?</h2>\n<p>Python 3.9 introduced built-in generic types such as <code>list[T]</code>, <code>dict[T]</code>, <code>set[T]</code> to make type hints more\nconcise and easier to read. These built-in types have the same functionality as their counterparts in the <code>typing</code> module, but are more\nreadable and idiomatic.</p>\n<p>Using types such as <code>typing.List</code> is confusing in the presence of the already existing built-in types. This can also create\ninconsistencies when different parts of the codebase use different syntaxes for the same type.</p>\n<h2>How to fix it</h2>\n<p>Replace the generic type from the <code>typing</code> module with its built-in counterpart:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <tbody>\n    <tr>\n      <td><p>Legacy type</p></td>\n      <td><p>Replacement</p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.List[int]</code></p></td>\n      <td><p><code>list[int]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Dict[str, int]</code></p></td>\n      <td><p><code>dict[str, int]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Set[str]</code></p></td>\n      <td><p><code>set[str]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.FrozenSet[str]</code></p></td>\n      <td><p><code>frozenset[str]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Tuple[int, int]</code></p></td>\n      <td><p><code>tuple[int, int]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Tuple[int, ...]</code></p></td>\n      <td><p><code>tuple[int, ...]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Iterable[int]</code></p></td>\n      <td><p><code>collections.abc.Iterable[int]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Sequence[bool]</code></p></td>\n      <td><p><code>collections.abc.Sequence[bool]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Mapping[str, int]</code></p></td>\n      <td><p><code>collections.abc.Mapping[str, int]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Type[T]</code></p></td>\n      <td><p><code>type[T]</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<p>Refer to PEP-585 in the Resources section for the full list of replacements.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nimport typing\n\ndef print_numbers(numbers: typing.List[int]) -&gt; None:\n    for n in numbers:\n        print(n)\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef print_numbers(numbers: list[int]) -&gt; None:\n    for n in numbers:\n        print(n)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://mypy.readthedocs.io/en/stable/builtin_types.html#generic-types\">Mypy documentation on built-in generic types</a> </li>\n  <li> <a href=\"https://peps.python.org/pep-0585/\">PEP 585 - Type Hinting Generics In Standard Collections</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html#generic-concrete-collections\">Python documentation on generic collections</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Python 3.9 introduced built-in generic types such as <code>list[T]</code>, <code>dict[T]</code>, <code>set[T]</code> to make type hints more\nconcise and easier to read. These built-in types have the same functionality as their counterparts in the <code>typing</code> module, but are more\nreadable and idiomatic.</p>\n<p>Using types such as <code>typing.List</code> is confusing in the presence of the already existing built-in types. This can also create\ninconsistencies when different parts of the codebase use different syntaxes for the same type.</p>\n<h2>How to fix it</h2>\n<p>Replace the generic type from the <code>typing</code> module with its built-in counterpart:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <tbody>\n    <tr>\n      <td><p>Legacy type</p></td>\n      <td><p>Replacement</p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.List[int]</code></p></td>\n      <td><p><code>list[int]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Dict[str, int]</code></p></td>\n      <td><p><code>dict[str, int]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Set[str]</code></p></td>\n      <td><p><code>set[str]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.FrozenSet[str]</code></p></td>\n      <td><p><code>frozenset[str]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Tuple[int, int]</code></p></td>\n      <td><p><code>tuple[int, int]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Tuple[int, ...]</code></p></td>\n      <td><p><code>tuple[int, ...]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Iterable[int]</code></p></td>\n      <td><p><code>collections.abc.Iterable[int]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Sequence[bool]</code></p></td>\n      <td><p><code>collections.abc.Sequence[bool]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Mapping[str, int]</code></p></td>\n      <td><p><code>collections.abc.Mapping[str, int]</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>typing.Type[T]</code></p></td>\n      <td><p><code>type[T]</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<p>Refer to PEP-585 in the Resources section for the full list of replacements.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nimport typing\n\ndef print_numbers(numbers: typing.List[int]) -&gt; None:\n    for n in numbers:\n        print(n)\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef print_numbers(numbers: list[int]) -&gt; None:\n    for n in numbers:\n        print(n)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://mypy.readthedocs.io/en/stable/builtin_types.html#generic-types\">Mypy documentation on built-in generic types</a> </li>\n  <li> <a href=\"https://peps.python.org/pep-0585/\">PEP 585 - Type Hinting Generics In Standard Collections</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html#generic-concrete-collections\">Python documentation on generic collections</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1578",
          "name": "Module names should comply with a naming convention",
          "description": "<h2>Why is this an issue?</h2>\n<p>Shared coding conventions allow teams to collaborate effectively. For that reason, module names should conform to a defined standard.</p>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Shared coding conventions allow teams to collaborate effectively. For that reason, module names should conform to a defined standard.</p>\n\n"
        },
        {
          "id": "S1128",
          "name": "Unnecessary imports should be removed",
          "description": "<p>This rule raises an issue when an imported name is unused.</p>\n<h2>Why is this an issue?</h2>\n<p>Importing names and not using them can be a source of confusion and lead to maintainability issues.</p>\n<p>Such imports should be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom mymodule import foo, bar, qix  # Noncompliant: bar is unused\n\nfoo()\nqix()\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom mymodule import foo, qix\n\nfoo()\nqix()\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<p>This rule raises an issue when an imported name is unused.</p>\n<h2>Why is this an issue?</h2>\n<p>Importing names and not using them can be a source of confusion and lead to maintainability issues.</p>\n<p>Such imports should be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom mymodule import foo, bar, qix  # Noncompliant: bar is unused\n\nfoo()\nqix()\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom mymodule import foo, qix\n\nfoo()\nqix()\n</pre>\n\n"
        }
      ]
    },
    {
      "category": "Documentation and Comments",
      "rules": [
        {
          "id": "S6839",
          "name": "HTTP response headers should not be vulnerable to response splitting attacks",
          "description": "<p>HTTP Response Splitting is a type of web application vulnerability that occurs when an attacker manipulates the data input into HTTP headers. This\nmanipulation can lead to the creation of additional, unauthorized HTTP responses. The vulnerability arises when user-supplied data is not properly\nvalidated and sanitized before being included in an HTTP response header. This can potentially allow an attacker to control the contents of the HTTP\nresponse received by other users, leading to a variety of consequences such as cross-site scripting (XSS), session hijacking, cache poisonning, or\nmalware delivery.</p>\n<h2>Why is this an issue?</h2>\n<p>Without proper validation or sanitation, an attacker with control over a header\u00e2\u20ac\u2122s content could insert line return characters in it and inject\narbitrary content in the HTTP response. This includes headers, their content, and the response body.</p>\n<h3>What is the potential impact</h3>\n<p>HTTP Response Splitting is a significant security concern due to its potential to compromise the integrity and confidentiality of web applications\nand their users' data. Typical exploitation scenarios include Cross-Site Scripting (XSS), phishing attacks or cache poisonning.</p>\n<h4>Cross-Site Scripting (XSS)</h4>\n<p>When an attacker successfully exploits an HTTP Response Splitting vulnerability, they can inject malicious scripts into the HTTP response. These\nscripts can be executed in the user\u00e2\u20ac\u2122s browser, leading to an XSS attack. This can result in unauthorized access to sensitive user data, such as login\ncredentials or personal information.</p>\n<h4>Phishing Attacks</h4>\n<p>An attacker can use this vulnerability to redirect users to a malicious website that looks identical to the original one. Unaware users might\nprovide sensitive information like usernames, passwords, or credit card details, thinking they are on a legitimate site.</p>\n<h4>Cache poisonning</h4>\n<p>By controlling the content and headers of the HTTP response, an attacker can force the application\u00e2\u20ac\u2122s hosting infrastructure to store a maliciously\ncrafted web page in a cache. Every user that will later try to access the page or resource which cached version has been poisoned will therefore be\npresented with malicious content.</p>\n<p>Such an attack can make the impact of other mentioned exploitation scenario higher.</p>\n<h2>How to fix it</h2>\n<p>As a best practice, applications that construct response headers using user-provided data should always implement rigorous validation or sanitation\nof this data.</p>\n<p>Also, note that most high-level and modern web development frameworks integrate a built-in protection measure and are thus immune to response\nsplitting attacks. Using such a framework should be considered.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom http.server import BaseHTTPRequestHandler\nfrom urllib.parse import urlparse, parse_qs\n\nclass ReqHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        parsed = urlparse(self.path)\n        params = parse_qs(parsed.query)\n        self.send_response(200)\n        self.send_header(\"Content-Type\", params.get('accept')[0]) # Noncompliant\n        self.end_headers()\n        self.wfile.write(bytes(\"Hello World!\", \"utf-8\"))\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom http.server import BaseHTTPRequestHandler\nfrom urllib.parse import urlparse, parse_qs, quote\n\nclass ReqHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        parsed = urlparse(self.path)\n        params = parse_qs(parsed.query)\n        self.send_response(200)\n        self.send_header(\"Content-Type\", quote(params.get('accept')[0])) # Compliant\n        self.end_headers()\n        self.wfile.write(bytes(\"Hello World!\", \"utf-8\"))\n</pre>\n<h3>How does this work?</h3>\n<p>By applying a URL encoding to an untrusted header value, the application ensures that all special characters are properly escaped before they are\nadded to the HTTP response. Especially <code>\\r</code> (Carriage Return) and <code>\\n</code> (Line Feed) characters will be encoded to\n<code>%0D</code> and <code>%OA</code> and won\u00e2\u20ac\u2122t be able to alter the HTTP response\u00e2\u20ac\u2122s semantics.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> OWASP - <a href=\"https://www.owasp.org/index.php/HTTP_Response_Splitting\">HTTP Response Splitting</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/113\">CWE-113 - Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response\n  Splitting')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>HTTP Response Splitting is a type of web application vulnerability that occurs when an attacker manipulates the data input into HTTP headers. This\nmanipulation can lead to the creation of additional, unauthorized HTTP responses. The vulnerability arises when user-supplied data is not properly\nvalidated and sanitized before being included in an HTTP response header. This can potentially allow an attacker to control the contents of the HTTP\nresponse received by other users, leading to a variety of consequences such as cross-site scripting (XSS), session hijacking, cache poisonning, or\nmalware delivery.</p>\n<h2>Why is this an issue?</h2>\n<p>Without proper validation or sanitation, an attacker with control over a header\u00e2\u20ac\u2122s content could insert line return characters in it and inject\narbitrary content in the HTTP response. This includes headers, their content, and the response body.</p>\n<h3>What is the potential impact</h3>\n<p>HTTP Response Splitting is a significant security concern due to its potential to compromise the integrity and confidentiality of web applications\nand their users' data. Typical exploitation scenarios include Cross-Site Scripting (XSS), phishing attacks or cache poisonning.</p>\n<h4>Cross-Site Scripting (XSS)</h4>\n<p>When an attacker successfully exploits an HTTP Response Splitting vulnerability, they can inject malicious scripts into the HTTP response. These\nscripts can be executed in the user\u00e2\u20ac\u2122s browser, leading to an XSS attack. This can result in unauthorized access to sensitive user data, such as login\ncredentials or personal information.</p>\n<h4>Phishing Attacks</h4>\n<p>An attacker can use this vulnerability to redirect users to a malicious website that looks identical to the original one. Unaware users might\nprovide sensitive information like usernames, passwords, or credit card details, thinking they are on a legitimate site.</p>\n<h4>Cache poisonning</h4>\n<p>By controlling the content and headers of the HTTP response, an attacker can force the application\u00e2\u20ac\u2122s hosting infrastructure to store a maliciously\ncrafted web page in a cache. Every user that will later try to access the page or resource which cached version has been poisoned will therefore be\npresented with malicious content.</p>\n<p>Such an attack can make the impact of other mentioned exploitation scenario higher.</p>\n<h2>How to fix it</h2>\n<p>As a best practice, applications that construct response headers using user-provided data should always implement rigorous validation or sanitation\nof this data.</p>\n<p>Also, note that most high-level and modern web development frameworks integrate a built-in protection measure and are thus immune to response\nsplitting attacks. Using such a framework should be considered.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom http.server import BaseHTTPRequestHandler\nfrom urllib.parse import urlparse, parse_qs\n\nclass ReqHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        parsed = urlparse(self.path)\n        params = parse_qs(parsed.query)\n        self.send_response(200)\n        self.send_header(\"Content-Type\", params.get('accept')[0]) # Noncompliant\n        self.end_headers()\n        self.wfile.write(bytes(\"Hello World!\", \"utf-8\"))\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom http.server import BaseHTTPRequestHandler\nfrom urllib.parse import urlparse, parse_qs, quote\n\nclass ReqHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        parsed = urlparse(self.path)\n        params = parse_qs(parsed.query)\n        self.send_response(200)\n        self.send_header(\"Content-Type\", quote(params.get('accept')[0])) # Compliant\n        self.end_headers()\n        self.wfile.write(bytes(\"Hello World!\", \"utf-8\"))\n</pre>\n<h3>How does this work?</h3>\n<p>By applying a URL encoding to an untrusted header value, the application ensures that all special characters are properly escaped before they are\nadded to the HTTP response. Especially <code>\\r</code> (Carriage Return) and <code>\\n</code> (Line Feed) characters will be encoded to\n<code>%0D</code> and <code>%OA</code> and won\u00e2\u20ac\u2122t be able to alter the HTTP response\u00e2\u20ac\u2122s semantics.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> OWASP - <a href=\"https://www.owasp.org/index.php/HTTP_Response_Splitting\">HTTP Response Splitting</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/113\">CWE-113 - Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response\n  Splitting')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S6781",
          "name": "JWT secret keys should not be disclosed",
          "description": "<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don\u00e2\u20ac\u2122t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people\u00e2\u20ac\u2122s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>If a JWT secret key leaks to an unintended audience, it can have serious security implications for the corresponding application. The secret key is\nused to encode and decode JWTs when using a symmetric signing algorithm, and an attacker could potentially use it to perform malicious actions.</p>\n<p>For example, an attacker could use the secret key to create their own authentication tokens that appear to be legitimate, allowing them to bypass\nauthentication and gain access to sensitive data or functionality.</p>\n<p>In the worst-case scenario, an attacker could be able to execute arbitrary code on the application by abusing administrative features, and take\nover its hosting server.</p>\n<h2>How to fix it in Flask</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p>Changing the secret value is sufficient to invalidate any data that it protected.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following noncompliant code contains a hard-coded secret that can be exposed unintentionally.</p>\n<pre data-diff-id=\"101\" data-diff-type=\"noncompliant\">\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['JWT_SECRET_KEY'] = secret_key  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>A solution is to set this secret in an environment string.</p>\n<pre data-diff-id=\"101\" data-diff-type=\"compliant\">\nfrom flask import Flask\nimport os\n\napp = Flask(__name__)\napp.config['JWT_SECRET_KEY'] = os.environ[\"JWT_SECRET_KEY\"]\n</pre>\n<h3>Going the extra mile</h3>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h2>How to fix it in python-jose</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following noncompliant FastAPI application contains a hard-coded secret that can be exposed unintentionally.</p>\n<pre data-diff-id=\"201\" data-diff-type=\"noncompliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\nsecret_key = 'secret'\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, secret_key, algorithm=\"HS256\")  # Noncompliant\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Compliant solution</h4>\n<p>A solution is to set this secret in an environment variable.</p>\n<pre data-diff-id=\"201\" data-diff-type=\"compliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import jwt\nimport os\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\nsecret_key = os.environ[\"JWT_SECRET_KEY\"]\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, secret_key, algorithm=\"HS256\")\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"202\" data-diff-type=\"noncompliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\n\nprivate_key = '''-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDAK5Lsx5Ow0N+d\n...\n-----END PRIVATE KEY-----'''\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, private_key, algorithm=\"RS256\")  # Noncompliant\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Compliant solution</h4>\n<p>When using an asymmetric encryption algorithm, the keys can be loaded from a file instead of being hardcoded.</p>\n<pre data-diff-id=\"202\" data-diff-type=\"compliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\n\nprivate_key = ''\nwith open('resources/rs256.pem', 'r') as f:\n    private_key = f.read()\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, private_key, algorithm=\"RS256\")\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h3>Going the extra mile</h3>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h2>How to fix it in PyJWT</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following noncompliant FastAPI application contains a hard-coded secret that can be exposed unintentionally.</p>\n<pre data-diff-id=\"301\" data-diff-type=\"noncompliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nimport jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\nsecret_key = 'secret'\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, secret_key, algorithm=\"HS256\")  # Noncompliant\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Compliant solution</h4>\n<p>A solution is to set this secret in an environment string.</p>\n<pre data-diff-id=\"301\" data-diff-type=\"compliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nimport jwt\nimport os\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\nsecret_key = os.environ[\"JWT_SECRET_KEY\"]\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, secret_key, algorithm=\"HS256\")\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"302\" data-diff-type=\"noncompliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nimport jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\n\nprivate_key = '''-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDAK5Lsx5Ow0N+d\n...\n-----END PRIVATE KEY-----'''\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, private_key, algorithm=\"RS256\")  # Noncompliant\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Compliant solution</h4>\n<p>When using an asymmetric encryption algorithm, the keys can be loaded from a file instead of being hardcoded.</p>\n<pre data-diff-id=\"302\" data-diff-type=\"compliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nimport jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\n\nprivate_key = ''\nwith open('resources/rs256.pem', 'r') as f:\n    private_key = f.read()\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, private_key, algorithm=\"RS256\")\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h3>Going the extra mile</h3>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h2>How to fix it in Django</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following noncompliant Django REST framework application contains a hard-coded secret that can be exposed unintentionally.</p>\n<pre data-diff-id=\"401\" data-diff-type=\"noncompliant\">\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n      'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n\nSIMPLE_JWT = {\n  \"ALGORITHM\": \"HS256\",\n  \"SIGNING_KEY\": \"secret\"  # Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>A solution is to set this secret in an environment variable.</p>\n<pre data-diff-id=\"401\" data-diff-type=\"compliant\">\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n      'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n\nSIMPLE_JWT = {\n  \"ALGORITHM\": \"HS256\",\n  \"SIGNING_KEY\": os.environ[\"SIGNING_KEY\"]\n}\n</pre>\n<h3>Going the extra mile</h3>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> Flask JWT documentation - <a href=\"https://flask-jwt-extended.readthedocs.io/en/stable/options.html#jwt-secret-key\">Config - JWT_SECRET_KEY</a>\n  </li>\n  <li> Python-Jose documentation - <a href=\"https://python-jose.readthedocs.io/en/latest/jwt/index.html\">JSON Web Token</a> </li>\n  <li> PyJWT documentation - <a href=\"https://pyjwt.readthedocs.io/en/stable/api.html\">API Reference</a> </li>\n  <li> Simple JWT documentation - <a href=\"https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html#signing-key\">SIGNING_KEY</a>\n  </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don\u00e2\u20ac\u2122t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people\u00e2\u20ac\u2122s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>If a JWT secret key leaks to an unintended audience, it can have serious security implications for the corresponding application. The secret key is\nused to encode and decode JWTs when using a symmetric signing algorithm, and an attacker could potentially use it to perform malicious actions.</p>\n<p>For example, an attacker could use the secret key to create their own authentication tokens that appear to be legitimate, allowing them to bypass\nauthentication and gain access to sensitive data or functionality.</p>\n<p>In the worst-case scenario, an attacker could be able to execute arbitrary code on the application by abusing administrative features, and take\nover its hosting server.</p>\n<h2>How to fix it in Flask</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p>Changing the secret value is sufficient to invalidate any data that it protected.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following noncompliant code contains a hard-coded secret that can be exposed unintentionally.</p>\n<pre data-diff-id=\"101\" data-diff-type=\"noncompliant\">\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['JWT_SECRET_KEY'] = secret_key  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>A solution is to set this secret in an environment string.</p>\n<pre data-diff-id=\"101\" data-diff-type=\"compliant\">\nfrom flask import Flask\nimport os\n\napp = Flask(__name__)\napp.config['JWT_SECRET_KEY'] = os.environ[\"JWT_SECRET_KEY\"]\n</pre>\n<h3>Going the extra mile</h3>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h2>How to fix it in python-jose</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following noncompliant FastAPI application contains a hard-coded secret that can be exposed unintentionally.</p>\n<pre data-diff-id=\"201\" data-diff-type=\"noncompliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\nsecret_key = 'secret'\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, secret_key, algorithm=\"HS256\")  # Noncompliant\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Compliant solution</h4>\n<p>A solution is to set this secret in an environment variable.</p>\n<pre data-diff-id=\"201\" data-diff-type=\"compliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import jwt\nimport os\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\nsecret_key = os.environ[\"JWT_SECRET_KEY\"]\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, secret_key, algorithm=\"HS256\")\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"202\" data-diff-type=\"noncompliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\n\nprivate_key = '''-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDAK5Lsx5Ow0N+d\n...\n-----END PRIVATE KEY-----'''\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, private_key, algorithm=\"RS256\")  # Noncompliant\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Compliant solution</h4>\n<p>When using an asymmetric encryption algorithm, the keys can be loaded from a file instead of being hardcoded.</p>\n<pre data-diff-id=\"202\" data-diff-type=\"compliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\n\nprivate_key = ''\nwith open('resources/rs256.pem', 'r') as f:\n    private_key = f.read()\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, private_key, algorithm=\"RS256\")\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h3>Going the extra mile</h3>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h2>How to fix it in PyJWT</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following noncompliant FastAPI application contains a hard-coded secret that can be exposed unintentionally.</p>\n<pre data-diff-id=\"301\" data-diff-type=\"noncompliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nimport jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\nsecret_key = 'secret'\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, secret_key, algorithm=\"HS256\")  # Noncompliant\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Compliant solution</h4>\n<p>A solution is to set this secret in an environment string.</p>\n<pre data-diff-id=\"301\" data-diff-type=\"compliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nimport jwt\nimport os\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\nsecret_key = os.environ[\"JWT_SECRET_KEY\"]\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, secret_key, algorithm=\"HS256\")\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"302\" data-diff-type=\"noncompliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nimport jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\n\nprivate_key = '''-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDAK5Lsx5Ow0N+d\n...\n-----END PRIVATE KEY-----'''\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, private_key, algorithm=\"RS256\")  # Noncompliant\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h4>Compliant solution</h4>\n<p>When using an asymmetric encryption algorithm, the keys can be loaded from a file instead of being hardcoded.</p>\n<pre data-diff-id=\"302\" data-diff-type=\"compliant\">\nfrom typing import Dict\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nimport jwt\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\n\nprivate_key = ''\nwith open('resources/rs256.pem', 'r') as f:\n    private_key = f.read()\n\n\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    to_encode.update({\"exp\": datetime.now(timezone.utc) +\n                      timedelta(minutes=15)})\n    return jwt.encode(to_encode, private_key, algorithm=\"RS256\")\n\ndef validate_login(username: str, password: str) -&gt; None:\n     ...\n\n\n@app.post(\"/login\")\nasync def login(\n    form_data: OAuth2PasswordRequestForm = Depends()\n) -&gt; Dict[str, str]:\n    validate_login(form_data.username, form_data.password)\n    return dict(access_token=create_access_token(data={\"sub\": form_data.username}))\n</pre>\n<h3>Going the extra mile</h3>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h2>How to fix it in Django</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following noncompliant Django REST framework application contains a hard-coded secret that can be exposed unintentionally.</p>\n<pre data-diff-id=\"401\" data-diff-type=\"noncompliant\">\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n      'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n\nSIMPLE_JWT = {\n  \"ALGORITHM\": \"HS256\",\n  \"SIGNING_KEY\": \"secret\"  # Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>A solution is to set this secret in an environment variable.</p>\n<pre data-diff-id=\"401\" data-diff-type=\"compliant\">\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n      'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n\nSIMPLE_JWT = {\n  \"ALGORITHM\": \"HS256\",\n  \"SIGNING_KEY\": os.environ[\"SIGNING_KEY\"]\n}\n</pre>\n<h3>Going the extra mile</h3>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> Flask JWT documentation - <a href=\"https://flask-jwt-extended.readthedocs.io/en/stable/options.html#jwt-secret-key\">Config - JWT_SECRET_KEY</a>\n  </li>\n  <li> Python-Jose documentation - <a href=\"https://python-jose.readthedocs.io/en/latest/jwt/index.html\">JSON Web Token</a> </li>\n  <li> PyJWT documentation - <a href=\"https://pyjwt.readthedocs.io/en/stable/api.html\">API Reference</a> </li>\n  <li> Simple JWT documentation - <a href=\"https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html#signing-key\">SIGNING_KEY</a>\n  </li>\n</ul>\n\n"
        },
        {
          "id": "S6779",
          "name": "Flask secret keys should not be disclosed",
          "description": "<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don\u00e2\u20ac\u2122t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people\u00e2\u20ac\u2122s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>If a Flask secret key leaks to an unintended audience, it can have serious security implications for the corresponding application. The secret key\nis used to sign cookies and other sensitive data so that an attacker could potentially use it to perform malicious actions.</p>\n<p>For example, an attacker could use the secret key to create their own cookies that appear to be legitimate, allowing them to bypass authentication\nand gain access to sensitive data or functionality.</p>\n<p>In the worst-case scenario, an attacker could be able to execute arbitrary code on the application and take over its hosting server.</p>\n<h2>How to fix it</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p>In Flask, changing the secret value is sufficient to invalidate any data that it protected.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = \"secret\"  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import Flask\nimport os\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = os.environ[\"SECRET_KEY\"]\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> Flask documentation - <a href=\"https://flask.palletsprojects.com/en/2.3.x/config/#SECRET_KEY\">Config - SECRET_KEY</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don\u00e2\u20ac\u2122t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people\u00e2\u20ac\u2122s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>If a Flask secret key leaks to an unintended audience, it can have serious security implications for the corresponding application. The secret key\nis used to sign cookies and other sensitive data so that an attacker could potentially use it to perform malicious actions.</p>\n<p>For example, an attacker could use the secret key to create their own cookies that appear to be legitimate, allowing them to bypass authentication\nand gain access to sensitive data or functionality.</p>\n<p>In the worst-case scenario, an attacker could be able to execute arbitrary code on the application and take over its hosting server.</p>\n<h2>How to fix it</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p>In Flask, changing the secret value is sufficient to invalidate any data that it protected.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = \"secret\"  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import Flask\nimport os\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = os.environ[\"SECRET_KEY\"]\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> Flask documentation - <a href=\"https://flask.palletsprojects.com/en/2.3.x/config/#SECRET_KEY\">Config - SECRET_KEY</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6437",
          "name": "Credentials should not be hard-coded",
          "description": "<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don\u00e2\u20ac\u2122t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people\u00e2\u20ac\u2122s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>The consequences vary greatly depending on the situation and the secret-exposed audience. Still, two main scenarios should be considered.</p>\n<h4>Financial loss</h4>\n<p>Financial losses can occur when a secret is used to access a paid third-party-provided service and is disclosed as part of the source code of\nclient applications. Having the secret, each user of the application will be able to use it without limit to use the third party service to their own\nneed, including in a way that was not expected.</p>\n<p>This additional use of the secret will lead to added costs with the service provider.</p>\n<p>Moreover, when rate or volume limiting is set up on the provider side, this additional use can prevent the regular operation of the affected\napplication. This might result in a partial denial of service for all the application\u00e2\u20ac\u2122s users.</p>\n<h4>Application\u00e2\u20ac\u2122s security downgrade</h4>\n<p>A downgrade can happen when the disclosed secret is used to protect security-sensitive assets or features of the application. Depending on the\naffected asset or feature, the practical impact can range from a sensitive information leak to a complete takeover of the application, its hosting\nserver or another linked component.</p>\n<p>For example, an application that would disclose a secret used to sign user authentication tokens would be at risk of user identity impersonation.\nAn attacker accessing the leaked secret could sign session tokens for arbitrary users and take over their privileges and entitlements.</p>\n<h2>How to fix it</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h3>Code examples</h3>\n<p>The following code example is noncompliant because it uses a hardcoded secret value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom requests_oauthlib.oauth2_session import OAuth2Session\n\nscope = ['https://www.api.example.com/auth/example.data']\n\noauth = OAuth2Session(\n    'example_client_id',\n    redirect_uri='https://callback.example.com/uri',\n    scope=scope)\n\ntoken = oauth.fetch_token(\n        'https://api.example.com/o/oauth2/token',\n        client_secret='example_Password') # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom os import environ\nfrom requests_oauthlib.oauth2_session import OAuth2Session\n\nscope = ['https://www.api.example.com/auth/example.data']\n\noauth = OAuth2Session(\n    'example_client_id',\n    redirect_uri='https://callback.example.com/uri',\n    scope=scope)\n\npassword = environ.get('OAUTH_SECRET')\n\ntoken = oauth.fetch_token(\n        'https://api.example.com/o/oauth2/token',\n        client_secret=password)\n</pre>\n<h3>How does this work?</h3>\n<p>While the noncompliant code example contains a hard-coded password, the compliant solution retrieves the secret\u00e2\u20ac\u2122s value from its environment. This\nallows to have an environment-dependent secret value and avoids storing the password in the source code itself.</p>\n<p>Depending on the application and its underlying infrastructure, how the secret gets added to the environment might change.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\">What is AWS Secrets Manager</a> </li>\n  <li> Azure Documentation - <a href=\"https://learn.microsoft.com/en-us/azure/key-vault/\">Azure Key Vault</a> </li>\n  <li> Google Cloud - <a href=\"https://cloud.google.com/secret-manager/docs\">Secret Manager documentation</a> </li>\n  <li> HashiCorp Developer - <a href=\"https://developer.hashicorp.com/vault/docs\">Vault Documentation</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 - Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 - Category A2 - Broken\n  Authentication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don\u00e2\u20ac\u2122t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people\u00e2\u20ac\u2122s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>The consequences vary greatly depending on the situation and the secret-exposed audience. Still, two main scenarios should be considered.</p>\n<h4>Financial loss</h4>\n<p>Financial losses can occur when a secret is used to access a paid third-party-provided service and is disclosed as part of the source code of\nclient applications. Having the secret, each user of the application will be able to use it without limit to use the third party service to their own\nneed, including in a way that was not expected.</p>\n<p>This additional use of the secret will lead to added costs with the service provider.</p>\n<p>Moreover, when rate or volume limiting is set up on the provider side, this additional use can prevent the regular operation of the affected\napplication. This might result in a partial denial of service for all the application\u00e2\u20ac\u2122s users.</p>\n<h4>Application\u00e2\u20ac\u2122s security downgrade</h4>\n<p>A downgrade can happen when the disclosed secret is used to protect security-sensitive assets or features of the application. Depending on the\naffected asset or feature, the practical impact can range from a sensitive information leak to a complete takeover of the application, its hosting\nserver or another linked component.</p>\n<p>For example, an application that would disclose a secret used to sign user authentication tokens would be at risk of user identity impersonation.\nAn attacker accessing the leaked secret could sign session tokens for arbitrary users and take over their privileges and entitlements.</p>\n<h2>How to fix it</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret\u00e2\u20ac\u2122s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h3>Code examples</h3>\n<p>The following code example is noncompliant because it uses a hardcoded secret value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom requests_oauthlib.oauth2_session import OAuth2Session\n\nscope = ['https://www.api.example.com/auth/example.data']\n\noauth = OAuth2Session(\n    'example_client_id',\n    redirect_uri='https://callback.example.com/uri',\n    scope=scope)\n\ntoken = oauth.fetch_token(\n        'https://api.example.com/o/oauth2/token',\n        client_secret='example_Password') # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom os import environ\nfrom requests_oauthlib.oauth2_session import OAuth2Session\n\nscope = ['https://www.api.example.com/auth/example.data']\n\noauth = OAuth2Session(\n    'example_client_id',\n    redirect_uri='https://callback.example.com/uri',\n    scope=scope)\n\npassword = environ.get('OAUTH_SECRET')\n\ntoken = oauth.fetch_token(\n        'https://api.example.com/o/oauth2/token',\n        client_secret=password)\n</pre>\n<h3>How does this work?</h3>\n<p>While the noncompliant code example contains a hard-coded password, the compliant solution retrieves the secret\u00e2\u20ac\u2122s value from its environment. This\nallows to have an environment-dependent secret value and avoids storing the password in the source code itself.</p>\n<p>Depending on the application and its underlying infrastructure, how the secret gets added to the environment might change.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\">What is AWS Secrets Manager</a> </li>\n  <li> Azure Documentation - <a href=\"https://learn.microsoft.com/en-us/azure/key-vault/\">Azure Key Vault</a> </li>\n  <li> Google Cloud - <a href=\"https://cloud.google.com/secret-manager/docs\">Secret Manager documentation</a> </li>\n  <li> HashiCorp Developer - <a href=\"https://developer.hashicorp.com/vault/docs\">Vault Documentation</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 - Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 - Category A2 - Broken\n  Authentication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5131",
          "name": "Endpoints should not be vulnerable to reflected cross-site scripting (XSS) attacks",
          "description": "<p>This vulnerability makes it possible to temporarily execute JavaScript code in the context of the application, granting access to the session of\nthe victim. This is possible because user-provided data, such as URL parameters, are copied into the HTML body of the HTTP response that is sent back\nto the user.</p>\n<h2>Why is this an issue?</h2>\n<p>Reflected cross-site scripting (XSS) occurs in a web application when the application retrieves data like parameters or headers from an incoming\nHTTP request and inserts it into its HTTP response without first sanitizing it. The most common cause is the insertion of GET parameters.</p>\n<p>When well-intentioned users open a link to a page that is vulnerable to reflected XSS, they are exposed to attacks that target their own\nbrowser.</p>\n<p>A user with malicious intent carefully crafts the link beforehand.</p>\n<p>After creating this link, the attacker must use phishing techniques to ensure that his target users click on the link.</p>\n<h3>What is the potential impact?</h3>\n<p>A well-intentioned user opens a malicious link that injects data into the web application. This data can be text, but it can also be arbitrary code\nthat can be interpreted by the target user\u00e2\u20ac\u2122s browser, such as HTML, CSS, or JavaScript.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Vandalism on the front-end website</h4>\n<p>The malicious link defaces the target web application from the perspective of the user who is the victim. This may result in loss of integrity and\ntheft of the benevolent user\u00e2\u20ac\u2122s data.</p>\n<h4>Identity spoofing</h4>\n<p>The forged link injects malicious code into the web application. The code enables identity spoofing thanks to cookie theft.</p>\n<h4>Record user activity</h4>\n<p>The forged link injects malicious code into the web application. To leak confidential information, attackers can inject code that records keyboard\nactivity (keylogger) and even requests access to other devices, such as the camera or microphone.</p>\n<h4>Chaining XSS with other vulnerabilities</h4>\n<p>In many cases, bug hunters and attackers chain cross-site scripting vulnerabilities with other vulnerabilities to maximize their impact.<br> For\nexample, an XSS can be used as the first step to exploit more dangerous vulnerabilities or features that require higher privileges, such as a code\ninjection vulnerability in the admin control panel of a web application.</p>\n<h2>How to fix it in Django</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because it returns an HTML response that contains user input.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response. For\nexample, you can use the <code>JsonResponse</code> class to return JSON messages securely.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom django.http import HttpResponse\nimport json\n\ndef index(request):\n    json = json.dumps({ \"data\": request.GET.get(\"input\") })\n    return HttpResponse(json)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom django.http import JsonResponse\n\ndef index(request):\n    json = { \"data\": request.GET.get(\"input\") }\n    return JsonResponse(json)\n</pre>\n<p>It is also possible to set the content-type manually with the <code>content_type</code> parameter when creating an <code>HttpResponse</code>\nobject.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(request.GET.get(\"input\"))\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(request.GET.get(\"input\"), content_type=\"text/plain\")\n</pre>\n<h3>How does this work?</h3>\n<p>If the HTTP response consists of HTML code, it is highly recommended to use a template engine like <a\nhref=\"https://docs.djangoproject.com/en/4.0/topics/templates/\">Django\u00e2\u20ac\u2122s template system</a> to generate it. The Django template engine separates the\nview from the business logic and automatically encodes the output of variables, drastically reducing the risk of cross-site scripting\nvulnerabilities.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by telling them what data they are receiving with the\n<code>content-type</code> HTTP header. This header tells the browser that the response does not contain HTML code and should not be parsed and\ninterpreted as HTML. Thus, the response is not vulnerable to reflected cross-site scripting.</p>\n<p>For example, setting the Content-Type HTTP header to <code>text/plain</code> allows to safely reflect user input, because browsers will not try to\nparse and execute the response.</p>\n<h3>Pitfalls</h3>\n<h4>Content-types</h4>\n<p>Be aware that there are more content-types than <code>text/html</code> that allow to execute JavaScript code in a browser and thus are prone to\ncross-site scripting vulnerabilities.<br> The following content-types are known to be affected:</p>\n<ul>\n  <li> application/mathml+xml </li>\n  <li> application/rdf+xml </li>\n  <li> application/vnd.wap.xhtml+xml </li>\n  <li> application/xhtml+xml </li>\n  <li> application/xml </li>\n  <li> image/svg+xml </li>\n  <li> multipart/x-mixed-replace </li>\n  <li> text/html </li>\n  <li> text/rdf </li>\n  <li> text/xml </li>\n  <li> text/xsl </li>\n</ul>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the application\u00e2\u20ac\u2122s security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in Django Templates</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because auto-escaping of special HTML characters has been disabled. The recommended way to\nfix this code is to move the HTML content to the template and to only inject the dynamic value. Therefore, it is not necessary to disable\nauto-escaping.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom django.shortcuts import render\n\ndef hello(request):\n        name = request.GET.get(\"name\")\n        hello = f\"&lt;h1&gt;Hello { name }&lt;/h1&gt;\"\n        return render(request, 'hello.html', {'hello': hello})\n</pre>\n<pre data-diff-id=\"12\" data-diff-type=\"noncompliant\">\n&lt;!doctype html&gt;\n{% autoescape false %}\n{{ hello }} &lt;!-- Noncompliant --&gt;\n{% endautoescape %}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom django.shortcuts import render\n\ndef hello(request):\n        name = request.GET.get(\"name\")\n        return render(request, 'hello.html', {'name': name})\n</pre>\n<pre data-diff-id=\"12\" data-diff-type=\"compliant\">\n&lt;!doctype html&gt;\n&lt;h1&gt;Hello {{ name }}&lt;/h1&gt;\n</pre>\n<h3>How does this work?</h3>\n<p>Template engines are used by web applications to build HTML content. Template files contain both static HTML and template language instructions.\nThese instructions allow, for example, to insert dynamic values in the document as the template is rendered. Template engines can auto-escape HTML\nspecial characters of dynamic values in order to prevent XSS vulnerabilities.</p>\n<p>In Django applications, the engine\u00e2\u20ac\u2122s auto-escaping feature is enabled by default. XSS vulnerabilities arise when an untrusted value is injected\ninto the template and auto-escaping is disabled with <code>{% autoescape false %}</code> or <code>|safe</code>. This is often the case when a piece of\ndynamic HTML is generated from code and used in a template variable.</p>\n<h4>Encode data according to the HTML context</h4>\n<p>The best approach to protect against XSS is to systematically encode data that is written to HTML documents. The goal is to leave the data intact\nfrom the end user\u00e2\u20ac\u2122s point of view but make it uninterpretable by web browsers.</p>\n<p>XSS exploitation techniques vary depending on the HTML context where malicious input is injected. For each HTML context, there is a specific\nencoding to prevent JavaScript code from being interpreted. The following table summarizes the encoding to apply for each HTML context.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Context</th>\n      <th>Code example</th>\n      <th>Exploit example</th>\n      <th>Encoding</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td> <p>Inbetween tags</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  { data }\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  &lt;script&gt;\n    alert(1)\n  &lt;/script&gt;\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters by HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; \u00e2\u2020\u2019 &amp;amp; </li>\n          <li> &lt; \u00e2\u2020\u2019 &amp;lt; </li>\n          <li> &gt; \u00e2\u2020\u2019 &amp;gt; </li>\n          <li> \" \u00e2\u2020\u2019 &amp;quot; </li>\n          <li> ' \u00e2\u2020\u2019 &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an attribute surrounded with single or double quotes</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"{ data }\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"\"\n     onmouseover=\"alert(1)\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters with HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; \u00e2\u2020\u2019 &amp;amp; </li>\n          <li> &lt; \u00e2\u2020\u2019 &amp;lt; </li>\n          <li> &gt; \u00e2\u2020\u2019 &amp;gt; </li>\n          <li> \" \u00e2\u2020\u2019 &amp;quot; </li>\n          <li> ' \u00e2\u2020\u2019 &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an unquoted attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag={ data }&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=foo\n     onmouseover=alert(1)&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a URL attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"{ data }\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"javascript:alert(1)\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td> <p>Validate the URL by parsing the data. Make sure relative URLs start with a <code>/</code> and that absolute URLs use <code>https</code>\n      as a scheme.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a script block</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  { data }\n&lt;/script&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  alert(1)\n&lt;/script&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully. To pass values to a JavaScript context, the recommended way is to use a data attribute:</p>  <pre>\n&lt;!doctype html&gt;\n&lt;script data=\"{ data }\"&gt;\n  ...\n&lt;/script&gt;\n</pre></td>\n    </tr>\n  </tbody>\n</table>\n<p>Django template auto-escaping only takes care of HTML entity encoding. It does not protect from XSS when a variable is injected into an unquoted\nattribute or directly into a script block.</p>\n<p>Auto-escaping can also be disabled at the application level and introduce XSS vulnerabilities even if <code>{% autoescape false %}</code> or\n<code>|safe</code> are not used.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"13\" data-diff-type=\"noncompliant\">\n# settings.py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'OPTIONS': {\n            'autoescape': False,\n            ],\n        },\n    },\n]\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"13\" data-diff-type=\"compliant\">\n# settings.py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'OPTIONS': {\n            'autoescape': True,\n            ],\n        },\n    },\n]\n</pre>\n<h3>Pitfalls</h3>\n<h4>Variables in script blocks</h4>\n<p>As mentioned in the section \"How to fix it\", injecting user-controlled values into a client-side JavaScript <code>script</code> is dangerous. In\nsuch a case it is better to add the value to an attribute.</p>\n<p>Another option is to use the <code>json_script</code> filter to insert a data structure that can then be accessed through the JavaScript code.</p>\n<h5>Noncompliant code example</h5>\n<pre data-diff-id=\"14\" data-diff-type=\"noncompliant\">\n&lt;!doctype html&gt;\n&lt;script&gt; var name = '{{ name }}';&lt;/script&gt;\n</pre>\n<h5>Compliant solution</h5>\n<pre data-diff-id=\"14\" data-diff-type=\"compliant\">\n&lt;!doctype html&gt;\n{{ name|json_script:\"name-data\" }}\n&lt;script&gt; var name = JSON.parse(document.getElementById('name-data').textContent);&lt;/script&gt;\n</pre>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the application\u00e2\u20ac\u2122s security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in Flask</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because it returns an HTML response that contains user input.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response. For\nexample, you can use the <code>jsonify</code> class to return JSON messages safely.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nfrom flask import make_response, request\nimport json\n\n@app.route('/')\ndef index():\n    json = json.dumps({ \"data\": request.args.get(\"input\") })\n    return make_response(json)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nfrom flask import jsonify, request\n\n@app.route('/')\ndef index():\n    return jsonify({ \"data\": request.args.get(\"input\") })\n</pre>\n<p>It is also possible to set the content-type manually with the <code>mimetype</code> parameter when calling the <code>make_response</code>\nfunction.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"22\" data-diff-type=\"noncompliant\">\nfrom flask import make_response, request\n\n@app.route('/')\ndef index():\n    return make_response(request.args.get(\"input\"))\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"22\" data-diff-type=\"compliant\">\nfrom flask import make_response, request\n\n@app.route('/')\ndef index():\n    response = make_response(request.args.get(\"input\"))\n    response.mimetype = \"text/plain\"\n    return response\n</pre>\n<h3>How does this work?</h3>\n<p>If the HTTP response is HTML code, it is highly recommended to use a template engine like <a href=\"https://jinja.palletsprojects.com/\">Jinja</a> to\ngenerate it. This template engine separates the view from the business logic and automatically encodes the output of variables, drastically reducing\nthe risk of cross-site scripting vulnerabilities.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response with the\n<code>content-type</code> HTTP header. This HTTP header tells the client browser that the response does not contain HTML code and should not be parsed\nand interpreted as HTML. Thus, the response is not vulnerable to reflected cross-site scripting.</p>\n<p>For example, setting the content-type header to <code>text/plain</code> allows to safely reflect user input because browsers will not try to parse\nand execute the response.</p>\n<h3>Pitfalls</h3>\n<h4>Content-types</h4>\n<p>Be aware that there are more content-types than <code>text/html</code> that allow to execute JavaScript code in a browser and thus are prone to\ncross-site scripting vulnerabilities.<br> The following content-types are known to be affected:</p>\n<ul>\n  <li> application/mathml+xml </li>\n  <li> application/rdf+xml </li>\n  <li> application/vnd.wap.xhtml+xml </li>\n  <li> application/xhtml+xml </li>\n  <li> application/xml </li>\n  <li> image/svg+xml </li>\n  <li> multipart/x-mixed-replace </li>\n  <li> text/html </li>\n  <li> text/rdf </li>\n  <li> text/xml </li>\n  <li> text/xsl </li>\n</ul>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the application\u00e2\u20ac\u2122s security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in Jinja</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because auto-escaping of special HTML characters has been disabled. The recommended way to\nfix this code is to move the HTML content to the template and to only inject the dynamic value. Therefore, it is not necessary to disable\nauto-escaping.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nfrom flask import render_template\n\n@app.route('/hello/&lt;name&gt;')\ndef hello(name=None):\n    hello = f\"&lt;h1&gt;Hello { name }&lt;/h1&gt;\"\n    return render_template('hello.html', hello=hello)\n</pre>\n<pre data-diff-id=\"32\" data-diff-type=\"noncompliant\">\n&lt;!doctype html&gt;\n{% autoescape false %}\n{{ hello }} &lt;!-- Noncompliant --&gt;\n{% endautoescape %}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nfrom flask import render_template\n\n@app.route('/hello/&lt;name&gt;')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n</pre>\n<pre data-diff-id=\"32\" data-diff-type=\"compliant\">\n&lt;!doctype html&gt;\n&lt;h1&gt;Hello {{ name }}&lt;/h1&gt;\n</pre>\n<h3>How does this work?</h3>\n<p>Template engines are used by web applications to build HTML content. Template files contain static HTML as well as template language instructions.\nThese instructions allow, for example, to insert dynamic values (variables) in the document as the template is rendered. Template engines can auto\nescape HTML special characters of variables in order to prevent XSS vulnerabilities.</p>\n<p>In Flask applications, Jinja\u00e2\u20ac\u2122s auto-escaping feature is enabled by default. XSS vulnerabilities arise when an untrusted value is injected into the\ntemplate and auto-escaping is disabled with the <code>{% autoescape false %}</code> or <code>|safe</code> filters. This is often the case when a piece\nof dynamic HTML is generated from Python code and used in a template variable.</p>\n<h3>Pitfalls</h3>\n<h4>Variables in script blocks</h4>\n<p>Although auto-escaping drastically decreases the chance of introducing cross-site scripting vulnerabilities, there are still specific cases where\nvulnerabilities can occur. Injecting user-controlled values inside a <code>script</code> is dangerous. In such a case, the best practice is to add the\nvalue to an attribute. Another option is to use the <code>tojson</code> filter to insert a data structure in the JavaScript code at render time.</p>\n<h5>Noncompliant code example</h5>\n<pre data-diff-id=\"33\" data-diff-type=\"noncompliant\">\n&lt;!doctype html&gt;\n&lt;script&gt; var name = '{{ name }}';&lt;/script&gt;\n</pre>\n<h5>Compliant solution</h5>\n<pre data-diff-id=\"33\" data-diff-type=\"compliant\">\n&lt;!doctype html&gt;\n&lt;script&gt; var name = {{ name | tojson }}&lt;/script&gt;\n</pre>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the application\u00e2\u20ac\u2122s security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in FastAPI</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because it returns an HTML response that contains user input.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response. For\nexample, you can use the <code>JsonResponse</code> class to return JSON messages securely.</p>\n<p>It is also possible to set the <code>Content-Type</code> manually by using the <code>media_type</code> parameter of the <code>Response</code>\nconstructor.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"noncompliant\">\nfrom fastapi import FastAPI, Response\nimport json\n\napp = FastAPI()\n\n@app.get(\"/example\")\ndef example(input: str):\n    json_str = json.dumps({\"data\": input})\n    return Response(json_str)  # Noncompliant\n</pre>\n<pre data-diff-id=\"42\" data-diff-type=\"noncompliant\">\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n@app.get(\"/example\")\ndef example(input: str):\n    return Response(input)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"compliant\">\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.get(\"/example\")\ndef example(input: str):\n    return JSONResponse({\"data\": input})\n</pre>\n<pre data-diff-id=\"42\" data-diff-type=\"compliant\">\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n@app.get(\"/example\")\ndef example(input: str):\n    return Response(input, media_type=\"text/plain\")\n</pre>\n<h3>How does this work?</h3>\n<p>If the HTTP response is HTML code, it is highly recommended to use a template engine like <a href=\"https://jinja.palletsprojects.com/\">Jinja</a> to\ngenerate it. This template engine separates the view from the business logic and automatically encodes the output of variables, drastically reducing\nthe risk of cross-site scripting vulnerabilities.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by correctly setting the <code>Content-Type</code> HTTP header.\nThis HTTP header defines which media type the browser can expect from the response, so the browser can parse it correctly. By specifying a type that\nis not HTML, the browser does not interpret the response as HTML, which in turn prevents cross-site scripting.</p>\n<p>For example, when setting the <code>Content-Type</code> header to <code>text/plain</code>, browsers will interpret the HTTP response as plaintext\nand will not process it any further. This allows user input to be reflected safely.</p>\n<h3>Pitfalls</h3>\n<h4>Content-types</h4>\n<p>Be aware that there are more content-types than <code>text/html</code> that allow to execute JavaScript code in a browser and thus are prone to\ncross-site scripting vulnerabilities.<br> The following content-types are known to be affected:</p>\n<ul>\n  <li> application/mathml+xml </li>\n  <li> application/rdf+xml </li>\n  <li> application/vnd.wap.xhtml+xml </li>\n  <li> application/xhtml+xml </li>\n  <li> application/xml </li>\n  <li> image/svg+xml </li>\n  <li> multipart/x-mixed-replace </li>\n  <li> text/html </li>\n  <li> text/rdf </li>\n  <li> text/xml </li>\n  <li> text/xsl </li>\n</ul>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the application\u00e2\u20ac\u2122s security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\">OWASP Cheat Sheet</a> - XSS\n  Prevention Cheat Sheet </li>\n  <li> <a href=\"https://docs.djangoproject.com/en/4.0/ref/request-response/\">Django Project, Request and response objects (Django 4.0)</a> </li>\n  <li> <a href=\"https://docs.djangoproject.com/en/4.0/ref/templates/builtins\">Django, Built-in template tags and filters</a> </li>\n  <li> <a href=\"https://flask.palletsprojects.com/en/2.1.x/security/?highlight=xss#cross-site-scripting-xss\">Flask, Security Considerations</a> </li>\n  <li> <a href=\"https://jinja.palletsprojects.com/en/3.0.x/templates/\">The Pallets Projects, Jinja, Template Designer Documentation</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> SonarSource - <a href=\"https://blog.sonarsource.com/wordpress-stored-xss-vulnerability\">WordPress 5.8.2 Stored XSS Vulnerability</a> </li>\n  <li> SonarSource - <a href=\"https://blog.sonarsource.com/ghost-admin-takeover\">Ghost CMS 4.3.2 - Cross-Origin Admin Takeover</a> </li>\n  <li> Samy Kamkar - <a href=\"https://samy.pl/myspace/\">The MySpace Worm</a> </li>\n  <li> James Kettle, PortSwigger - <a href=\"https://portswigger.net/research/web-storage-the-lesser-evil-for-session-tokens\">Web Storage: The Lesser\n  Evil for Session Tokens</a> </li>\n</ul>\n<h3>Conference presentations</h3>\n<ul>\n  <li> <a href=\"https://www.youtube.com/watch?v=ksq7e6UUDag\">DEF CON Safe Mode Red Team Village, Ray Doyle, Weaponized XSS Moving Beyond Alert</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222602\">Application Security and\n  Development: V-222602</a> - The application must protect from Cross-Site Scripting (XSS) vulnerabilities. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This vulnerability makes it possible to temporarily execute JavaScript code in the context of the application, granting access to the session of\nthe victim. This is possible because user-provided data, such as URL parameters, are copied into the HTML body of the HTTP response that is sent back\nto the user.</p>\n<h2>Why is this an issue?</h2>\n<p>Reflected cross-site scripting (XSS) occurs in a web application when the application retrieves data like parameters or headers from an incoming\nHTTP request and inserts it into its HTTP response without first sanitizing it. The most common cause is the insertion of GET parameters.</p>\n<p>When well-intentioned users open a link to a page that is vulnerable to reflected XSS, they are exposed to attacks that target their own\nbrowser.</p>\n<p>A user with malicious intent carefully crafts the link beforehand.</p>\n<p>After creating this link, the attacker must use phishing techniques to ensure that his target users click on the link.</p>\n<h3>What is the potential impact?</h3>\n<p>A well-intentioned user opens a malicious link that injects data into the web application. This data can be text, but it can also be arbitrary code\nthat can be interpreted by the target user\u00e2\u20ac\u2122s browser, such as HTML, CSS, or JavaScript.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Vandalism on the front-end website</h4>\n<p>The malicious link defaces the target web application from the perspective of the user who is the victim. This may result in loss of integrity and\ntheft of the benevolent user\u00e2\u20ac\u2122s data.</p>\n<h4>Identity spoofing</h4>\n<p>The forged link injects malicious code into the web application. The code enables identity spoofing thanks to cookie theft.</p>\n<h4>Record user activity</h4>\n<p>The forged link injects malicious code into the web application. To leak confidential information, attackers can inject code that records keyboard\nactivity (keylogger) and even requests access to other devices, such as the camera or microphone.</p>\n<h4>Chaining XSS with other vulnerabilities</h4>\n<p>In many cases, bug hunters and attackers chain cross-site scripting vulnerabilities with other vulnerabilities to maximize their impact.<br> For\nexample, an XSS can be used as the first step to exploit more dangerous vulnerabilities or features that require higher privileges, such as a code\ninjection vulnerability in the admin control panel of a web application.</p>\n<h2>How to fix it in Django</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because it returns an HTML response that contains user input.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response. For\nexample, you can use the <code>JsonResponse</code> class to return JSON messages securely.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom django.http import HttpResponse\nimport json\n\ndef index(request):\n    json = json.dumps({ \"data\": request.GET.get(\"input\") })\n    return HttpResponse(json)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom django.http import JsonResponse\n\ndef index(request):\n    json = { \"data\": request.GET.get(\"input\") }\n    return JsonResponse(json)\n</pre>\n<p>It is also possible to set the content-type manually with the <code>content_type</code> parameter when creating an <code>HttpResponse</code>\nobject.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(request.GET.get(\"input\"))\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(request.GET.get(\"input\"), content_type=\"text/plain\")\n</pre>\n<h3>How does this work?</h3>\n<p>If the HTTP response consists of HTML code, it is highly recommended to use a template engine like <a\nhref=\"https://docs.djangoproject.com/en/4.0/topics/templates/\">Django\u00e2\u20ac\u2122s template system</a> to generate it. The Django template engine separates the\nview from the business logic and automatically encodes the output of variables, drastically reducing the risk of cross-site scripting\nvulnerabilities.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by telling them what data they are receiving with the\n<code>content-type</code> HTTP header. This header tells the browser that the response does not contain HTML code and should not be parsed and\ninterpreted as HTML. Thus, the response is not vulnerable to reflected cross-site scripting.</p>\n<p>For example, setting the Content-Type HTTP header to <code>text/plain</code> allows to safely reflect user input, because browsers will not try to\nparse and execute the response.</p>\n<h3>Pitfalls</h3>\n<h4>Content-types</h4>\n<p>Be aware that there are more content-types than <code>text/html</code> that allow to execute JavaScript code in a browser and thus are prone to\ncross-site scripting vulnerabilities.<br> The following content-types are known to be affected:</p>\n<ul>\n  <li> application/mathml+xml </li>\n  <li> application/rdf+xml </li>\n  <li> application/vnd.wap.xhtml+xml </li>\n  <li> application/xhtml+xml </li>\n  <li> application/xml </li>\n  <li> image/svg+xml </li>\n  <li> multipart/x-mixed-replace </li>\n  <li> text/html </li>\n  <li> text/rdf </li>\n  <li> text/xml </li>\n  <li> text/xsl </li>\n</ul>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the application\u00e2\u20ac\u2122s security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in Django Templates</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because auto-escaping of special HTML characters has been disabled. The recommended way to\nfix this code is to move the HTML content to the template and to only inject the dynamic value. Therefore, it is not necessary to disable\nauto-escaping.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom django.shortcuts import render\n\ndef hello(request):\n        name = request.GET.get(\"name\")\n        hello = f\"&lt;h1&gt;Hello { name }&lt;/h1&gt;\"\n        return render(request, 'hello.html', {'hello': hello})\n</pre>\n<pre data-diff-id=\"12\" data-diff-type=\"noncompliant\">\n&lt;!doctype html&gt;\n{% autoescape false %}\n{{ hello }} &lt;!-- Noncompliant --&gt;\n{% endautoescape %}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom django.shortcuts import render\n\ndef hello(request):\n        name = request.GET.get(\"name\")\n        return render(request, 'hello.html', {'name': name})\n</pre>\n<pre data-diff-id=\"12\" data-diff-type=\"compliant\">\n&lt;!doctype html&gt;\n&lt;h1&gt;Hello {{ name }}&lt;/h1&gt;\n</pre>\n<h3>How does this work?</h3>\n<p>Template engines are used by web applications to build HTML content. Template files contain both static HTML and template language instructions.\nThese instructions allow, for example, to insert dynamic values in the document as the template is rendered. Template engines can auto-escape HTML\nspecial characters of dynamic values in order to prevent XSS vulnerabilities.</p>\n<p>In Django applications, the engine\u00e2\u20ac\u2122s auto-escaping feature is enabled by default. XSS vulnerabilities arise when an untrusted value is injected\ninto the template and auto-escaping is disabled with <code>{% autoescape false %}</code> or <code>|safe</code>. This is often the case when a piece of\ndynamic HTML is generated from code and used in a template variable.</p>\n<h4>Encode data according to the HTML context</h4>\n<p>The best approach to protect against XSS is to systematically encode data that is written to HTML documents. The goal is to leave the data intact\nfrom the end user\u00e2\u20ac\u2122s point of view but make it uninterpretable by web browsers.</p>\n<p>XSS exploitation techniques vary depending on the HTML context where malicious input is injected. For each HTML context, there is a specific\nencoding to prevent JavaScript code from being interpreted. The following table summarizes the encoding to apply for each HTML context.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Context</th>\n      <th>Code example</th>\n      <th>Exploit example</th>\n      <th>Encoding</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td> <p>Inbetween tags</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  { data }\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  &lt;script&gt;\n    alert(1)\n  &lt;/script&gt;\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters by HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; \u00e2\u2020\u2019 &amp;amp; </li>\n          <li> &lt; \u00e2\u2020\u2019 &amp;lt; </li>\n          <li> &gt; \u00e2\u2020\u2019 &amp;gt; </li>\n          <li> \" \u00e2\u2020\u2019 &amp;quot; </li>\n          <li> ' \u00e2\u2020\u2019 &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an attribute surrounded with single or double quotes</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"{ data }\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"\"\n     onmouseover=\"alert(1)\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters with HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; \u00e2\u2020\u2019 &amp;amp; </li>\n          <li> &lt; \u00e2\u2020\u2019 &amp;lt; </li>\n          <li> &gt; \u00e2\u2020\u2019 &amp;gt; </li>\n          <li> \" \u00e2\u2020\u2019 &amp;quot; </li>\n          <li> ' \u00e2\u2020\u2019 &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an unquoted attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag={ data }&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=foo\n     onmouseover=alert(1)&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a URL attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"{ data }\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"javascript:alert(1)\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td> <p>Validate the URL by parsing the data. Make sure relative URLs start with a <code>/</code> and that absolute URLs use <code>https</code>\n      as a scheme.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a script block</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  { data }\n&lt;/script&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  alert(1)\n&lt;/script&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully. To pass values to a JavaScript context, the recommended way is to use a data attribute:</p>  <pre>\n&lt;!doctype html&gt;\n&lt;script data=\"{ data }\"&gt;\n  ...\n&lt;/script&gt;\n</pre></td>\n    </tr>\n  </tbody>\n</table>\n<p>Django template auto-escaping only takes care of HTML entity encoding. It does not protect from XSS when a variable is injected into an unquoted\nattribute or directly into a script block.</p>\n<p>Auto-escaping can also be disabled at the application level and introduce XSS vulnerabilities even if <code>{% autoescape false %}</code> or\n<code>|safe</code> are not used.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"13\" data-diff-type=\"noncompliant\">\n# settings.py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'OPTIONS': {\n            'autoescape': False,\n            ],\n        },\n    },\n]\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"13\" data-diff-type=\"compliant\">\n# settings.py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'OPTIONS': {\n            'autoescape': True,\n            ],\n        },\n    },\n]\n</pre>\n<h3>Pitfalls</h3>\n<h4>Variables in script blocks</h4>\n<p>As mentioned in the section \"How to fix it\", injecting user-controlled values into a client-side JavaScript <code>script</code> is dangerous. In\nsuch a case it is better to add the value to an attribute.</p>\n<p>Another option is to use the <code>json_script</code> filter to insert a data structure that can then be accessed through the JavaScript code.</p>\n<h5>Noncompliant code example</h5>\n<pre data-diff-id=\"14\" data-diff-type=\"noncompliant\">\n&lt;!doctype html&gt;\n&lt;script&gt; var name = '{{ name }}';&lt;/script&gt;\n</pre>\n<h5>Compliant solution</h5>\n<pre data-diff-id=\"14\" data-diff-type=\"compliant\">\n&lt;!doctype html&gt;\n{{ name|json_script:\"name-data\" }}\n&lt;script&gt; var name = JSON.parse(document.getElementById('name-data').textContent);&lt;/script&gt;\n</pre>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the application\u00e2\u20ac\u2122s security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in Flask</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because it returns an HTML response that contains user input.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response. For\nexample, you can use the <code>jsonify</code> class to return JSON messages safely.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nfrom flask import make_response, request\nimport json\n\n@app.route('/')\ndef index():\n    json = json.dumps({ \"data\": request.args.get(\"input\") })\n    return make_response(json)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nfrom flask import jsonify, request\n\n@app.route('/')\ndef index():\n    return jsonify({ \"data\": request.args.get(\"input\") })\n</pre>\n<p>It is also possible to set the content-type manually with the <code>mimetype</code> parameter when calling the <code>make_response</code>\nfunction.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"22\" data-diff-type=\"noncompliant\">\nfrom flask import make_response, request\n\n@app.route('/')\ndef index():\n    return make_response(request.args.get(\"input\"))\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"22\" data-diff-type=\"compliant\">\nfrom flask import make_response, request\n\n@app.route('/')\ndef index():\n    response = make_response(request.args.get(\"input\"))\n    response.mimetype = \"text/plain\"\n    return response\n</pre>\n<h3>How does this work?</h3>\n<p>If the HTTP response is HTML code, it is highly recommended to use a template engine like <a href=\"https://jinja.palletsprojects.com/\">Jinja</a> to\ngenerate it. This template engine separates the view from the business logic and automatically encodes the output of variables, drastically reducing\nthe risk of cross-site scripting vulnerabilities.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response with the\n<code>content-type</code> HTTP header. This HTTP header tells the client browser that the response does not contain HTML code and should not be parsed\nand interpreted as HTML. Thus, the response is not vulnerable to reflected cross-site scripting.</p>\n<p>For example, setting the content-type header to <code>text/plain</code> allows to safely reflect user input because browsers will not try to parse\nand execute the response.</p>\n<h3>Pitfalls</h3>\n<h4>Content-types</h4>\n<p>Be aware that there are more content-types than <code>text/html</code> that allow to execute JavaScript code in a browser and thus are prone to\ncross-site scripting vulnerabilities.<br> The following content-types are known to be affected:</p>\n<ul>\n  <li> application/mathml+xml </li>\n  <li> application/rdf+xml </li>\n  <li> application/vnd.wap.xhtml+xml </li>\n  <li> application/xhtml+xml </li>\n  <li> application/xml </li>\n  <li> image/svg+xml </li>\n  <li> multipart/x-mixed-replace </li>\n  <li> text/html </li>\n  <li> text/rdf </li>\n  <li> text/xml </li>\n  <li> text/xsl </li>\n</ul>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the application\u00e2\u20ac\u2122s security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in Jinja</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because auto-escaping of special HTML characters has been disabled. The recommended way to\nfix this code is to move the HTML content to the template and to only inject the dynamic value. Therefore, it is not necessary to disable\nauto-escaping.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nfrom flask import render_template\n\n@app.route('/hello/&lt;name&gt;')\ndef hello(name=None):\n    hello = f\"&lt;h1&gt;Hello { name }&lt;/h1&gt;\"\n    return render_template('hello.html', hello=hello)\n</pre>\n<pre data-diff-id=\"32\" data-diff-type=\"noncompliant\">\n&lt;!doctype html&gt;\n{% autoescape false %}\n{{ hello }} &lt;!-- Noncompliant --&gt;\n{% endautoescape %}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nfrom flask import render_template\n\n@app.route('/hello/&lt;name&gt;')\ndef hello(name=None):\n    return render_template('hello.html', name=name)\n</pre>\n<pre data-diff-id=\"32\" data-diff-type=\"compliant\">\n&lt;!doctype html&gt;\n&lt;h1&gt;Hello {{ name }}&lt;/h1&gt;\n</pre>\n<h3>How does this work?</h3>\n<p>Template engines are used by web applications to build HTML content. Template files contain static HTML as well as template language instructions.\nThese instructions allow, for example, to insert dynamic values (variables) in the document as the template is rendered. Template engines can auto\nescape HTML special characters of variables in order to prevent XSS vulnerabilities.</p>\n<p>In Flask applications, Jinja\u00e2\u20ac\u2122s auto-escaping feature is enabled by default. XSS vulnerabilities arise when an untrusted value is injected into the\ntemplate and auto-escaping is disabled with the <code>{% autoescape false %}</code> or <code>|safe</code> filters. This is often the case when a piece\nof dynamic HTML is generated from Python code and used in a template variable.</p>\n<h3>Pitfalls</h3>\n<h4>Variables in script blocks</h4>\n<p>Although auto-escaping drastically decreases the chance of introducing cross-site scripting vulnerabilities, there are still specific cases where\nvulnerabilities can occur. Injecting user-controlled values inside a <code>script</code> is dangerous. In such a case, the best practice is to add the\nvalue to an attribute. Another option is to use the <code>tojson</code> filter to insert a data structure in the JavaScript code at render time.</p>\n<h5>Noncompliant code example</h5>\n<pre data-diff-id=\"33\" data-diff-type=\"noncompliant\">\n&lt;!doctype html&gt;\n&lt;script&gt; var name = '{{ name }}';&lt;/script&gt;\n</pre>\n<h5>Compliant solution</h5>\n<pre data-diff-id=\"33\" data-diff-type=\"compliant\">\n&lt;!doctype html&gt;\n&lt;script&gt; var name = {{ name | tojson }}&lt;/script&gt;\n</pre>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the application\u00e2\u20ac\u2122s security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in FastAPI</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because it returns an HTML response that contains user input.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response. For\nexample, you can use the <code>JsonResponse</code> class to return JSON messages securely.</p>\n<p>It is also possible to set the <code>Content-Type</code> manually by using the <code>media_type</code> parameter of the <code>Response</code>\nconstructor.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"noncompliant\">\nfrom fastapi import FastAPI, Response\nimport json\n\napp = FastAPI()\n\n@app.get(\"/example\")\ndef example(input: str):\n    json_str = json.dumps({\"data\": input})\n    return Response(json_str)  # Noncompliant\n</pre>\n<pre data-diff-id=\"42\" data-diff-type=\"noncompliant\">\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n@app.get(\"/example\")\ndef example(input: str):\n    return Response(input)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"compliant\">\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.get(\"/example\")\ndef example(input: str):\n    return JSONResponse({\"data\": input})\n</pre>\n<pre data-diff-id=\"42\" data-diff-type=\"compliant\">\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n@app.get(\"/example\")\ndef example(input: str):\n    return Response(input, media_type=\"text/plain\")\n</pre>\n<h3>How does this work?</h3>\n<p>If the HTTP response is HTML code, it is highly recommended to use a template engine like <a href=\"https://jinja.palletsprojects.com/\">Jinja</a> to\ngenerate it. This template engine separates the view from the business logic and automatically encodes the output of variables, drastically reducing\nthe risk of cross-site scripting vulnerabilities.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by correctly setting the <code>Content-Type</code> HTTP header.\nThis HTTP header defines which media type the browser can expect from the response, so the browser can parse it correctly. By specifying a type that\nis not HTML, the browser does not interpret the response as HTML, which in turn prevents cross-site scripting.</p>\n<p>For example, when setting the <code>Content-Type</code> header to <code>text/plain</code>, browsers will interpret the HTTP response as plaintext\nand will not process it any further. This allows user input to be reflected safely.</p>\n<h3>Pitfalls</h3>\n<h4>Content-types</h4>\n<p>Be aware that there are more content-types than <code>text/html</code> that allow to execute JavaScript code in a browser and thus are prone to\ncross-site scripting vulnerabilities.<br> The following content-types are known to be affected:</p>\n<ul>\n  <li> application/mathml+xml </li>\n  <li> application/rdf+xml </li>\n  <li> application/vnd.wap.xhtml+xml </li>\n  <li> application/xhtml+xml </li>\n  <li> application/xml </li>\n  <li> image/svg+xml </li>\n  <li> multipart/x-mixed-replace </li>\n  <li> text/html </li>\n  <li> text/rdf </li>\n  <li> text/xml </li>\n  <li> text/xsl </li>\n</ul>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the application\u00e2\u20ac\u2122s security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\">OWASP Cheat Sheet</a> - XSS\n  Prevention Cheat Sheet </li>\n  <li> <a href=\"https://docs.djangoproject.com/en/4.0/ref/request-response/\">Django Project, Request and response objects (Django 4.0)</a> </li>\n  <li> <a href=\"https://docs.djangoproject.com/en/4.0/ref/templates/builtins\">Django, Built-in template tags and filters</a> </li>\n  <li> <a href=\"https://flask.palletsprojects.com/en/2.1.x/security/?highlight=xss#cross-site-scripting-xss\">Flask, Security Considerations</a> </li>\n  <li> <a href=\"https://jinja.palletsprojects.com/en/3.0.x/templates/\">The Pallets Projects, Jinja, Template Designer Documentation</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> SonarSource - <a href=\"https://blog.sonarsource.com/wordpress-stored-xss-vulnerability\">WordPress 5.8.2 Stored XSS Vulnerability</a> </li>\n  <li> SonarSource - <a href=\"https://blog.sonarsource.com/ghost-admin-takeover\">Ghost CMS 4.3.2 - Cross-Origin Admin Takeover</a> </li>\n  <li> Samy Kamkar - <a href=\"https://samy.pl/myspace/\">The MySpace Worm</a> </li>\n  <li> James Kettle, PortSwigger - <a href=\"https://portswigger.net/research/web-storage-the-lesser-evil-for-session-tokens\">Web Storage: The Lesser\n  Evil for Session Tokens</a> </li>\n</ul>\n<h3>Conference presentations</h3>\n<ul>\n  <li> <a href=\"https://www.youtube.com/watch?v=ksq7e6UUDag\">DEF CON Safe Mode Red Team Village, Ray Doyle, Weaponized XSS Moving Beyond Alert</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222602\">Application Security and\n  Development: V-222602</a> - The application must protect from Cross-Site Scripting (XSS) vulnerabilities. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S2083",
          "name": "I/O function calls should not be vulnerable to path injection attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>Path injections occur when an application uses untrusted data to construct a file path and access this file without validating its path first.</p>\n<p>A user with malicious intent would inject specially crafted values, such as <code>../</code>, to change the initial intended path. The resulting\npath would resolve somewhere in the filesystem where the user should not normally have access to.</p>\n<h3>What is the potential impact?</h3>\n<p>A web application is vulnerable to path injection and an attacker is able to exploit it.</p>\n<p>The files that can be affected are limited by the permission of the process that runs the application. Worst case scenario: the process runs with\nroot privileges on Linux, and therefore any file can be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Override or delete arbitrary files</h4>\n<p>The injected path component tampers with the location of a file the application is supposed to delete or write into. The vulnerability is exploited\nto remove or corrupt files that are critical for the application or for the system to work properly.</p>\n<p>It could result in data being lost or the application being unavailable.</p>\n<h4>Read arbitrary files</h4>\n<p>The injected path component tampers with the location of a file the application is supposed to read and output. The vulnerability is exploited to\nleak the content of arbitrary files from the file system, including sensitive files like SSH private keys.</p>\n<h2>How to fix it in Flask</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to path injection as it creates a path using untrusted data without validation.</p>\n<p>An attacker can exploit the vulnerability in this code to read arbitrary files.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, request, send_from_directory\n\napp = Flask('example')\n\n@app.route('/example')\ndef example():\n    my_file = request.args['my_file']\n    return send_file(\"static/%s\" % my_file, as_attachment=True) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import Flask, request, send_from_directory\n\napp = Flask('example')\n\n@app.route('/example')\ndef example():\n    my_file = request.args['my_file']\n    return send_from_directory('static', my_file)\n</pre>\n<h3>How does this work?</h3>\n<p>The universal method to prevent path injection is to validate paths created from untrusted data. This can be done either manually or automatically,\ndepending on whether the library includes a data sanitization feature and the required function.</p>\n<p>Here, send_from_directory can be considered a secure-by-design API.</p>\n<h4>Use secure-by-design APIs</h4>\n<p>Some libraries contain APIs with these three capabilities:</p>\n<ul>\n  <li> File retrieval in a file system. </li>\n  <li> Restriction of the file retrieval to a specific folder (thus sanitizing and validating untrusted data). </li>\n  <li> A feature, such as a file download or file deletion. </li>\n</ul>\n<p>They can be referred to as \"secure-by-design\" APIs. Using this type of API, such as 'send_from_directory', brings multiple layers of security to\nthe code while keeping the code base shorter.</p>\n<p>Behind the scenes, this function protects against both regular and partial path injection.</p>\n<h3>Pitfalls</h3>\n<h4>Do not use os.path.join as a validator</h4>\n<p>The <a href=\"https://docs.python.org/3/library/os.path.html#os.path.join\">official documentation</a> states that if any argument other than the\nfirst is an absolute path, any previous argument is discarded.</p>\n<p>This means that including untrusted data in any of the parameters and using the resulting string for file operations may lead to a path traversal\nvulnerability.</p>\n<p>If you want to learn more about this pitfall, read <a href=\"https://blog.sonarsource.com/10-unknown-security-pitfalls-for-python/\">our blog post\nabout it</a>.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/22\">CWE-22 - Improper Limitation of a Pathname to a Restricted Directory ('Path\n  Traversal')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Path injections occur when an application uses untrusted data to construct a file path and access this file without validating its path first.</p>\n<p>A user with malicious intent would inject specially crafted values, such as <code>../</code>, to change the initial intended path. The resulting\npath would resolve somewhere in the filesystem where the user should not normally have access to.</p>\n<h3>What is the potential impact?</h3>\n<p>A web application is vulnerable to path injection and an attacker is able to exploit it.</p>\n<p>The files that can be affected are limited by the permission of the process that runs the application. Worst case scenario: the process runs with\nroot privileges on Linux, and therefore any file can be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Override or delete arbitrary files</h4>\n<p>The injected path component tampers with the location of a file the application is supposed to delete or write into. The vulnerability is exploited\nto remove or corrupt files that are critical for the application or for the system to work properly.</p>\n<p>It could result in data being lost or the application being unavailable.</p>\n<h4>Read arbitrary files</h4>\n<p>The injected path component tampers with the location of a file the application is supposed to read and output. The vulnerability is exploited to\nleak the content of arbitrary files from the file system, including sensitive files like SSH private keys.</p>\n<h2>How to fix it in Flask</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to path injection as it creates a path using untrusted data without validation.</p>\n<p>An attacker can exploit the vulnerability in this code to read arbitrary files.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, request, send_from_directory\n\napp = Flask('example')\n\n@app.route('/example')\ndef example():\n    my_file = request.args['my_file']\n    return send_file(\"static/%s\" % my_file, as_attachment=True) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import Flask, request, send_from_directory\n\napp = Flask('example')\n\n@app.route('/example')\ndef example():\n    my_file = request.args['my_file']\n    return send_from_directory('static', my_file)\n</pre>\n<h3>How does this work?</h3>\n<p>The universal method to prevent path injection is to validate paths created from untrusted data. This can be done either manually or automatically,\ndepending on whether the library includes a data sanitization feature and the required function.</p>\n<p>Here, send_from_directory can be considered a secure-by-design API.</p>\n<h4>Use secure-by-design APIs</h4>\n<p>Some libraries contain APIs with these three capabilities:</p>\n<ul>\n  <li> File retrieval in a file system. </li>\n  <li> Restriction of the file retrieval to a specific folder (thus sanitizing and validating untrusted data). </li>\n  <li> A feature, such as a file download or file deletion. </li>\n</ul>\n<p>They can be referred to as \"secure-by-design\" APIs. Using this type of API, such as 'send_from_directory', brings multiple layers of security to\nthe code while keeping the code base shorter.</p>\n<p>Behind the scenes, this function protects against both regular and partial path injection.</p>\n<h3>Pitfalls</h3>\n<h4>Do not use os.path.join as a validator</h4>\n<p>The <a href=\"https://docs.python.org/3/library/os.path.html#os.path.join\">official documentation</a> states that if any argument other than the\nfirst is an absolute path, any previous argument is discarded.</p>\n<p>This means that including untrusted data in any of the parameters and using the resulting string for file operations may lead to a path traversal\nvulnerability.</p>\n<p>If you want to learn more about this pitfall, read <a href=\"https://blog.sonarsource.com/10-unknown-security-pitfalls-for-python/\">our blog post\nabout it</a>.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/22\">CWE-22 - Improper Limitation of a Pathname to a Restricted Directory ('Path\n  Traversal')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S935",
          "name": "Functions and methods should only return expected values",
          "description": "<p>This rule raises an issue when a special method returns an object of an unexpected type.</p>\n<h2>Why is this an issue?</h2>\n<p>Python allows developers to customize how code is interpreted by defining special methods (also called magic methods). For example, it is possible\nto define an object\u00e2\u20ac\u2122s own truthiness or falsiness by overriding <code>__bool__</code> method. It is invoked when the built-in <code>bool()</code>\nfunction is called on the object. The <code>bool()</code> function returns <code>True</code> or <code>False</code> based on the truth value of the\nobject.</p>\n<p>The Python interpreter will call these methods when performing the operation they\u00e2\u20ac\u2122re associated with. Each special method expects a specific return\ntype. Calls to a special method will throw a <code>TypeError</code> if its return type is incorrect.</p>\n<p>An issue will be raised when one of the following methods doesn\u00e2\u20ac\u2122t return the indicated type:</p>\n<ul>\n  <li> <code>__bool__</code> method should return bool </li>\n  <li> <code>__index__</code> method should return integer </li>\n  <li> <code>__repr__</code> method should return string </li>\n  <li> <code>__str__</code> method should return string </li>\n  <li> <code>__bytes__</code> method should return bytes </li>\n  <li> <code>__hash__</code> method should return integer </li>\n  <li> <code>__format__</code> method should return string </li>\n  <li> <code>__getnewargs__</code> method should return tuple </li>\n  <li> <code>__getnewargs_ex__</code> method should return something which is of the form tuple(tuple, dict) </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Make sure to return a value of the same type as defined in the Python documentation for each special method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    def __bool__(self):\n        return 0 # Noncompliant: Return value of type bool here.\n\nobj1 = MyClass()\nprint(bool(obj1)) # TypeError: __bool__ should return bool, returned int\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    def __bool__(self):\n        return False\n\nobj1 = MyClass()\nprint(bool(obj1))\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Data Model Documentation - <a href=\"https://docs.python.org/3/reference/datamodel.html#special-method-names\">Special method names</a>\n  </li>\n  <li> Python Object Serialization Documentation - <a href=\"https://docs.python.org/3/library/pickle.html#pickling-class-instances\">Pickling Class\n  Instances</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when a special method returns an object of an unexpected type.</p>\n<h2>Why is this an issue?</h2>\n<p>Python allows developers to customize how code is interpreted by defining special methods (also called magic methods). For example, it is possible\nto define an object\u00e2\u20ac\u2122s own truthiness or falsiness by overriding <code>__bool__</code> method. It is invoked when the built-in <code>bool()</code>\nfunction is called on the object. The <code>bool()</code> function returns <code>True</code> or <code>False</code> based on the truth value of the\nobject.</p>\n<p>The Python interpreter will call these methods when performing the operation they\u00e2\u20ac\u2122re associated with. Each special method expects a specific return\ntype. Calls to a special method will throw a <code>TypeError</code> if its return type is incorrect.</p>\n<p>An issue will be raised when one of the following methods doesn\u00e2\u20ac\u2122t return the indicated type:</p>\n<ul>\n  <li> <code>__bool__</code> method should return bool </li>\n  <li> <code>__index__</code> method should return integer </li>\n  <li> <code>__repr__</code> method should return string </li>\n  <li> <code>__str__</code> method should return string </li>\n  <li> <code>__bytes__</code> method should return bytes </li>\n  <li> <code>__hash__</code> method should return integer </li>\n  <li> <code>__format__</code> method should return string </li>\n  <li> <code>__getnewargs__</code> method should return tuple </li>\n  <li> <code>__getnewargs_ex__</code> method should return something which is of the form tuple(tuple, dict) </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Make sure to return a value of the same type as defined in the Python documentation for each special method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    def __bool__(self):\n        return 0 # Noncompliant: Return value of type bool here.\n\nobj1 = MyClass()\nprint(bool(obj1)) # TypeError: __bool__ should return bool, returned int\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    def __bool__(self):\n        return False\n\nobj1 = MyClass()\nprint(bool(obj1))\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Data Model Documentation - <a href=\"https://docs.python.org/3/reference/datamodel.html#special-method-names\">Special method names</a>\n  </li>\n  <li> Python Object Serialization Documentation - <a href=\"https://docs.python.org/3/library/pickle.html#pickling-class-instances\">Pickling Class\n  Instances</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6725",
          "name": "Equality checks should not be made against \"numpy.nan\"",
          "description": "<p>This rule raises an issue when an equality check is made against <code>numpy.nan</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>numpy.nan</code> is a floating point representation of Not a Number (NaN) used as a placeholder for undefined or missing values in\nnumerical computations.</p>\n<p>Equality checks of variables against <code>numpy.nan</code> in NumPy will always be <code>False</code> due to the special nature of\n<code>numpy.nan</code>. This can lead to unexpected and incorrect results.</p>\n<p>Instead of standard comparison the <code>numpy.isnan()</code> function should be used.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\n\nx = np.nan\n\nif x == np.nan: # Noncompliant: always False\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\n\nx = np.nan\n\nif np.isnan(x):\n   ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy API Reference - <a href=\"https://numpy.org/doc/stable/reference/constants.html#numpy.nan\">numpy.nan</a> </li>\n  <li> NumPy API Reference - <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.isnan.html\">numpy.isnan()</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when an equality check is made against <code>numpy.nan</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>numpy.nan</code> is a floating point representation of Not a Number (NaN) used as a placeholder for undefined or missing values in\nnumerical computations.</p>\n<p>Equality checks of variables against <code>numpy.nan</code> in NumPy will always be <code>False</code> due to the special nature of\n<code>numpy.nan</code>. This can lead to unexpected and incorrect results.</p>\n<p>Instead of standard comparison the <code>numpy.isnan()</code> function should be used.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\n\nx = np.nan\n\nif x == np.nan: # Noncompliant: always False\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\n\nx = np.nan\n\nif np.isnan(x):\n   ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy API Reference - <a href=\"https://numpy.org/doc/stable/reference/constants.html#numpy.nan\">numpy.nan</a> </li>\n  <li> NumPy API Reference - <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.isnan.html\">numpy.isnan()</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5905",
          "name": "Assert should not be called on a tuple literal",
          "description": "<p>This rule raises an issue when using an <code>assert</code> statement on a tuple literal.</p>\n<h2>Why is this an issue?</h2>\n<p>When tested for truthiness, a sequence or collection will evaluate to <code>False</code> if it is empty (its <code>__len__</code> method returns 0)\nand to <code>True</code> if it contains at least one element.</p>\n<p>Using the <code>assert</code> statement on a tuple literal will therefore always fail if the tuple is empty, and always succeed otherwise.</p>\n<p>The <code>assert</code> statement does not take parentheses around its parameters. Calling <code>assert(x, y)</code> will test if the tuple\n<code>(x, y)</code> is True, which is always the case.</p>\n<p>There are two possible fixes:</p>\n<ul>\n  <li> If your intention is to test the first value of the tuple and use the second value as a message, simply remove the parentheses. </li>\n  <li> If your intention is to check that every element of the tuple is <code>True</code>, test each value separately. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef test_values(a, b):\n    assert (a, b)  # Noncompliant: will always be True\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef test_values(a, b):\n    # If you mean to test \"a\" and use \"b\" as an error message\n    assert a, b\n\n    # If you mean to test the values of \"a\" and \"b\"\n    assert a and b\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement\">Python documentation - The <code>assert</code>\n  statement</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#truth-value-testing\">Python documentation - Truth Value Testing</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when using an <code>assert</code> statement on a tuple literal.</p>\n<h2>Why is this an issue?</h2>\n<p>When tested for truthiness, a sequence or collection will evaluate to <code>False</code> if it is empty (its <code>__len__</code> method returns 0)\nand to <code>True</code> if it contains at least one element.</p>\n<p>Using the <code>assert</code> statement on a tuple literal will therefore always fail if the tuple is empty, and always succeed otherwise.</p>\n<p>The <code>assert</code> statement does not take parentheses around its parameters. Calling <code>assert(x, y)</code> will test if the tuple\n<code>(x, y)</code> is True, which is always the case.</p>\n<p>There are two possible fixes:</p>\n<ul>\n  <li> If your intention is to test the first value of the tuple and use the second value as a message, simply remove the parentheses. </li>\n  <li> If your intention is to check that every element of the tuple is <code>True</code>, test each value separately. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef test_values(a, b):\n    assert (a, b)  # Noncompliant: will always be True\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef test_values(a, b):\n    # If you mean to test \"a\" and use \"b\" as an error message\n    assert a, b\n\n    # If you mean to test the values of \"a\" and \"b\"\n    assert a and b\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement\">Python documentation - The <code>assert</code>\n  statement</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#truth-value-testing\">Python documentation - Truth Value Testing</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5828",
          "name": "The \"open\" builtin function should be called with a valid mode",
          "description": "<p>This rule raises an issue when an invalid \"mode\" is provided to the <code>open</code> builtin function.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>open</code> builtin function can open files in different modes. These modes are provided as a combination of characters. Using an invalid\nsequence of characters will make <code>open</code> fail with a <code>ValueError</code>.</p>\n<p>A valid mode:</p>\n<ul>\n  <li> should contain only one of the following characters: <code>r</code> (read), <code>w</code> (write), <code>a</code> (append), <code>x</code>\n  (create). </li>\n  <li> should contain zero or one of the following characters: <code>t</code> (text), <code>b</code> (binary). </li>\n  <li> should contain zero or one <code>+</code> character (open for updating) </li>\n</ul>\n<p>For example: <code>a</code>, <code>rt</code>, <code>r+</code> and <code>w+b</code> are valid modes.</p>\n<p>If no <code>t</code> or <code>b</code> character is provided the mode will default to <code>t</code> (text), so specifying <code>r</code> is\nequivalent to <code>rt</code>.</p>\n<p><strong>Note</strong>: <em>In Python 2, providing an incorrect mode may have an undefined behavior (ex: it might ignore some characters)</em></p>\n<h2>How to fix it</h2>\n<p>Make sure to provide a valid mode to the <code>open</code> builtin function.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>In Python 3 the following program will throw a <code>ValueError</code>.</p>\n<p>In Python 2.7.16 on MacOs, <code>open</code> will just ignore the <code>w</code> flag.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nwith open(\"test.txt\", \"aw\") as f:  # Noncompliant: ValueError\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nwith open(\"test.txt\", \"a\") as f:\n    pass\n</pre>\n<h3>Pitfalls</h3>\n<p>In Python 2, the character <code>U</code> (universal newlines) is available as a mode character but it cannot be combined with <code>a</code>,\n<code>w</code>, <code>x</code> or <code>+</code>.</p>\n<p><strong>Note</strong>: <em><code>U</code> has no effect in Python 3, it is deprecated and is replaced by the parameter <code>newline</code> of the\n<code>open</code> function. The default value of <code>newline</code> is <code>None</code>, meaning universal newlines mode is enabled.</em></p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#open\">The <code>open</code> builtin function</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when an invalid \"mode\" is provided to the <code>open</code> builtin function.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>open</code> builtin function can open files in different modes. These modes are provided as a combination of characters. Using an invalid\nsequence of characters will make <code>open</code> fail with a <code>ValueError</code>.</p>\n<p>A valid mode:</p>\n<ul>\n  <li> should contain only one of the following characters: <code>r</code> (read), <code>w</code> (write), <code>a</code> (append), <code>x</code>\n  (create). </li>\n  <li> should contain zero or one of the following characters: <code>t</code> (text), <code>b</code> (binary). </li>\n  <li> should contain zero or one <code>+</code> character (open for updating) </li>\n</ul>\n<p>For example: <code>a</code>, <code>rt</code>, <code>r+</code> and <code>w+b</code> are valid modes.</p>\n<p>If no <code>t</code> or <code>b</code> character is provided the mode will default to <code>t</code> (text), so specifying <code>r</code> is\nequivalent to <code>rt</code>.</p>\n<p><strong>Note</strong>: <em>In Python 2, providing an incorrect mode may have an undefined behavior (ex: it might ignore some characters)</em></p>\n<h2>How to fix it</h2>\n<p>Make sure to provide a valid mode to the <code>open</code> builtin function.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>In Python 3 the following program will throw a <code>ValueError</code>.</p>\n<p>In Python 2.7.16 on MacOs, <code>open</code> will just ignore the <code>w</code> flag.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nwith open(\"test.txt\", \"aw\") as f:  # Noncompliant: ValueError\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nwith open(\"test.txt\", \"a\") as f:\n    pass\n</pre>\n<h3>Pitfalls</h3>\n<p>In Python 2, the character <code>U</code> (universal newlines) is available as a mode character but it cannot be combined with <code>a</code>,\n<code>w</code>, <code>x</code> or <code>+</code>.</p>\n<p><strong>Note</strong>: <em><code>U</code> has no effect in Python 3, it is deprecated and is replaced by the parameter <code>newline</code> of the\n<code>open</code> function. The default value of <code>newline</code> is <code>None</code>, meaning universal newlines mode is enabled.</em></p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#open\">The <code>open</code> builtin function</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5756",
          "name": "Calls should not be made to non-callable values",
          "description": "<p>This rule raises an issue when a call is made to a non-callable object.</p>\n<h2>Why is this an issue?</h2>\n<p>In order to be callable, a Python class should implement the <a\nhref=\"https://docs.python.org/3/reference/datamodel.html#object.__call__\"><code>__call__</code></a> method. Thanks to this method, an instance of this\nclass will be callable as a function.</p>\n<p>However, when making a call to a non-callable object, a <code>TypeError</code> will be raised.</p>\n<p>In order to fix this issue, make sure that the object you are trying to call has a <code>__call__</code> method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass MyClass:\n    pass\n\nmyvar = MyClass()\nmyvar()  # Noncompliant\n\nnone_var = None\nnone_var()  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass MyClass:\n    def __call__(self):\n        print(\"called\")\n\nmyvar = MyClass()\nmyvar()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__call__\">Python documentation - __call__ method</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when a call is made to a non-callable object.</p>\n<h2>Why is this an issue?</h2>\n<p>In order to be callable, a Python class should implement the <a\nhref=\"https://docs.python.org/3/reference/datamodel.html#object.__call__\"><code>__call__</code></a> method. Thanks to this method, an instance of this\nclass will be callable as a function.</p>\n<p>However, when making a call to a non-callable object, a <code>TypeError</code> will be raised.</p>\n<p>In order to fix this issue, make sure that the object you are trying to call has a <code>__call__</code> method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass MyClass:\n    pass\n\nmyvar = MyClass()\nmyvar()  # Noncompliant\n\nnone_var = None\nnone_var()  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass MyClass:\n    def __call__(self):\n        print(\"called\")\n\nmyvar = MyClass()\nmyvar()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__call__\">Python documentation - __call__ method</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5724",
          "name": "Property getter, setter and deleter methods should have the expected number of parameters",
          "description": "<p>This rule raises an issue when a property getter, setter or deleter does not have the correct number of arguments.</p>\n<h2>Why is this an issue?</h2>\n<p>Creating property accessors and mutators is quite common in Object-Oriented Programming. Python provides two main ways of implementing getters,\nsetters and deleters; either with the <code>@property</code> decorator, or with the <code>property</code> function.</p>\n<pre>\nclass WithPropertyDecorator(object):\n    @property\n    def foo(self)\n        return self._foo\n\n    @foo.setter\n    def foo(self, value):\n        self._foo = value\n\n    @foo.deleter\n    def foo(self):\n        del self._foo\n\nclass WithPropertyMethod(object):\n    def get_foo(self):\n        return self._foo\n\n    def set_foo(self, value):\n        self._foo = value\n\n    def del_foo(self):\n        del self._foo\n\n    foo = property(get_foo, set_foo, del_foo, \"'foo' property.\")\n</pre>\n<p>The following program illustrates how using the built-in operations will call the custom methods defined above.</p>\n<pre>\nwith_decorator = WithPropertyDecorator()\nwith_decorator.foo = 1 # the method defined under @foo.setter will be called.\nsome_var = with_decorator.foo # the method defined under @foo.getter will be called.\ndel with_decorator.foo # the method defined under @foo.deleter will be called.\n\n\nwith_method = WithPropertyMethod()\nwith_method.foo = 1 # the method set_foo will be called.\nsome_var = with_method.foo # the method get_foo will be called.\ndel with_method.foo # the method del_foo will be called.\n</pre>\n<p>Defining a property this way allows for flexibility when refactoring the implementation of the getters, setters and deleters method, as all the\naccesses and modifications are done through the Python built-in operators (<code>=</code>,<code>.</code>) and keyword (<code>del</code>).</p>\n<p>Property getter, setter and deleter methods are called by the Python interpreter with a specific number of arguments:</p>\n<ul>\n  <li> Property getter and deleter methods only require a \"self\" argument. </li>\n  <li> Property setter methods require a \"self\" argument as well as a value. </li>\n</ul>\n<p>Adding any other parameters, or removing these mandatory parameters will throw a <code>TypeError</code> exception at runtime when trying to access\nor modify the property.</p>\n<h2>How to fix it</h2>\n<p>Make sure to specify the correct number of argument for each setter, getter and deleter methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass A:\n    @property\n    def foo(self, unexpected, unexpected2):  # Noncompliant: too many parameters.\n        return self._foo\n\n    @foo.setter\n    def foo(self):  # Noncompliant: a parameter is missing.\n        self._foo = 42\n\n    @foo.deleter\n    def foo(self, unexpected):  # Noncompliant: too many parameters.\n        del self._foo\n\nclass B:\n    def get_foo(self, unexpected):  # Noncompliant: too many parameters.\n        return self._foo\n\n    def set_foo(self, value, unexpected):  # Noncompliant: too many parameters.\n        self._foo = value\n\n    def del_foo(self, unexpected):  # Noncompliant: too many parameters.\n        del self._foo\n\n    foo = property(get_foo, set_foo, del_foo, \"'foo' property.\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass A:\n    @property\n    def foo(self):\n        return self._foo\n\n    @foo.setter\n    def foo(self, value):\n        self._foo = value\n\n    @foo.deleter\n    def foo(self):\n        del self._foo\n\nclass B:\n    def get_foo(self):\n        return self._foo\n\n    def set_foo(self, value):\n        self._foo = value\n\n    def del_foo(self):\n        del self._foo\n\n    foo = property(get_foo, set_foo, del_foo, \"'foo' property.\")\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#property\">Built-in Functions - property</a> - Python Documentation </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when a property getter, setter or deleter does not have the correct number of arguments.</p>\n<h2>Why is this an issue?</h2>\n<p>Creating property accessors and mutators is quite common in Object-Oriented Programming. Python provides two main ways of implementing getters,\nsetters and deleters; either with the <code>@property</code> decorator, or with the <code>property</code> function.</p>\n<pre>\nclass WithPropertyDecorator(object):\n    @property\n    def foo(self)\n        return self._foo\n\n    @foo.setter\n    def foo(self, value):\n        self._foo = value\n\n    @foo.deleter\n    def foo(self):\n        del self._foo\n\nclass WithPropertyMethod(object):\n    def get_foo(self):\n        return self._foo\n\n    def set_foo(self, value):\n        self._foo = value\n\n    def del_foo(self):\n        del self._foo\n\n    foo = property(get_foo, set_foo, del_foo, \"'foo' property.\")\n</pre>\n<p>The following program illustrates how using the built-in operations will call the custom methods defined above.</p>\n<pre>\nwith_decorator = WithPropertyDecorator()\nwith_decorator.foo = 1 # the method defined under @foo.setter will be called.\nsome_var = with_decorator.foo # the method defined under @foo.getter will be called.\ndel with_decorator.foo # the method defined under @foo.deleter will be called.\n\n\nwith_method = WithPropertyMethod()\nwith_method.foo = 1 # the method set_foo will be called.\nsome_var = with_method.foo # the method get_foo will be called.\ndel with_method.foo # the method del_foo will be called.\n</pre>\n<p>Defining a property this way allows for flexibility when refactoring the implementation of the getters, setters and deleters method, as all the\naccesses and modifications are done through the Python built-in operators (<code>=</code>,<code>.</code>) and keyword (<code>del</code>).</p>\n<p>Property getter, setter and deleter methods are called by the Python interpreter with a specific number of arguments:</p>\n<ul>\n  <li> Property getter and deleter methods only require a \"self\" argument. </li>\n  <li> Property setter methods require a \"self\" argument as well as a value. </li>\n</ul>\n<p>Adding any other parameters, or removing these mandatory parameters will throw a <code>TypeError</code> exception at runtime when trying to access\nor modify the property.</p>\n<h2>How to fix it</h2>\n<p>Make sure to specify the correct number of argument for each setter, getter and deleter methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass A:\n    @property\n    def foo(self, unexpected, unexpected2):  # Noncompliant: too many parameters.\n        return self._foo\n\n    @foo.setter\n    def foo(self):  # Noncompliant: a parameter is missing.\n        self._foo = 42\n\n    @foo.deleter\n    def foo(self, unexpected):  # Noncompliant: too many parameters.\n        del self._foo\n\nclass B:\n    def get_foo(self, unexpected):  # Noncompliant: too many parameters.\n        return self._foo\n\n    def set_foo(self, value, unexpected):  # Noncompliant: too many parameters.\n        self._foo = value\n\n    def del_foo(self, unexpected):  # Noncompliant: too many parameters.\n        del self._foo\n\n    foo = property(get_foo, set_foo, del_foo, \"'foo' property.\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass A:\n    @property\n    def foo(self):\n        return self._foo\n\n    @foo.setter\n    def foo(self, value):\n        self._foo = value\n\n    @foo.deleter\n    def foo(self):\n        del self._foo\n\nclass B:\n    def get_foo(self):\n        return self._foo\n\n    def set_foo(self, value):\n        self._foo = value\n\n    def del_foo(self):\n        del self._foo\n\n    foo = property(get_foo, set_foo, del_foo, \"'foo' property.\")\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#property\">Built-in Functions - property</a> - Python Documentation </li>\n</ul>\n\n"
        },
        {
          "id": "S5719",
          "name": "Instance and class methods should have at least one positional parameter",
          "description": "<p>This rule raises an issue when an instance or a class method does not have at least one positional parameter.</p>\n<h2>Why is this an issue?</h2>\n<p>Every instance method is expected to have at least one positional parameter. This parameter will reference the object instance on which the method\nis called. Calling an instance method which doesn\u00e2\u20ac\u2122t have at least one parameter will raise a <code>TypeError</code>. By convention, this first\nparameter is usually named <code>self</code>.</p>\n<p>Class methods, i.e. methods annotated with <code>@classmethod</code>, also require at least one parameter. The only differences is that they will\nreceive the class itself instead of a class instance. By convention, this first parameter is usually named <code>cls</code>.</p>\n<h3>Exceptions</h3>\n<p>Static methods (methods annotated with the <code>@staticmethod</code> decorator) do not require any positional parameter. This rule will not raise\nan issue on them.</p>\n<h2>How to fix it</h2>\n<p>Adding <code>self</code> as the first parameter of an instance method or <code>cls</code> as the first parameter of a class method will resolve the\nissue.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    def instance_method():  # Noncompliant: \"self\" parameter is missing.\n        print(\"instance_method\")\n\n    @classmethod\n    def class_method():  # Noncompliant: \"cls\" parameter is missing.\n        print(\"class_method\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    def instance_method(self):\n        print(\"instance_method\")\n\n    @classmethod\n    def class_method(cls):\n        print(\"class_method\")\n\n    @staticmethod\n    def static_method():\n        print(\"static_method\")\n</pre>\n<h3>Pitfalls</h3>\n<p>Note that <code>__new__</code> and <code>__init_subclass__</code> take a class as first argument even thought they are not decorated with\n<code>@classmethod</code>.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.11/tutorial/classes.html#method-objects\">Method Objects</a> - Python Method Objects </li>\n  <li> <a href=\"https://docs.python.org/3.11/library/functions.html?highlight=classmethod#classmethod\">Class Method</a> - Python Class Method </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when an instance or a class method does not have at least one positional parameter.</p>\n<h2>Why is this an issue?</h2>\n<p>Every instance method is expected to have at least one positional parameter. This parameter will reference the object instance on which the method\nis called. Calling an instance method which doesn\u00e2\u20ac\u2122t have at least one parameter will raise a <code>TypeError</code>. By convention, this first\nparameter is usually named <code>self</code>.</p>\n<p>Class methods, i.e. methods annotated with <code>@classmethod</code>, also require at least one parameter. The only differences is that they will\nreceive the class itself instead of a class instance. By convention, this first parameter is usually named <code>cls</code>.</p>\n<h3>Exceptions</h3>\n<p>Static methods (methods annotated with the <code>@staticmethod</code> decorator) do not require any positional parameter. This rule will not raise\nan issue on them.</p>\n<h2>How to fix it</h2>\n<p>Adding <code>self</code> as the first parameter of an instance method or <code>cls</code> as the first parameter of a class method will resolve the\nissue.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    def instance_method():  # Noncompliant: \"self\" parameter is missing.\n        print(\"instance_method\")\n\n    @classmethod\n    def class_method():  # Noncompliant: \"cls\" parameter is missing.\n        print(\"class_method\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    def instance_method(self):\n        print(\"instance_method\")\n\n    @classmethod\n    def class_method(cls):\n        print(\"class_method\")\n\n    @staticmethod\n    def static_method():\n        print(\"static_method\")\n</pre>\n<h3>Pitfalls</h3>\n<p>Note that <code>__new__</code> and <code>__init_subclass__</code> take a class as first argument even thought they are not decorated with\n<code>@classmethod</code>.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.11/tutorial/classes.html#method-objects\">Method Objects</a> - Python Method Objects </li>\n  <li> <a href=\"https://docs.python.org/3.11/library/functions.html?highlight=classmethod#classmethod\">Class Method</a> - Python Class Method </li>\n</ul>\n\n"
        },
        {
          "id": "S5714",
          "name": "Boolean expressions of exceptions should not be used in \"except\" statements",
          "description": "<p>This rule raises an issue when the expression used in an <code>except</code> block is a boolean expression of exceptions.</p>\n<h2>Why is this an issue?</h2>\n<p>The only two possible types for an <code>except</code>'s expression are a class deriving from <code>BaseException</code>, or a tuple composed of\nsuch classes.</p>\n<p>Trying to catch multiple exception in the same <code>except</code> with a boolean expression of exceptions may not work as intended. The result of\na boolean expression of exceptions is a single exception class, thus using a boolean expression in an <code>except</code> block will result in\ncatching only one kind of exception.</p>\n<pre>\nerror = ValueError or TypeError\nerror is ValueError # True\nerror is TypeError # False\n\nerror = ValueError and TypeError\nerror is ValueError # False\nerror is TypeError # True\n</pre>\n<p><strong>Note</strong>: <em>In Python 2 it is possible to raise an exception from an old-style class that does not derive from\n<code>BaseException</code>.</em></p>\n<h2>How to fix it</h2>\n<p>Make sure to use a tuple of the exceptions that should be caught in the <code>except</code> block.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ntry:\n    raise TypeError()\nexcept ValueError or TypeError:  # Noncompliant\n    print(\"Catching only ValueError\")\nexcept ValueError and TypeError:  # Noncompliant\n    print(\"Catching only TypeError\")\nexcept (ValueError or TypeError) as exception:  # Noncompliant\n    print(\"Catching only ValueError\")\n\nfoo = ValueError or TypeError  # foo == ValueError\nfoo = ValueError and TypeError  # foo == TypeError\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ntry:\n    raise TypeError()\nexcept (ValueError, TypeError) as exception:\n    print(\"Catching ValueError and TypeError\")\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/compound_stmts.html#except\">the <code>try</code> statement</a> - Python try statement </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when the expression used in an <code>except</code> block is a boolean expression of exceptions.</p>\n<h2>Why is this an issue?</h2>\n<p>The only two possible types for an <code>except</code>'s expression are a class deriving from <code>BaseException</code>, or a tuple composed of\nsuch classes.</p>\n<p>Trying to catch multiple exception in the same <code>except</code> with a boolean expression of exceptions may not work as intended. The result of\na boolean expression of exceptions is a single exception class, thus using a boolean expression in an <code>except</code> block will result in\ncatching only one kind of exception.</p>\n<pre>\nerror = ValueError or TypeError\nerror is ValueError # True\nerror is TypeError # False\n\nerror = ValueError and TypeError\nerror is ValueError # False\nerror is TypeError # True\n</pre>\n<p><strong>Note</strong>: <em>In Python 2 it is possible to raise an exception from an old-style class that does not derive from\n<code>BaseException</code>.</em></p>\n<h2>How to fix it</h2>\n<p>Make sure to use a tuple of the exceptions that should be caught in the <code>except</code> block.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ntry:\n    raise TypeError()\nexcept ValueError or TypeError:  # Noncompliant\n    print(\"Catching only ValueError\")\nexcept ValueError and TypeError:  # Noncompliant\n    print(\"Catching only TypeError\")\nexcept (ValueError or TypeError) as exception:  # Noncompliant\n    print(\"Catching only ValueError\")\n\nfoo = ValueError or TypeError  # foo == ValueError\nfoo = ValueError and TypeError  # foo == TypeError\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ntry:\n    raise TypeError()\nexcept (ValueError, TypeError) as exception:\n    print(\"Catching ValueError and TypeError\")\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/compound_stmts.html#except\">the <code>try</code> statement</a> - Python try statement </li>\n</ul>\n\n"
        },
        {
          "id": "S5708",
          "name": "Caught Exceptions must derive from BaseException",
          "description": "<p>This rule raises an issue when the expression used in an <code>except</code> statement is neither a class deriving from <code>BaseException</code>\nnor a tuple of such classes.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python 3\u00e2\u20ac\u2122s <code>except</code> statement, attempting to catch an object that does not derive from <code>BaseException</code> will raise a\n<code>TypeError</code>.</p>\n<p>In order to catch multiple exceptions in an <code>except</code> statement, a <code>tuple</code> of exception classes should be provided. Trying to\ncatch multiple exceptions with a <code>list</code> or a <code>set</code> will raise a <code>TypeError</code>.</p>\n<p>If you are about to create a custom exception class, note that custom exceptions should inherit from <code>Exception</code>, rather than\n<code>BaseException</code>.</p>\n<p><code>BaseException</code> is the base class for all built-in exceptions in Python, including system-exiting exceptions like\n<code>SystemExit</code> or <code>KeyboardInterrupt</code>, which are typically not meant to be caught. On the other hand, <code>Exception</code> is\nintended for exceptions that are expected to be caught, which is generally the case for user-defined exceptions. See <a\nhref=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352</a> for more information.</p>\n<p>To fix this issue, make sure the expression used in an <code>except</code> statement is an exception which derives from\n<code>BaseException</code>/<code>Exception</code> or a tuple of such exceptions.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass CustomException(object):\n    \"\"\"An Invalid exception class.\"\"\"\n    pass\n\ntry:\n    ...\nexcept CustomException:  # Noncompliant: this custom exception does not derive from BaseException or Exception.\n    print(\"exception\")\n\ntry:\n    ...\nexcept [TypeError, ValueError]:  # Noncompliant: list of exceptions, only tuples are valid.\n    print(\"exception\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass CustomException(Exception):\n    pass\n\ntry:\n    ...\nexcept CustomException:\n    print(\"exception\")\n\ntry:\n    ...\nexcept (TypeError, ValueError):\n    print(\"exception\")\n</pre>\n<p><strong>Note</strong>: <em>In Python 2 it is possible to raise and catch old-style classes, which do not inherit from\n<code>BaseException</code>.</em></p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/tutorial/errors.html\">Errors and Exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#except\">The <code>try</code> statement</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\">Exception hierarchy</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> PEP 352 - <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">Required Superclass for Exceptions</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when the expression used in an <code>except</code> statement is neither a class deriving from <code>BaseException</code>\nnor a tuple of such classes.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python 3\u00e2\u20ac\u2122s <code>except</code> statement, attempting to catch an object that does not derive from <code>BaseException</code> will raise a\n<code>TypeError</code>.</p>\n<p>In order to catch multiple exceptions in an <code>except</code> statement, a <code>tuple</code> of exception classes should be provided. Trying to\ncatch multiple exceptions with a <code>list</code> or a <code>set</code> will raise a <code>TypeError</code>.</p>\n<p>If you are about to create a custom exception class, note that custom exceptions should inherit from <code>Exception</code>, rather than\n<code>BaseException</code>.</p>\n<p><code>BaseException</code> is the base class for all built-in exceptions in Python, including system-exiting exceptions like\n<code>SystemExit</code> or <code>KeyboardInterrupt</code>, which are typically not meant to be caught. On the other hand, <code>Exception</code> is\nintended for exceptions that are expected to be caught, which is generally the case for user-defined exceptions. See <a\nhref=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352</a> for more information.</p>\n<p>To fix this issue, make sure the expression used in an <code>except</code> statement is an exception which derives from\n<code>BaseException</code>/<code>Exception</code> or a tuple of such exceptions.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass CustomException(object):\n    \"\"\"An Invalid exception class.\"\"\"\n    pass\n\ntry:\n    ...\nexcept CustomException:  # Noncompliant: this custom exception does not derive from BaseException or Exception.\n    print(\"exception\")\n\ntry:\n    ...\nexcept [TypeError, ValueError]:  # Noncompliant: list of exceptions, only tuples are valid.\n    print(\"exception\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass CustomException(Exception):\n    pass\n\ntry:\n    ...\nexcept CustomException:\n    print(\"exception\")\n\ntry:\n    ...\nexcept (TypeError, ValueError):\n    print(\"exception\")\n</pre>\n<p><strong>Note</strong>: <em>In Python 2 it is possible to raise and catch old-style classes, which do not inherit from\n<code>BaseException</code>.</em></p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/tutorial/errors.html\">Errors and Exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#except\">The <code>try</code> statement</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\">Exception hierarchy</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> PEP 352 - <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">Required Superclass for Exceptions</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5644",
          "name": "Item operations should be done on objects supporting them",
          "description": "<p>This rule raises an issue when an item operation is performed on an object which doesn\u00e2\u20ac\u2122t have the corresponding method.</p>\n<h2>Why is this an issue?</h2>\n<p>Getting, setting and deleting items using square brackets requires the accessed object to have special methods:</p>\n<ul>\n  <li> Getting items such as <code>my_variable[key]</code> requires <code>my_variable</code> to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__getitem__\"><code>__getitem__</code></a> method, or the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__\"><code>__class_getitem__</code></a> method if\n  <code>my_variable</code> is a class. </li>\n  <li> Setting items such as <code>my_variable[key] = 42</code> requires <code>my_variable</code> to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__setitem__\"><code>__setitem__</code></a> method. </li>\n  <li> Deleting items such as <code>del my_variable[key]</code> requires <code>my_variable</code> to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__delitem__\"><code>__delitem__</code></a> method. </li>\n</ul>\n<p>Performing these operations on an object that doesn\u00e2\u20ac\u2122t have the corresponding method will result in a <code>TypeError</code>.</p>\n<p>To fix this issue, make sure that the class for which you are trying to perform item operations implements the required methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndel (1, 2)[0]  # Noncompliant: tuples are immutable\n(1, 2)[0] = 42  # Noncompliant\n(1, 2)[0]\n\nclass A:\n    def __init__(self, values):\n        self._values = values\n\na = A([0,1,2])\n\na[0]  # Noncompliant\ndel a[0]  # Noncompliant\na[0] = 42  # Noncompliant\n\nclass B:\n    pass\n\nB[0]  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndel [1, 2][0]  # Lists are mutable\n[1, 2][0] = 42\n[1, 2][0]\n\nclass A:\n    def __init__(self, values):\n        self._values = values\n\n    def __getitem__(self, key):\n        return self._values[key]\n\n    def __setitem__(self, key, value):\n        self._values[key] = value\n\n    def __delitem__(self, key):\n        del self._values[key]\n\na = A([0,1,2])\n\na[0]\ndel a[0]\na[0] = 42\n\nclass B:\n    def __class_getitem__(cls, key):\n        return [0, 1, 2, 3][key]\n\nB[0]\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__getitem__\">Python documentation - __getitem__ method</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__setitem__\">Python documentation - __setitem__ method</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__delitem__\">Python documentation - __delitem__ method</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__\">Python documentation - __class_getitem__ method</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when an item operation is performed on an object which doesn\u00e2\u20ac\u2122t have the corresponding method.</p>\n<h2>Why is this an issue?</h2>\n<p>Getting, setting and deleting items using square brackets requires the accessed object to have special methods:</p>\n<ul>\n  <li> Getting items such as <code>my_variable[key]</code> requires <code>my_variable</code> to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__getitem__\"><code>__getitem__</code></a> method, or the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__\"><code>__class_getitem__</code></a> method if\n  <code>my_variable</code> is a class. </li>\n  <li> Setting items such as <code>my_variable[key] = 42</code> requires <code>my_variable</code> to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__setitem__\"><code>__setitem__</code></a> method. </li>\n  <li> Deleting items such as <code>del my_variable[key]</code> requires <code>my_variable</code> to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__delitem__\"><code>__delitem__</code></a> method. </li>\n</ul>\n<p>Performing these operations on an object that doesn\u00e2\u20ac\u2122t have the corresponding method will result in a <code>TypeError</code>.</p>\n<p>To fix this issue, make sure that the class for which you are trying to perform item operations implements the required methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndel (1, 2)[0]  # Noncompliant: tuples are immutable\n(1, 2)[0] = 42  # Noncompliant\n(1, 2)[0]\n\nclass A:\n    def __init__(self, values):\n        self._values = values\n\na = A([0,1,2])\n\na[0]  # Noncompliant\ndel a[0]  # Noncompliant\na[0] = 42  # Noncompliant\n\nclass B:\n    pass\n\nB[0]  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndel [1, 2][0]  # Lists are mutable\n[1, 2][0] = 42\n[1, 2][0]\n\nclass A:\n    def __init__(self, values):\n        self._values = values\n\n    def __getitem__(self, key):\n        return self._values[key]\n\n    def __setitem__(self, key, value):\n        self._values[key] = value\n\n    def __delitem__(self, key):\n        del self._values[key]\n\na = A([0,1,2])\n\na[0]\ndel a[0]\na[0] = 42\n\nclass B:\n    def __class_getitem__(cls, key):\n        return [0, 1, 2, 3][key]\n\nB[0]\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__getitem__\">Python documentation - __getitem__ method</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__setitem__\">Python documentation - __setitem__ method</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__delitem__\">Python documentation - __delitem__ method</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__\">Python documentation - __class_getitem__ method</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5642",
          "name": "\"in\" and \"not in\" operators should be used on objects supporting them",
          "description": "<p>This rule raises an issue when operators <code>in</code> and <code>not in</code> are called with a right operand not supporting membership\nprotocol.</p>\n<h2>Why is this an issue?</h2>\n<p>Operators <code>in</code> and <code>not in</code>, also called <a\nhref=\"https://docs.python.org/3/reference/expressions.html#membership-test-operations\">\"membership test operators\"</a>, require that the right operand\nsupports the membership protocol.</p>\n<p>In order to support the membership protocol, a user-defined class should implement at least one of the following methods:\n<code>__contains__</code>, <code>__iter__</code>, <code>__getitem__</code>.</p>\n<p>If none of these methods is implemented, a <code>TypeError</code> will be raised when performing a membership test.</p>\n<h2>How to fix it</h2>\n<h2>Code examples</h2>\n<h3>Noncompliant code example</h3>\n<pre>\nmyint = 42\n\nif 42 in myint:  # Noncompliant: integers don't support membership protocol\n    ...\n\nclass A:\n    def __init__(self, values):\n        self._values = values\n\nif \"mystring\" in A([\"mystring\"]):  # Noncompliant: class A doesn't support membership protocol\n    ...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nmylist = [42]\n\nif 42 in mylist:\n    ...\n\nclass MyContains:\n    def __init__(self, values):\n        self._values = values\n\n    def __contains__(self, value):\n        return value in self._values\n\nif \"mystring\" in MyContains([\"mystring\"]):\n    ...\n\n# OR\n\nclass MyIterable:\n    def __init__(self, values):\n        self._values = values\n\n    def __iter__(self):\n        return iter(self._values)\n\nif \"mystring\" in MyIterable([\"mystring\"]):\n    ...\n\n# OR\n\nclass MyGetItem:\n    def __init__(self, values):\n        self._values = values\n\n    def __getitem__(self, key):\n        return self._values[key]\n\nif \"mystring\" in MyGetItem([\"mystring\"]):\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/expressions.html#membership-test-operations\">Membership test operations</a>\n  </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when operators <code>in</code> and <code>not in</code> are called with a right operand not supporting membership\nprotocol.</p>\n<h2>Why is this an issue?</h2>\n<p>Operators <code>in</code> and <code>not in</code>, also called <a\nhref=\"https://docs.python.org/3/reference/expressions.html#membership-test-operations\">\"membership test operators\"</a>, require that the right operand\nsupports the membership protocol.</p>\n<p>In order to support the membership protocol, a user-defined class should implement at least one of the following methods:\n<code>__contains__</code>, <code>__iter__</code>, <code>__getitem__</code>.</p>\n<p>If none of these methods is implemented, a <code>TypeError</code> will be raised when performing a membership test.</p>\n<h2>How to fix it</h2>\n<h2>Code examples</h2>\n<h3>Noncompliant code example</h3>\n<pre>\nmyint = 42\n\nif 42 in myint:  # Noncompliant: integers don't support membership protocol\n    ...\n\nclass A:\n    def __init__(self, values):\n        self._values = values\n\nif \"mystring\" in A([\"mystring\"]):  # Noncompliant: class A doesn't support membership protocol\n    ...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nmylist = [42]\n\nif 42 in mylist:\n    ...\n\nclass MyContains:\n    def __init__(self, values):\n        self._values = values\n\n    def __contains__(self, value):\n        return value in self._values\n\nif \"mystring\" in MyContains([\"mystring\"]):\n    ...\n\n# OR\n\nclass MyIterable:\n    def __init__(self, values):\n        self._values = values\n\n    def __iter__(self):\n        return iter(self._values)\n\nif \"mystring\" in MyIterable([\"mystring\"]):\n    ...\n\n# OR\n\nclass MyGetItem:\n    def __init__(self, values):\n        self._values = values\n\n    def __getitem__(self, key):\n        return self._values[key]\n\nif \"mystring\" in MyGetItem([\"mystring\"]):\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/expressions.html#membership-test-operations\">Membership test operations</a>\n  </li>\n</ul>\n\n"
        },
        {
          "id": "S5633",
          "name": "Dictionary unpacking should only be done with \"mapping\" objects",
          "description": "<p>This rule raises an issue when a dictionary unpacking operation is performed on an invalid mapping object.</p>\n<h2>Why is this an issue?</h2>\n<p>Dictionary unpacking allows you to pass the key-value pairs of a dictionary as keyword arguments to a function or merge dictionaries:</p>\n<pre>\ndef foo(a, b):\n    print(a+b)\n\nmy_dict = {\"a\": 1, \"b\": 2}\nfoo(**my_dict) # will print 3\n</pre>\n<p>Dictionary unpacking requires an object with methods <code>__getitem__</code> and <code>keys</code> or <code>__getitem__</code> and\n<code>__getattr__</code>. This is the case for any <a href=\"https://docs.python.org/3/glossary.html#term-mapping\">mapping</a> object such as\n<code>dict</code>. Using an object which doesn\u00e2\u20ac\u2122t have these methods will raise a <code>TypeError</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass A:\n    pass\n\n{'a': 10, 'b': 20, **A()}  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass A:\n  def __getitem__(self, key):\n      return 2\n\n  def keys(self):\n      return ['1','2','3']\n\n{'a': 10, 'b': 20, **A()}  # =&gt; {'a': 10, 'b': 20, '1': 2, '2': 2, '3': 2}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/glossary.html#term-mapping\">mapping</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when a dictionary unpacking operation is performed on an invalid mapping object.</p>\n<h2>Why is this an issue?</h2>\n<p>Dictionary unpacking allows you to pass the key-value pairs of a dictionary as keyword arguments to a function or merge dictionaries:</p>\n<pre>\ndef foo(a, b):\n    print(a+b)\n\nmy_dict = {\"a\": 1, \"b\": 2}\nfoo(**my_dict) # will print 3\n</pre>\n<p>Dictionary unpacking requires an object with methods <code>__getitem__</code> and <code>keys</code> or <code>__getitem__</code> and\n<code>__getattr__</code>. This is the case for any <a href=\"https://docs.python.org/3/glossary.html#term-mapping\">mapping</a> object such as\n<code>dict</code>. Using an object which doesn\u00e2\u20ac\u2122t have these methods will raise a <code>TypeError</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass A:\n    pass\n\n{'a': 10, 'b': 20, **A()}  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass A:\n  def __getitem__(self, key):\n      return 2\n\n  def keys(self):\n      return ['1','2','3']\n\n{'a': 10, 'b': 20, **A()}  # =&gt; {'a': 10, 'b': 20, '1': 2, '2': 2, '3': 2}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/glossary.html#term-mapping\">mapping</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5632",
          "name": "Raised Exceptions must derive from BaseException",
          "description": "<p>This rule raises an issue when an object which doesn\u00e2\u20ac\u2122t derive from <code>BaseException</code> is raised.</p>\n<h2>Why is this an issue?</h2>\n<p>Attempting to raise an object which does not derive from <code>BaseException</code> will raise a <code>TypeError</code>.</p>\n<p>If you are about to create a custom exception class, note that custom exceptions should inherit from <code>Exception</code>, rather than\n<code>BaseException</code>.</p>\n<p><code>BaseException</code> is the base class for all built-in exceptions in Python, including system-exiting exceptions like\n<code>SystemExit</code> or <code>KeyboardInterrupt</code>, which are typically not meant to be caught. On the other hand, <code>Exception</code> is\nintended for exceptions that are expected to be caught, which is generally the case for user-defined exceptions. See <a\nhref=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352</a> for more information.</p>\n<p>To fix this issue, make sure that the object you\u00e2\u20ac\u2122re attempting to raise inherits from <code>BaseException</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nraise \"Something went wrong\"  # Noncompliant: a string is not a valid exception\n\nclass A:\n    pass\n\nraise A  # Noncompliant: A does not inherit from Exception\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass MyError(Exception):\n    pass\n\nraise MyError(\"Something went wrong\")\nraise MyError\n</pre>\n<p><strong>Note</strong>: <em>In Python 2 it is possible to raise old-style classes but this shouldn\u00e2\u20ac\u2122t be done in order to be compatible with Python\n3.</em></p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/errors.html\">Python documentation - Errors and Exceptions</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352 - Required Superclass for Exceptions</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when an object which doesn\u00e2\u20ac\u2122t derive from <code>BaseException</code> is raised.</p>\n<h2>Why is this an issue?</h2>\n<p>Attempting to raise an object which does not derive from <code>BaseException</code> will raise a <code>TypeError</code>.</p>\n<p>If you are about to create a custom exception class, note that custom exceptions should inherit from <code>Exception</code>, rather than\n<code>BaseException</code>.</p>\n<p><code>BaseException</code> is the base class for all built-in exceptions in Python, including system-exiting exceptions like\n<code>SystemExit</code> or <code>KeyboardInterrupt</code>, which are typically not meant to be caught. On the other hand, <code>Exception</code> is\nintended for exceptions that are expected to be caught, which is generally the case for user-defined exceptions. See <a\nhref=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352</a> for more information.</p>\n<p>To fix this issue, make sure that the object you\u00e2\u20ac\u2122re attempting to raise inherits from <code>BaseException</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nraise \"Something went wrong\"  # Noncompliant: a string is not a valid exception\n\nclass A:\n    pass\n\nraise A  # Noncompliant: A does not inherit from Exception\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass MyError(Exception):\n    pass\n\nraise MyError(\"Something went wrong\")\nraise MyError\n</pre>\n<p><strong>Note</strong>: <em>In Python 2 it is possible to raise old-style classes but this shouldn\u00e2\u20ac\u2122t be done in order to be compatible with Python\n3.</em></p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/errors.html\">Python documentation - Errors and Exceptions</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352 - Required Superclass for Exceptions</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5607",
          "name": "Operators should be used on compatible types",
          "description": "<p>This rule raises an issue when an operator is used on incompatible types.</p>\n<h2>Why is this an issue?</h2>\n<p>For a specific operator, two types are considered incompatible if no built-in operations between those types exist and none of the operands has\nimplemented the operator\u00e2\u20ac\u2122s corresponding special methods. Performing such an operation on incompatible types will raise a <code>TypeError</code>.</p>\n<p>Calling an operator in Python is equivalent to calling a special method (except for the identity operator <code>is</code>). Python provides a set\nof built-in operations. For example, to add two integers: <code>1 + 2</code>, calling the built-in operator <code>+</code> is equivalent to calling\nthe special method <code>__add__</code> on the type <code>int</code>.</p>\n<p>Python allows developers to define how an operator will behave with a custom class by implementing the corresponding special method. When defining\nsuch methods for symmetrical binary operators, developers need to define two methods so that the order of operands doesn\u00e2\u20ac\u2122t matter, ex:\n<code>__add__</code> and <code>__radd__</code>.</p>\n<p>For a complete list of operators and their methods see the Python documentation: <a\nhref=\"https://docs.python.org/3/reference/datamodel.html?#emulating-numeric-types\">arithmetic and bitwise operators</a>, <a\nhref=\"https://docs.python.org/3/reference/datamodel.html?#object.__lt__\">comparison operators</a>.</p>\n<h2>How to fix it</h2>\n<p>Implementing the special methods for a specific operator will fix the issue.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass Empty:\n    pass\n\nclass Add:\n    def __add__(self, other):\n        return 42\n\nEmpty() + 1  # Noncompliant: no __add__ method is defined on the Empty class\nAdd() + 1\n1 + Add()  # Noncompliant: no __radd__ method is defined on the Add class\nAdd() + Empty()\nEmpty() + Add()  # Noncompliant: no __radd__ method is defined on the Add class\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass Empty:\n    pass\n\nclass Add:\n    def __add__(self, other):\n        return 42\n\n    def __radd__(self, other):\n        return 42\n\nAdd() + 1\n1 + Add()\nAdd() + Empty()\nEmpty() + Add()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html?#object.__lt__\">Rich comparison methods</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html?#emulating-numeric-types\">Emulating numeric types</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when an operator is used on incompatible types.</p>\n<h2>Why is this an issue?</h2>\n<p>For a specific operator, two types are considered incompatible if no built-in operations between those types exist and none of the operands has\nimplemented the operator\u00e2\u20ac\u2122s corresponding special methods. Performing such an operation on incompatible types will raise a <code>TypeError</code>.</p>\n<p>Calling an operator in Python is equivalent to calling a special method (except for the identity operator <code>is</code>). Python provides a set\nof built-in operations. For example, to add two integers: <code>1 + 2</code>, calling the built-in operator <code>+</code> is equivalent to calling\nthe special method <code>__add__</code> on the type <code>int</code>.</p>\n<p>Python allows developers to define how an operator will behave with a custom class by implementing the corresponding special method. When defining\nsuch methods for symmetrical binary operators, developers need to define two methods so that the order of operands doesn\u00e2\u20ac\u2122t matter, ex:\n<code>__add__</code> and <code>__radd__</code>.</p>\n<p>For a complete list of operators and their methods see the Python documentation: <a\nhref=\"https://docs.python.org/3/reference/datamodel.html?#emulating-numeric-types\">arithmetic and bitwise operators</a>, <a\nhref=\"https://docs.python.org/3/reference/datamodel.html?#object.__lt__\">comparison operators</a>.</p>\n<h2>How to fix it</h2>\n<p>Implementing the special methods for a specific operator will fix the issue.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass Empty:\n    pass\n\nclass Add:\n    def __add__(self, other):\n        return 42\n\nEmpty() + 1  # Noncompliant: no __add__ method is defined on the Empty class\nAdd() + 1\n1 + Add()  # Noncompliant: no __radd__ method is defined on the Add class\nAdd() + Empty()\nEmpty() + Add()  # Noncompliant: no __radd__ method is defined on the Add class\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass Empty:\n    pass\n\nclass Add:\n    def __add__(self, other):\n        return 42\n\n    def __radd__(self, other):\n        return 42\n\nAdd() + 1\n1 + Add()\nAdd() + Empty()\nEmpty() + Add()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html?#object.__lt__\">Rich comparison methods</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html?#emulating-numeric-types\">Emulating numeric types</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S3862",
          "name": "Iterable unpacking, \"for-in\" loops and \"yield from\" should use an Iterable object",
          "description": "<p>This rule raises an issue when a non iterable object is used in a <code>for-in</code> loop, in a <code>yield from</code> or when it is\nunpacked.</p>\n<h2>Why is this an issue?</h2>\n<p><code>for-in</code> loops, <a href=\"https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator\"><code>yield\nfrom</code></a> and iterable unpacking only work with <a href=\"https://docs.python.org/3/glossary.html#term-iterable\">iterable objects</a>. In order\nto be iterable, an object should have either an <code>__iter__</code> method or a <code>__getitem__</code> method implementing the <a\nhref=\"https://docs.python.org/3/glossary.html#term-sequence\">Sequence</a> protocol.</p>\n<p>When trying to iterate over an object which does not implement the required methods, a <code>TypeError</code> will be raised.</p>\n<p>Below is an example of a basic implementation of a iterator with <code>__iter__</code>:</p>\n<pre>\nclass IterExample(object):\n    def __init__(self):\n        self._values = [1,2,3,4]\n\n    def __iter__(self):\n        return iter(self._values)\n</pre>\n<p>Here is a similar example with <code>__getitem__</code>:</p>\n<pre>\nclass GetItemExample(object):\n    def __init__(self):\n        self._values = [1,2,3,4]\n\n    def __getitem__(self, item):\n        return self._values[item]\n</pre>\n<p>These implementations make it possible to execute the following program:</p>\n<pre>\nmy_iterator = IterExample()\nfor i in my_iterator:\n    print(i) # Prints 1,2,3,4\n\nmy_iterator = GetItemExample()\nfor i in my_iterator:\n    print(i) # Prints 1,2,3,4\n</pre>\n<p>Note also that iterating over an <a href=\"https://docs.python.org/3/glossary.html#term-asynchronous-iterable\">asynchronous iterable</a>, i.e. an\nobject having the <code>__aiter__</code> method, requires the use of <a\nhref=\"https://docs.python.org/3/reference/compound_stmts.html#the-async-for-statement\"><code>async for ... in</code></a> instead of <code>for ...\nin</code>. Failing to provide the <code>async</code> keyword will result in a <code>TypeError</code> stating the object is not iterable.</p>\n<h2>How to fix it</h2>\n<p>Make sure your object is an iterable when using it in <code>for-in</code> loops,<code>yield from</code> and unpacking statements, by implementing\n<code>__iter__</code> or <code>__getitem__</code>. To iterate over an asynchronous iterable, make sure to use the <code>async</code> keyword, i.e\n<code>async for \u00e2\u20ac\u00a6\u00e2\u20ac\u2039 in</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyIterable:\n    def __init__(self, values):\n        self._values = values\n\nmy_iterable = MyIterable(range(10))\n\nfor a in my_iterable:  # Noncompliant: MyIterable is not an iterable\n    print(a)\n\na, b, *c = my_iterable  # Noncompliant: MyIterable is not an iterable\n\n# yield from\ndef generator():\n    yield from my_iterable  # Noncompliant: MyIterable is not an iterable\n</pre>\n<p>For async generators:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nasync def async_function():\n  # async generators\n  async def async_generator():\n      yield 1\n\n  for a in async_generator():  # Noncompliant: \"async\" is missing before \"for\"\n      print(a)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyIterable:\n    def __init__(self, values):\n        self._values = values\n\n    def __iter__(self):\n        return iter(self._values)\n\nmy_iterable = MyIterable(range(10))\n\nfor a in my_iterable:\n    print(a)\n\na, b, *c = my_iterable\n\n# yield from\ndef generator():\n    yield from my_iterable\n</pre>\n<p>Make sure to use the <code>async</code> keyword when iterating over async generators.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nasync def async_function():\n  # async generators\n  async def async_generator():\n      yield 1\n\n  async for a in async_generator():\n      print(a)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#iterator-types\">Iterator Types</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0234/#python-api-specification\">PEP 234 - Iterators</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when a non iterable object is used in a <code>for-in</code> loop, in a <code>yield from</code> or when it is\nunpacked.</p>\n<h2>Why is this an issue?</h2>\n<p><code>for-in</code> loops, <a href=\"https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator\"><code>yield\nfrom</code></a> and iterable unpacking only work with <a href=\"https://docs.python.org/3/glossary.html#term-iterable\">iterable objects</a>. In order\nto be iterable, an object should have either an <code>__iter__</code> method or a <code>__getitem__</code> method implementing the <a\nhref=\"https://docs.python.org/3/glossary.html#term-sequence\">Sequence</a> protocol.</p>\n<p>When trying to iterate over an object which does not implement the required methods, a <code>TypeError</code> will be raised.</p>\n<p>Below is an example of a basic implementation of a iterator with <code>__iter__</code>:</p>\n<pre>\nclass IterExample(object):\n    def __init__(self):\n        self._values = [1,2,3,4]\n\n    def __iter__(self):\n        return iter(self._values)\n</pre>\n<p>Here is a similar example with <code>__getitem__</code>:</p>\n<pre>\nclass GetItemExample(object):\n    def __init__(self):\n        self._values = [1,2,3,4]\n\n    def __getitem__(self, item):\n        return self._values[item]\n</pre>\n<p>These implementations make it possible to execute the following program:</p>\n<pre>\nmy_iterator = IterExample()\nfor i in my_iterator:\n    print(i) # Prints 1,2,3,4\n\nmy_iterator = GetItemExample()\nfor i in my_iterator:\n    print(i) # Prints 1,2,3,4\n</pre>\n<p>Note also that iterating over an <a href=\"https://docs.python.org/3/glossary.html#term-asynchronous-iterable\">asynchronous iterable</a>, i.e. an\nobject having the <code>__aiter__</code> method, requires the use of <a\nhref=\"https://docs.python.org/3/reference/compound_stmts.html#the-async-for-statement\"><code>async for ... in</code></a> instead of <code>for ...\nin</code>. Failing to provide the <code>async</code> keyword will result in a <code>TypeError</code> stating the object is not iterable.</p>\n<h2>How to fix it</h2>\n<p>Make sure your object is an iterable when using it in <code>for-in</code> loops,<code>yield from</code> and unpacking statements, by implementing\n<code>__iter__</code> or <code>__getitem__</code>. To iterate over an asynchronous iterable, make sure to use the <code>async</code> keyword, i.e\n<code>async for \u00e2\u20ac\u00a6\u00e2\u20ac\u2039 in</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyIterable:\n    def __init__(self, values):\n        self._values = values\n\nmy_iterable = MyIterable(range(10))\n\nfor a in my_iterable:  # Noncompliant: MyIterable is not an iterable\n    print(a)\n\na, b, *c = my_iterable  # Noncompliant: MyIterable is not an iterable\n\n# yield from\ndef generator():\n    yield from my_iterable  # Noncompliant: MyIterable is not an iterable\n</pre>\n<p>For async generators:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nasync def async_function():\n  # async generators\n  async def async_generator():\n      yield 1\n\n  for a in async_generator():  # Noncompliant: \"async\" is missing before \"for\"\n      print(a)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyIterable:\n    def __init__(self, values):\n        self._values = values\n\n    def __iter__(self):\n        return iter(self._values)\n\nmy_iterable = MyIterable(range(10))\n\nfor a in my_iterable:\n    print(a)\n\na, b, *c = my_iterable\n\n# yield from\ndef generator():\n    yield from my_iterable\n</pre>\n<p>Make sure to use the <code>async</code> keyword when iterating over async generators.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nasync def async_function():\n  # async generators\n  async def async_generator():\n      yield 1\n\n  async for a in async_generator():\n      print(a)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#iterator-types\">Iterator Types</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0234/#python-api-specification\">PEP 234 - Iterators</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S3403",
          "name": "Identity operators should not be used with dissimilar types",
          "description": "<p>This rule raises an issue when an identity comparison operator is used to compare objects of different types.</p>\n<h2>Why is this an issue?</h2>\n<p>Operators <a href=\"https://docs.python.org/3/reference/expressions.html#is-not\"><code>is</code></a> and <a\nhref=\"https://docs.python.org/3/reference/expressions.html#is-not\"><code>is not</code></a> check if their operands point to the same instance, thus\nthey will always return respectively <code>False</code> and <code>True</code> when they are used to compare objects of different types.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\na = 1\nb = \"1\"\nvalue = a is b  # Noncompliant. Always False\nvalue = a is not b  # Noncompliant. Always True\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\na = 1\nb = 1\nvalue = a is b\nvalue = a is not b\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/expressions.html#is-not\">Identity comparisons</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when an identity comparison operator is used to compare objects of different types.</p>\n<h2>Why is this an issue?</h2>\n<p>Operators <a href=\"https://docs.python.org/3/reference/expressions.html#is-not\"><code>is</code></a> and <a\nhref=\"https://docs.python.org/3/reference/expressions.html#is-not\"><code>is not</code></a> check if their operands point to the same instance, thus\nthey will always return respectively <code>False</code> and <code>True</code> when they are used to compare objects of different types.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\na = 1\nb = \"1\"\nvalue = a is b  # Noncompliant. Always False\nvalue = a is not b  # Noncompliant. Always True\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\na = 1\nb = 1\nvalue = a is b\nvalue = a is not b\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/expressions.html#is-not\">Identity comparisons</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2876",
          "name": "\"__iter__\" should return an iterator",
          "description": "<p>This rule raises an issue when the object returned by <code>__iter__</code> is not a valid iterator.</p>\n<h2>Why is this an issue?</h2>\n<p>An <a href=\"https://docs.python.org/3/glossary.html#term-iterable\">iterable</a> object is an object capable of returning its members one at a time.\nTo do so, it must define an <code>__iter__</code> method that returns an iterator.</p>\n<p>The <a href=\"https://docs.python.org/3/library/stdtypes.html#iterator-types\">iterator protocol</a> specifies that, in order to be a valid iterator,\nan object must define a <code>__next__</code> and an <code>__iter__</code> method (because iterators are also iterable).</p>\n<p>Defining an <code>__iter__</code> method that returns anything else than an iterator will raise a <code>TypeError</code> as soon as the iteration\nbegins.</p>\n<p>Note that <a href=\"https://docs.python.org/3/tutorial/classes.html#generators\">generators</a> and <a\nhref=\"https://docs.python.org/3/tutorial/classes.html#generator-expressions\">generator expressions</a> have both <code>__next__</code> and\n<code>__iter__</code> methods generated automatically.</p>\n<h2>How to fix it</h2>\n<p>Make sure that the <code>__iter__</code> method returns a valid iterator.</p>\n<h2>Code examples</h2>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyIterable:\n    def __init__(self, values):\n        self._values = values\n\n    def __iter__(self):\n        return None  # Noncompliant: Not a valid iterator\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyIterable:\n    def __init__(self, values):\n        self._values = values\n\n    def __iter__(self):\n        return MyIterator(self._values)\n\nclass MyIterator:\n    def __init__(self, values):\n        self._values = values\n        self._index = 0\n\n    def __next__(self):\n        if self._index &gt;= len(self._values):\n            raise StopIteration()\n        value = self._values[self._index]\n        self._index += 1\n        return value\n\n    def __iter__(self):\n        return self\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/stdtypes.html#iterator-types\">Iterator Types</a> </li>\n  <li> PEP 234 - <a href=\"https://www.python.org/dev/peps/pep-0234/#python-api-specification\">Iterators</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when the object returned by <code>__iter__</code> is not a valid iterator.</p>\n<h2>Why is this an issue?</h2>\n<p>An <a href=\"https://docs.python.org/3/glossary.html#term-iterable\">iterable</a> object is an object capable of returning its members one at a time.\nTo do so, it must define an <code>__iter__</code> method that returns an iterator.</p>\n<p>The <a href=\"https://docs.python.org/3/library/stdtypes.html#iterator-types\">iterator protocol</a> specifies that, in order to be a valid iterator,\nan object must define a <code>__next__</code> and an <code>__iter__</code> method (because iterators are also iterable).</p>\n<p>Defining an <code>__iter__</code> method that returns anything else than an iterator will raise a <code>TypeError</code> as soon as the iteration\nbegins.</p>\n<p>Note that <a href=\"https://docs.python.org/3/tutorial/classes.html#generators\">generators</a> and <a\nhref=\"https://docs.python.org/3/tutorial/classes.html#generator-expressions\">generator expressions</a> have both <code>__next__</code> and\n<code>__iter__</code> methods generated automatically.</p>\n<h2>How to fix it</h2>\n<p>Make sure that the <code>__iter__</code> method returns a valid iterator.</p>\n<h2>Code examples</h2>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyIterable:\n    def __init__(self, values):\n        self._values = values\n\n    def __iter__(self):\n        return None  # Noncompliant: Not a valid iterator\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyIterable:\n    def __init__(self, values):\n        self._values = values\n\n    def __iter__(self):\n        return MyIterator(self._values)\n\nclass MyIterator:\n    def __init__(self, values):\n        self._values = values\n        self._index = 0\n\n    def __next__(self):\n        if self._index &gt;= len(self._values):\n            raise StopIteration()\n        value = self._values[self._index]\n        self._index += 1\n        return value\n\n    def __iter__(self):\n        return self\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/stdtypes.html#iterator-types\">Iterator Types</a> </li>\n  <li> PEP 234 - <a href=\"https://www.python.org/dev/peps/pep-0234/#python-api-specification\">Iterators</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2734",
          "name": "\"__init__\" should not return a value",
          "description": "<p>This rule raises an issue when the <code>__init__</code> method of a class contains a <code>return</code> or a <code>yield</code> statement.</p>\n<h2>Why is this an issue?</h2>\n<p>By contract, every Python function returns something, even if it is the <code>None</code> value, which can be returned implicitly by omitting the\n<code>return</code> statement, or explicitly.</p>\n<p>The <code>__init__</code> method is required to return <code>None</code>. A <code>TypeError</code> will be raised if the <code>__init__</code>\nmethod either yields or returns any expression other than <code>None</code>. While explicitly returning an expression that evaluates to\n<code>None</code> will not raise an error, it is considered bad practice.</p>\n<p>To fix this issue, make sure that the <code>__init__</code> method does not contain any return statement.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n        return self  # Noncompliant: a TypeError will be raised\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__init__\">The <code>__init__</code> method</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when the <code>__init__</code> method of a class contains a <code>return</code> or a <code>yield</code> statement.</p>\n<h2>Why is this an issue?</h2>\n<p>By contract, every Python function returns something, even if it is the <code>None</code> value, which can be returned implicitly by omitting the\n<code>return</code> statement, or explicitly.</p>\n<p>The <code>__init__</code> method is required to return <code>None</code>. A <code>TypeError</code> will be raised if the <code>__init__</code>\nmethod either yields or returns any expression other than <code>None</code>. While explicitly returning an expression that evaluates to\n<code>None</code> will not raise an error, it is considered bad practice.</p>\n<p>To fix this issue, make sure that the <code>__init__</code> method does not contain any return statement.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n        return self  # Noncompliant: a TypeError will be raised\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__init__\">The <code>__init__</code> method</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2711",
          "name": "\"yield\" and \"return\" should not be used outside functions",
          "description": "<p>This rule raises an issue when <code>return</code> or <code>yield</code> are used outside of a function.</p>\n<h2>Why is this an issue?</h2>\n<p><code>yield</code> and <code>return</code> only make sense in the context of functions. Using them outside a function raises a\n<code>SyntaxError</code>.</p>\n<p>If the goal is to break out of a loop, use <code>break</code> instead of <code>return</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\na = 1\nwhile a &lt; 3:\n    if a % 2 == 0:\n        return # Noncompliant: return is outside of a function\n    a += 1\n\nfor n in range(5):\n  yield n # Noncompliant: yield is outside of a function\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\na = 1\nwhile a &lt; 3:\n    if a % 2 == 0:\n        break\n    a += 1\n\ndef gen():\n    for n in range(5):\n      yield n\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/expressions.html?highlight=yield#yield-expressions\">Yield expressions</a>\n  </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/simple_stmts.html?highlight=return%20tatement#the-return-statement\">Return\n  statement</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when <code>return</code> or <code>yield</code> are used outside of a function.</p>\n<h2>Why is this an issue?</h2>\n<p><code>yield</code> and <code>return</code> only make sense in the context of functions. Using them outside a function raises a\n<code>SyntaxError</code>.</p>\n<p>If the goal is to break out of a loop, use <code>break</code> instead of <code>return</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\na = 1\nwhile a &lt; 3:\n    if a % 2 == 0:\n        return # Noncompliant: return is outside of a function\n    a += 1\n\nfor n in range(5):\n  yield n # Noncompliant: yield is outside of a function\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\na = 1\nwhile a &lt; 3:\n    if a % 2 == 0:\n        break\n    a += 1\n\ndef gen():\n    for n in range(5):\n      yield n\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/expressions.html?highlight=yield#yield-expressions\">Yield expressions</a>\n  </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/simple_stmts.html?highlight=return%20tatement#the-return-statement\">Return\n  statement</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2275",
          "name": "String formatting should not lead to runtime errors",
          "description": "<h2>Why is this an issue?</h2>\n<p>Formatting strings, either with the <code>%</code> operator or <code>str.format</code> method, requires a valid string and arguments matching this\nstring\u00e2\u20ac\u2122s replacement fields.</p>\n<p>This rule raises an issue when formatting a string will raise an exception because the input string or arguments are invalid. Rule\n{rule:python:S3457} covers cases where no exception is raised and the resulting string is simply not formatted properly.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nprint('Error code %d' % '42')  # Noncompliant. Replace this value with a number as %d requires.\n\nprint('User {1} is not allowed to perform this action'.format('Bob'))  # Noncompliant. Replacement field numbering should start at 0.\n\nprint('User {0} has not been able to access {}'.format('Alice', 'MyFile'))  # Noncompliant. Use only manual or only automatic field numbering, don't mix them.\n\nprint('User {a} has not been able to access {b}'.format(a='Alice'))  # Noncompliant. Provide a value for field \"b\".\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprint('Error code %d' % 42)\n\nprint('User {0} is not allowed to perform this action'.format('Bob'))\n\nprint('User {0} has not been able to access {1}'.format('Alice', 'MyFile'))\n\nprint('User {a} has not been able to access {b}'.format(a='Alice', b='MyFile'))\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">Python documentation - Format String Syntax</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\">Python documentation - printf-style String\n  Formatting</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Formatting strings, either with the <code>%</code> operator or <code>str.format</code> method, requires a valid string and arguments matching this\nstring\u00e2\u20ac\u2122s replacement fields.</p>\n<p>This rule raises an issue when formatting a string will raise an exception because the input string or arguments are invalid. Rule\n{rule:python:S3457} covers cases where no exception is raised and the resulting string is simply not formatted properly.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nprint('Error code %d' % '42')  # Noncompliant. Replace this value with a number as %d requires.\n\nprint('User {1} is not allowed to perform this action'.format('Bob'))  # Noncompliant. Replacement field numbering should start at 0.\n\nprint('User {0} has not been able to access {}'.format('Alice', 'MyFile'))  # Noncompliant. Use only manual or only automatic field numbering, don't mix them.\n\nprint('User {a} has not been able to access {b}'.format(a='Alice'))  # Noncompliant. Provide a value for field \"b\".\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprint('Error code %d' % 42)\n\nprint('User {0} is not allowed to perform this action'.format('Bob'))\n\nprint('User {0} has not been able to access {1}'.format('Alice', 'MyFile'))\n\nprint('User {a} has not been able to access {b}'.format(a='Alice', b='MyFile'))\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">Python documentation - Format String Syntax</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\">Python documentation - printf-style String\n  Formatting</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6333",
          "name": "Creating public APIs is security-sensitive",
          "description": "<p>Creating APIs without authentication unnecessarily increases the attack surface on the target infrastructure.</p>\n<p>Unless another authentication method is used, attackers have the opportunity to attempt attacks against the underlying API.<br> This means attacks\nboth on the functionality provided by the API and its infrastructure.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The underlying API exposes all of its contents to any anonymous Internet user. </li>\n</ul>\n<p>There is a risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>In general, prefer limiting API access to a specific set of people or entities.</p>\n<p>AWS provides multiple methods to do so:</p>\n<ul>\n  <li> <code>AWS_IAM</code>, to use standard AWS IAM roles and policies. </li>\n  <li> <code>COGNITO_USER_POOLS</code>, to use customizable OpenID Connect (OIDC) identity providers (IdP). </li>\n  <li> <code>CUSTOM</code>, to use an AWS-independant OIDC provider, glued to the infrastructure with a Lambda authorizer. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_apigateway/Resource.html\">aws_cdk.aws_apigateway.Resource</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigateway as apigateway\n)\n\nresource = api.root.add_resource(\"example\")\nresource.add_method(\n    \"GET\",\n    authorization_type=apigateway.AuthorizationType.NONE  # Sensitive\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigatewayv2.CfnRoute.html\">aws_cdk.aws_apigatewayv2.CfnRoute</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigatewayv2 as apigateway\n)\n\napigateway.CfnRoute(\n    self,\n    \"no-auth\",\n    api_id=api.ref,\n    route_key=\"GET /test\",\n    authorization_type=\"NONE\"  # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_apigateway/Resource.html\">aws_cdk.aws_apigateway.Resource</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigateway as apigateway\n)\n\nopts = apigateway.MethodOptions(\n    authorization_type=apigateway.AuthorizationType.IAM\n)\nresource = api.root.add_resource(\n    \"example\",\n    default_method_options=opts\n)\nresource.add_method(\n    \"POST\",\n    authorization_type=apigateway.AuthorizationType.IAM\n)\nresource.add_method(  # authorization_type is inherited from the Resource's configured default_method_options\n    \"POST\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigatewayv2.CfnRoute.html\">aws_cdk.aws_apigatewayv2.CfnRoute</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigatewayv2 as apigateway\n)\n\napigateway.CfnRoute(\n    self,\n    \"auth\",\n    api_id=api.ref,\n    route_key=\"GET /test\",\n    authorization_type=\"AWS_IAM\"\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html\">AWS Documentation</a> -\n  Controlling and managing access to a REST API in API Gateway </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222620\">Application Security and\n  Development: V-222620</a> - Application web servers must be on a separate network segment from the application and database servers. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>Creating APIs without authentication unnecessarily increases the attack surface on the target infrastructure.</p>\n<p>Unless another authentication method is used, attackers have the opportunity to attempt attacks against the underlying API.<br> This means attacks\nboth on the functionality provided by the API and its infrastructure.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The underlying API exposes all of its contents to any anonymous Internet user. </li>\n</ul>\n<p>There is a risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>In general, prefer limiting API access to a specific set of people or entities.</p>\n<p>AWS provides multiple methods to do so:</p>\n<ul>\n  <li> <code>AWS_IAM</code>, to use standard AWS IAM roles and policies. </li>\n  <li> <code>COGNITO_USER_POOLS</code>, to use customizable OpenID Connect (OIDC) identity providers (IdP). </li>\n  <li> <code>CUSTOM</code>, to use an AWS-independant OIDC provider, glued to the infrastructure with a Lambda authorizer. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_apigateway/Resource.html\">aws_cdk.aws_apigateway.Resource</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigateway as apigateway\n)\n\nresource = api.root.add_resource(\"example\")\nresource.add_method(\n    \"GET\",\n    authorization_type=apigateway.AuthorizationType.NONE  # Sensitive\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigatewayv2.CfnRoute.html\">aws_cdk.aws_apigatewayv2.CfnRoute</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigatewayv2 as apigateway\n)\n\napigateway.CfnRoute(\n    self,\n    \"no-auth\",\n    api_id=api.ref,\n    route_key=\"GET /test\",\n    authorization_type=\"NONE\"  # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_apigateway/Resource.html\">aws_cdk.aws_apigateway.Resource</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigateway as apigateway\n)\n\nopts = apigateway.MethodOptions(\n    authorization_type=apigateway.AuthorizationType.IAM\n)\nresource = api.root.add_resource(\n    \"example\",\n    default_method_options=opts\n)\nresource.add_method(\n    \"POST\",\n    authorization_type=apigateway.AuthorizationType.IAM\n)\nresource.add_method(  # authorization_type is inherited from the Resource's configured default_method_options\n    \"POST\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigatewayv2.CfnRoute.html\">aws_cdk.aws_apigatewayv2.CfnRoute</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigatewayv2 as apigateway\n)\n\napigateway.CfnRoute(\n    self,\n    \"auth\",\n    api_id=api.ref,\n    route_key=\"GET /test\",\n    authorization_type=\"AWS_IAM\"\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html\">AWS Documentation</a> -\n  Controlling and managing access to a REST API in API Gateway </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222620\">Application Security and\n  Development: V-222620</a> - Application web servers must be on a separate network segment from the application and database servers. </li>\n</ul>\n\n"
        },
        {
          "id": "S6329",
          "name": "Allowing public network access to cloud resources is security-sensitive",
          "description": "<p>Enabling public network access to cloud resources can affect an organization\u00e2\u20ac\u2122s ability to protect its data or internal operations from data theft\nor disruption.</p>\n<p>Depending on the component, inbound access from the Internet can be enabled via:</p>\n<ul>\n  <li> a boolean value that explicitly allows access to the public network. </li>\n  <li> the assignment of a public IP address. </li>\n  <li> database firewall rules that allow public IP ranges. </li>\n</ul>\n<p>Deciding to allow public access may happen for various reasons such as for quick maintenance, time saving, or by accident.</p>\n<p>This decision increases the likelihood of attacks on the organization, such as:</p>\n<ul>\n  <li> data breaches. </li>\n  <li> intrusions into the infrastructure to permanently steal from it. </li>\n  <li> and various malicious traffic, such as DDoS attacks. </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<p>This cloud resource:</p>\n<ul>\n  <li> should be publicly accessible to any Internet user. </li>\n  <li> requires inbound traffic from the Internet to function properly. </li>\n</ul>\n<p>There is a risk if you answered no to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Avoid publishing cloud services on the Internet unless they are intended to be publicly accessible, such as customer portals or e-commerce\nsites.</p>\n<p>Use private networks (and associated private IP addresses) and VPC peering or other secure communication tunnels to communicate with other cloud\ncomponents.</p>\n<p>The goal is to prevent the component from intercepting traffic coming in via the public IP address. If the cloud resource does not support the\nabsence of a public IP address, assign a public IP address to it, but do not create listeners for the public IP address.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a> and similar constructs:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.Instance(\n    self,\n    \"vpc_subnet_public\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC) # Sensitive\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnInstance.html\">aws_cdk.aws_ec2.CfnInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnInstance(\n    self,\n    \"cfn_public_exposed\",\n    instance_type=\"t2.micro\",\n    image_id=\"ami-0ea0f26a6d50850c5\",\n    network_interfaces=[\n        ec2.CfnInstance.NetworkInterfaceProperty(\n            device_index=\"0\",\n            associate_public_ip_address=True, # Sensitive\n            delete_on_termination=True,\n            subnet_id=vpc.select_subnets(subnet_type=ec2.SubnetType.PUBLIC).subnet_ids[0]\n        )\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_dms/CfnReplicationInstance.html\">aws_cdk.aws_dms.CfnReplicationInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_dms as dms\n\nrep_instance = dms.CfnReplicationInstance(\n    self,\n    \"explicit_public\",\n    replication_instance_class=\"dms.t2.micro\",\n    allocated_storage=5,\n    publicly_accessible=True, # Sensitive\n    replication_subnet_group_identifier=subnet_group.replication_subnet_group_identifier,\n    vpc_security_group_ids=[vpc.vpc_default_security_group]\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_rds/CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_rds as rds\nfrom aws_cdk import aws_ec2 as ec2\n\nrds_subnet_group_public = rds.CfnDBSubnetGroup(\n    self,\n    \"public_subnet\",\n    db_subnet_group_description=\"Subnets\",\n    subnet_ids=vpc.select_subnets(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ).subnet_ids\n)\n\nrds.CfnDBInstance(\n    self,\n    \"public-public-subnet\",\n    engine=\"postgres\",\n    master_username=\"foobar\",\n    master_user_password=\"12345678\",\n    db_instance_class=\"db.r5.large\",\n    allocated_storage=\"200\",\n    iops=1000,\n    db_subnet_group_name=rds_subnet_group_public.ref,\n    publicly_accessible=True, # Sensitive\n    vpc_security_groups=[sg.security_group_id]\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a>:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.Instance(\n    self,\n    \"vpc_subnet_private\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT)\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnInstance.html\">aws_cdk.aws_ec2.CfnInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnInstance(\n    self,\n    \"cfn_private\",\n    instance_type=\"t2.micro\",\n    image_id=\"ami-0ea0f26a6d50850c5\",\n    network_interfaces=[\n        ec2.CfnInstance.NetworkInterfaceProperty(\n            device_index=\"0\",\n            associate_public_ip_address=False, # Compliant\n            delete_on_termination=True,\n            subnet_id=vpc.select_subnets(subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT).subnet_ids[0]\n        )\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_dms/CfnReplicationInstance.html\">aws_cdk.aws_dms.CfnReplicationInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_dms as dms\n\nrep_instance = dms.CfnReplicationInstance(\n    self,\n    \"explicit_private\",\n    replication_instance_class=\"dms.t2.micro\",\n    allocated_storage=5,\n    publicly_accessible=False,\n    replication_subnet_group_identifier=subnet_group.replication_subnet_group_identifier,\n    vpc_security_group_ids=[vpc.vpc_default_security_group]\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_rds/CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_rds as rds\nfrom aws_cdk import aws_ec2 as ec2\n\nrds_subnet_group_private = rds.CfnDBSubnetGroup(\n    self,\n    \"private_subnet\",\n    db_subnet_group_description=\"Subnets\",\n    subnet_ids=vpc.select_subnets(\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    ).subnet_ids\n)\n\nrds.CfnDBInstance(\n    self,\n    \"private-private-subnet\",\n    engine=\"postgres\",\n    master_username=\"foobar\",\n    master_user_password=\"12345678\",\n    db_instance_class=\"db.r5.large\",\n    allocated_storage=\"200\",\n    iops=1000,\n    db_subnet_group_name=rds_subnet_group_private.ref,\n    publicly_accessible=False,\n    vpc_security_groups=[sg.security_group_id]\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html\">AWS Documentation</a> - Amazon EC2 instance IP\n  addressing </li>\n  <li> <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.PublicPrivate.html\">AWS Documentation</a> - Public and\n  private replication instances </li>\n  <li> <a href=\"https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html\">AWS Documentation</a> - VPC Peering </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/668\">CWE-668 - Exposure of Resource to Wrong Sphere</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222620\">Application Security and\n  Development: V-222620</a> - Application web servers must be on a separate network segment from the application and database servers. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>Enabling public network access to cloud resources can affect an organization\u00e2\u20ac\u2122s ability to protect its data or internal operations from data theft\nor disruption.</p>\n<p>Depending on the component, inbound access from the Internet can be enabled via:</p>\n<ul>\n  <li> a boolean value that explicitly allows access to the public network. </li>\n  <li> the assignment of a public IP address. </li>\n  <li> database firewall rules that allow public IP ranges. </li>\n</ul>\n<p>Deciding to allow public access may happen for various reasons such as for quick maintenance, time saving, or by accident.</p>\n<p>This decision increases the likelihood of attacks on the organization, such as:</p>\n<ul>\n  <li> data breaches. </li>\n  <li> intrusions into the infrastructure to permanently steal from it. </li>\n  <li> and various malicious traffic, such as DDoS attacks. </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<p>This cloud resource:</p>\n<ul>\n  <li> should be publicly accessible to any Internet user. </li>\n  <li> requires inbound traffic from the Internet to function properly. </li>\n</ul>\n<p>There is a risk if you answered no to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Avoid publishing cloud services on the Internet unless they are intended to be publicly accessible, such as customer portals or e-commerce\nsites.</p>\n<p>Use private networks (and associated private IP addresses) and VPC peering or other secure communication tunnels to communicate with other cloud\ncomponents.</p>\n<p>The goal is to prevent the component from intercepting traffic coming in via the public IP address. If the cloud resource does not support the\nabsence of a public IP address, assign a public IP address to it, but do not create listeners for the public IP address.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a> and similar constructs:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.Instance(\n    self,\n    \"vpc_subnet_public\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC) # Sensitive\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnInstance.html\">aws_cdk.aws_ec2.CfnInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnInstance(\n    self,\n    \"cfn_public_exposed\",\n    instance_type=\"t2.micro\",\n    image_id=\"ami-0ea0f26a6d50850c5\",\n    network_interfaces=[\n        ec2.CfnInstance.NetworkInterfaceProperty(\n            device_index=\"0\",\n            associate_public_ip_address=True, # Sensitive\n            delete_on_termination=True,\n            subnet_id=vpc.select_subnets(subnet_type=ec2.SubnetType.PUBLIC).subnet_ids[0]\n        )\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_dms/CfnReplicationInstance.html\">aws_cdk.aws_dms.CfnReplicationInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_dms as dms\n\nrep_instance = dms.CfnReplicationInstance(\n    self,\n    \"explicit_public\",\n    replication_instance_class=\"dms.t2.micro\",\n    allocated_storage=5,\n    publicly_accessible=True, # Sensitive\n    replication_subnet_group_identifier=subnet_group.replication_subnet_group_identifier,\n    vpc_security_group_ids=[vpc.vpc_default_security_group]\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_rds/CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_rds as rds\nfrom aws_cdk import aws_ec2 as ec2\n\nrds_subnet_group_public = rds.CfnDBSubnetGroup(\n    self,\n    \"public_subnet\",\n    db_subnet_group_description=\"Subnets\",\n    subnet_ids=vpc.select_subnets(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ).subnet_ids\n)\n\nrds.CfnDBInstance(\n    self,\n    \"public-public-subnet\",\n    engine=\"postgres\",\n    master_username=\"foobar\",\n    master_user_password=\"12345678\",\n    db_instance_class=\"db.r5.large\",\n    allocated_storage=\"200\",\n    iops=1000,\n    db_subnet_group_name=rds_subnet_group_public.ref,\n    publicly_accessible=True, # Sensitive\n    vpc_security_groups=[sg.security_group_id]\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a>:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.Instance(\n    self,\n    \"vpc_subnet_private\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT)\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnInstance.html\">aws_cdk.aws_ec2.CfnInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnInstance(\n    self,\n    \"cfn_private\",\n    instance_type=\"t2.micro\",\n    image_id=\"ami-0ea0f26a6d50850c5\",\n    network_interfaces=[\n        ec2.CfnInstance.NetworkInterfaceProperty(\n            device_index=\"0\",\n            associate_public_ip_address=False, # Compliant\n            delete_on_termination=True,\n            subnet_id=vpc.select_subnets(subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT).subnet_ids[0]\n        )\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_dms/CfnReplicationInstance.html\">aws_cdk.aws_dms.CfnReplicationInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_dms as dms\n\nrep_instance = dms.CfnReplicationInstance(\n    self,\n    \"explicit_private\",\n    replication_instance_class=\"dms.t2.micro\",\n    allocated_storage=5,\n    publicly_accessible=False,\n    replication_subnet_group_identifier=subnet_group.replication_subnet_group_identifier,\n    vpc_security_group_ids=[vpc.vpc_default_security_group]\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_rds/CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_rds as rds\nfrom aws_cdk import aws_ec2 as ec2\n\nrds_subnet_group_private = rds.CfnDBSubnetGroup(\n    self,\n    \"private_subnet\",\n    db_subnet_group_description=\"Subnets\",\n    subnet_ids=vpc.select_subnets(\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    ).subnet_ids\n)\n\nrds.CfnDBInstance(\n    self,\n    \"private-private-subnet\",\n    engine=\"postgres\",\n    master_username=\"foobar\",\n    master_user_password=\"12345678\",\n    db_instance_class=\"db.r5.large\",\n    allocated_storage=\"200\",\n    iops=1000,\n    db_subnet_group_name=rds_subnet_group_private.ref,\n    publicly_accessible=False,\n    vpc_security_groups=[sg.security_group_id]\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html\">AWS Documentation</a> - Amazon EC2 instance IP\n  addressing </li>\n  <li> <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.PublicPrivate.html\">AWS Documentation</a> - Public and\n  private replication instances </li>\n  <li> <a href=\"https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html\">AWS Documentation</a> - VPC Peering </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/668\">CWE-668 - Exposure of Resource to Wrong Sphere</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222620\">Application Security and\n  Development: V-222620</a> - Application web servers must be on a separate network segment from the application and database servers. </li>\n</ul>\n\n"
        },
        {
          "id": "S6304",
          "name": "Policies granting access to all resources of an account are security-sensitive",
          "description": "<p>A policy that allows identities to access all resources in an AWS account may violate <a\nhref=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">the principle of least privilege</a>. Suppose an identity has permission to access\nall resources even though it only requires access to some non-sensitive ones. In this case, unauthorized access and disclosure of sensitive\ninformation will occur.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The AWS account has more than one resource with different levels of sensitivity.</p>\n<p>A risk exists if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to apply the least privilege principle, i.e., by only granting access to necessary resources. A good practice to achieve this is\nto organize or <a\nhref=\"https://aws.amazon.com/blogs/security/simplify-granting-access-to-your-aws-resources-by-using-tags-on-aws-iam-users-and-roles/\">tag</a>\nresources depending on the sensitivity level of data they store or process. Therefore, managing a secure access control is less prone to errors.</p>\n<h2>Sensitive Code Example</h2>\n<p>The wildcard <code>\"*\"</code> is specified as the resource for this <code>PolicyStatement</code>. This grants the update permission for all\npolicies of the account:</p>\n<pre>\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=\"iam:CreatePolicyVersion\",\n            resources=[\"*\"] # Sensitive\n        )\n    ]\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>Restrict the update permission to the appropriate subset of policies:</p>\n<pre>\nfrom aws_cdk import Aws\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=\"iam:CreatePolicyVersion\",\n            resources=[f\"arn:aws:iam::{Aws.ACCOUNT_ID}:policy/team1/*\"]\n        )\n    ]\n)\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Should not be raised on key policies (when AWS KMS actions are used.) </li>\n  <li> Should not be raised on policies not using any resources (if and only if all actions in the policy never require resources.) </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\">AWS Documentation</a> - Grant least\n  privilege </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>A policy that allows identities to access all resources in an AWS account may violate <a\nhref=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">the principle of least privilege</a>. Suppose an identity has permission to access\nall resources even though it only requires access to some non-sensitive ones. In this case, unauthorized access and disclosure of sensitive\ninformation will occur.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The AWS account has more than one resource with different levels of sensitivity.</p>\n<p>A risk exists if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to apply the least privilege principle, i.e., by only granting access to necessary resources. A good practice to achieve this is\nto organize or <a\nhref=\"https://aws.amazon.com/blogs/security/simplify-granting-access-to-your-aws-resources-by-using-tags-on-aws-iam-users-and-roles/\">tag</a>\nresources depending on the sensitivity level of data they store or process. Therefore, managing a secure access control is less prone to errors.</p>\n<h2>Sensitive Code Example</h2>\n<p>The wildcard <code>\"*\"</code> is specified as the resource for this <code>PolicyStatement</code>. This grants the update permission for all\npolicies of the account:</p>\n<pre>\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=\"iam:CreatePolicyVersion\",\n            resources=[\"*\"] # Sensitive\n        )\n    ]\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>Restrict the update permission to the appropriate subset of policies:</p>\n<pre>\nfrom aws_cdk import Aws\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=\"iam:CreatePolicyVersion\",\n            resources=[f\"arn:aws:iam::{Aws.ACCOUNT_ID}:policy/team1/*\"]\n        )\n    ]\n)\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Should not be raised on key policies (when AWS KMS actions are used.) </li>\n  <li> Should not be raised on policies not using any resources (if and only if all actions in the policy never require resources.) </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\">AWS Documentation</a> - Grant least\n  privilege </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6302",
          "name": "Policies granting all privileges are security-sensitive",
          "description": "<p>A policy that grants all permissions may indicate an improper access control, which violates <a\nhref=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">the principle of least privilege</a>. Suppose an identity is granted full\npermissions to a resource even though it only requires read permission to work as expected. In this case, an unintentional overwriting of resources\nmay occur and therefore result in loss of information.</p>\n<h2>Ask Yourself Whether</h2>\n<p>Identities obtaining all the permissions:</p>\n<ul>\n  <li> only require a subset of these permissions to perform the intended function. </li>\n  <li> have monitored activity showing that only a subset of these permissions is actually used. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to apply the least privilege principle, i.e. by only granting the necessary permissions to identities. A good practice is to start\nwith the very minimum set of permissions and to refine the policy over time. In order to fix overly permissive policies already deployed in\nproduction, a strategy could be to review the monitored activity in order to reduce the set of permissions to those most used.</p>\n<h2>Sensitive Code Example</h2>\n<p>A customer-managed policy that grants all permissions by using the wildcard (*) in the <code>Action</code> property:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, Effect\n\nPolicyStatement(\n    effect=Effect.ALLOW,\n    actions=[\"*\"], # Sensitive\n    resources=[\"arn:aws:iam:::user/*\"]\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>A customer-managed policy that grants only the required permissions:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, Effect\n\nPolicyStatement(\n    effect=Effect.ALLOW,\n    actions=[\"iam:GetAccountSummary\"],\n    resources=[\"arn:aws:iam:::user/*\"]\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\">AWS Documentation</a> - Grant least\n  privilege </li>\n  <li> <a href=\"https://cloud.google.com/iam/docs/understanding-roles\">Google Cloud Documentation</a> - Understanding roles </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>A policy that grants all permissions may indicate an improper access control, which violates <a\nhref=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">the principle of least privilege</a>. Suppose an identity is granted full\npermissions to a resource even though it only requires read permission to work as expected. In this case, an unintentional overwriting of resources\nmay occur and therefore result in loss of information.</p>\n<h2>Ask Yourself Whether</h2>\n<p>Identities obtaining all the permissions:</p>\n<ul>\n  <li> only require a subset of these permissions to perform the intended function. </li>\n  <li> have monitored activity showing that only a subset of these permissions is actually used. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to apply the least privilege principle, i.e. by only granting the necessary permissions to identities. A good practice is to start\nwith the very minimum set of permissions and to refine the policy over time. In order to fix overly permissive policies already deployed in\nproduction, a strategy could be to review the monitored activity in order to reduce the set of permissions to those most used.</p>\n<h2>Sensitive Code Example</h2>\n<p>A customer-managed policy that grants all permissions by using the wildcard (*) in the <code>Action</code> property:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, Effect\n\nPolicyStatement(\n    effect=Effect.ALLOW,\n    actions=[\"*\"], # Sensitive\n    resources=[\"arn:aws:iam:::user/*\"]\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>A customer-managed policy that grants only the required permissions:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, Effect\n\nPolicyStatement(\n    effect=Effect.ALLOW,\n    actions=[\"iam:GetAccountSummary\"],\n    resources=[\"arn:aws:iam:::user/*\"]\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\">AWS Documentation</a> - Grant least\n  privilege </li>\n  <li> <a href=\"https://cloud.google.com/iam/docs/understanding-roles\">Google Cloud Documentation</a> - Understanding roles </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6270",
          "name": "Policies authorizing public access to resources are security-sensitive",
          "description": "<p>Resource-based policies granting access to all users can lead to information leakage.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The AWS resource stores or processes sensitive data. </li>\n  <li> The AWS resource is designed to be private. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to implement the least privilege principle, i.e. to grant necessary permissions only to users for their required tasks. In the\ncontext of resource-based policies, list the principals that need the access and grant to them only the required privileges.</p>\n<h2>Sensitive Code Example</h2>\n<p>This policy allows all users, including anonymous ones, to access an S3 bucket:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, AnyPrincipal, Effect\nfrom aws_cdk.aws_s3 import Bucket\n\nbucket = Bucket(self, \"ExampleBucket\")\n\nbucket.add_to_resource_policy(PolicyStatement(\n  effect=Effect.ALLOW,\n  actions=[\"s3:*\"],\n  resources=[bucket.arn_for_objects(\"*\")],\n  principals=[AnyPrincipal()] # Sensitive\n))\n</pre>\n<h2>Compliant Solution</h2>\n<p>This policy allows only the authorized users:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, AccountRootPrincipal, Effect\nfrom aws_cdk.aws_s3 import Bucket\n\nbucket = Bucket(self, \"ExampleBucket\")\n\nbucket.add_to_resource_policy(PolicyStatement(\n  effect=Effect.ALLOW,\n  actions=[\"s3:*\"],\n  resources=[bucket.arn_for_objects(\"*\")],\n  principals=[AccountRootPrincipal()]\n))\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\">AWS Documentation</a> - Grant least\n  privilege </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222620\">Application Security and\n  Development: V-222620</a> - Application web servers must be on a separate network segment from the application and database servers. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>Resource-based policies granting access to all users can lead to information leakage.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The AWS resource stores or processes sensitive data. </li>\n  <li> The AWS resource is designed to be private. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to implement the least privilege principle, i.e. to grant necessary permissions only to users for their required tasks. In the\ncontext of resource-based policies, list the principals that need the access and grant to them only the required privileges.</p>\n<h2>Sensitive Code Example</h2>\n<p>This policy allows all users, including anonymous ones, to access an S3 bucket:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, AnyPrincipal, Effect\nfrom aws_cdk.aws_s3 import Bucket\n\nbucket = Bucket(self, \"ExampleBucket\")\n\nbucket.add_to_resource_policy(PolicyStatement(\n  effect=Effect.ALLOW,\n  actions=[\"s3:*\"],\n  resources=[bucket.arn_for_objects(\"*\")],\n  principals=[AnyPrincipal()] # Sensitive\n))\n</pre>\n<h2>Compliant Solution</h2>\n<p>This policy allows only the authorized users:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, AccountRootPrincipal, Effect\nfrom aws_cdk.aws_s3 import Bucket\n\nbucket = Bucket(self, \"ExampleBucket\")\n\nbucket.add_to_resource_policy(PolicyStatement(\n  effect=Effect.ALLOW,\n  actions=[\"s3:*\"],\n  resources=[bucket.arn_for_objects(\"*\")],\n  principals=[AccountRootPrincipal()]\n))\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\">AWS Documentation</a> - Grant least\n  privilege </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222620\">Application Security and\n  Development: V-222620</a> - Application web servers must be on a separate network segment from the application and database servers. </li>\n</ul>\n\n"
        },
        {
          "id": "S6265",
          "name": "Granting access to S3 buckets to all or authenticated users is security-sensitive",
          "description": "<p>Predefined permissions, also known as <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl\">canned ACLs</a>,\nare an easy way to grant large privileges to predefined groups or users.</p>\n<p>The following canned ACLs are security-sensitive:</p>\n<ul>\n  <li> <code>PUBLIC_READ</code>, <code>PUBLIC_READ_WRITE</code> grant respectively \"read\" and \"read and write\" privileges to everyone in the world\n  (<code>AllUsers</code> group). </li>\n  <li> <code>AUTHENTICATED_READ</code> grants \"read\" privilege to all authenticated users (<code>AuthenticatedUsers</code> group). </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The S3 bucket stores sensitive data. </li>\n  <li> The S3 bucket is not used to store static resources of websites (images, css \u00e2\u20ac\u00a6\u00e2\u20ac\u2039). </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to implement the least privilege policy, i.e., to grant necessary permissions only to users for their required tasks. In the\ncontext of canned ACL, set it to <code>PRIVATE</code> (the default one), and if needed more granularity then use an appropriate S3 policy.</p>\n<h2>Sensitive Code Example</h2>\n<p>All users (ie: anyone in the world authenticated or not) have read and write permissions with the <code>PUBLIC_READ_WRITE</code> access\ncontrol:</p>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    access_control=s3.BucketAccessControl.PUBLIC_READ_WRITE     # Sensitive\n)\n\ns3deploy.BucketDeployment(self, \"DeployWebsite\",\n    access_control=s3.BucketAccessControl.PUBLIC_READ_WRITE     # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>With the <code>PRIVATE</code> access control (default), only the bucket owner has the read/write permissions on the buckets and its ACL.</p>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    access_control=s3.BucketAccessControl.PRIVATE       # Compliant\n)\n\n# Another example\ns3deploy.BucketDeployment(self, \"DeployWebsite\",\n    access_control=s3.BucketAccessControl.PRIVATE       # Compliant\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl\">AWS Documentation</a> - Access control list (ACL)\n  overview (canned ACLs) </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/walkthrough1.html\">AWS Documentation</a> - Controlling access to a bucket with\n  user policies </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.Bucket.html\">AWS CDK version 2</a> - Class Bucket (construct) </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>Predefined permissions, also known as <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl\">canned ACLs</a>,\nare an easy way to grant large privileges to predefined groups or users.</p>\n<p>The following canned ACLs are security-sensitive:</p>\n<ul>\n  <li> <code>PUBLIC_READ</code>, <code>PUBLIC_READ_WRITE</code> grant respectively \"read\" and \"read and write\" privileges to everyone in the world\n  (<code>AllUsers</code> group). </li>\n  <li> <code>AUTHENTICATED_READ</code> grants \"read\" privilege to all authenticated users (<code>AuthenticatedUsers</code> group). </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The S3 bucket stores sensitive data. </li>\n  <li> The S3 bucket is not used to store static resources of websites (images, css \u00e2\u20ac\u00a6\u00e2\u20ac\u2039). </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to implement the least privilege policy, i.e., to grant necessary permissions only to users for their required tasks. In the\ncontext of canned ACL, set it to <code>PRIVATE</code> (the default one), and if needed more granularity then use an appropriate S3 policy.</p>\n<h2>Sensitive Code Example</h2>\n<p>All users (ie: anyone in the world authenticated or not) have read and write permissions with the <code>PUBLIC_READ_WRITE</code> access\ncontrol:</p>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    access_control=s3.BucketAccessControl.PUBLIC_READ_WRITE     # Sensitive\n)\n\ns3deploy.BucketDeployment(self, \"DeployWebsite\",\n    access_control=s3.BucketAccessControl.PUBLIC_READ_WRITE     # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>With the <code>PRIVATE</code> access control (default), only the bucket owner has the read/write permissions on the buckets and its ACL.</p>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    access_control=s3.BucketAccessControl.PRIVATE       # Compliant\n)\n\n# Another example\ns3deploy.BucketDeployment(self, \"DeployWebsite\",\n    access_control=s3.BucketAccessControl.PRIVATE       # Compliant\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl\">AWS Documentation</a> - Access control list (ACL)\n  overview (canned ACLs) </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/walkthrough1.html\">AWS Documentation</a> - Controlling access to a bucket with\n  user policies </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.Bucket.html\">AWS CDK version 2</a> - Class Bucket (construct) </li>\n</ul>\n\n"
        },
        {
          "id": "S6317",
          "name": "AWS IAM policies should limit the scope of permissions given",
          "description": "<p>Within IAM, identity-based policies grant permissions to users, groups, or roles, and enable specific actions to be performed on designated\nresources. When an identity policy inadvertently grants more privileges than intended, certain users or roles might be able to perform more actions\nthan expected. This can lead to potential security risks, as it enables malicious users to escalate their privileges from a lower level to a higher\nlevel of access.</p>\n<h2>Why is this an issue?</h2>\n<p>AWS Identity and Access Management (IAM) is the service that defines access to AWS resources. One of the core components of IAM is the policy\nwhich, when attached to an identity or a resource, defines its permissions. Policies granting permission to an identity (a user, a group or a role)\nare called identity-based policies. They add the ability to an identity to perform a predefined set of actions on a list of resources.</p>\n<p>For such policies, it is easy to define very broad permissions (by using wildcard <code>\"*\"</code> permissions for example.) This is especially\ntrue if it is not yet clear which permissions will be required for a specific workload or use case. However, it is important to limit the amount of\npermissions that are granted and the amount of resources to which these permissions are granted. Doing so ensures that there are no users or roles\nthat have more permissions than they need.</p>\n<p>If this is not done, it can potentially carry security risks in the case that an attacker gets access to one of these identities.</p>\n<h3>What is the potential impact?</h3>\n<p>AWS IAM policies that contain overly broad permissions can lead to privilege escalation by granting users more access than necessary. They may be\nable to perform actions beyond their intended scope.</p>\n<h4>Privilege escalation</h4>\n<p>When IAM policies are too permissive, they grant users more privileges than necessary, allowing them to perform actions that they should not be\nable to. This can be exploited by attackers to gain unauthorized access to sensitive resources and perform malicious activities.</p>\n<p>For example, if an IAM policy grants a user unrestricted access to all S3 buckets in an AWS account, the user can potentially read, write, and\ndelete any object within those buckets. If an attacker gains access to this user\u00e2\u20ac\u2122s credentials, they can exploit this overly permissive policy to\nexfiltrate sensitive data, modify or delete critical files, or even launch further attacks within the AWS environment. This can have severe\nconsequences, such as data breaches, service disruptions, or unauthorized access to other resources within the AWS account.</p>\n<h2>How to fix it in AWS CDK</h2>\n<h3>Code examples</h3>\n<p>In this example, the IAM policy allows an attacker to update the code of any Lambda function. An attacker can achieve privilege escalation by\naltering the code of a Lambda that executes with high privileges.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=[\"lambda:UpdateFunctionCode\"],\n            resources=[\"*\"]  # Noncompliant\n        )\n    ]\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>The policy is narrowed such that only updates to the code of certain Lambda functions (without high privileges) are allowed.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=[\"lambda:UpdateFunctionCode\"],\n            resources=[\n                \"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\"\n            ]\n        )\n    ]\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Principle of least privilege</h4>\n<p>When creating IAM policies, it is important to adhere to the principle of least privilege. This means that any user or role should only be granted\nenough permissions to perform the tasks that they are supposed to, and <em>nothing else</em>.</p>\n<p>To successfully implement this, it is easier to start from nothing and gradually build up all the needed permissions. When starting from a policy\nwith overly broad permissions which is made stricter at a later time, it can be harder to ensure that there are no gaps that might be forgotten about.\nIn this case, it might be useful to monitor the users or roles to verify which permissions are used.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#grant-least-priv\">Policies and permissions\n  in IAM: Grant least privilege</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Rhino Security Labs - <a href=\"https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/\">AWS IAM Privilege Escalation -\n  Methods and Mitigation</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-269 - Improper Privilege Management</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>Within IAM, identity-based policies grant permissions to users, groups, or roles, and enable specific actions to be performed on designated\nresources. When an identity policy inadvertently grants more privileges than intended, certain users or roles might be able to perform more actions\nthan expected. This can lead to potential security risks, as it enables malicious users to escalate their privileges from a lower level to a higher\nlevel of access.</p>\n<h2>Why is this an issue?</h2>\n<p>AWS Identity and Access Management (IAM) is the service that defines access to AWS resources. One of the core components of IAM is the policy\nwhich, when attached to an identity or a resource, defines its permissions. Policies granting permission to an identity (a user, a group or a role)\nare called identity-based policies. They add the ability to an identity to perform a predefined set of actions on a list of resources.</p>\n<p>For such policies, it is easy to define very broad permissions (by using wildcard <code>\"*\"</code> permissions for example.) This is especially\ntrue if it is not yet clear which permissions will be required for a specific workload or use case. However, it is important to limit the amount of\npermissions that are granted and the amount of resources to which these permissions are granted. Doing so ensures that there are no users or roles\nthat have more permissions than they need.</p>\n<p>If this is not done, it can potentially carry security risks in the case that an attacker gets access to one of these identities.</p>\n<h3>What is the potential impact?</h3>\n<p>AWS IAM policies that contain overly broad permissions can lead to privilege escalation by granting users more access than necessary. They may be\nable to perform actions beyond their intended scope.</p>\n<h4>Privilege escalation</h4>\n<p>When IAM policies are too permissive, they grant users more privileges than necessary, allowing them to perform actions that they should not be\nable to. This can be exploited by attackers to gain unauthorized access to sensitive resources and perform malicious activities.</p>\n<p>For example, if an IAM policy grants a user unrestricted access to all S3 buckets in an AWS account, the user can potentially read, write, and\ndelete any object within those buckets. If an attacker gains access to this user\u00e2\u20ac\u2122s credentials, they can exploit this overly permissive policy to\nexfiltrate sensitive data, modify or delete critical files, or even launch further attacks within the AWS environment. This can have severe\nconsequences, such as data breaches, service disruptions, or unauthorized access to other resources within the AWS account.</p>\n<h2>How to fix it in AWS CDK</h2>\n<h3>Code examples</h3>\n<p>In this example, the IAM policy allows an attacker to update the code of any Lambda function. An attacker can achieve privilege escalation by\naltering the code of a Lambda that executes with high privileges.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=[\"lambda:UpdateFunctionCode\"],\n            resources=[\"*\"]  # Noncompliant\n        )\n    ]\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>The policy is narrowed such that only updates to the code of certain Lambda functions (without high privileges) are allowed.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=[\"lambda:UpdateFunctionCode\"],\n            resources=[\n                \"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\"\n            ]\n        )\n    ]\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Principle of least privilege</h4>\n<p>When creating IAM policies, it is important to adhere to the principle of least privilege. This means that any user or role should only be granted\nenough permissions to perform the tasks that they are supposed to, and <em>nothing else</em>.</p>\n<p>To successfully implement this, it is easier to start from nothing and gradually build up all the needed permissions. When starting from a policy\nwith overly broad permissions which is made stricter at a later time, it can be harder to ensure that there are no gaps that might be forgotten about.\nIn this case, it might be useful to monitor the users or roles to verify which permissions are used.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#grant-least-priv\">Policies and permissions\n  in IAM: Grant least privilege</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Rhino Security Labs - <a href=\"https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/\">AWS IAM Privilege Escalation -\n  Methods and Mitigation</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-269 - Improper Privilege Management</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5445",
          "name": "Insecure temporary file creation methods should not be used",
          "description": "<p>Temporary files are considered insecurely created when the file existence check is performed separately from the actual file creation. Such a\nsituation can occur when creating temporary files using normal file handling functions or when using dedicated temporary file handling functions that\nare not atomic.</p>\n<h2>Why is this an issue?</h2>\n<p>Creating temporary files in a non-atomic way introduces race condition issues in the application\u00e2\u20ac\u2122s behavior. Indeed, a third party can create a\ngiven file between when the application chooses its name and when it creates it.</p>\n<p>In such a situation, the application might use a temporary file that it does not entirely control. In particular, this file\u00e2\u20ac\u2122s permissions might be\ndifferent than expected. This can lead to trust boundary issues.</p>\n<h3>What is the potential impact?</h3>\n<p>Attackers with control over a temporary file used by a vulnerable application will be able to modify it in a way that will affect the application\u00e2\u20ac\u2122s\nlogic. By changing this file\u00e2\u20ac\u2122s Access Control List or other operating system-level properties, they could prevent the file from being deleted or\nemptied. They may also alter the file\u00e2\u20ac\u2122s content before or while the application uses it.</p>\n<p>Depending on why and how the affected temporary files are used, the exploitation of a race condition in an application can have various\nconsequences. They can range from sensitive information disclosure to more serious application or hosting infrastructure compromise.</p>\n<h4>Information disclosure</h4>\n<p>Because attackers can control the permissions set on temporary files and prevent their removal, they can read what the application stores in them.\nThis might be especially critical if this information is sensitive.</p>\n<p>For example, an application might use temporary files to store users' session-related information. In such a case, attackers controlling those\nfiles can access session-stored information. This might allow them to take over authenticated users' identities and entitlements.</p>\n<h4>Attack surface extension</h4>\n<p>An application might use temporary files to store technical data for further reuse or as a communication channel between multiple components. In\nthat case, it might consider those files part of the trust boundaries and use their content without additional security validation or sanitation. In\nsuch a case, an attacker controlling the file content might use it as an attack vector for further compromise.</p>\n<p>For example, an application might store serialized data in temporary files for later use. In such a case, attackers controlling those files'\ncontent can change it in a way that will lead to an insecure deserialization exploitation. It might allow them to execute arbitrary code on the\napplication hosting server and take it over.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following code example is vulnerable to a race condition attack because it creates a temporary file using an unsafe API function.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tempfile\n\nfilename = tempfile.mktemp() # Noncompliant\ntmp_file = open(filename, \"w+\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tempfile\n\ntmp_file1 = tempfile.NamedTemporaryFile(delete=False)\ntmp_file2 = tempfile.NamedTemporaryFile()\n</pre>\n<h3>How does this work?</h3>\n<p>Applications should create temporary files so that no third party can read or modify their content. It requires that the files' name, location, and\npermissions are carefully chosen and set. This can be achieved in multiple ways depending on the applications' technology stacks.</p>\n<h4>Use a secure API function</h4>\n<p>Temporary files handling APIs generally provide secure functions to create temporary files. In most cases, they operate in an atomical way,\ncreating and opening a file with a unique and unpredictable name in a single call. Those functions can often be used to replace less secure\nalternatives without requiring important development efforts.</p>\n<p>Here, the example compliant code uses the more secure <code>tempfile.NamedTemporaryFile</code> function to handle the temporary file creation.</p>\n<h4>Strong security controls</h4>\n<p>Temporary files can be created using unsafe functions and API as long as strong security controls are applied. Non-temporary file-handling\nfunctions and APIs can also be used for that purpose.</p>\n<p>In general, applications should ensure that attackers can not create a file before them. This turns into the following requirements when creating\nthe files:</p>\n<ul>\n  <li> Files should be created in a non-public directory. </li>\n  <li> File names should be unique. </li>\n  <li> File names should be unpredictable. They should be generated using a cryptographically secure random generator. </li>\n  <li> File creation should fail if a target file already exists. </li>\n</ul>\n<p>Moreover, when possible, it is recommended that applications destroy temporary files after they have finished using them.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\">OWASP</a> - Insecure Temporary File </li>\n  <li> <a href=\"https://docs.python.org/3/library/tempfile.html#deprecated-functions-and-variables\">Python documentation</a> - tempfile </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities\">Top 10 2017 Category A9 -\n  Using Components with Known Vulnerabilities</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/377\">CWE-377 - Insecure Temporary File</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/379\">CWE-379 - Creation of Temporary File in Directory with Incorrect Permissions</a>\n  </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>Temporary files are considered insecurely created when the file existence check is performed separately from the actual file creation. Such a\nsituation can occur when creating temporary files using normal file handling functions or when using dedicated temporary file handling functions that\nare not atomic.</p>\n<h2>Why is this an issue?</h2>\n<p>Creating temporary files in a non-atomic way introduces race condition issues in the application\u00e2\u20ac\u2122s behavior. Indeed, a third party can create a\ngiven file between when the application chooses its name and when it creates it.</p>\n<p>In such a situation, the application might use a temporary file that it does not entirely control. In particular, this file\u00e2\u20ac\u2122s permissions might be\ndifferent than expected. This can lead to trust boundary issues.</p>\n<h3>What is the potential impact?</h3>\n<p>Attackers with control over a temporary file used by a vulnerable application will be able to modify it in a way that will affect the application\u00e2\u20ac\u2122s\nlogic. By changing this file\u00e2\u20ac\u2122s Access Control List or other operating system-level properties, they could prevent the file from being deleted or\nemptied. They may also alter the file\u00e2\u20ac\u2122s content before or while the application uses it.</p>\n<p>Depending on why and how the affected temporary files are used, the exploitation of a race condition in an application can have various\nconsequences. They can range from sensitive information disclosure to more serious application or hosting infrastructure compromise.</p>\n<h4>Information disclosure</h4>\n<p>Because attackers can control the permissions set on temporary files and prevent their removal, they can read what the application stores in them.\nThis might be especially critical if this information is sensitive.</p>\n<p>For example, an application might use temporary files to store users' session-related information. In such a case, attackers controlling those\nfiles can access session-stored information. This might allow them to take over authenticated users' identities and entitlements.</p>\n<h4>Attack surface extension</h4>\n<p>An application might use temporary files to store technical data for further reuse or as a communication channel between multiple components. In\nthat case, it might consider those files part of the trust boundaries and use their content without additional security validation or sanitation. In\nsuch a case, an attacker controlling the file content might use it as an attack vector for further compromise.</p>\n<p>For example, an application might store serialized data in temporary files for later use. In such a case, attackers controlling those files'\ncontent can change it in a way that will lead to an insecure deserialization exploitation. It might allow them to execute arbitrary code on the\napplication hosting server and take it over.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following code example is vulnerable to a race condition attack because it creates a temporary file using an unsafe API function.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tempfile\n\nfilename = tempfile.mktemp() # Noncompliant\ntmp_file = open(filename, \"w+\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tempfile\n\ntmp_file1 = tempfile.NamedTemporaryFile(delete=False)\ntmp_file2 = tempfile.NamedTemporaryFile()\n</pre>\n<h3>How does this work?</h3>\n<p>Applications should create temporary files so that no third party can read or modify their content. It requires that the files' name, location, and\npermissions are carefully chosen and set. This can be achieved in multiple ways depending on the applications' technology stacks.</p>\n<h4>Use a secure API function</h4>\n<p>Temporary files handling APIs generally provide secure functions to create temporary files. In most cases, they operate in an atomical way,\ncreating and opening a file with a unique and unpredictable name in a single call. Those functions can often be used to replace less secure\nalternatives without requiring important development efforts.</p>\n<p>Here, the example compliant code uses the more secure <code>tempfile.NamedTemporaryFile</code> function to handle the temporary file creation.</p>\n<h4>Strong security controls</h4>\n<p>Temporary files can be created using unsafe functions and API as long as strong security controls are applied. Non-temporary file-handling\nfunctions and APIs can also be used for that purpose.</p>\n<p>In general, applications should ensure that attackers can not create a file before them. This turns into the following requirements when creating\nthe files:</p>\n<ul>\n  <li> Files should be created in a non-public directory. </li>\n  <li> File names should be unique. </li>\n  <li> File names should be unpredictable. They should be generated using a cryptographically secure random generator. </li>\n  <li> File creation should fail if a target file already exists. </li>\n</ul>\n<p>Moreover, when possible, it is recommended that applications destroy temporary files after they have finished using them.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\">OWASP</a> - Insecure Temporary File </li>\n  <li> <a href=\"https://docs.python.org/3/library/tempfile.html#deprecated-functions-and-variables\">Python documentation</a> - tempfile </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities\">Top 10 2017 Category A9 -\n  Using Components with Known Vulnerabilities</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/377\">CWE-377 - Insecure Temporary File</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/379\">CWE-379 - Creation of Temporary File in Directory with Incorrect Permissions</a>\n  </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>\n\n"
        },
        {
          "id": "S4433",
          "name": "LDAP connections should be authenticated",
          "description": "<p>Lightweight Directory Access Protocol (LDAP) servers provide two main authentication methods: the <em>SASL</em> and <em>Simple</em> ones. The\n<em>Simple Authentication</em> method also breaks down into three different mechanisms:</p>\n<ul>\n  <li> <em>Anonymous</em> Authentication </li>\n  <li> <em>Unauthenticated</em> Authentication </li>\n  <li> <em>Name/Password</em> Authentication </li>\n</ul>\n<p>A server that accepts either the <em>Anonymous</em> or <em>Unauthenticated</em> mechanisms will accept connections from clients not providing\ncredentials.</p>\n<h2>Why is this an issue?</h2>\n<p>When configured to accept the Anonymous or Unauthenticated authentication mechanism, an LDAP server will accept connections from clients that do\nnot provide a password or other authentication credentials. Such users will be able to read or modify part or all of the data contained in the hosted\ndirectory.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting unauthenticated access to an LDAP server can access the data that is stored in the corresponding directory. The impact\nvaries depending on the permission obtained on the directory and the type of data it stores.</p>\n<h4>Authentication bypass</h4>\n<p>If attackers get write access to the directory, they will be able to alter most of the data it stores. This might include sensitive technical data\nsuch as user passwords or asset configurations. Such an attack can typically lead to an authentication bypass on applications and systems that use the\naffected directory as an identity provider.</p>\n<p>In such a case, all users configured in the directory might see their identity and privileges taken over.</p>\n<h4>Sensitive information leak</h4>\n<p>If attackers get read-only access to the directory, they will be able to read the data it stores. That data might include security-sensitive pieces\nof information.</p>\n<p>Typically, attackers might get access to user account lists that they can use in further intrusion steps. For example, they could use such lists to\nperform password spraying, or related attacks, on all systems that rely on the affected directory as an identity provider.</p>\n<p>If the directory contains some Personally Identifiable Information, an attacker accessing it might represent a violation of regulatory requirements\nin some countries. For example, this kind of security event would go against the European GDPR law.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following code indicates an anonymous LDAP authentication vulnerability because it binds to a remote server using an Anonymous Simple\nauthentication mechanism.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport ldap\n\ndef init_ldap():\n   connect = ldap.initialize('ldap://example:1389')\n\n   connect.simple_bind('cn=root') # Noncompliant\n   connect.simple_bind_s('cn=root') # Noncompliant\n   connect.bind_s('cn=root', None) # Noncompliant\n   connect.bind('cn=root', None) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport ldap\nimport os\n\ndef init_ldap():\n   connect = ldap.initialize('ldap://example:1389')\n\n   connect.simple_bind('cn=root', os.environ.get('LDAP_PASSWORD'))\n   connect.simple_bind_s('cn=root', os.environ.get('LDAP_PASSWORD'))\n   connect.bind_s('cn=root', os.environ.get('LDAP_PASSWORD'))\n   connect.bind('cn=root', os.environ.get('LDAP_PASSWORD'))\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://datatracker.ietf.org/doc/html/rfc4513#section-5\">RFC 4513 - Lightweight Directory Access Protocol (LDAP): Authentication\n  Methods and Security Mechanisms</a> - Bind operations </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/521\">CWE-521 - Weak Password Requirements</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>Lightweight Directory Access Protocol (LDAP) servers provide two main authentication methods: the <em>SASL</em> and <em>Simple</em> ones. The\n<em>Simple Authentication</em> method also breaks down into three different mechanisms:</p>\n<ul>\n  <li> <em>Anonymous</em> Authentication </li>\n  <li> <em>Unauthenticated</em> Authentication </li>\n  <li> <em>Name/Password</em> Authentication </li>\n</ul>\n<p>A server that accepts either the <em>Anonymous</em> or <em>Unauthenticated</em> mechanisms will accept connections from clients not providing\ncredentials.</p>\n<h2>Why is this an issue?</h2>\n<p>When configured to accept the Anonymous or Unauthenticated authentication mechanism, an LDAP server will accept connections from clients that do\nnot provide a password or other authentication credentials. Such users will be able to read or modify part or all of the data contained in the hosted\ndirectory.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting unauthenticated access to an LDAP server can access the data that is stored in the corresponding directory. The impact\nvaries depending on the permission obtained on the directory and the type of data it stores.</p>\n<h4>Authentication bypass</h4>\n<p>If attackers get write access to the directory, they will be able to alter most of the data it stores. This might include sensitive technical data\nsuch as user passwords or asset configurations. Such an attack can typically lead to an authentication bypass on applications and systems that use the\naffected directory as an identity provider.</p>\n<p>In such a case, all users configured in the directory might see their identity and privileges taken over.</p>\n<h4>Sensitive information leak</h4>\n<p>If attackers get read-only access to the directory, they will be able to read the data it stores. That data might include security-sensitive pieces\nof information.</p>\n<p>Typically, attackers might get access to user account lists that they can use in further intrusion steps. For example, they could use such lists to\nperform password spraying, or related attacks, on all systems that rely on the affected directory as an identity provider.</p>\n<p>If the directory contains some Personally Identifiable Information, an attacker accessing it might represent a violation of regulatory requirements\nin some countries. For example, this kind of security event would go against the European GDPR law.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following code indicates an anonymous LDAP authentication vulnerability because it binds to a remote server using an Anonymous Simple\nauthentication mechanism.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport ldap\n\ndef init_ldap():\n   connect = ldap.initialize('ldap://example:1389')\n\n   connect.simple_bind('cn=root') # Noncompliant\n   connect.simple_bind_s('cn=root') # Noncompliant\n   connect.bind_s('cn=root', None) # Noncompliant\n   connect.bind('cn=root', None) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport ldap\nimport os\n\ndef init_ldap():\n   connect = ldap.initialize('ldap://example:1389')\n\n   connect.simple_bind('cn=root', os.environ.get('LDAP_PASSWORD'))\n   connect.simple_bind_s('cn=root', os.environ.get('LDAP_PASSWORD'))\n   connect.bind_s('cn=root', os.environ.get('LDAP_PASSWORD'))\n   connect.bind('cn=root', os.environ.get('LDAP_PASSWORD'))\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://datatracker.ietf.org/doc/html/rfc4513#section-5\">RFC 4513 - Lightweight Directory Access Protocol (LDAP): Authentication\n  Methods and Security Mechanisms</a> - Bind operations </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/521\">CWE-521 - Weak Password Requirements</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S4426",
          "name": "Cryptographic key generation should be based on strong parameters",
          "description": "<p>This vulnerability exposes encrypted data to attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>In today\u00e2\u20ac\u2122s cryptography, the length of the <strong>key</strong> directly affects the security level of cryptographic algorithms.</p>\n<p>Note that depending on the algorithm, the term <strong>key</strong> refers to a different mathematical property. For example:</p>\n<ul>\n  <li> For RSA, the key is the product of two large prime numbers, also called the <strong>modulus</strong>. </li>\n  <li> For AES and Elliptic Curve Cryptography (ECC), the key is only a sequence of randomly generated bytes.\n    <ul>\n      <li> In some cases, AES keys are derived from a master key or a passphrase using a Key Derivation Function (KDF) like PBKDF2 (Password-Based Key\n      Derivation Function 2) </li>\n    </ul>  </li>\n</ul>\n<p>If an application uses a key that is considered short and <strong>insecure</strong>, the encrypted data is exposed to attacks aimed at getting at\nthe plaintext.</p>\n<p>In general, it is best practice to expect a breach: that a user or organization with malicious intent will perform cryptographic attacks on this\ndata after obtaining it by other means.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, the company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization\u00e2\u20ac\u2122s ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>\n<h2>How to fix it in pyca</h2>\n<h3>Code examples</h3>\n<p>The following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.</p>\n<p>Due to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.<br> For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.</p>\n<h4>Noncompliant code example</h4>\n<p>Here is an example of a private key generation with RSA:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = rsa.generate_private_key(key_size = 1024, backend = backend) # Noncompliant\npublic_key  = private_key.public_key()\n</pre>\n<p>Here is an example of a key generation with the Digital Signature Algorithm (DSA):</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.asymmetric import dsa\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = dsa.generate_private_key(key_size = 1024, backend = backend) # Noncompliant\npublic_key  = private_key.public_key()\n</pre>\n<p>Here is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the elliptic curve\nname:</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = ec.generate_private_key(curve=ec.SECT163R2(), backend=backend)  # Noncompliant\npublic_key  = private_key.public_key()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = rsa.generate_private_key(key_size = 3072, backend = backend)\npublic_key  = private_key.public_key()\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.asymmetric import dsa\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = dsa.generate_private_key(key_size = 3072, backend = backend)\npublic_key  = private_key.public_key()\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = ec.generate_private_key(curve=ec.SECP521R1(), backend=backend)\npublic_key  = private_key.public_key()\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptography community.</p>\n<p>The appropriate choices are the following.</p>\n<h4>RSA (Rivest-Shamir-Adleman) and DSA (Digital Signature Algorithm)</h4>\n<p>The security of these algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.</p>\n<p>In general, a minimum key size of <strong>2048</strong> bits is recommended for both. It provides 112 bits of security. A key length of\n<strong>3072</strong> or <strong>4092</strong> should be preferred when possible.</p>\n<h4>AES (Advanced Encryption Standard)</h4>\n<p>AES supports three key sizes: 128 bits, 192 bits and 256 bits. The security of the AES algorithm is based on the computational complexity of trying\nall possible keys.<br> A larger key size increases the number of possible keys and makes exhaustive search attacks computationally infeasible.\nTherefore, a 256-bit key provides a higher level of security than a 128-bit or 192-bit key.</p>\n<p>Currently, a minimum key size of <strong>128 bits</strong> is recommended for AES.</p>\n<h4>Elliptic Curve Cryptography (ECC)</h4>\n<p>Elliptic curve cryptography is also used in various algorithms, such as ECDSA, ECDH, or ECMQV. The length of keys generated with elliptic curve\nalgorithms is mentioned directly in their names. For example, <code>secp256k1</code> generates a 256-bits long private key.</p>\n<p>Currently, a minimum key size of <strong>224 bits</strong> is recommended for EC-based algorithms.</p>\n<p>Additionally, some curves that theoretically provide sufficiently long keys are still discouraged. This can be because of a flaw in the curve\nparameters, a bad overall design, or poor performance. It is generally advised to use a NIST-approved elliptic curve wherever possible. Such curves\ncurrently include:</p>\n<ul>\n  <li> NIST P curves with a size of at least 224 bits, e.g. secp256r1. </li>\n  <li> Curve25519, generally known as ed25519 or x25519 depending on its application. </li>\n  <li> Curve448. </li>\n  <li> Brainpool curves with a size of at least 224 bits, e.g. brainpoolP224r1 </li>\n</ul>\n<h3>Going the extra mile</h3>\n<h4>Pre-Quantum Cryptography</h4>\n<p>Encrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.<br> It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.</p>\n<p>Thus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.</p>\n<p><a href=\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\">Learn more here</a>.</p>\n<h2>How to fix it in Cryptodome</h2>\n<h3>Code examples</h3>\n<p>The following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.</p>\n<p>Due to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.<br> For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.</p>\n<h4>Noncompliant code example</h4>\n<p>Here is an example of a private key generation with RSA:</p>\n<pre data-diff-id=\"6\" data-diff-type=\"noncompliant\">\nfrom Crypto.PublicKey import RSA\n\nkey_rsa1024 = RSA.generate(1024) # Noncompliant\n</pre>\n<p>Here is an example of a key generation with the Digital Signature Algorithm (DSA):</p>\n<pre data-diff-id=\"7\" data-diff-type=\"noncompliant\">\nfrom Crypto.PublicKey import DSA\n\nkey_dsa1024 = DSA.generate(1024) # Noncompliant\n</pre>\n<p>Here is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the elliptic curve\nname:</p>\n<pre data-diff-id=\"8\" data-diff-type=\"noncompliant\">\nfrom Crypto.PublicKey import DSA\n\nkey_p192 = ECC.generate(curve=\"secp192r1\") # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"6\" data-diff-type=\"compliant\">\nfrom Crypto.PublicKey import RSA\n\nkey_rsa1024 = RSA.generate(3072)\n</pre>\n<pre data-diff-id=\"7\" data-diff-type=\"compliant\">\nfrom Crypto.PublicKey import DSA\n\nkey_dsa1024 = DSA.generate(3072)\n</pre>\n<pre data-diff-id=\"8\" data-diff-type=\"compliant\">\nfrom Crypto.PublicKey import DSA\n\nkey_ed25519 = ECC.generate(curve=\"ed25519\")\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptography community.</p>\n<p>The appropriate choices are the following.</p>\n<h4>RSA (Rivest-Shamir-Adleman) and DSA (Digital Signature Algorithm)</h4>\n<p>The security of these algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.</p>\n<p>In general, a minimum key size of <strong>2048</strong> bits is recommended for both. It provides 112 bits of security. A key length of\n<strong>3072</strong> or <strong>4092</strong> should be preferred when possible.</p>\n<h4>AES (Advanced Encryption Standard)</h4>\n<p>AES supports three key sizes: 128 bits, 192 bits and 256 bits. The security of the AES algorithm is based on the computational complexity of trying\nall possible keys.<br> A larger key size increases the number of possible keys and makes exhaustive search attacks computationally infeasible.\nTherefore, a 256-bit key provides a higher level of security than a 128-bit or 192-bit key.</p>\n<p>Currently, a minimum key size of <strong>128 bits</strong> is recommended for AES.</p>\n<h4>Elliptic Curve Cryptography (ECC)</h4>\n<p>Elliptic curve cryptography is also used in various algorithms, such as ECDSA, ECDH, or ECMQV. The length of keys generated with elliptic curve\nalgorithms is mentioned directly in their names. For example, <code>secp256k1</code> generates a 256-bits long private key.</p>\n<p>Currently, a minimum key size of <strong>224 bits</strong> is recommended for EC-based algorithms.</p>\n<p>Additionally, some curves that theoretically provide sufficiently long keys are still discouraged. This can be because of a flaw in the curve\nparameters, a bad overall design, or poor performance. It is generally advised to use a NIST-approved elliptic curve wherever possible. Such curves\ncurrently include:</p>\n<ul>\n  <li> NIST P curves with a size of at least 224 bits, e.g. secp256r1. </li>\n  <li> Curve25519, generally known as ed25519 or x25519 depending on its application. </li>\n  <li> Curve448. </li>\n  <li> Brainpool curves with a size of at least 224 bits, e.g. brainpoolP224r1 </li>\n</ul>\n<h3>Going the extra mile</h3>\n<h4>Pre-Quantum Cryptography</h4>\n<p>Encrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.<br> It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.</p>\n<p>Thus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.</p>\n<p><a href=\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\">Learn more here</a>.</p>\n<h2>How to fix it in pyOpenSSL</h2>\n<h3>Code examples</h3>\n<p>The following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.</p>\n<p>Due to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.<br> For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.</p>\n<h4>Noncompliant code example</h4>\n<p>Here is an example of a private key generation with RSA:</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\nfrom OpenSSL.crypto import PKey, TYPE_RSA\n\nkey_rsa1024 = PKey()\nkey_rsa1024.generate_key(type=TYPE_RSA, bits=1024) # Noncompliant\n</pre>\n<p>Here is an example of a key generation with the Digital Signature Algorithm (DSA):</p>\n<pre data-diff-id=\"5\" data-diff-type=\"noncompliant\">\nfrom OpenSSL.crypto import PKey, TYPE_DSA\n\nkey_dsa1024 = PKey()\nkey_dsa1024.generate_key(type=TYPE_DSA, bits=1024) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\nfrom OpenSSL.crypto import PKey, TYPE_RSA\n\nkey_rsa1024 = PKey()\nkey_rsa1024.generate_key(type=TYPE_RSA, bits=3072)\n</pre>\n<pre data-diff-id=\"5\" data-diff-type=\"compliant\">\nfrom OpenSSL.crypto import PKey, TYPE_DSA\n\nkey_dsa1024 = PKey()\nkey_dsa1024.generate_key(type=TYPE_DSA, bits=3072)\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptography community.</p>\n<p>The security of the RSA and DSA algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.</p>\n<p>In general, a minimum key size of <strong>2048</strong> bits is recommended for both. It provides 112 bits of security. A key length of\n<strong>3072</strong> or <strong>4096</strong> should be preferred when possible.</p>\n<h3>Going the extra mile</h3>\n<h4>Pre-Quantum Cryptography</h4>\n<p>Encrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.<br> It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.</p>\n<p>Thus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.</p>\n<p><a href=\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\">Learn more here</a>.</p>\n<h2>Resources</h2>\n<ul>\n  <li> Documentation\n    <ul>\n      <li> NIST Documentation - <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-186.pdf\">NIST SP 800-186: Recommendations\n      for Discrete Logarithm-based Cryptography: Elliptic Curve Domain Parameters</a> </li>\n      <li> IETF - <a href=\"https://datatracker.ietf.org/doc/html/rfc5639\">rfc5639: Elliptic Curve Cryptography (ECC) Brainpool Standard Curves and\n      Curve Generation</a> </li>\n    </ul>  </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\">Microsoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST 800-131A</a> - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/326\">CWE-326 - Inadequate Encryption Strength</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This vulnerability exposes encrypted data to attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>In today\u00e2\u20ac\u2122s cryptography, the length of the <strong>key</strong> directly affects the security level of cryptographic algorithms.</p>\n<p>Note that depending on the algorithm, the term <strong>key</strong> refers to a different mathematical property. For example:</p>\n<ul>\n  <li> For RSA, the key is the product of two large prime numbers, also called the <strong>modulus</strong>. </li>\n  <li> For AES and Elliptic Curve Cryptography (ECC), the key is only a sequence of randomly generated bytes.\n    <ul>\n      <li> In some cases, AES keys are derived from a master key or a passphrase using a Key Derivation Function (KDF) like PBKDF2 (Password-Based Key\n      Derivation Function 2) </li>\n    </ul>  </li>\n</ul>\n<p>If an application uses a key that is considered short and <strong>insecure</strong>, the encrypted data is exposed to attacks aimed at getting at\nthe plaintext.</p>\n<p>In general, it is best practice to expect a breach: that a user or organization with malicious intent will perform cryptographic attacks on this\ndata after obtaining it by other means.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, the company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization\u00e2\u20ac\u2122s ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>\n<h2>How to fix it in pyca</h2>\n<h3>Code examples</h3>\n<p>The following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.</p>\n<p>Due to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.<br> For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.</p>\n<h4>Noncompliant code example</h4>\n<p>Here is an example of a private key generation with RSA:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = rsa.generate_private_key(key_size = 1024, backend = backend) # Noncompliant\npublic_key  = private_key.public_key()\n</pre>\n<p>Here is an example of a key generation with the Digital Signature Algorithm (DSA):</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.asymmetric import dsa\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = dsa.generate_private_key(key_size = 1024, backend = backend) # Noncompliant\npublic_key  = private_key.public_key()\n</pre>\n<p>Here is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the elliptic curve\nname:</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = ec.generate_private_key(curve=ec.SECT163R2(), backend=backend)  # Noncompliant\npublic_key  = private_key.public_key()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = rsa.generate_private_key(key_size = 3072, backend = backend)\npublic_key  = private_key.public_key()\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.asymmetric import dsa\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = dsa.generate_private_key(key_size = 3072, backend = backend)\npublic_key  = private_key.public_key()\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.backends import default_backend\n\nbackend = default_backend()\n\nprivate_key = ec.generate_private_key(curve=ec.SECP521R1(), backend=backend)\npublic_key  = private_key.public_key()\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptography community.</p>\n<p>The appropriate choices are the following.</p>\n<h4>RSA (Rivest-Shamir-Adleman) and DSA (Digital Signature Algorithm)</h4>\n<p>The security of these algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.</p>\n<p>In general, a minimum key size of <strong>2048</strong> bits is recommended for both. It provides 112 bits of security. A key length of\n<strong>3072</strong> or <strong>4092</strong> should be preferred when possible.</p>\n<h4>AES (Advanced Encryption Standard)</h4>\n<p>AES supports three key sizes: 128 bits, 192 bits and 256 bits. The security of the AES algorithm is based on the computational complexity of trying\nall possible keys.<br> A larger key size increases the number of possible keys and makes exhaustive search attacks computationally infeasible.\nTherefore, a 256-bit key provides a higher level of security than a 128-bit or 192-bit key.</p>\n<p>Currently, a minimum key size of <strong>128 bits</strong> is recommended for AES.</p>\n<h4>Elliptic Curve Cryptography (ECC)</h4>\n<p>Elliptic curve cryptography is also used in various algorithms, such as ECDSA, ECDH, or ECMQV. The length of keys generated with elliptic curve\nalgorithms is mentioned directly in their names. For example, <code>secp256k1</code> generates a 256-bits long private key.</p>\n<p>Currently, a minimum key size of <strong>224 bits</strong> is recommended for EC-based algorithms.</p>\n<p>Additionally, some curves that theoretically provide sufficiently long keys are still discouraged. This can be because of a flaw in the curve\nparameters, a bad overall design, or poor performance. It is generally advised to use a NIST-approved elliptic curve wherever possible. Such curves\ncurrently include:</p>\n<ul>\n  <li> NIST P curves with a size of at least 224 bits, e.g. secp256r1. </li>\n  <li> Curve25519, generally known as ed25519 or x25519 depending on its application. </li>\n  <li> Curve448. </li>\n  <li> Brainpool curves with a size of at least 224 bits, e.g. brainpoolP224r1 </li>\n</ul>\n<h3>Going the extra mile</h3>\n<h4>Pre-Quantum Cryptography</h4>\n<p>Encrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.<br> It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.</p>\n<p>Thus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.</p>\n<p><a href=\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\">Learn more here</a>.</p>\n<h2>How to fix it in Cryptodome</h2>\n<h3>Code examples</h3>\n<p>The following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.</p>\n<p>Due to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.<br> For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.</p>\n<h4>Noncompliant code example</h4>\n<p>Here is an example of a private key generation with RSA:</p>\n<pre data-diff-id=\"6\" data-diff-type=\"noncompliant\">\nfrom Crypto.PublicKey import RSA\n\nkey_rsa1024 = RSA.generate(1024) # Noncompliant\n</pre>\n<p>Here is an example of a key generation with the Digital Signature Algorithm (DSA):</p>\n<pre data-diff-id=\"7\" data-diff-type=\"noncompliant\">\nfrom Crypto.PublicKey import DSA\n\nkey_dsa1024 = DSA.generate(1024) # Noncompliant\n</pre>\n<p>Here is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the elliptic curve\nname:</p>\n<pre data-diff-id=\"8\" data-diff-type=\"noncompliant\">\nfrom Crypto.PublicKey import DSA\n\nkey_p192 = ECC.generate(curve=\"secp192r1\") # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"6\" data-diff-type=\"compliant\">\nfrom Crypto.PublicKey import RSA\n\nkey_rsa1024 = RSA.generate(3072)\n</pre>\n<pre data-diff-id=\"7\" data-diff-type=\"compliant\">\nfrom Crypto.PublicKey import DSA\n\nkey_dsa1024 = DSA.generate(3072)\n</pre>\n<pre data-diff-id=\"8\" data-diff-type=\"compliant\">\nfrom Crypto.PublicKey import DSA\n\nkey_ed25519 = ECC.generate(curve=\"ed25519\")\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptography community.</p>\n<p>The appropriate choices are the following.</p>\n<h4>RSA (Rivest-Shamir-Adleman) and DSA (Digital Signature Algorithm)</h4>\n<p>The security of these algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.</p>\n<p>In general, a minimum key size of <strong>2048</strong> bits is recommended for both. It provides 112 bits of security. A key length of\n<strong>3072</strong> or <strong>4092</strong> should be preferred when possible.</p>\n<h4>AES (Advanced Encryption Standard)</h4>\n<p>AES supports three key sizes: 128 bits, 192 bits and 256 bits. The security of the AES algorithm is based on the computational complexity of trying\nall possible keys.<br> A larger key size increases the number of possible keys and makes exhaustive search attacks computationally infeasible.\nTherefore, a 256-bit key provides a higher level of security than a 128-bit or 192-bit key.</p>\n<p>Currently, a minimum key size of <strong>128 bits</strong> is recommended for AES.</p>\n<h4>Elliptic Curve Cryptography (ECC)</h4>\n<p>Elliptic curve cryptography is also used in various algorithms, such as ECDSA, ECDH, or ECMQV. The length of keys generated with elliptic curve\nalgorithms is mentioned directly in their names. For example, <code>secp256k1</code> generates a 256-bits long private key.</p>\n<p>Currently, a minimum key size of <strong>224 bits</strong> is recommended for EC-based algorithms.</p>\n<p>Additionally, some curves that theoretically provide sufficiently long keys are still discouraged. This can be because of a flaw in the curve\nparameters, a bad overall design, or poor performance. It is generally advised to use a NIST-approved elliptic curve wherever possible. Such curves\ncurrently include:</p>\n<ul>\n  <li> NIST P curves with a size of at least 224 bits, e.g. secp256r1. </li>\n  <li> Curve25519, generally known as ed25519 or x25519 depending on its application. </li>\n  <li> Curve448. </li>\n  <li> Brainpool curves with a size of at least 224 bits, e.g. brainpoolP224r1 </li>\n</ul>\n<h3>Going the extra mile</h3>\n<h4>Pre-Quantum Cryptography</h4>\n<p>Encrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.<br> It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.</p>\n<p>Thus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.</p>\n<p><a href=\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\">Learn more here</a>.</p>\n<h2>How to fix it in pyOpenSSL</h2>\n<h3>Code examples</h3>\n<p>The following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.</p>\n<p>Due to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.<br> For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.</p>\n<h4>Noncompliant code example</h4>\n<p>Here is an example of a private key generation with RSA:</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\nfrom OpenSSL.crypto import PKey, TYPE_RSA\n\nkey_rsa1024 = PKey()\nkey_rsa1024.generate_key(type=TYPE_RSA, bits=1024) # Noncompliant\n</pre>\n<p>Here is an example of a key generation with the Digital Signature Algorithm (DSA):</p>\n<pre data-diff-id=\"5\" data-diff-type=\"noncompliant\">\nfrom OpenSSL.crypto import PKey, TYPE_DSA\n\nkey_dsa1024 = PKey()\nkey_dsa1024.generate_key(type=TYPE_DSA, bits=1024) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\nfrom OpenSSL.crypto import PKey, TYPE_RSA\n\nkey_rsa1024 = PKey()\nkey_rsa1024.generate_key(type=TYPE_RSA, bits=3072)\n</pre>\n<pre data-diff-id=\"5\" data-diff-type=\"compliant\">\nfrom OpenSSL.crypto import PKey, TYPE_DSA\n\nkey_dsa1024 = PKey()\nkey_dsa1024.generate_key(type=TYPE_DSA, bits=3072)\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptography community.</p>\n<p>The security of the RSA and DSA algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.</p>\n<p>In general, a minimum key size of <strong>2048</strong> bits is recommended for both. It provides 112 bits of security. A key length of\n<strong>3072</strong> or <strong>4096</strong> should be preferred when possible.</p>\n<h3>Going the extra mile</h3>\n<h4>Pre-Quantum Cryptography</h4>\n<p>Encrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.<br> It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.</p>\n<p>Thus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.</p>\n<p><a href=\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\">Learn more here</a>.</p>\n<h2>Resources</h2>\n<ul>\n  <li> Documentation\n    <ul>\n      <li> NIST Documentation - <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-186.pdf\">NIST SP 800-186: Recommendations\n      for Discrete Logarithm-based Cryptography: Elliptic Curve Domain Parameters</a> </li>\n      <li> IETF - <a href=\"https://datatracker.ietf.org/doc/html/rfc5639\">rfc5639: Elliptic Curve Cryptography (ECC) Brainpool Standard Curves and\n      Curve Generation</a> </li>\n    </ul>  </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\">Microsoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST 800-131A</a> - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/326\">CWE-326 - Inadequate Encryption Strength</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>\n\n"
        },
        {
          "id": "S6466",
          "name": "Accessing sequence elements should not trigger an IndexError",
          "description": "<p>An <code>IndexError</code> is a bug class that occurs in Python when a program tries to access a list, a tuple or other types of sequences at an\nindex that does not exist. This bug can cause your program to crash or behave unexpectedly. To fix an <code>IndexError</code>, you should always\nensure you are accessing sequences within their bounds.</p>\n<h2>Why is this an issue?</h2>\n<p>An <code>IndexError</code> indicates a bug or a logical error in the code.</p>\n<p>In Python, lists and tuples have a certain length and their elements are indexed starting from <code>0</code>, counting up to the last index that\nis still smaller than the length. When trying to access a list or tuple with an index outside of this range, an <code>IndexError</code> will be raised\nand the operation will fail.</p>\n<p>Negative indices are supported. When using a negative index, it will be interpreted by computing the sum of the negative index and the list size.\nThe result is then used as the actual index for accessing the sequence. Thus, this sum must be non-negative and fit into the aforementioned range.</p>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<p>If the computation of an index value is tied to user input data, this issue can potentially even be exploited by attackers to disrupt your\napplication.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following examples contain out-of-bounds accesses to sequences, resulting in an <code>IndexError</code>. These situations can be avoided by\ncarefully considering the range of valid index values, or even better, by comparing indices against the length of a sequence.</p>\n<p>In this first example, the list <code>ls</code> contains three elements. Since the first element of a list has index <code>0</code>, the last valid\nindex is <code>2</code>. Therefore, an <code>IndexError</code> is raised when accessing <code>ls</code> at index <code>3</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef fun():\n    ls = [1, 2, 3]\n    foo(ls[3])  # Noncompliant: the last index of the list ls is 2. Using the index 3 will raise an IndexError.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef fun():\n    ls = [1, 2, 3]\n    foo(ls[2])\n</pre>\n<p>Accessing a list with its length as the index is never correct:</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\ndef fun():\n    ls = [1, 2, 3]\n    print(ls[len(ls)])  # Noncompliant: Indexing starts at 0, hence the list length will always be an invalid index.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\ndef fun():\n    ls = [1, 2, 3]\n    # We can make sure ls is non-empty before trying to access its last element.\n    # Also, the index `len(ls) - 1` or just `-1` will correctly select the last\n    # element within bounds.\n    print(\"Empty list!\" if not ls else ls[-1])\n</pre>\n<h3>How does this work?</h3>\n<p>You should always ensure that you are accessing sequences using indices that are within the bounds of the sequence. Here are some best practices to\nfollow:</p>\n<p>Always compare indices against the length of a sequence using <code>if-else</code> statements or other control flow constructs before accessing\nelements. The length can be retrieved using the built-in <code>len(\u00e2\u20ac\u00a6\u00e2\u20ac\u2039)</code> function. For example, <code>len(ls)</code> returns the length of the\nlist <code>ls</code>.</p>\n<p>Use loops to iterate over sequences instead of accessing elements directly. For example, <code>for elem in ls:</code> iterates over the list\n<code>ls</code>.</p>\n<h3>Pitfalls</h3>\n<p>The indices <code>0</code>, <code>len(\u00e2\u20ac\u00a6\u00e2\u20ac\u2039) - 1</code>, or <code>-1</code> for the first and last element of a sequence are not always valid! Make\nsure the sequence in question is non-empty before accessing these indices.</p>\n<h3>Going the extra mile</h3>\n<p>Built-in functions like <code>map()</code>, <code>filter()</code>, and <code>reduce()</code> present additional ways to operate on sequences\nwithout using indices.</p>\n<p>If you absolutely need to know the index of an element while iterating over a sequence, you can use <code>enumerate()</code>. It provides you the\nindices and the elements of a sequence during iteration, eliminating the need to manually retrieve elements from the sequence using indices.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfor i in range(len(ls)):\n    elem = ls[i] # We can eliminate this access by index using enumerate.\n\n    foo(i, elem)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nfor i, elem in enumerate(ls):\n  foo(i, elem)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/expressions.html#subscriptions\">Subscriptions</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/exceptions.html#IndexError\">IndexError</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#built-in-functions\">Built-ins, including <code>map</code>, <code>filter</code>,\n  <code>enumerate</code>, etc.</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>An <code>IndexError</code> is a bug class that occurs in Python when a program tries to access a list, a tuple or other types of sequences at an\nindex that does not exist. This bug can cause your program to crash or behave unexpectedly. To fix an <code>IndexError</code>, you should always\nensure you are accessing sequences within their bounds.</p>\n<h2>Why is this an issue?</h2>\n<p>An <code>IndexError</code> indicates a bug or a logical error in the code.</p>\n<p>In Python, lists and tuples have a certain length and their elements are indexed starting from <code>0</code>, counting up to the last index that\nis still smaller than the length. When trying to access a list or tuple with an index outside of this range, an <code>IndexError</code> will be raised\nand the operation will fail.</p>\n<p>Negative indices are supported. When using a negative index, it will be interpreted by computing the sum of the negative index and the list size.\nThe result is then used as the actual index for accessing the sequence. Thus, this sum must be non-negative and fit into the aforementioned range.</p>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<p>If the computation of an index value is tied to user input data, this issue can potentially even be exploited by attackers to disrupt your\napplication.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following examples contain out-of-bounds accesses to sequences, resulting in an <code>IndexError</code>. These situations can be avoided by\ncarefully considering the range of valid index values, or even better, by comparing indices against the length of a sequence.</p>\n<p>In this first example, the list <code>ls</code> contains three elements. Since the first element of a list has index <code>0</code>, the last valid\nindex is <code>2</code>. Therefore, an <code>IndexError</code> is raised when accessing <code>ls</code> at index <code>3</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef fun():\n    ls = [1, 2, 3]\n    foo(ls[3])  # Noncompliant: the last index of the list ls is 2. Using the index 3 will raise an IndexError.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef fun():\n    ls = [1, 2, 3]\n    foo(ls[2])\n</pre>\n<p>Accessing a list with its length as the index is never correct:</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\ndef fun():\n    ls = [1, 2, 3]\n    print(ls[len(ls)])  # Noncompliant: Indexing starts at 0, hence the list length will always be an invalid index.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\ndef fun():\n    ls = [1, 2, 3]\n    # We can make sure ls is non-empty before trying to access its last element.\n    # Also, the index `len(ls) - 1` or just `-1` will correctly select the last\n    # element within bounds.\n    print(\"Empty list!\" if not ls else ls[-1])\n</pre>\n<h3>How does this work?</h3>\n<p>You should always ensure that you are accessing sequences using indices that are within the bounds of the sequence. Here are some best practices to\nfollow:</p>\n<p>Always compare indices against the length of a sequence using <code>if-else</code> statements or other control flow constructs before accessing\nelements. The length can be retrieved using the built-in <code>len(\u00e2\u20ac\u00a6\u00e2\u20ac\u2039)</code> function. For example, <code>len(ls)</code> returns the length of the\nlist <code>ls</code>.</p>\n<p>Use loops to iterate over sequences instead of accessing elements directly. For example, <code>for elem in ls:</code> iterates over the list\n<code>ls</code>.</p>\n<h3>Pitfalls</h3>\n<p>The indices <code>0</code>, <code>len(\u00e2\u20ac\u00a6\u00e2\u20ac\u2039) - 1</code>, or <code>-1</code> for the first and last element of a sequence are not always valid! Make\nsure the sequence in question is non-empty before accessing these indices.</p>\n<h3>Going the extra mile</h3>\n<p>Built-in functions like <code>map()</code>, <code>filter()</code>, and <code>reduce()</code> present additional ways to operate on sequences\nwithout using indices.</p>\n<p>If you absolutely need to know the index of an element while iterating over a sequence, you can use <code>enumerate()</code>. It provides you the\nindices and the elements of a sequence during iteration, eliminating the need to manually retrieve elements from the sequence using indices.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfor i in range(len(ls)):\n    elem = ls[i] # We can eliminate this access by index using enumerate.\n\n    foo(i, elem)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nfor i, elem in enumerate(ls):\n  foo(i, elem)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/expressions.html#subscriptions\">Subscriptions</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/exceptions.html#IndexError\">IndexError</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#built-in-functions\">Built-ins, including <code>map</code>, <code>filter</code>,\n  <code>enumerate</code>, etc.</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6465",
          "name": "Unpacking should be done with the same number of elements of the iterable.",
          "description": "<p>This rule raises an issue when the number of variables on the left-hand side of an assignment operator (=) doesn\u00e2\u20ac\u2122t match the number of elements in\nthe iterable on the right-hand side.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python, the unpacking assignment is a powerful feature that allows you to assign multiple values to multiple variables in a single\nstatement.</p>\n<p>The basic rule for the unpacking assignment is that the number of variables on the left-hand side must be equal to the number of elements in the\niterable. If this is not respected, a <code>ValueError</code> will be produced at runtime.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo(param):\n  ls = [1, 2, 3]\n  x, y = ls # Noncompliant: 'ls' contains more elements than there are variables on the left-hand side\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo(param):\n  ls = [1, 2, 3]\n  x, y, z = ls\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences\">Tuples and Sequences</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when the number of variables on the left-hand side of an assignment operator (=) doesn\u00e2\u20ac\u2122t match the number of elements in\nthe iterable on the right-hand side.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python, the unpacking assignment is a powerful feature that allows you to assign multiple values to multiple variables in a single\nstatement.</p>\n<p>The basic rule for the unpacking assignment is that the number of variables on the left-hand side must be equal to the number of elements in the\niterable. If this is not respected, a <code>ValueError</code> will be produced at runtime.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo(param):\n  ls = [1, 2, 3]\n  x, y = ls # Noncompliant: 'ls' contains more elements than there are variables on the left-hand side\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo(param):\n  ls = [1, 2, 3]\n  x, y, z = ls\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences\">Tuples and Sequences</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6464",
          "name": "Non-existent dictionary keys should not be accessed",
          "description": "<p>This rule raises an issue when trying to access a dictionary key that does not exist.</p>\n<h2>Why is this an issue?</h2>\n<p>Trying to access a dictionary key that does not exist will raise a <code>KeyError</code> exception.</p>\n<p>When trying to access or remove a key that may not be there, several solutions are possible:</p>\n<ul>\n  <li> Use the <code>get()</code> method instead of a subscription. It will return <code>None</code> for a missing key instead of raising a\n  <code>KeyError</code>. </li>\n  <li> Use the <code>setdefault()</code> method to provide keys that may be missing with a default value. </li>\n  <li> Check that the key is present in the dictionary with the <code>if key in dict:</code> construct. </li>\n  <li> Use a <code>try/except</code> block and handle the potential <code>KeyError</code> exception. </li>\n  <li> Use a <code>defaultdict</code> instead of a regular <code>dict</code> object, and provide a <code>default_factory</code> attribute. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    my_dict = {'k1': 42}\n    ...\n    value = my_dict['k2']  # Noncompliant: the key \"k2\" does not exist.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    my_dict = {'k1': 42}\n    ...\n    if 'k2' in my_dict:\n        value = my_dict['k2']\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/stdtypes.html?highlight=setdefault#dict.setdefault\">dict - setdefault</a>\n  </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/collections.html#collections.defaultdict\">defaultdict</a> </li>\n  <li> Python Documentation - <a\n  href=\"https://docs.python.org/3/library/collections.html?highlight=default_factory#collections.defaultdict.default_factory\">defaultdict -\n  default_factory</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when trying to access a dictionary key that does not exist.</p>\n<h2>Why is this an issue?</h2>\n<p>Trying to access a dictionary key that does not exist will raise a <code>KeyError</code> exception.</p>\n<p>When trying to access or remove a key that may not be there, several solutions are possible:</p>\n<ul>\n  <li> Use the <code>get()</code> method instead of a subscription. It will return <code>None</code> for a missing key instead of raising a\n  <code>KeyError</code>. </li>\n  <li> Use the <code>setdefault()</code> method to provide keys that may be missing with a default value. </li>\n  <li> Check that the key is present in the dictionary with the <code>if key in dict:</code> construct. </li>\n  <li> Use a <code>try/except</code> block and handle the potential <code>KeyError</code> exception. </li>\n  <li> Use a <code>defaultdict</code> instead of a regular <code>dict</code> object, and provide a <code>default_factory</code> attribute. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    my_dict = {'k1': 42}\n    ...\n    value = my_dict['k2']  # Noncompliant: the key \"k2\" does not exist.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    my_dict = {'k1': 42}\n    ...\n    if 'k2' in my_dict:\n        value = my_dict['k2']\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/stdtypes.html?highlight=setdefault#dict.setdefault\">dict - setdefault</a>\n  </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/collections.html#collections.defaultdict\">defaultdict</a> </li>\n  <li> Python Documentation - <a\n  href=\"https://docs.python.org/3/library/collections.html?highlight=default_factory#collections.defaultdict.default_factory\">defaultdict -\n  default_factory</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5707",
          "name": "Exceptions' \"__cause__\" should be either an Exception or None",
          "description": "<p>This rule raise an issue if something other than <code>None</code> or a valid exception is provided as the cause of an exception chain.</p>\n<h2>Why is this an issue?</h2>\n<p>Exception chaining enables users to see if an exception is the direct consequence of another exception (see <a\nhref=\"https://peps.python.org/pep-3134/\">PEP-3134</a>). This is useful to propagate the original context of the error.</p>\n<p>Exceptions are chained using either of the following syntax:</p>\n<ul>\n  <li> With the <code>from</code> keyword </li>\n</ul>\n<pre>\ntry:\n    ...\nexcept OSError as e:\n    raise RuntimeError(\"Something went wrong\") from e\n</pre>\n<ul>\n  <li> With the <code>__cause__</code> property </li>\n</ul>\n<pre>\ntry:\n    ...\nexcept OSError as e:\n    new_exception = RuntimeError(\"Something went wrong\")\n    new_exception.__cause__ = e\n    raise new_exception\n</pre>\n<p>It is also possible to erase a chaining by setting <code>new_exception.__cause__ = None</code> or using <code>raise new_exception from None</code>\n(see <a href=\"https://peps.python.org/pep-0409/\">PEP-409</a>).</p>\n<p>Chaining will fail and raise a <code>TypeError</code> if something other than <code>None</code> or a valid exception, i.e. an instance or a\nsubclass of <code>BaseException</code>, is provided.</p>\n<h2>How to fix it</h2>\n<p>Make sure the cause of a chain of exceptions is either <code>None</code> or a valid exception.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass A:\n    pass\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    new_exc = TypeError(\"new\")\n    new_exc.__cause__ = A()  # Noncompliant: A is not a subclass of BaseException.\n    raise new_exc\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    raise TypeError(\"new\") from \"test\"  # Noncompliant: \"test\" is not a valid exception.\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    new_exc = TypeError(\"new\")\n    new_exc.__cause__ = None  # Ok\n    raise new_exc\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    new_exc = TypeError(\"new\")\n    new_exc.__cause__ = e  # Ok\n    raise new_exc\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    raise TypeError(\"new\") from None  # Ok\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    raise TypeError(\"new\") from e  # Ok\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/exceptions.html\">Built-in Exceptions</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://peps.python.org/pep-3134/\">Exception Chaining and Embedded Tracebacks</a> - PEP 3134 </li>\n  <li> <a href=\"https://peps.python.org/pep-0409/\">Suppressing exception context</a> - PEP 409 </li>\n  <li> <a href=\"https://peps.python.org/pep-0352/#exception-hierarchy-changes\">Required Superclass for Exceptions</a> - PEP 352 </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raise an issue if something other than <code>None</code> or a valid exception is provided as the cause of an exception chain.</p>\n<h2>Why is this an issue?</h2>\n<p>Exception chaining enables users to see if an exception is the direct consequence of another exception (see <a\nhref=\"https://peps.python.org/pep-3134/\">PEP-3134</a>). This is useful to propagate the original context of the error.</p>\n<p>Exceptions are chained using either of the following syntax:</p>\n<ul>\n  <li> With the <code>from</code> keyword </li>\n</ul>\n<pre>\ntry:\n    ...\nexcept OSError as e:\n    raise RuntimeError(\"Something went wrong\") from e\n</pre>\n<ul>\n  <li> With the <code>__cause__</code> property </li>\n</ul>\n<pre>\ntry:\n    ...\nexcept OSError as e:\n    new_exception = RuntimeError(\"Something went wrong\")\n    new_exception.__cause__ = e\n    raise new_exception\n</pre>\n<p>It is also possible to erase a chaining by setting <code>new_exception.__cause__ = None</code> or using <code>raise new_exception from None</code>\n(see <a href=\"https://peps.python.org/pep-0409/\">PEP-409</a>).</p>\n<p>Chaining will fail and raise a <code>TypeError</code> if something other than <code>None</code> or a valid exception, i.e. an instance or a\nsubclass of <code>BaseException</code>, is provided.</p>\n<h2>How to fix it</h2>\n<p>Make sure the cause of a chain of exceptions is either <code>None</code> or a valid exception.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass A:\n    pass\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    new_exc = TypeError(\"new\")\n    new_exc.__cause__ = A()  # Noncompliant: A is not a subclass of BaseException.\n    raise new_exc\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    raise TypeError(\"new\") from \"test\"  # Noncompliant: \"test\" is not a valid exception.\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    new_exc = TypeError(\"new\")\n    new_exc.__cause__ = None  # Ok\n    raise new_exc\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    new_exc = TypeError(\"new\")\n    new_exc.__cause__ = e  # Ok\n    raise new_exc\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    raise TypeError(\"new\") from None  # Ok\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    raise TypeError(\"new\") from e  # Ok\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/exceptions.html\">Built-in Exceptions</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://peps.python.org/pep-3134/\">Exception Chaining and Embedded Tracebacks</a> - PEP 3134 </li>\n  <li> <a href=\"https://peps.python.org/pep-0409/\">Suppressing exception context</a> - PEP 409 </li>\n  <li> <a href=\"https://peps.python.org/pep-0352/#exception-hierarchy-changes\">Required Superclass for Exceptions</a> - PEP 352 </li>\n</ul>\n\n"
        },
        {
          "id": "S3518",
          "name": "Zero should not be a possible denominator",
          "description": "<p>If the denominator to a division or modulo operation is zero, a <code>ZeroDivisionError</code> is raised.</p>\n<p>This error will crash your program in most cases. To fix it, you need to ensure that the denominator value in all division operations is always\nnon-zero, or check the value against zero before performing the division.</p>\n<h2>Why is this an issue?</h2>\n<p>A division (<code>/</code>) or modulo operation (<code>%</code>) by zero indicates a bug or logical error. This is because in Python, a division or\nmodulo operation where the denominator is zero always results in a <code>ZeroDivisionError</code> being raised.</p>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<p>If the computation of the denominator is tied to user input data, this issue can potentially even be exploited by attackers to disrupt your\napplication.</p>\n<h2>How to fix it</h2>\n<p>The goal is to ensure that a zero value never reaches the denominator.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    z = 0\n    if (unknown()):\n        z = 4\n        ...\n    else:\n        # (z is not reassigned to a non-zero value here)\n        ...\n    z = 1 / z # Noncompliant: divisor can be 0\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    z = 0\n    if (unknown()):\n        z = 4\n        ...\n    else:\n        z = 1\n        ...\n    z = 1 / z\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\ndef report_average():\n    sum = compute_sum()\n    denominator = population()\n    print(sum / denominator) # Noncompliant: divisor can be 0\n\ndef population():\n    size = read_size()\n    return size if size is not None else 0\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\ndef report_average():\n    sum = compute_sum()\n    denominator = population()\n    if denominator == 0:\n      print(\"We have no data.\")\n    else:\n      print(sum / denominator)\n\ndef population():\n    size = read_size()\n    return size if size is not None else 0\n</pre>\n<h3>How does this work?</h3>\n<p>One approach is to inspect every possible execution path that affects the denominator and adjust them such that none of them lead to a zero value.\nThe first example illustrates this by ensuring that for all the paths that can define the variable z, none assign it zero. Thus, we are sure that the\nissue is fixed.</p>\n<p>In other cases it might be necessary and safer to check and explicitly handle the case of a zero denominator. For instance, in the second example,\nan error message is displayed to the user if the denominator is zero.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations\">Binary arithmetic operations</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/exceptions.html#ZeroDivisionError\">ZeroDivisionError</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/369\">CWE-369 - Divide by zero</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222612\">Application Security and\n  Development: V-222612</a> - The application must not be vulnerable to overflow attacks. </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>If the denominator to a division or modulo operation is zero, a <code>ZeroDivisionError</code> is raised.</p>\n<p>This error will crash your program in most cases. To fix it, you need to ensure that the denominator value in all division operations is always\nnon-zero, or check the value against zero before performing the division.</p>\n<h2>Why is this an issue?</h2>\n<p>A division (<code>/</code>) or modulo operation (<code>%</code>) by zero indicates a bug or logical error. This is because in Python, a division or\nmodulo operation where the denominator is zero always results in a <code>ZeroDivisionError</code> being raised.</p>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<p>If the computation of the denominator is tied to user input data, this issue can potentially even be exploited by attackers to disrupt your\napplication.</p>\n<h2>How to fix it</h2>\n<p>The goal is to ensure that a zero value never reaches the denominator.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    z = 0\n    if (unknown()):\n        z = 4\n        ...\n    else:\n        # (z is not reassigned to a non-zero value here)\n        ...\n    z = 1 / z # Noncompliant: divisor can be 0\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    z = 0\n    if (unknown()):\n        z = 4\n        ...\n    else:\n        z = 1\n        ...\n    z = 1 / z\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\ndef report_average():\n    sum = compute_sum()\n    denominator = population()\n    print(sum / denominator) # Noncompliant: divisor can be 0\n\ndef population():\n    size = read_size()\n    return size if size is not None else 0\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\ndef report_average():\n    sum = compute_sum()\n    denominator = population()\n    if denominator == 0:\n      print(\"We have no data.\")\n    else:\n      print(sum / denominator)\n\ndef population():\n    size = read_size()\n    return size if size is not None else 0\n</pre>\n<h3>How does this work?</h3>\n<p>One approach is to inspect every possible execution path that affects the denominator and adjust them such that none of them lead to a zero value.\nThe first example illustrates this by ensuring that for all the paths that can define the variable z, none assign it zero. Thus, we are sure that the\nissue is fixed.</p>\n<p>In other cases it might be necessary and safer to check and explicitly handle the case of a zero denominator. For instance, in the second example,\nan error message is displayed to the user if the denominator is zero.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations\">Binary arithmetic operations</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/exceptions.html#ZeroDivisionError\">ZeroDivisionError</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/369\">CWE-369 - Divide by zero</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222612\">Application Security and\n  Development: V-222612</a> - The application must not be vulnerable to overflow attacks. </li>\n</ul>\n\n"
        },
        {
          "id": "S1716",
          "name": "\"break\" and \"continue\" should not be used outside a loop",
          "description": "<p>This rule raises an issue when a <code>break</code> or <code>continue</code> statement is used outside of a loop.</p>\n<h2>Why is this an issue?</h2>\n<p><code>break</code> and <code>continue</code> are control flow statements used inside of loops. <code>break</code> is used to break out of its\ninnermost enclosing loop and <code>continue</code> will continue with the next iteration.</p>\n<p>The example below illustrates the use of <code>break</code> in a <code>while</code> loop:</p>\n<pre>\nn = 1\nwhile n &lt; 10:\n    if n % 3 == 0:\n      print(\"Found a number divisible by 3\", n)\n      break\n    n = n + 1\n</pre>\n<p>This next example uses <code>continue</code> inside a <code>for</code> loop:</p>\n<pre>\nwords = [\"alice\", \"bob\", \"charlie\"]\nfor word in words:\n    if word == word[::-1]:\n        print(\"Found a palindrome\", word)\n        continue\n    print(\"This is not a palindrome\", word)\n</pre>\n<p>Python will raise a <code>SyntaxError</code> when <code>break</code> or <code>continue</code> are used outside of <code>for</code> or\n<code>while</code> loops.</p>\n<p>If the goal is to interrupt the main program flow, <code>quit()</code>, <code>exit()</code>, <code>os._exit()</code> and <code>sys.exit()</code>\nare the preferred way.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nnarg=len(sys.argv)\nif narg == 1:\n    print('@Usage: input_filename nelements nintervals')\n    break\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nnarg=len(sys.argv)\nif narg == 1:\n    print('@Usage: input_filename nelements nintervals')\n    sys.exit()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops\">break and continue\n  Statements</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when a <code>break</code> or <code>continue</code> statement is used outside of a loop.</p>\n<h2>Why is this an issue?</h2>\n<p><code>break</code> and <code>continue</code> are control flow statements used inside of loops. <code>break</code> is used to break out of its\ninnermost enclosing loop and <code>continue</code> will continue with the next iteration.</p>\n<p>The example below illustrates the use of <code>break</code> in a <code>while</code> loop:</p>\n<pre>\nn = 1\nwhile n &lt; 10:\n    if n % 3 == 0:\n      print(\"Found a number divisible by 3\", n)\n      break\n    n = n + 1\n</pre>\n<p>This next example uses <code>continue</code> inside a <code>for</code> loop:</p>\n<pre>\nwords = [\"alice\", \"bob\", \"charlie\"]\nfor word in words:\n    if word == word[::-1]:\n        print(\"Found a palindrome\", word)\n        continue\n    print(\"This is not a palindrome\", word)\n</pre>\n<p>Python will raise a <code>SyntaxError</code> when <code>break</code> or <code>continue</code> are used outside of <code>for</code> or\n<code>while</code> loops.</p>\n<p>If the goal is to interrupt the main program flow, <code>quit()</code>, <code>exit()</code>, <code>os._exit()</code> and <code>sys.exit()</code>\nare the preferred way.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nnarg=len(sys.argv)\nif narg == 1:\n    print('@Usage: input_filename nelements nintervals')\n    break\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nnarg=len(sys.argv)\nif narg == 1:\n    print('@Usage: input_filename nelements nintervals')\n    sys.exit()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops\">break and continue\n  Statements</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1143",
          "name": "Break, continue and return statements should not occur in \"finally\" blocks",
          "description": "<h2>Why is this an issue?</h2>\n<p>Using <code>return</code>, <code>break</code> or <code>continue</code> in a <code>finally</code> block suppresses the propagation of any unhandled\nexception which was raised in the <code>try</code>, <code>else</code> or <code>except</code> blocks. It will also ignore their return statements.</p>\n<p><code><a href=\"https://docs.python.org/3/library/exceptions.html#SystemExit\">SystemExit</a></code> is raised when <code>sys.exit()</code> is\ncalled. <code><a href=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\">KeyboardInterrupt</a></code> is raised when the user asks\nthe program to stop by pressing interrupt keys. Both exceptions are expected to propagate up until the application stops. It is ok to catch them when\na clean-up is necessary but they should be raised again immediately. They should never be ignored.</p>\n<p>If you need to ignore every other exception you can simply catch the <code>Exception</code> class. However you should be very careful when you do\nthis as it will ignore other important exceptions such as <code><a\nhref=\"https://docs.python.org/3/library/exceptions.html#MemoryError\">MemoryError</a></code></p>\n<p>In python 2 it is possible to raise old style classes. You can use a bare <code>except:</code> statement to catch every exception. Remember to\nstill reraise <code>SystemExit</code> and <code>KeyboardInterrupt</code>.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>) would force the control flow to\nleave a finally block.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef find_file_which_contains(expected_content, paths):\n    file = None\n    for path in paths:\n        try:\n            # \"open\" will raise IsADirectoryError if the provided path is a directory but it will be stopped by the  \"return\" and \"continue\"\n            file = open(path, 'r')\n            actual_content = file.read()\n        except FileNotFoundError as exception:\n            # This exception will never pass the \"finally\" block because of \"return\" and \"continue\"\n            raise ValueError(f\"'paths' should only contain existing files. File ${path} does not exist.\")\n        finally:\n            file.close()\n            if actual_content != expected_content:\n                # Note that \"continue\" is allowed in a \"finally\" block only since python 3.8\n                continue  # Noncompliant. This will prevent exceptions raised by the \"try\" block and \"except\" block from raising.\n            else:\n                return path # Noncompliant. Same as for \"continue\"\n    return None\n\n# This will return None instead of raising ValueError from the \"except\" block\nfind_file_which_contains(\"some content\", [\"file_which_does_not_exist\"])\n\n# This will return None instead of raising IsADirectoryError from the \"try\" block\nfind_file_which_contains(\"some content\", [\"a_directory\"])\n\nimport sys\n\nwhile True:\n    try:\n        sys.exit(1)\n    except (SystemExit) as e:\n        print(\"Exiting\")\n        raise\n    finally:\n        break  # This will prevent SystemExit from raising\n\ndef continue_whatever_happens_noncompliant():\n    for i in range(10):\n        try:\n            raise ValueError()\n        finally:\n            continue  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n# Note that using \"with open(...) as\" would be better. We keep the example as is just for demonstration purpose.\n\ndef find_file_which_contains(expected_content, paths):\n    file = None\n    for path in paths:\n        try:\n            file = open(path, 'r')\n            actual_content = file.read()\n            if actual_content != expected_content:\n                continue\n            else:\n                return path\n        except FileNotFoundError as exception:\n            raise ValueError(f\"'paths' should only contain existing files. File ${path} does not exist.\")\n        finally:\n            if file:\n                file.close()\n    return None\n\n# This raises ValueError\nfind_file_which_contains(\"some content\", [\"file_which_does_not_exist\"])\n\n# This raises IsADirectoryError\nfind_file_which_contains(\"some content\", [\"a_directory\"])\n\nimport sys\n\nwhile True:\n    try:\n        sys.exit(1)\n    except (SystemExit) as e:\n        print(\"Exiting\")\n        raise # SystemExit is re-raised\n\nimport logging\n\ndef continue_whatever_happens_compliant():\n    for i in range(10):\n        try:\n            raise ValueError()\n        except Exception:\n            logging.exception(\"Failed\")  # Ignore all \"Exception\" subclasses yet allow SystemExit and other important exceptions to pass\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#except\">the <code>try</code> statement</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Using <code>return</code>, <code>break</code> or <code>continue</code> in a <code>finally</code> block suppresses the propagation of any unhandled\nexception which was raised in the <code>try</code>, <code>else</code> or <code>except</code> blocks. It will also ignore their return statements.</p>\n<p><code><a href=\"https://docs.python.org/3/library/exceptions.html#SystemExit\">SystemExit</a></code> is raised when <code>sys.exit()</code> is\ncalled. <code><a href=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\">KeyboardInterrupt</a></code> is raised when the user asks\nthe program to stop by pressing interrupt keys. Both exceptions are expected to propagate up until the application stops. It is ok to catch them when\na clean-up is necessary but they should be raised again immediately. They should never be ignored.</p>\n<p>If you need to ignore every other exception you can simply catch the <code>Exception</code> class. However you should be very careful when you do\nthis as it will ignore other important exceptions such as <code><a\nhref=\"https://docs.python.org/3/library/exceptions.html#MemoryError\">MemoryError</a></code></p>\n<p>In python 2 it is possible to raise old style classes. You can use a bare <code>except:</code> statement to catch every exception. Remember to\nstill reraise <code>SystemExit</code> and <code>KeyboardInterrupt</code>.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>) would force the control flow to\nleave a finally block.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef find_file_which_contains(expected_content, paths):\n    file = None\n    for path in paths:\n        try:\n            # \"open\" will raise IsADirectoryError if the provided path is a directory but it will be stopped by the  \"return\" and \"continue\"\n            file = open(path, 'r')\n            actual_content = file.read()\n        except FileNotFoundError as exception:\n            # This exception will never pass the \"finally\" block because of \"return\" and \"continue\"\n            raise ValueError(f\"'paths' should only contain existing files. File ${path} does not exist.\")\n        finally:\n            file.close()\n            if actual_content != expected_content:\n                # Note that \"continue\" is allowed in a \"finally\" block only since python 3.8\n                continue  # Noncompliant. This will prevent exceptions raised by the \"try\" block and \"except\" block from raising.\n            else:\n                return path # Noncompliant. Same as for \"continue\"\n    return None\n\n# This will return None instead of raising ValueError from the \"except\" block\nfind_file_which_contains(\"some content\", [\"file_which_does_not_exist\"])\n\n# This will return None instead of raising IsADirectoryError from the \"try\" block\nfind_file_which_contains(\"some content\", [\"a_directory\"])\n\nimport sys\n\nwhile True:\n    try:\n        sys.exit(1)\n    except (SystemExit) as e:\n        print(\"Exiting\")\n        raise\n    finally:\n        break  # This will prevent SystemExit from raising\n\ndef continue_whatever_happens_noncompliant():\n    for i in range(10):\n        try:\n            raise ValueError()\n        finally:\n            continue  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n# Note that using \"with open(...) as\" would be better. We keep the example as is just for demonstration purpose.\n\ndef find_file_which_contains(expected_content, paths):\n    file = None\n    for path in paths:\n        try:\n            file = open(path, 'r')\n            actual_content = file.read()\n            if actual_content != expected_content:\n                continue\n            else:\n                return path\n        except FileNotFoundError as exception:\n            raise ValueError(f\"'paths' should only contain existing files. File ${path} does not exist.\")\n        finally:\n            if file:\n                file.close()\n    return None\n\n# This raises ValueError\nfind_file_which_contains(\"some content\", [\"file_which_does_not_exist\"])\n\n# This raises IsADirectoryError\nfind_file_which_contains(\"some content\", [\"a_directory\"])\n\nimport sys\n\nwhile True:\n    try:\n        sys.exit(1)\n    except (SystemExit) as e:\n        print(\"Exiting\")\n        raise # SystemExit is re-raised\n\nimport logging\n\ndef continue_whatever_happens_compliant():\n    for i in range(10):\n        try:\n            raise ValueError()\n        except Exception:\n            logging.exception(\"Failed\")  # Ignore all \"Exception\" subclasses yet allow SystemExit and other important exceptions to pass\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#except\">the <code>try</code> statement</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6281",
          "name": "Allowing public ACLs or policies on a S3 bucket is security-sensitive",
          "description": "<p>By default S3 buckets are private, it means that only the bucket owner can access it.</p>\n<p>This access control can be relaxed with ACLs or policies.</p>\n<p>To prevent permissive policies to be set on a S3 bucket the following booleans settings can be enabled:</p>\n<ul>\n  <li> <code>block_public_acls</code>: to block or not public ACLs to be set to the S3 bucket. </li>\n  <li> <code>ignore_public_acls</code>: to consider or not existing public ACLs set to the S3 bucket. </li>\n  <li> <code>block_public_policy</code>: to block or not public policies to be set to the S3 bucket. </li>\n  <li> <code>restrict_public_buckets</code>: to restrict or not the access to the S3 endpoints of public policies to the principals within the bucket\n  owner account. </li>\n</ul>\n<p>The other attribute <code>BlockPublicAccess.BLOCK_ACLS</code> only turns on <code>block_public_acls</code> and <code>ignore_public_acls</code>. The\npublic policies can still affect the S3 bucket.</p>\n<p>However, all of those options can be enabled by setting the <code>block_public_access</code> property of the S3 bucket to\n<code>BlockPublicAccess.BLOCK_ALL</code>.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The S3 bucket stores sensitive data. </li>\n  <li> The S3 bucket is not used to store static resources of websites (images, css \u00e2\u20ac\u00a6\u00e2\u20ac\u2039). </li>\n  <li> Many users have the permission to set ACL or policy to the S3 bucket. </li>\n  <li> These settings are not already enforced to true at the account level. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to configure:</p>\n<ul>\n  <li> <code>block_public_acls</code> to <code>True</code> to block new attempts to set public ACLs. </li>\n  <li> <code>ignore_public_acls</code> to <code>True</code> to block existing public ACLs. </li>\n  <li> <code>block_public_policy</code> to <code>True</code> to block new attempts to set public policies. </li>\n  <li> <code>restrict_public_buckets</code> to <code>True</code> to restrict existing public policies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>By default, when not set, the <code>block_public_access</code> is fully deactivated (nothing is blocked):</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\"        # Sensitive\n)\n</pre>\n<p>This <code>block_public_access</code> allows public ACL to be set:</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\",\n    block_public_access=s3.BlockPublicAccess(\n        block_public_acls=False,       # Sensitive\n        ignore_public_acls=True,\n        block_public_policy=True,\n        restrict_public_buckets=True\n    )\n)\n</pre>\n<p>The attribute <code>BLOCK_ACLS</code> only blocks and ignores public ACLs:</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\",\n    block_public_access=s3.BlockPublicAccess.BLOCK_ACLS     # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>This <code>block_public_access</code> blocks public ACLs and policies, ignores existing public ACLs and restricts existing public policies:</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\",\n    block_public_access=s3.BlockPublicAccess.BLOCK_ALL # Compliant\n)\n</pre>\n<p>A similar configuration to the one above can obtained by setting all parameters of the <code>block_public_access</code></p>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    block_public_access=s3.BlockPublicAccess(       # Compliant\n        block_public_acls=True,\n        ignore_public_acls=True,\n        block_public_policy=True,\n        restrict_public_buckets=True\n    )\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html\">AWS Documentation</a> - Blocking public\n  access to your Amazon S3 storage </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222620\">Application Security and\n  Development: V-222620</a> - Application web servers must be on a separate network segment from the application and database servers. </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_s3/Bucket.html\">AWS CDK version 2</a> - Bucket </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>By default S3 buckets are private, it means that only the bucket owner can access it.</p>\n<p>This access control can be relaxed with ACLs or policies.</p>\n<p>To prevent permissive policies to be set on a S3 bucket the following booleans settings can be enabled:</p>\n<ul>\n  <li> <code>block_public_acls</code>: to block or not public ACLs to be set to the S3 bucket. </li>\n  <li> <code>ignore_public_acls</code>: to consider or not existing public ACLs set to the S3 bucket. </li>\n  <li> <code>block_public_policy</code>: to block or not public policies to be set to the S3 bucket. </li>\n  <li> <code>restrict_public_buckets</code>: to restrict or not the access to the S3 endpoints of public policies to the principals within the bucket\n  owner account. </li>\n</ul>\n<p>The other attribute <code>BlockPublicAccess.BLOCK_ACLS</code> only turns on <code>block_public_acls</code> and <code>ignore_public_acls</code>. The\npublic policies can still affect the S3 bucket.</p>\n<p>However, all of those options can be enabled by setting the <code>block_public_access</code> property of the S3 bucket to\n<code>BlockPublicAccess.BLOCK_ALL</code>.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The S3 bucket stores sensitive data. </li>\n  <li> The S3 bucket is not used to store static resources of websites (images, css \u00e2\u20ac\u00a6\u00e2\u20ac\u2039). </li>\n  <li> Many users have the permission to set ACL or policy to the S3 bucket. </li>\n  <li> These settings are not already enforced to true at the account level. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to configure:</p>\n<ul>\n  <li> <code>block_public_acls</code> to <code>True</code> to block new attempts to set public ACLs. </li>\n  <li> <code>ignore_public_acls</code> to <code>True</code> to block existing public ACLs. </li>\n  <li> <code>block_public_policy</code> to <code>True</code> to block new attempts to set public policies. </li>\n  <li> <code>restrict_public_buckets</code> to <code>True</code> to restrict existing public policies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>By default, when not set, the <code>block_public_access</code> is fully deactivated (nothing is blocked):</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\"        # Sensitive\n)\n</pre>\n<p>This <code>block_public_access</code> allows public ACL to be set:</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\",\n    block_public_access=s3.BlockPublicAccess(\n        block_public_acls=False,       # Sensitive\n        ignore_public_acls=True,\n        block_public_policy=True,\n        restrict_public_buckets=True\n    )\n)\n</pre>\n<p>The attribute <code>BLOCK_ACLS</code> only blocks and ignores public ACLs:</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\",\n    block_public_access=s3.BlockPublicAccess.BLOCK_ACLS     # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>This <code>block_public_access</code> blocks public ACLs and policies, ignores existing public ACLs and restricts existing public policies:</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\",\n    block_public_access=s3.BlockPublicAccess.BLOCK_ALL # Compliant\n)\n</pre>\n<p>A similar configuration to the one above can obtained by setting all parameters of the <code>block_public_access</code></p>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    block_public_access=s3.BlockPublicAccess(       # Compliant\n        block_public_acls=True,\n        ignore_public_acls=True,\n        block_public_policy=True,\n        restrict_public_buckets=True\n    )\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html\">AWS Documentation</a> - Blocking public\n  access to your Amazon S3 storage </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222620\">Application Security and\n  Development: V-222620</a> - Application web servers must be on a separate network segment from the application and database servers. </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_s3/Bucket.html\">AWS CDK version 2</a> - Bucket </li>\n</ul>\n\n"
        },
        {
          "id": "S5332",
          "name": "Using clear-text protocols is security-sensitive",
          "description": "<p>Clear-text protocols such as <code>ftp</code>, <code>telnet</code>, or <code>http</code> lack encryption of transported data, as well as the\ncapability to build an authenticated connection. It means that an attacker able to sniff traffic from the network can read, modify, or corrupt the\ntransported content. These protocols are not secure as they expose applications to an extensive range of risks:</p>\n<ul>\n  <li> sensitive data exposure </li>\n  <li> traffic redirected to a malicious endpoint </li>\n  <li> malware-infected software update or installer </li>\n  <li> execution of client-side code </li>\n  <li> corruption of critical information </li>\n</ul>\n<p>Even in the context of isolated networks like offline environments or segmented cloud environments, the insider threat exists. Thus, attacks\ninvolving communications being sniffed or tampered with can still happen.</p>\n<p>For example, attackers could successfully compromise prior security layers by:</p>\n<ul>\n  <li> bypassing isolation mechanisms </li>\n  <li> compromising a component of the network </li>\n  <li> getting the credentials of an internal IAM account (either from a service account or an actual person) </li>\n</ul>\n<p>In such cases, encrypting communications would decrease the chances of attackers to successfully leak data or steal credentials from other network\ncomponents. By layering various security practices (segmentation and encryption, for example), the application will follow the\n<em>defense-in-depth</em> principle.</p>\n<p>Note that using the <code>http</code> protocol is being deprecated by <a\nhref=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\">major web browsers</a>.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-6169\">CVE-2019-6169</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-12327\">CVE-2019-12327</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-11065\">CVE-2019-11065</a> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Application data needs to be protected against falsifications or leaks when transiting over the network. </li>\n  <li> Application data transits over an untrusted network. </li>\n  <li> Compliance rules require the service to encrypt data in transit. </li>\n  <li> Your application renders web pages with a relaxed mixed content policy. </li>\n  <li> OS-level protections against clear-text traffic are deactivated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Make application data transit over a secure, authenticated and encrypted protocol like TLS or SSH. Here are a few alternatives to the most\n  common clear-text protocols:\n    <ul>\n      <li> Use <code>ssh</code> as an alternative to <code>telnet</code>. </li>\n      <li> Use <code>sftp</code>, <code>scp</code>, or <code>ftps</code> instead of <code>ftp</code>. </li>\n      <li> Use <code>https</code> instead of <code>http</code>. </li>\n      <li> Use <code>SMTP</code> over <code>SSL/TLS</code> or <code>SMTP</code> with <code>STARTTLS</code> instead of clear-text SMTP. </li>\n    </ul>  </li>\n  <li> Enable encryption of cloud components communications whenever it is possible. </li>\n  <li> Configure your application to block mixed content when rendering web pages. </li>\n  <li> If available, enforce OS-level deactivation of all clear-text traffic. </li>\n</ul>\n<p>It is recommended to secure all transport channels, even on local networks, as it can take a single non-secure connection to compromise an entire\napplication or system.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nurl = \"http://example.com\" # Sensitive\nurl = \"ftp://anonymous@example.com\" # Sensitive\nurl = \"telnet://anonymous@example.com\" # Sensitive\n\nimport telnetlib\ncnx = telnetlib.Telnet(\"towel.blinkenlights.nl\") # Sensitive\n\nimport ftplib\ncnx = ftplib.FTP(\"ftp.example.com\") # Sensitive\n\nimport smtplib\nsmtp = smtplib.SMTP(\"smtp.example.com\", port=587) # Sensitive\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nlb = elbv2.ApplicationLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-default\",\n    port=80, # Sensitive\n    open=True\n)\nlb.add_listener(\n    \"Listener-http-explicit\",\n    protocol=elbv2.ApplicationProtocol.HTTP, # Sensitive\n    port=8080,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationListener.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.ApplicationListener(\n    self,\n    \"listener-http-explicit-const\",\n    load_balancer=lb,\n    protocol=elbv2.ApplicationProtocol.HTTP, # Sensitive\n    port=8081,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\nlb = elbv2.NetworkLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener( # Sensitive\n    \"Listener-default\",\n    port=1234\n)\nlb.add_listener(\n    \"Listener-TCP-explicit\",\n    protocol=elbv2.Protocol.TCP, # Sensitive\n    port=1337\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkListener.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.NetworkListener(\n    self,\n    \"Listener-TCP-explicit\",\n    protocol=elbv2.Protocol.TCP, # Sensitive\n    port=1338,\n    load_balancer=lb\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/CfnListener.html\">aws_cdk.aws_elasticloadbalancingv2.CfnListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-http\",\n    default_actions=[application_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"HTTP\", # Sensitive\n    port=80\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-tcp\",\n    default_actions=[network_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"TCP\", # Sensitive\n    port=1000\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancerListener.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancerListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancerListener(\n    external_port=10000,\n    external_protocol=elb.LoadBalancingProtocol.TCP, # Sensitive\n    internal_port=10000\n)\n\nelb.LoadBalancerListener(\n    external_port=10080,\n    external_protocol=elb.LoadBalancingProtocol.HTTP, # Sensitive\n    internal_port=10080\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/CfnLoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.CfnLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-tcp\",\n    listeners=[\n        elb.CfnLoadBalancer.ListenersProperty(\n            instance_port=\"10000\",\n            load_balancer_port=\"10000\",\n            protocol=\"tcp\" # Sensitive\n        )\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-http-dict\",\n    listeners=[\n        {\n            \"instancePort\":\"10000\",\n            \"loadBalancerPort\":\"10000\",\n            \"protocol\":\"http\" # Sensitive\n        }\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancer(\n    self,\n    \"elb-tcp-dict\",\n    vpc=vpc,\n    listeners=[\n        {\n            \"externalPort\":10000,\n            \"externalProtocol\":elb.LoadBalancingProtocol.TCP, # Sensitive\n            \"internalPort\":10000\n        }\n    ]\n)\n\nloadBalancer.add_listener(\n    external_port=10081,\n    external_protocol=elb.LoadBalancingProtocol.HTTP, # Sensitive\n    internal_port=10081\n)\nloadBalancer.add_listener(\n    external_port=10001,\n    external_protocol=elb.LoadBalancingProtocol.TCP, # Sensitive\n    internal_port=10001\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticache/CfnReplicationGroup.html\">aws_cdk.aws_elasticache.CfnReplicationGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticache as elasticache\n)\n\nelasticache.CfnReplicationGroup(\n    self,\n    \"unencrypted-explicit\",\n    replication_group_description=\"a replication group\",\n    automatic_failover_enabled=False,\n    transit_encryption_enabled=False, # Sensitive\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n\nelasticache.CfnReplicationGroup( # Sensitive, encryption is disabled by default\n    self,\n    \"unencrypted-implicit\",\n    replication_group_description=\"a test replication group\",\n    automatic_failover_enabled=False,\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/CfnStream.html\">aws_cdk.aws_kinesis.CfnStream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nkinesis.CfnStream( # Sensitive, encryption is disabled by default for CfnStreams\n    self,\n    \"cfnstream-implicit-unencrytped\",\n    shard_count=1\n)\n\nkinesis.CfnStream(self,\n    \"cfnstream-explicit-unencrytped\",\n    shard_count=1,\n    stream_encryption=None # Sensitive\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/Stream.html\">aws_cdk.aws_kinesis.Stream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nstream = kinesis.Stream(self,\n    \"stream-explicit-unencrypted\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.UNENCRYPTED # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nurl = \"https://example.com\"\nurl = \"sftp://anonymous@example.com\"\nurl = \"ssh://anonymous@example.com\"\n\nimport ftplib\ncnx = ftplib.FTP_TLS(\"ftp.example.com\")\n\nimport smtplib\nsmtp = smtplib.SMTP(\"smtp.example.com\", port=587)\nsmtp.starttls(context=context)\n\nsmtp_ssl = smtplib.SMTP_SSL(\"smtp.gmail.com\", port=465)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nlb = elbv2.ApplicationLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-https-explicit\",\n    protocol=elbv2.ApplicationProtocol.HTTPS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443,\n    open=True\n)\n\nlb.add_listener(\n    \"Listener-https-implicit\",\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=8443,\n    open=True\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationListener.html\">\naws_cdk.aws_elasticloadbalancingv2.ApplicationListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.ApplicationListener(\n    self,\n    \"listener-https-explicit-const\",\n    load_balancer=lb,\n    protocol=elbv2.ApplicationProtocol.HTTPS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=444,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\nlb = elbv2.NetworkLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-TLS-explicit\",\n    protocol=elbv2.Protocol.TLS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443\n)\nlb.add_listener(\n    \"Listener-TLS-implicit\",\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=1024\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkListener.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.NetworkListener(\n    self,\n    \"Listener-TLS-explicit\",\n    protocol=elbv2.Protocol.TLS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443,\n    load_balancer=lb\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/CfnListener.html\">aws_cdk.aws_elasticloadbalancingv2.CfnListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-https\",\n    default_actions=[application_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"HTTPS\",\n    port=443,\n    certificates=[elbv2.CfnListener.CertificateProperty(\n        certificate_arn=\"certificateARN\"\n    )]\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-tls\",\n    default_actions=[network_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"TLS\",\n    port=1001,\n    certificates=[elbv2.CfnListener.CertificateProperty(\n        certificate_arn=\"certificateARN\"\n    )]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancerListener.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancerListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancerListener(\n    external_port=10043,\n    external_protocol=elb.LoadBalancingProtocol.SSL,\n    internal_port=10043,\n    ssl_certificate_arn=\"certificateARN\"\n)\n\nelb.LoadBalancerListener(\n    external_port=10443,\n    external_protocol=elb.LoadBalancingProtocol.HTTPS,\n    internal_port=10443,\n    ssl_certificate_arn=\"certificateARN\"\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/CfnLoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.CfnLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-ssl\",\n    listeners=[\n        elb.CfnLoadBalancer.ListenersProperty(\n            instance_port=\"10043\",\n            load_balancer_port=\"10043\",\n            protocol=\"ssl\",\n            ssl_certificate_id=CERTIFICATE_ARN\n        )\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-https-dict\",\n    listeners=[\n        {\n            \"instancePort\":\"10443\",\n            \"loadBalancerPort\":\"10443\",\n            \"protocol\":\"https\",\n            \"sslCertificateId\":CERTIFICATE_ARN\n        }\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancer(\n    self,\n    \"elb-ssl\",\n    vpc=vpc,\n    listeners=[\n        {\n            \"externalPort\":10044,\n            \"externalProtocol\":elb.LoadBalancingProtocol.SSL,\n            \"internalPort\":10044,\n            \"sslCertificateArn\":\"certificateARN\"\n        },\n        {\n            \"externalPort\":10444,\n            \"externalProtocol\":elb.LoadBalancingProtocol.HTTPS,\n            \"internalPort\":10444,\n            \"sslCertificateArn\":\"certificateARN\"\n        }\n    ]\n)\n\nloadBalancer = elb.LoadBalancer(\n        self,\n        \"elb-multi-listener\",\n        vpc=vpc\n)\nloadBalancer.add_listener(\n    external_port=10045,\n    external_protocol=elb.LoadBalancingProtocol.SSL,\n    internal_port=10045,\n    ssl_certificate_arn=\"certificateARN\"\n)\nloadBalancer.add_listener(\n    external_port=10445,\n    external_protocol=elb.LoadBalancingProtocol.HTTPS,\n    internal_port=10445,\n    ssl_certificate_arn=\"certificateARN\"\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticache/CfnReplicationGroup.html\">aws_cdk.aws_elasticache.CfnReplicationGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticache as elasticache\n)\n\nelasticache.CfnReplicationGroup(\n    self,\n    \"encrypted-explicit\",\n    replication_group_description=\"a test replication group\",\n    automatic_failover_enabled=False,\n    transit_encryption_enabled=True,\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/CfnStream.html\">aws_cdk.aws_kinesis.CfnStream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nkinesis.CfnStream(\n    self,\n    \"cfnstream-explicit-encrytped\",\n    shard_count=1,\n    stream_encryption=kinesis.CfnStream.StreamEncryptionProperty(\n        encryption_type=\"KMS\",\n        key_id=\"alias/aws/kinesis\"\n    )\n)\n\nstream = kinesis.CfnStream(\n    self,\n    \"cfnstream-explicit-encrytped-dict\",\n    shard_count=1,\n    stream_encryption={\n        \"encryptionType\": \"KMS\",\n        \"keyId\": \"alias/aws/kinesis\"\n    }\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/Stream.html\">aws_cdk.aws_kinesis.Stream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n    aws_kms as kms\n)\n\nstream = kinesis.Stream( # Encryption is enabled by default for Streams\n    self,\n    \"stream-implicit-encrypted\",\n    shard_count=1\n)\n\nstream = kinesis.Stream(\n    self,\n    \"stream-explicit-encrypted-managed\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.MANAGED\n)\n\nkey = kms.Key(self, \"managed_key\")\nstream = kinesis.Stream(\n    self,\n    \"stream-explicit-encrypted-selfmanaged\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.KMS,\n    encryption_key=key\n)\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or <code>localhost</code>. </li>\n</ul>\n<h2>See</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\">Listeners for\n  your Application Load Balancers</a> </li>\n  <li> AWS Documentation - <a\n  href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesis-stream-streamencryption.html\">Stream Encryption</a>\n  </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Google - <a href=\"https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html\">Moving towards more secure web</a> </li>\n  <li> Mozilla - <a href=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/\">Deprecating non secure http</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-NETWORK/\">Mobile AppSec Verification Standard - Network Communication Requirements</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">Mobile Top 10 2016 Category M3 - Insecure\n  Communication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/200\">CWE-200 - Exposure of Sensitive Information to an Unauthorized Actor</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/319\">CWE-319 - Cleartext Transmission of Sensitive Information</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222397\">Application Security and\n  Development: V-222397</a> - The application must implement cryptographic mechanisms to protect the integrity of remote access sessions. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222534\">Application Security and\n  Development: V-222534</a> - Service-Oriented Applications handling non-releasable data must authenticate endpoint devices via mutual SSL/TLS. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222562\">Application Security and\n  Development: V-222562</a> - Applications used for non-local maintenance must implement cryptographic mechanisms to protect the integrity of\n  maintenance and diagnostic communications. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222563\">Application Security and\n  Development: V-222563</a> - Applications used for non-local maintenance must implement cryptographic mechanisms to protect the confidentiality of\n  maintenance and diagnostic communications. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222577\">Application Security and\n  Development: V-222577</a> - The application must not expose session IDs. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222596\">Application Security and\n  Development: V-222596</a> - The application must protect the confidentiality and integrity of transmitted information. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222597\">Application Security and\n  Development: V-222597</a> - The application must implement cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect\n  changes to information during transmission. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222598\">Application Security and\n  Development: V-222598</a> - The application must maintain the confidentiality and integrity of information during preparation for transmission.\n  </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222599\">Application Security and\n  Development: V-222599</a> - The application must maintain the confidentiality and integrity of information during reception. </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>Clear-text protocols such as <code>ftp</code>, <code>telnet</code>, or <code>http</code> lack encryption of transported data, as well as the\ncapability to build an authenticated connection. It means that an attacker able to sniff traffic from the network can read, modify, or corrupt the\ntransported content. These protocols are not secure as they expose applications to an extensive range of risks:</p>\n<ul>\n  <li> sensitive data exposure </li>\n  <li> traffic redirected to a malicious endpoint </li>\n  <li> malware-infected software update or installer </li>\n  <li> execution of client-side code </li>\n  <li> corruption of critical information </li>\n</ul>\n<p>Even in the context of isolated networks like offline environments or segmented cloud environments, the insider threat exists. Thus, attacks\ninvolving communications being sniffed or tampered with can still happen.</p>\n<p>For example, attackers could successfully compromise prior security layers by:</p>\n<ul>\n  <li> bypassing isolation mechanisms </li>\n  <li> compromising a component of the network </li>\n  <li> getting the credentials of an internal IAM account (either from a service account or an actual person) </li>\n</ul>\n<p>In such cases, encrypting communications would decrease the chances of attackers to successfully leak data or steal credentials from other network\ncomponents. By layering various security practices (segmentation and encryption, for example), the application will follow the\n<em>defense-in-depth</em> principle.</p>\n<p>Note that using the <code>http</code> protocol is being deprecated by <a\nhref=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\">major web browsers</a>.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-6169\">CVE-2019-6169</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-12327\">CVE-2019-12327</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-11065\">CVE-2019-11065</a> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Application data needs to be protected against falsifications or leaks when transiting over the network. </li>\n  <li> Application data transits over an untrusted network. </li>\n  <li> Compliance rules require the service to encrypt data in transit. </li>\n  <li> Your application renders web pages with a relaxed mixed content policy. </li>\n  <li> OS-level protections against clear-text traffic are deactivated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Make application data transit over a secure, authenticated and encrypted protocol like TLS or SSH. Here are a few alternatives to the most\n  common clear-text protocols:\n    <ul>\n      <li> Use <code>ssh</code> as an alternative to <code>telnet</code>. </li>\n      <li> Use <code>sftp</code>, <code>scp</code>, or <code>ftps</code> instead of <code>ftp</code>. </li>\n      <li> Use <code>https</code> instead of <code>http</code>. </li>\n      <li> Use <code>SMTP</code> over <code>SSL/TLS</code> or <code>SMTP</code> with <code>STARTTLS</code> instead of clear-text SMTP. </li>\n    </ul>  </li>\n  <li> Enable encryption of cloud components communications whenever it is possible. </li>\n  <li> Configure your application to block mixed content when rendering web pages. </li>\n  <li> If available, enforce OS-level deactivation of all clear-text traffic. </li>\n</ul>\n<p>It is recommended to secure all transport channels, even on local networks, as it can take a single non-secure connection to compromise an entire\napplication or system.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nurl = \"http://example.com\" # Sensitive\nurl = \"ftp://anonymous@example.com\" # Sensitive\nurl = \"telnet://anonymous@example.com\" # Sensitive\n\nimport telnetlib\ncnx = telnetlib.Telnet(\"towel.blinkenlights.nl\") # Sensitive\n\nimport ftplib\ncnx = ftplib.FTP(\"ftp.example.com\") # Sensitive\n\nimport smtplib\nsmtp = smtplib.SMTP(\"smtp.example.com\", port=587) # Sensitive\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nlb = elbv2.ApplicationLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-default\",\n    port=80, # Sensitive\n    open=True\n)\nlb.add_listener(\n    \"Listener-http-explicit\",\n    protocol=elbv2.ApplicationProtocol.HTTP, # Sensitive\n    port=8080,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationListener.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.ApplicationListener(\n    self,\n    \"listener-http-explicit-const\",\n    load_balancer=lb,\n    protocol=elbv2.ApplicationProtocol.HTTP, # Sensitive\n    port=8081,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\nlb = elbv2.NetworkLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener( # Sensitive\n    \"Listener-default\",\n    port=1234\n)\nlb.add_listener(\n    \"Listener-TCP-explicit\",\n    protocol=elbv2.Protocol.TCP, # Sensitive\n    port=1337\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkListener.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.NetworkListener(\n    self,\n    \"Listener-TCP-explicit\",\n    protocol=elbv2.Protocol.TCP, # Sensitive\n    port=1338,\n    load_balancer=lb\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/CfnListener.html\">aws_cdk.aws_elasticloadbalancingv2.CfnListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-http\",\n    default_actions=[application_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"HTTP\", # Sensitive\n    port=80\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-tcp\",\n    default_actions=[network_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"TCP\", # Sensitive\n    port=1000\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancerListener.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancerListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancerListener(\n    external_port=10000,\n    external_protocol=elb.LoadBalancingProtocol.TCP, # Sensitive\n    internal_port=10000\n)\n\nelb.LoadBalancerListener(\n    external_port=10080,\n    external_protocol=elb.LoadBalancingProtocol.HTTP, # Sensitive\n    internal_port=10080\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/CfnLoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.CfnLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-tcp\",\n    listeners=[\n        elb.CfnLoadBalancer.ListenersProperty(\n            instance_port=\"10000\",\n            load_balancer_port=\"10000\",\n            protocol=\"tcp\" # Sensitive\n        )\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-http-dict\",\n    listeners=[\n        {\n            \"instancePort\":\"10000\",\n            \"loadBalancerPort\":\"10000\",\n            \"protocol\":\"http\" # Sensitive\n        }\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancer(\n    self,\n    \"elb-tcp-dict\",\n    vpc=vpc,\n    listeners=[\n        {\n            \"externalPort\":10000,\n            \"externalProtocol\":elb.LoadBalancingProtocol.TCP, # Sensitive\n            \"internalPort\":10000\n        }\n    ]\n)\n\nloadBalancer.add_listener(\n    external_port=10081,\n    external_protocol=elb.LoadBalancingProtocol.HTTP, # Sensitive\n    internal_port=10081\n)\nloadBalancer.add_listener(\n    external_port=10001,\n    external_protocol=elb.LoadBalancingProtocol.TCP, # Sensitive\n    internal_port=10001\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticache/CfnReplicationGroup.html\">aws_cdk.aws_elasticache.CfnReplicationGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticache as elasticache\n)\n\nelasticache.CfnReplicationGroup(\n    self,\n    \"unencrypted-explicit\",\n    replication_group_description=\"a replication group\",\n    automatic_failover_enabled=False,\n    transit_encryption_enabled=False, # Sensitive\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n\nelasticache.CfnReplicationGroup( # Sensitive, encryption is disabled by default\n    self,\n    \"unencrypted-implicit\",\n    replication_group_description=\"a test replication group\",\n    automatic_failover_enabled=False,\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/CfnStream.html\">aws_cdk.aws_kinesis.CfnStream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nkinesis.CfnStream( # Sensitive, encryption is disabled by default for CfnStreams\n    self,\n    \"cfnstream-implicit-unencrytped\",\n    shard_count=1\n)\n\nkinesis.CfnStream(self,\n    \"cfnstream-explicit-unencrytped\",\n    shard_count=1,\n    stream_encryption=None # Sensitive\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/Stream.html\">aws_cdk.aws_kinesis.Stream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nstream = kinesis.Stream(self,\n    \"stream-explicit-unencrypted\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.UNENCRYPTED # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nurl = \"https://example.com\"\nurl = \"sftp://anonymous@example.com\"\nurl = \"ssh://anonymous@example.com\"\n\nimport ftplib\ncnx = ftplib.FTP_TLS(\"ftp.example.com\")\n\nimport smtplib\nsmtp = smtplib.SMTP(\"smtp.example.com\", port=587)\nsmtp.starttls(context=context)\n\nsmtp_ssl = smtplib.SMTP_SSL(\"smtp.gmail.com\", port=465)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nlb = elbv2.ApplicationLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-https-explicit\",\n    protocol=elbv2.ApplicationProtocol.HTTPS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443,\n    open=True\n)\n\nlb.add_listener(\n    \"Listener-https-implicit\",\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=8443,\n    open=True\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationListener.html\">\naws_cdk.aws_elasticloadbalancingv2.ApplicationListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.ApplicationListener(\n    self,\n    \"listener-https-explicit-const\",\n    load_balancer=lb,\n    protocol=elbv2.ApplicationProtocol.HTTPS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=444,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\nlb = elbv2.NetworkLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-TLS-explicit\",\n    protocol=elbv2.Protocol.TLS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443\n)\nlb.add_listener(\n    \"Listener-TLS-implicit\",\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=1024\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkListener.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.NetworkListener(\n    self,\n    \"Listener-TLS-explicit\",\n    protocol=elbv2.Protocol.TLS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443,\n    load_balancer=lb\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/CfnListener.html\">aws_cdk.aws_elasticloadbalancingv2.CfnListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-https\",\n    default_actions=[application_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"HTTPS\",\n    port=443,\n    certificates=[elbv2.CfnListener.CertificateProperty(\n        certificate_arn=\"certificateARN\"\n    )]\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-tls\",\n    default_actions=[network_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"TLS\",\n    port=1001,\n    certificates=[elbv2.CfnListener.CertificateProperty(\n        certificate_arn=\"certificateARN\"\n    )]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancerListener.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancerListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancerListener(\n    external_port=10043,\n    external_protocol=elb.LoadBalancingProtocol.SSL,\n    internal_port=10043,\n    ssl_certificate_arn=\"certificateARN\"\n)\n\nelb.LoadBalancerListener(\n    external_port=10443,\n    external_protocol=elb.LoadBalancingProtocol.HTTPS,\n    internal_port=10443,\n    ssl_certificate_arn=\"certificateARN\"\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/CfnLoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.CfnLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-ssl\",\n    listeners=[\n        elb.CfnLoadBalancer.ListenersProperty(\n            instance_port=\"10043\",\n            load_balancer_port=\"10043\",\n            protocol=\"ssl\",\n            ssl_certificate_id=CERTIFICATE_ARN\n        )\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-https-dict\",\n    listeners=[\n        {\n            \"instancePort\":\"10443\",\n            \"loadBalancerPort\":\"10443\",\n            \"protocol\":\"https\",\n            \"sslCertificateId\":CERTIFICATE_ARN\n        }\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancer(\n    self,\n    \"elb-ssl\",\n    vpc=vpc,\n    listeners=[\n        {\n            \"externalPort\":10044,\n            \"externalProtocol\":elb.LoadBalancingProtocol.SSL,\n            \"internalPort\":10044,\n            \"sslCertificateArn\":\"certificateARN\"\n        },\n        {\n            \"externalPort\":10444,\n            \"externalProtocol\":elb.LoadBalancingProtocol.HTTPS,\n            \"internalPort\":10444,\n            \"sslCertificateArn\":\"certificateARN\"\n        }\n    ]\n)\n\nloadBalancer = elb.LoadBalancer(\n        self,\n        \"elb-multi-listener\",\n        vpc=vpc\n)\nloadBalancer.add_listener(\n    external_port=10045,\n    external_protocol=elb.LoadBalancingProtocol.SSL,\n    internal_port=10045,\n    ssl_certificate_arn=\"certificateARN\"\n)\nloadBalancer.add_listener(\n    external_port=10445,\n    external_protocol=elb.LoadBalancingProtocol.HTTPS,\n    internal_port=10445,\n    ssl_certificate_arn=\"certificateARN\"\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticache/CfnReplicationGroup.html\">aws_cdk.aws_elasticache.CfnReplicationGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticache as elasticache\n)\n\nelasticache.CfnReplicationGroup(\n    self,\n    \"encrypted-explicit\",\n    replication_group_description=\"a test replication group\",\n    automatic_failover_enabled=False,\n    transit_encryption_enabled=True,\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/CfnStream.html\">aws_cdk.aws_kinesis.CfnStream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nkinesis.CfnStream(\n    self,\n    \"cfnstream-explicit-encrytped\",\n    shard_count=1,\n    stream_encryption=kinesis.CfnStream.StreamEncryptionProperty(\n        encryption_type=\"KMS\",\n        key_id=\"alias/aws/kinesis\"\n    )\n)\n\nstream = kinesis.CfnStream(\n    self,\n    \"cfnstream-explicit-encrytped-dict\",\n    shard_count=1,\n    stream_encryption={\n        \"encryptionType\": \"KMS\",\n        \"keyId\": \"alias/aws/kinesis\"\n    }\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/Stream.html\">aws_cdk.aws_kinesis.Stream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n    aws_kms as kms\n)\n\nstream = kinesis.Stream( # Encryption is enabled by default for Streams\n    self,\n    \"stream-implicit-encrypted\",\n    shard_count=1\n)\n\nstream = kinesis.Stream(\n    self,\n    \"stream-explicit-encrypted-managed\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.MANAGED\n)\n\nkey = kms.Key(self, \"managed_key\")\nstream = kinesis.Stream(\n    self,\n    \"stream-explicit-encrypted-selfmanaged\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.KMS,\n    encryption_key=key\n)\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or <code>localhost</code>. </li>\n</ul>\n<h2>See</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\">Listeners for\n  your Application Load Balancers</a> </li>\n  <li> AWS Documentation - <a\n  href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesis-stream-streamencryption.html\">Stream Encryption</a>\n  </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Google - <a href=\"https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html\">Moving towards more secure web</a> </li>\n  <li> Mozilla - <a href=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/\">Deprecating non secure http</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-NETWORK/\">Mobile AppSec Verification Standard - Network Communication Requirements</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">Mobile Top 10 2016 Category M3 - Insecure\n  Communication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/200\">CWE-200 - Exposure of Sensitive Information to an Unauthorized Actor</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/319\">CWE-319 - Cleartext Transmission of Sensitive Information</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222397\">Application Security and\n  Development: V-222397</a> - The application must implement cryptographic mechanisms to protect the integrity of remote access sessions. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222534\">Application Security and\n  Development: V-222534</a> - Service-Oriented Applications handling non-releasable data must authenticate endpoint devices via mutual SSL/TLS. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222562\">Application Security and\n  Development: V-222562</a> - Applications used for non-local maintenance must implement cryptographic mechanisms to protect the integrity of\n  maintenance and diagnostic communications. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222563\">Application Security and\n  Development: V-222563</a> - Applications used for non-local maintenance must implement cryptographic mechanisms to protect the confidentiality of\n  maintenance and diagnostic communications. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222577\">Application Security and\n  Development: V-222577</a> - The application must not expose session IDs. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222596\">Application Security and\n  Development: V-222596</a> - The application must protect the confidentiality and integrity of transmitted information. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222597\">Application Security and\n  Development: V-222597</a> - The application must implement cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect\n  changes to information during transmission. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222598\">Application Security and\n  Development: V-222598</a> - The application must maintain the confidentiality and integrity of information during preparation for transmission.\n  </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222599\">Application Security and\n  Development: V-222599</a> - The application must maintain the confidentiality and integrity of information during reception. </li>\n</ul>\n\n"
        },
        {
          "id": "S5797",
          "name": "Constants should not be used as conditions",
          "description": "<p>This rule raises an issue when a constant expression is used as a condition in an <code>if</code>, <code>elif</code>, a conditional expression or\nother boolean expressions.</p>\n<h2>Why is this an issue?</h2>\n<p>When a constant is used as a condition, either it has no effect on the execution flow and it can be removed, or some code will never be executed\nand it is a bug.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    a = True\n    if a: # Noncompliant: the condition is always true\n      return 1\n    else:\n      return 2\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    a = bar()\n    if a:\n      return 1\n    else:\n      return 2\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://www.python.org/dev/peps/pep-0285/\">PEP 285 - Adding a bool type</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/stdtypes.html#truth-value-testing\">Python documentation - Truth Value\n  Testing</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when a constant expression is used as a condition in an <code>if</code>, <code>elif</code>, a conditional expression or\nother boolean expressions.</p>\n<h2>Why is this an issue?</h2>\n<p>When a constant is used as a condition, either it has no effect on the execution flow and it can be removed, or some code will never be executed\nand it is a bug.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    a = True\n    if a: # Noncompliant: the condition is always true\n      return 1\n    else:\n      return 2\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    a = bar()\n    if a:\n      return 1\n    else:\n      return 2\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://www.python.org/dev/peps/pep-0285/\">PEP 285 - Adding a bool type</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/stdtypes.html#truth-value-testing\">Python documentation - Truth Value\n  Testing</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5754",
          "name": "\"SystemExit\" should be re-raised",
          "description": "<p>This rule raises an issue when a bare <code>except:</code>, an <code>except BaseException</code> or an <code>except SystemExit</code> block does\nnot re-raise the exception caught.</p>\n<h2>Why is this an issue?</h2>\n<p>A <a href=\"https://docs.python.org/3/library/exceptions.html#SystemExit\"><code>SystemExit</code></a> exception&nbsp;is raised when <a\nhref=\"https://docs.python.org/3/library/sys.html#sys.exit\"><code>sys.exit()</code></a> is called. This exception is used to signal the interpreter to\nexit. The exception is expected to propagate up until the program stops. It is possible to catch this exception in order to perform, for example,\nclean-up tasks. It should, however, be raised again to allow the interpreter to exit as expected. Not re-raising such exception could lead to\nundesired behaviour.</p>\n<p>A <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-try-statement\">bare <code>except:</code> statement</a>, i.e. an\n<code>except</code> block without any exception class, is equivalent to <a\nhref=\"https://docs.python.org/3/library/exceptions.html#BaseException\"><code>except BaseException</code></a>. Both statements will catch every\nexceptions, including <code>SystemExit</code>. It is recommended to catch instead a more specific exception. If it is not possible, the exception\nshould be raised again.</p>\n<p>It is also a good idea to re-raise the <a\nhref=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\"><code>KeyboardInterrupt</code></a> exception. Similarly to\n<code>SystemExit</code>,<code>KeyboardInterrupt</code> is used to signal the interpreter to exit. Not re-raising such exception could also lead to\nundesired behaviour.</p>\n<h2>How to fix it</h2>\n<p>Re-raise <code>SystemExit</code>, <code>BaseException</code> and any exceptions caught in a bare <code>except</code> clause.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ntry:\n    ...\nexcept SystemExit:  # Noncompliant: the SystemExit exception is not re-raised.\n    pass\n\ntry:\n    ...\nexcept BaseException:  # Noncompliant: BaseExceptions encompass SystemExit exceptions and should be re-raised.\n    pass\n\ntry:\n    ...\nexcept:  # Noncompliant: exceptions caught by this statement should be re-raised or a more specific exception should be caught.\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntry:\n    ...\nexcept SystemExit as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept BaseException as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept FileNotFoundError:\n    ... # Handle a more specific exception\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP 352 - <a href=\"https://www.python.org/dev/peps/pep-0352/#id5\">Required Superclass for Exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html\">Built-in exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-try-statement\">The <code>try</code> statement</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/391\">CWE-391, Unchecked Error Condition</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when a bare <code>except:</code>, an <code>except BaseException</code> or an <code>except SystemExit</code> block does\nnot re-raise the exception caught.</p>\n<h2>Why is this an issue?</h2>\n<p>A <a href=\"https://docs.python.org/3/library/exceptions.html#SystemExit\"><code>SystemExit</code></a> exception&nbsp;is raised when <a\nhref=\"https://docs.python.org/3/library/sys.html#sys.exit\"><code>sys.exit()</code></a> is called. This exception is used to signal the interpreter to\nexit. The exception is expected to propagate up until the program stops. It is possible to catch this exception in order to perform, for example,\nclean-up tasks. It should, however, be raised again to allow the interpreter to exit as expected. Not re-raising such exception could lead to\nundesired behaviour.</p>\n<p>A <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-try-statement\">bare <code>except:</code> statement</a>, i.e. an\n<code>except</code> block without any exception class, is equivalent to <a\nhref=\"https://docs.python.org/3/library/exceptions.html#BaseException\"><code>except BaseException</code></a>. Both statements will catch every\nexceptions, including <code>SystemExit</code>. It is recommended to catch instead a more specific exception. If it is not possible, the exception\nshould be raised again.</p>\n<p>It is also a good idea to re-raise the <a\nhref=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\"><code>KeyboardInterrupt</code></a> exception. Similarly to\n<code>SystemExit</code>,<code>KeyboardInterrupt</code> is used to signal the interpreter to exit. Not re-raising such exception could also lead to\nundesired behaviour.</p>\n<h2>How to fix it</h2>\n<p>Re-raise <code>SystemExit</code>, <code>BaseException</code> and any exceptions caught in a bare <code>except</code> clause.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ntry:\n    ...\nexcept SystemExit:  # Noncompliant: the SystemExit exception is not re-raised.\n    pass\n\ntry:\n    ...\nexcept BaseException:  # Noncompliant: BaseExceptions encompass SystemExit exceptions and should be re-raised.\n    pass\n\ntry:\n    ...\nexcept:  # Noncompliant: exceptions caught by this statement should be re-raised or a more specific exception should be caught.\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntry:\n    ...\nexcept SystemExit as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept BaseException as e:\n    ...\n    raise e\n\ntry:\n    ...\nexcept FileNotFoundError:\n    ... # Handle a more specific exception\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP 352 - <a href=\"https://www.python.org/dev/peps/pep-0352/#id5\">Required Superclass for Exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html\">Built-in exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-try-statement\">The <code>try</code> statement</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/391\">CWE-391, Unchecked Error Condition</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5747",
          "name": "Bare \"raise\" statements should only be used in \"except\" blocks",
          "description": "<p>This rule raises an issue when a bare <code>raise</code> statement is not in an <code>except</code> or <code>finally</code> block.</p>\n<h2>Why is this an issue?</h2>\n<p>A bare <code>raise</code> statement, i.e. a <code>raise</code> with no exception provided, will re-raise the last active exception in the current\nscope:</p>\n<pre>\ndef foo():\n    try:\n        ...\n    except ValueError as e:\n        raise # this will re-raise \"e\"\n</pre>\n<p>If the <code>raise</code> statement is not in an <code>except</code> or <code>finally</code> block, no exception is active and a\n<code>RuntimeError</code> is raised instead.</p>\n<p>If the bare <code>raise</code> statement is in a function called in an <code>except</code> block, the exception caught by the <code>except</code>\nwill be re-raised. However, this behavior is not reliable as nothing prevents a developer from calling the function from a different context.</p>\n<p>Overall, having bare <code>raise</code> statements outside of <code>except</code> blocks is discouraged as it is hard to understand and\nmaintain.</p>\n<h3>Notes</h3>\n<p>In a <code>finally</code> block, an exception is still active only when it hasn\u00e2\u20ac\u2122t been caught in a previous <code>except</code> clause or if it has\nbeen raised in an <code>except</code> block. In both cases, it is better to let the exception propagate automatically than to re-raise it. This\npattern is covered by rule {rule:python:S5704}.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to specify which exception needs to be raised when outside of an <code>except</code> block.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nraise  # Noncompliant: no active exception\n\ndef foo():\n    raise  # Noncompliant: no active exception\n    try:\n        raise  # Noncompliant: no active exception\n    except ValueError:\n        handle_error()\n\ndef handle_error():\n    raise  # Noncompliant: this is not reliable\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nraise ValueError()\n\ndef foo():\n    raise ValueError()\n    try:\n        raise ValueError()\n    except ValueError:\n        raise\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/simple_stmts.html#raise\">The <code>raise</code> statement</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when a bare <code>raise</code> statement is not in an <code>except</code> or <code>finally</code> block.</p>\n<h2>Why is this an issue?</h2>\n<p>A bare <code>raise</code> statement, i.e. a <code>raise</code> with no exception provided, will re-raise the last active exception in the current\nscope:</p>\n<pre>\ndef foo():\n    try:\n        ...\n    except ValueError as e:\n        raise # this will re-raise \"e\"\n</pre>\n<p>If the <code>raise</code> statement is not in an <code>except</code> or <code>finally</code> block, no exception is active and a\n<code>RuntimeError</code> is raised instead.</p>\n<p>If the bare <code>raise</code> statement is in a function called in an <code>except</code> block, the exception caught by the <code>except</code>\nwill be re-raised. However, this behavior is not reliable as nothing prevents a developer from calling the function from a different context.</p>\n<p>Overall, having bare <code>raise</code> statements outside of <code>except</code> blocks is discouraged as it is hard to understand and\nmaintain.</p>\n<h3>Notes</h3>\n<p>In a <code>finally</code> block, an exception is still active only when it hasn\u00e2\u20ac\u2122t been caught in a previous <code>except</code> clause or if it has\nbeen raised in an <code>except</code> block. In both cases, it is better to let the exception propagate automatically than to re-raise it. This\npattern is covered by rule {rule:python:S5704}.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to specify which exception needs to be raised when outside of an <code>except</code> block.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nraise  # Noncompliant: no active exception\n\ndef foo():\n    raise  # Noncompliant: no active exception\n    try:\n        raise  # Noncompliant: no active exception\n    except ValueError:\n        handle_error()\n\ndef handle_error():\n    raise  # Noncompliant: this is not reliable\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nraise ValueError()\n\ndef foo():\n    raise ValueError()\n    try:\n        raise ValueError()\n    except ValueError:\n        raise\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/simple_stmts.html#raise\">The <code>raise</code> statement</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5727",
          "name": "Comparison to None should not be constant",
          "description": "<p>This rule raises an issue when a comparison to <code>None</code> is invariant.</p>\n<h2>Why is this an issue?</h2>\n<p>Checking if a variable or parameter is <code>None</code> should only be done when you expect that it can be <code>None</code>. Doing so when the\nvariable is always <code>None</code> or never <code>None</code> is confusing at best. At worse, there is a bug and the variable is not updated\nproperly.</p>\n<p>This rule raises an issue when expressions <code>X is None</code>, <code>X is not None</code>, <code>X == None</code> or <code>X != None</code> are\nconstant, i.e. <code>X</code> is always None or never None.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    my_var = None\n    if my_var == None:  # Noncompliant: always True.\n        ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo(my_var):\n    if my_var == None:\n        ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/expressions.html#is-not\">Identity comparisons</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__eq__\"><code>__eq__</code> operator</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when a comparison to <code>None</code> is invariant.</p>\n<h2>Why is this an issue?</h2>\n<p>Checking if a variable or parameter is <code>None</code> should only be done when you expect that it can be <code>None</code>. Doing so when the\nvariable is always <code>None</code> or never <code>None</code> is confusing at best. At worse, there is a bug and the variable is not updated\nproperly.</p>\n<p>This rule raises an issue when expressions <code>X is None</code>, <code>X is not None</code>, <code>X == None</code> or <code>X != None</code> are\nconstant, i.e. <code>X</code> is always None or never None.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    my_var = None\n    if my_var == None:  # Noncompliant: always True.\n        ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo(my_var):\n    if my_var == None:\n        ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/expressions.html#is-not\">Identity comparisons</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__eq__\"><code>__eq__</code> operator</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5720",
          "name": "\"self\" should be the first argument to instance methods",
          "description": "<p>This rule raises an issue when the first parameter of an instance method is not called \"self\".</p>\n<h2>Why is this an issue?</h2>\n<p>Instance methods, i.e. methods not annotated with <code>@classmethod</code> or <code>@staticmethod</code>, are expected to have at least one\nparameter. This parameter will reference the object instance on which the method is called. By convention, this first parameter is named \"self\".</p>\n<p>Naming the first parameter something different from \"self\" is not recommended as it could lead to confusion. It might indicate that the \"self\"\nparameter was forgotten, in which case calling the method will most probably fail.</p>\n<p>Note also that creating methods which are used as static methods without the <code>@staticmethod</code> decorator is a bad practice. Calling these\nmethods on an instance will raise a <code>TypeError</code>. Either move the method out of the class or decorate it with\n<code>@staticmethod</code>.</p>\n<h3>Exceptions</h3>\n<p>This rule will accept \"cls\" or \"mcs\" as first parameter\u00e2\u20ac\u2122s name for class and metaclasses methods.</p>\n<p>No issue will be raised for the following methods: <code>__init_subclass__</code>, <code>__class_getitem__</code> and <code>__new__</code>, as\nthese methods' first parameter is a class.</p>\n<p>This rule may be parameterized to prevent raising issues on methods decorated with specific decorators. These decorators can be added to this\nrule\u00e2\u20ac\u2122s <code>ignoredDecorators</code> parameter.</p>\n<p>For example, with <code>ignoredDecorators</code> set to \"myDecorator\".</p>\n<pre>\nclass MyClass(ABC):\n    @myDecorator\n    def method(arg):  # No issue will be raised.\n        pass\n</pre>\n<h2>How to fix it</h2>\n<p>Make sure to have a \"self\" parameter on instance methods and annotate static methods with the <code>@staticmethod</code> decorator.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    def send_request(request):  # Noncompliant: the \"self\" parameter is missing.\n        print(\"send_request\")\n\nclass ClassWithStaticMethod:\n    def static_method(param):  # Noncompliant: the \"@staticmethod\" decorator is missing.\n        print(param)\n\nClassWithStaticMethod().static_method(42)  # The method is available on the instance but calling it will raise a TypeError.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    def send_request(self, request):\n        print(\"send_request\")\n\nclass ClassWithStaticMethod:\n    @staticmethod\n    def static_method(param):\n        print(param)\n\nClassWithStaticMethod().static_method(42)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.8/tutorial/classes.html#method-objects\">Method Objects</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> PEP8 - <a href=\"https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments\">Function and Method Arguments</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when the first parameter of an instance method is not called \"self\".</p>\n<h2>Why is this an issue?</h2>\n<p>Instance methods, i.e. methods not annotated with <code>@classmethod</code> or <code>@staticmethod</code>, are expected to have at least one\nparameter. This parameter will reference the object instance on which the method is called. By convention, this first parameter is named \"self\".</p>\n<p>Naming the first parameter something different from \"self\" is not recommended as it could lead to confusion. It might indicate that the \"self\"\nparameter was forgotten, in which case calling the method will most probably fail.</p>\n<p>Note also that creating methods which are used as static methods without the <code>@staticmethod</code> decorator is a bad practice. Calling these\nmethods on an instance will raise a <code>TypeError</code>. Either move the method out of the class or decorate it with\n<code>@staticmethod</code>.</p>\n<h3>Exceptions</h3>\n<p>This rule will accept \"cls\" or \"mcs\" as first parameter\u00e2\u20ac\u2122s name for class and metaclasses methods.</p>\n<p>No issue will be raised for the following methods: <code>__init_subclass__</code>, <code>__class_getitem__</code> and <code>__new__</code>, as\nthese methods' first parameter is a class.</p>\n<p>This rule may be parameterized to prevent raising issues on methods decorated with specific decorators. These decorators can be added to this\nrule\u00e2\u20ac\u2122s <code>ignoredDecorators</code> parameter.</p>\n<p>For example, with <code>ignoredDecorators</code> set to \"myDecorator\".</p>\n<pre>\nclass MyClass(ABC):\n    @myDecorator\n    def method(arg):  # No issue will be raised.\n        pass\n</pre>\n<h2>How to fix it</h2>\n<p>Make sure to have a \"self\" parameter on instance methods and annotate static methods with the <code>@staticmethod</code> decorator.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    def send_request(request):  # Noncompliant: the \"self\" parameter is missing.\n        print(\"send_request\")\n\nclass ClassWithStaticMethod:\n    def static_method(param):  # Noncompliant: the \"@staticmethod\" decorator is missing.\n        print(param)\n\nClassWithStaticMethod().static_method(42)  # The method is available on the instance but calling it will raise a TypeError.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    def send_request(self, request):\n        print(\"send_request\")\n\nclass ClassWithStaticMethod:\n    @staticmethod\n    def static_method(param):\n        print(param)\n\nClassWithStaticMethod().static_method(42)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.8/tutorial/classes.html#method-objects\">Method Objects</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> PEP8 - <a href=\"https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments\">Function and Method Arguments</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5712",
          "name": "Some special methods should return \"NotImplemented\" instead of raising \"NotImplementedError\"",
          "description": "<p>This rule raises an issue when a special method raises a <code>NotImplementedError</code> instead of returning <code>NotImplemented</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python, special methods corresponding to numeric operators and rich comparison operators should return <code>NotImplemented</code> when the\noperation is not supported.</p>\n<p>For example <code>A + B</code> is equivalent to calling <code>A.__add__(B)</code>. If this binary operation is not supported by class A,\n<code>A.__add__(B)</code> should return <code>NotImplemented</code>. The interpreter will then try the reverse operation, i.e.\n<code>B.__radd__(A)</code>. If these special methods were to raise <code>NotImplementedError</code>, the callers would not catch the exception and the\nreverse operation would not be called.</p>\n<p>Below is the list of special methods this rule applies to:</p>\n<ul>\n  <li> <code>__lt__(self, other)</code> </li>\n  <li> <code>__le__(self, other)</code> </li>\n  <li> <code>__eq__(self, other)</code> </li>\n  <li> <code>__ne__(self, other)</code> </li>\n  <li> <code>__gt__(self, other)</code> </li>\n  <li> <code>__ge__(self, other)</code> </li>\n  <li> <code>__add__(self, other)</code> </li>\n  <li> <code>__sub__(self, other)</code> </li>\n  <li> <code>__mul__(self, other)</code> </li>\n  <li> <code>__matmul__(self, other)</code> </li>\n  <li> <code>__truediv__(self, other)</code> </li>\n  <li> <code>__floordiv__(self, other)</code> </li>\n  <li> <code>__mod__(self, other)</code> </li>\n  <li> <code>__divmod__(self, other)</code> </li>\n  <li> <code>__pow__(self, other[, modulo])</code> </li>\n  <li> <code>__lshift__(self, other)</code> </li>\n  <li> <code>__rshift__(self, other)</code> </li>\n  <li> <code>__and__(self, other)</code> </li>\n  <li> <code>__xor__(self, other)</code> </li>\n  <li> <code>__or__(self, other)</code> </li>\n  <li> <code>__radd__(self, other)</code> </li>\n  <li> <code>__rsub__(self, other)</code> </li>\n  <li> <code>__rmul__(self, other)</code> </li>\n  <li> <code>__rmatmul__(self, other)</code> </li>\n  <li> <code>__rtruediv__(self, other)</code> </li>\n  <li> <code>__rfloordiv__(self, other)</code> </li>\n  <li> <code>__rmod__(self, other)</code> </li>\n  <li> <code>__rdivmod__(self, other)</code> </li>\n  <li> <code>__rpow__(self, other[, modulo])</code> </li>\n  <li> <code>__rlshift__(self, other)</code> </li>\n  <li> <code>__rrshift__(self, other)</code> </li>\n  <li> <code>__rand__(self, other)</code> </li>\n  <li> <code>__rxor__(self, other)</code> </li>\n  <li> <code>__ror__(self, other)</code> </li>\n  <li> <code>__iadd__(self, other)</code> </li>\n  <li> <code>__isub__(self, other)</code> </li>\n  <li> <code>__imul__(self, other)</code> </li>\n  <li> <code>__imatmul__(self, other)</code> </li>\n  <li> <code>__itruediv__(self, other)</code> </li>\n  <li> <code>__ifloordiv__(self, other)</code> </li>\n  <li> <code>__imod__(self, other)</code> </li>\n  <li> <code>__ipow__(self, other[, modulo])</code> </li>\n  <li> <code>__ilshift__(self, other)</code> </li>\n  <li> <code>__irshift__(self, other)</code> </li>\n  <li> <code>__iand__(self, other)</code> </li>\n  <li> <code>__ixor__(self, other)</code> </li>\n  <li> <code>__ior__(self, other)</code> </li>\n  <li> <code>__length_hint__(self)</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Make sure special methods return <code>NotImplemented</code> instead of raising a <code>NotImplementedError</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    def __add__(self, other):\n        raise NotImplementedError()  # Noncompliant: the exception will be propagated\n    def __radd__(self, other):\n        raise NotImplementedError()  # Noncompliant: the exception will be propagated\n\nclass MyOtherClass:\n    def __add__(self, other):\n        return 42\n    def __radd__(self, other):\n        return 42\n\nMyClass() + MyOtherClass()  # This will raise NotImplementedError\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    def __add__(self, other):\n        return NotImplemented\n    def __radd__(self, other):\n        return NotImplemented\n\nclass MyOtherClass:\n    def __add__(self, other):\n        return 42\n    def __radd__(self, other):\n        return 42\n\nMyClass() + MyOtherClass()  # This returns 42\n</pre>\n<h3>Pitfalls</h3>\n<p>The <code>__length_hint__</code> special method also requires to return a <code>NotImplemented</code>. Its behavior differs from the other methods,\nbecause when it returns <code>NotImplemented</code>, a default value will be returned instead. See <a href=\"https://peps.python.org/pep-0424/\">PEP\n424</a> for more information.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/constants.html#NotImplemented\">Built-in Constants - NotImplemented</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations\">Implementing the\n  arithmetic operations</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> PEP 424 - <a href=\"https://peps.python.org/pep-0424/\">A method exposing <code>__length_hint__</code></a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when a special method raises a <code>NotImplementedError</code> instead of returning <code>NotImplemented</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python, special methods corresponding to numeric operators and rich comparison operators should return <code>NotImplemented</code> when the\noperation is not supported.</p>\n<p>For example <code>A + B</code> is equivalent to calling <code>A.__add__(B)</code>. If this binary operation is not supported by class A,\n<code>A.__add__(B)</code> should return <code>NotImplemented</code>. The interpreter will then try the reverse operation, i.e.\n<code>B.__radd__(A)</code>. If these special methods were to raise <code>NotImplementedError</code>, the callers would not catch the exception and the\nreverse operation would not be called.</p>\n<p>Below is the list of special methods this rule applies to:</p>\n<ul>\n  <li> <code>__lt__(self, other)</code> </li>\n  <li> <code>__le__(self, other)</code> </li>\n  <li> <code>__eq__(self, other)</code> </li>\n  <li> <code>__ne__(self, other)</code> </li>\n  <li> <code>__gt__(self, other)</code> </li>\n  <li> <code>__ge__(self, other)</code> </li>\n  <li> <code>__add__(self, other)</code> </li>\n  <li> <code>__sub__(self, other)</code> </li>\n  <li> <code>__mul__(self, other)</code> </li>\n  <li> <code>__matmul__(self, other)</code> </li>\n  <li> <code>__truediv__(self, other)</code> </li>\n  <li> <code>__floordiv__(self, other)</code> </li>\n  <li> <code>__mod__(self, other)</code> </li>\n  <li> <code>__divmod__(self, other)</code> </li>\n  <li> <code>__pow__(self, other[, modulo])</code> </li>\n  <li> <code>__lshift__(self, other)</code> </li>\n  <li> <code>__rshift__(self, other)</code> </li>\n  <li> <code>__and__(self, other)</code> </li>\n  <li> <code>__xor__(self, other)</code> </li>\n  <li> <code>__or__(self, other)</code> </li>\n  <li> <code>__radd__(self, other)</code> </li>\n  <li> <code>__rsub__(self, other)</code> </li>\n  <li> <code>__rmul__(self, other)</code> </li>\n  <li> <code>__rmatmul__(self, other)</code> </li>\n  <li> <code>__rtruediv__(self, other)</code> </li>\n  <li> <code>__rfloordiv__(self, other)</code> </li>\n  <li> <code>__rmod__(self, other)</code> </li>\n  <li> <code>__rdivmod__(self, other)</code> </li>\n  <li> <code>__rpow__(self, other[, modulo])</code> </li>\n  <li> <code>__rlshift__(self, other)</code> </li>\n  <li> <code>__rrshift__(self, other)</code> </li>\n  <li> <code>__rand__(self, other)</code> </li>\n  <li> <code>__rxor__(self, other)</code> </li>\n  <li> <code>__ror__(self, other)</code> </li>\n  <li> <code>__iadd__(self, other)</code> </li>\n  <li> <code>__isub__(self, other)</code> </li>\n  <li> <code>__imul__(self, other)</code> </li>\n  <li> <code>__imatmul__(self, other)</code> </li>\n  <li> <code>__itruediv__(self, other)</code> </li>\n  <li> <code>__ifloordiv__(self, other)</code> </li>\n  <li> <code>__imod__(self, other)</code> </li>\n  <li> <code>__ipow__(self, other[, modulo])</code> </li>\n  <li> <code>__ilshift__(self, other)</code> </li>\n  <li> <code>__irshift__(self, other)</code> </li>\n  <li> <code>__iand__(self, other)</code> </li>\n  <li> <code>__ixor__(self, other)</code> </li>\n  <li> <code>__ior__(self, other)</code> </li>\n  <li> <code>__length_hint__(self)</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Make sure special methods return <code>NotImplemented</code> instead of raising a <code>NotImplementedError</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    def __add__(self, other):\n        raise NotImplementedError()  # Noncompliant: the exception will be propagated\n    def __radd__(self, other):\n        raise NotImplementedError()  # Noncompliant: the exception will be propagated\n\nclass MyOtherClass:\n    def __add__(self, other):\n        return 42\n    def __radd__(self, other):\n        return 42\n\nMyClass() + MyOtherClass()  # This will raise NotImplementedError\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    def __add__(self, other):\n        return NotImplemented\n    def __radd__(self, other):\n        return NotImplemented\n\nclass MyOtherClass:\n    def __add__(self, other):\n        return 42\n    def __radd__(self, other):\n        return 42\n\nMyClass() + MyOtherClass()  # This returns 42\n</pre>\n<h3>Pitfalls</h3>\n<p>The <code>__length_hint__</code> special method also requires to return a <code>NotImplemented</code>. Its behavior differs from the other methods,\nbecause when it returns <code>NotImplemented</code>, a default value will be returned instead. See <a href=\"https://peps.python.org/pep-0424/\">PEP\n424</a> for more information.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/constants.html#NotImplemented\">Built-in Constants - NotImplemented</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations\">Implementing the\n  arithmetic operations</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> PEP 424 - <a href=\"https://peps.python.org/pep-0424/\">A method exposing <code>__length_hint__</code></a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5709",
          "name": "Custom Exception classes should inherit from \"Exception\" or one of its subclasses",
          "description": "<p>This rule raises an issue when a class derives from one of the following exception classes: <code>BaseException</code>,\n<code>KeyboardInterrupt</code>, <code>SystemExit</code> or <code>GeneratorExit</code>.</p>\n<h2>Why is this an issue?</h2>\n<p><a href=\"https://docs.python.org/3/library/exceptions.html#SystemExit\"><code>SystemExit</code></a> is raised when <a\nhref=\"https://docs.python.org/3/library/sys.html#sys.exit\"><code>sys.exit()</code></a> is called. <a\nhref=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\"><code>KeyboardInterrupt</code></a> is raised when the user asks the program\nto stop by pressing interrupt keys. Both exceptions are expected to propagate up until the application stops.</p>\n<p>In order to avoid catching <code>SystemExit</code> and <code>KeyboardInterrupt</code> by mistake, <a\nhref=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy\">PEP-352</a> created the root class <code>BaseException</code> from which\n<code>SystemExit</code>, <code>KeyboardInterrupt</code> and <code>Exception</code> derive. Thus developers can use <code>except Exception:</code>\nwithout preventing the software from stopping.</p>\n<p>The <code>GeneratorExit</code> class also derives from <code>BaseException</code> as it is not really an error and is not supposed to be caught by\nuser code.</p>\n<p>As said in <a href=\"https://docs.python.org/3/library/exceptions.html#BaseException\">Python\u00e2\u20ac\u2122s documentation</a>, user-defined exceptions are not\nsupposed to inherit directly from <code>BaseException</code>. They should instead inherit from <code>Exception</code> or one of its subclasses.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyException(BaseException):  # Noncompliant\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyException(Exception):\n    pass\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP 352 \u00e2\u20ac\u201c <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">Required Superclass for Exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html#BaseException\">BaseException class</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when a class derives from one of the following exception classes: <code>BaseException</code>,\n<code>KeyboardInterrupt</code>, <code>SystemExit</code> or <code>GeneratorExit</code>.</p>\n<h2>Why is this an issue?</h2>\n<p><a href=\"https://docs.python.org/3/library/exceptions.html#SystemExit\"><code>SystemExit</code></a> is raised when <a\nhref=\"https://docs.python.org/3/library/sys.html#sys.exit\"><code>sys.exit()</code></a> is called. <a\nhref=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\"><code>KeyboardInterrupt</code></a> is raised when the user asks the program\nto stop by pressing interrupt keys. Both exceptions are expected to propagate up until the application stops.</p>\n<p>In order to avoid catching <code>SystemExit</code> and <code>KeyboardInterrupt</code> by mistake, <a\nhref=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy\">PEP-352</a> created the root class <code>BaseException</code> from which\n<code>SystemExit</code>, <code>KeyboardInterrupt</code> and <code>Exception</code> derive. Thus developers can use <code>except Exception:</code>\nwithout preventing the software from stopping.</p>\n<p>The <code>GeneratorExit</code> class also derives from <code>BaseException</code> as it is not really an error and is not supposed to be caught by\nuser code.</p>\n<p>As said in <a href=\"https://docs.python.org/3/library/exceptions.html#BaseException\">Python\u00e2\u20ac\u2122s documentation</a>, user-defined exceptions are not\nsupposed to inherit directly from <code>BaseException</code>. They should instead inherit from <code>Exception</code> or one of its subclasses.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyException(BaseException):  # Noncompliant\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyException(Exception):\n    pass\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP 352 \u00e2\u20ac\u201c <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">Required Superclass for Exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html#BaseException\">BaseException class</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5704",
          "name": "Bare \"raise\" statements should not be used in \"finally\" blocks",
          "description": "<p>This rule raises an issue when a bare <code>raise</code> statements is in a <code>finally</code> block.</p>\n<h2>Why is this an issue?</h2>\n<p>A bare <code>raise</code> statement, i.e. a <code>raise</code> with no exception provided, will re-raise the last active exception in the current\nscope. If no exception is active a <code>RuntimeError</code> is raised instead.</p>\n<p>If the bare \"raise\" statement is in a <code>finally</code> block, it will only have an active exception to re-raise when an exception from the\n<code>try</code> block is not caught or when an exception is raised by an <code>except</code> or <code>else</code> block. Thus bare <code>raise</code>\nstatements should not be relied upon in <code>finally</code> blocks. It is simpler to let the exception raise automatically.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo(param):\n    result = 0\n    try:\n        print(\"foo\")\n    except ValueError as e:\n        pass\n    else:\n        if param:\n            raise ValueError()\n    finally:\n        if param:\n            raise  # Noncompliant: This will fail in some context.\n        else:\n            result = 1\n    return result\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo(param):\n    result = 0\n    try:\n        print(\"foo\")\n    except ValueError as e:\n        pass\n    else:\n        if param:\n            raise ValueError()\n    finally:\n        if not param:\n            result = 1\n    return result\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/simple_stmts.html#raise\">The <code>raise</code> statement</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when a bare <code>raise</code> statements is in a <code>finally</code> block.</p>\n<h2>Why is this an issue?</h2>\n<p>A bare <code>raise</code> statement, i.e. a <code>raise</code> with no exception provided, will re-raise the last active exception in the current\nscope. If no exception is active a <code>RuntimeError</code> is raised instead.</p>\n<p>If the bare \"raise\" statement is in a <code>finally</code> block, it will only have an active exception to re-raise when an exception from the\n<code>try</code> block is not caught or when an exception is raised by an <code>except</code> or <code>else</code> block. Thus bare <code>raise</code>\nstatements should not be relied upon in <code>finally</code> blocks. It is simpler to let the exception raise automatically.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo(param):\n    result = 0\n    try:\n        print(\"foo\")\n    except ValueError as e:\n        pass\n    else:\n        if param:\n            raise ValueError()\n    finally:\n        if param:\n            raise  # Noncompliant: This will fail in some context.\n        else:\n            result = 1\n    return result\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo(param):\n    result = 0\n    try:\n        print(\"foo\")\n    except ValueError as e:\n        pass\n    else:\n        if param:\n            raise ValueError()\n    finally:\n        if not param:\n            result = 1\n    return result\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/simple_stmts.html#raise\">The <code>raise</code> statement</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5655",
          "name": "Arguments given to functions should be of an expected type",
          "description": "<p>This rule raises an issue when a function or method is called with an argument of a different type than the one described in its type\nannotations.</p>\n<h2>Why is this an issue?</h2>\n<p>The CPython interpreter does not check types of arguments when functions are called. However, a function can express the type it expects for each\nargument in its documentation or by using <a href=\"https://www.python.org/dev/peps/pep-0484/\">Type Hints</a>. While the code may initially work as\nintended, not respecting the contract of an API may lead to bugs later when its implementation evolves or when type checks are added (i.e. with\n<code>isinstance</code>).</p>\n<p>This rule also checks argument types for built-in functions.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef func(var: str):\n    pass\n\nfunc(42)  # Noncompliant: 42 is not of type str.\n\nround(\"not a number\")  # Noncompliant: the builtin function round requires a number as first parameter.\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef func(var: str):\n    pass\n\nfunc(\"42\")\n\nround(1.2)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/functions.html#built-in-funcs\">builtins</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/typing.html\">typing \u00e2\u20ac\u201d Support for type hints</a> </li>\n  <li> PEP 484 - <a href=\"https://www.python.org/dev/peps/pep-0484/\">Type Hints</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when a function or method is called with an argument of a different type than the one described in its type\nannotations.</p>\n<h2>Why is this an issue?</h2>\n<p>The CPython interpreter does not check types of arguments when functions are called. However, a function can express the type it expects for each\nargument in its documentation or by using <a href=\"https://www.python.org/dev/peps/pep-0484/\">Type Hints</a>. While the code may initially work as\nintended, not respecting the contract of an API may lead to bugs later when its implementation evolves or when type checks are added (i.e. with\n<code>isinstance</code>).</p>\n<p>This rule also checks argument types for built-in functions.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef func(var: str):\n    pass\n\nfunc(42)  # Noncompliant: 42 is not of type str.\n\nround(\"not a number\")  # Noncompliant: the builtin function round requires a number as first parameter.\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef func(var: str):\n    pass\n\nfunc(\"42\")\n\nround(1.2)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/functions.html#built-in-funcs\">builtins</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/typing.html\">typing \u00e2\u20ac\u201d Support for type hints</a> </li>\n  <li> PEP 484 - <a href=\"https://www.python.org/dev/peps/pep-0484/\">Type Hints</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S4487",
          "name": "Unread \"private\" attributes should be removed",
          "description": "<p>Private attributes which are written but never read are a case of \"dead store\". Changing their value is useless and most probably indicates an\nerror in the code.</p>\n<h2>Why is this an issue?</h2>\n<p>Python has no real private attribute. Every attribute is accessible. There are however two conventions indicating that an attribute is not meant to\nbe \"public\":</p>\n<ul>\n  <li> attributes with a name starting with a single underscore (ex: <code>_myattribute</code>) should be seen as non-public and might change without\n  prior notice. They should not be used by third-party libraries or software. It is ok to use those methods inside the library defining them but it\n  should be done with caution. </li>\n  <li> \"class-private\" attributes have a name starting with at least two underscores and ending with at most one underscore. These attributes' names\n  will be automatically mangled to avoid collision with subclasses' attributes. For example <code>__myattribute</code> will be renamed as\n  <code>_classname__myattribute</code>, where <code>classname</code> is the attribute\u00e2\u20ac\u2122s class name without its leading underscore(s). They shouldn\u00e2\u20ac\u2122t\n  be used outside of the class defining the attribute. </li>\n</ul>\n<p>This rule raises an issue when a class-private attribute (two leading underscores, max one underscore at the end) is never read inside the class.\nIt optionally raises an issue on unread attributes prefixed with a single underscore. Both class attributes and instance attributes will raise an\nissue.</p>\n<h2>How to fix it</h2>\n<p>Remove the attribute or fix the code to read it.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass Noncompliant:\n    _class_attr = 0  # Noncompliant if enable_single_underscore_issues is enabled\n    __mangled_class_attr = 1  # Noncompliant\n\n    def __init__(self, value):\n        self._attr = 0  # Noncompliant if enable_single_underscore_issues is enabled\n        self.__mangled_attr = 1  # Noncompliant\n\n    def compute(self, x):\n        return x * x\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass Compliant:\n    _class_attr = 0\n    __mangled_class_attr = 1\n\n    def __init__(self, value):\n        self._attr = 0\n        self.__mangled_attr = 1\n\n    def compute(self, x):\n        return x * Compliant._class_attr * Compliant.__mangled_class_attr * self._attr * self.__mangled_attr\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/tutorial/classes.html#private-variables\">Python documentation \u00e2\u20ac\u201c Private Variables</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance\">PEP 8 \u00e2\u20ac\u201c Style Guide for Python Code</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>Private attributes which are written but never read are a case of \"dead store\". Changing their value is useless and most probably indicates an\nerror in the code.</p>\n<h2>Why is this an issue?</h2>\n<p>Python has no real private attribute. Every attribute is accessible. There are however two conventions indicating that an attribute is not meant to\nbe \"public\":</p>\n<ul>\n  <li> attributes with a name starting with a single underscore (ex: <code>_myattribute</code>) should be seen as non-public and might change without\n  prior notice. They should not be used by third-party libraries or software. It is ok to use those methods inside the library defining them but it\n  should be done with caution. </li>\n  <li> \"class-private\" attributes have a name starting with at least two underscores and ending with at most one underscore. These attributes' names\n  will be automatically mangled to avoid collision with subclasses' attributes. For example <code>__myattribute</code> will be renamed as\n  <code>_classname__myattribute</code>, where <code>classname</code> is the attribute\u00e2\u20ac\u2122s class name without its leading underscore(s). They shouldn\u00e2\u20ac\u2122t\n  be used outside of the class defining the attribute. </li>\n</ul>\n<p>This rule raises an issue when a class-private attribute (two leading underscores, max one underscore at the end) is never read inside the class.\nIt optionally raises an issue on unread attributes prefixed with a single underscore. Both class attributes and instance attributes will raise an\nissue.</p>\n<h2>How to fix it</h2>\n<p>Remove the attribute or fix the code to read it.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass Noncompliant:\n    _class_attr = 0  # Noncompliant if enable_single_underscore_issues is enabled\n    __mangled_class_attr = 1  # Noncompliant\n\n    def __init__(self, value):\n        self._attr = 0  # Noncompliant if enable_single_underscore_issues is enabled\n        self.__mangled_attr = 1  # Noncompliant\n\n    def compute(self, x):\n        return x * x\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass Compliant:\n    _class_attr = 0\n    __mangled_class_attr = 1\n\n    def __init__(self, value):\n        self._attr = 0\n        self.__mangled_attr = 1\n\n    def compute(self, x):\n        return x * Compliant._class_attr * Compliant.__mangled_class_attr * self._attr * self.__mangled_attr\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/tutorial/classes.html#private-variables\">Python documentation \u00e2\u20ac\u201c Private Variables</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance\">PEP 8 \u00e2\u20ac\u201c Style Guide for Python Code</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S3776",
          "name": "Cognitive Complexity of functions should not be too high",
          "description": "<p>This rule raises an issue when the code cognitive complexity of a function is above a certain threshold.</p>\n<h2>Why is this an issue?</h2>\n<p>Cognitive Complexity is a measure of how hard it is to understand the control flow of a unit of code. Code with high cognitive complexity is hard\nto read, understand, test, and modify.</p>\n<p>As a rule of thumb, high cognitive complexity is a sign that the code should be refactored into smaller, easier-to-manage pieces.</p>\n<h3>Which syntax in code does impact cognitive complexity score?</h3>\n<p>Here are the core concepts:</p>\n<ul>\n  <li> <strong>Cognitive complexity is incremented each time the code breaks the normal linear reading flow.</strong><br> This concerns, for example,\n  loop structures, conditionals, catches, switches, jumps to labels, and conditions mixing multiple operators. </li>\n  <li> <strong>Each nesting level increases complexity.</strong><br> During code reading, the deeper you go through nested layers, the harder it\n  becomes to keep the context in mind. </li>\n  <li> <strong>Method calls are free</strong><br> A well-picked method name is a summary of multiple lines of code. A reader can first explore a\n  high-level view of what the code is performing then go deeper and deeper by looking at called functions content.<br> <em>Note:</em> This does not\n  apply to recursive calls, those will increment cognitive score. </li>\n</ul>\n<p>The method of computation is fully detailed in the pdf linked in the resources.</p>\n<h3>What is the potential impact?</h3>\n<p>Developers spend more time reading and understanding code than writing it. High cognitive complexity slows down changes and increases the cost of\nmaintenance.</p>\n<h2>How to fix it</h2>\n<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n<h3>Code examples</h3>\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 5.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>process_eligible_users</code> function, which now only has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p><em>Note:</em> The code is simplified here, to illustrate the purpose. Please imagine there is more happening in the process.<br></p>\n<p>The bellow code has a cognitive complexity score of 8.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process active user with profile\n        else:                        # +1 (else)\n            ... # process active user without profile\n    else:                            # +1 (else)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process inactive user with profile\n        else:                        # +1 (else)\n            ... # process inactive user without profile\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the breaks in flow are no more\nnested.<br> The <code>process_user</code> has now a complexity score of two.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        process_active_user(user)\n    else:                            # +1 (else)\n        process_inactive_user(user)\n\ndef process_active_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process active user with profile\n    else:                            # +1 (else)\n        ... # process active user without profile\n\ndef process_inactive_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process inactive user with profile\n    else:                            # +1 (else)\n        ... # process inactive user without profile\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\ndef calculate(data):\n    if data is not None:  # +1 (if)\n        total = 0\n        for item in data: # +1 (for) +1 (nested)\n            if item &gt; 0:  # +1 (if)  +2 (nested)\n                total += item * 2\n        return total\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 4.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\ndef calculate(data):\n    if data is None:      # +1 (if)\n        return None\n    total = 0\n    for item in data:     # +1 (for)\n        if item &gt; 0:      # +1 (if) +1 (nested)\n            total += item * 2\n    return total\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Sonar - <a href=\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\">Cognitive Complexity</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Sonar Blog - <a href=\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\">5 Clean Code Tips for Reducing\n  Cognitive Complexity</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when the code cognitive complexity of a function is above a certain threshold.</p>\n<h2>Why is this an issue?</h2>\n<p>Cognitive Complexity is a measure of how hard it is to understand the control flow of a unit of code. Code with high cognitive complexity is hard\nto read, understand, test, and modify.</p>\n<p>As a rule of thumb, high cognitive complexity is a sign that the code should be refactored into smaller, easier-to-manage pieces.</p>\n<h3>Which syntax in code does impact cognitive complexity score?</h3>\n<p>Here are the core concepts:</p>\n<ul>\n  <li> <strong>Cognitive complexity is incremented each time the code breaks the normal linear reading flow.</strong><br> This concerns, for example,\n  loop structures, conditionals, catches, switches, jumps to labels, and conditions mixing multiple operators. </li>\n  <li> <strong>Each nesting level increases complexity.</strong><br> During code reading, the deeper you go through nested layers, the harder it\n  becomes to keep the context in mind. </li>\n  <li> <strong>Method calls are free</strong><br> A well-picked method name is a summary of multiple lines of code. A reader can first explore a\n  high-level view of what the code is performing then go deeper and deeper by looking at called functions content.<br> <em>Note:</em> This does not\n  apply to recursive calls, those will increment cognitive score. </li>\n</ul>\n<p>The method of computation is fully detailed in the pdf linked in the resources.</p>\n<h3>What is the potential impact?</h3>\n<p>Developers spend more time reading and understanding code than writing it. High cognitive complexity slows down changes and increases the cost of\nmaintenance.</p>\n<h2>How to fix it</h2>\n<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n<h3>Code examples</h3>\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 5.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if ((user.is_active and    # +1 (if) +1 (nested) +1 (multiple conditions)\n            user.has_profile) or   # +1 (mixed operator)\n            user.age &gt; 18 ):\n            user.process()\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>process_eligible_users</code> function, which now only has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef process_eligible_users(users):\n    for user in users:             # +1 (for)\n        if is_eligible_user(user): # +1 (if) +1 (nested)\n            user.process()\n\ndef is_eligible_user(user):\n    return ((user.is_active and user.has_profile) or user.age &gt; 18) # +1 (multiple conditions) +1 (mixed operators)\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p><em>Note:</em> The code is simplified here, to illustrate the purpose. Please imagine there is more happening in the process.<br></p>\n<p>The bellow code has a cognitive complexity score of 8.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process active user with profile\n        else:                        # +1 (else)\n            ... # process active user without profile\n    else:                            # +1 (else)\n        if user.has_profile():       # +1 (if) +1 (nested)\n            ... # process inactive user with profile\n        else:                        # +1 (else)\n            ... # process inactive user without profile\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the breaks in flow are no more\nnested.<br> The <code>process_user</code> has now a complexity score of two.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndef process_user(user):\n    if user.is_active():             # +1 (if)\n        process_active_user(user)\n    else:                            # +1 (else)\n        process_inactive_user(user)\n\ndef process_active_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process active user with profile\n    else:                            # +1 (else)\n        ... # process active user without profile\n\ndef process_inactive_user(user):\n    if user.has_profile():           # +1 (if) +1 (nested)\n        ... # process inactive user with profile\n    else:                            # +1 (else)\n        ... # process inactive user without profile\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\ndef calculate(data):\n    if data is not None:  # +1 (if)\n        total = 0\n        for item in data: # +1 (for) +1 (nested)\n            if item &gt; 0:  # +1 (if)  +2 (nested)\n                total += item * 2\n        return total\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 4.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\ndef calculate(data):\n    if data is None:      # +1 (if)\n        return None\n    total = 0\n    for item in data:     # +1 (for)\n        if item &gt; 0:      # +1 (if) +1 (nested)\n            total += item * 2\n    return total\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Sonar - <a href=\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\">Cognitive Complexity</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Sonar Blog - <a href=\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\">5 Clean Code Tips for Reducing\n  Cognitive Complexity</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2710",
          "name": "The first argument to class methods should follow the naming convention",
          "description": "<p>This rule raises an issue when the first parameter of a class method is not an accepted name.</p>\n<h2>Why is this an issue?</h2>\n<p>By convention, the first argument in a class method, i.e. methods decorated with <code>@classmethod</code>, is named <code>cls</code> as a\nrepresentation and a reminder that the argument is the class itself. If you were to name the argument something else, you would stand a good chance of\nconfusing both users and maintainers of the code. It might also indicate that the <code>cls</code> parameter was forgotten, in which case calling the\nmethod will most probably fail. This rule also applies to methods <code>__init_subclass__</code>, <code>__class_getitem__</code> and\n<code>__new__</code> as their first argument is always the class instead of \"self\".</p>\n<p>By default this rule accepts <code>cls</code> and <code>mcs</code>, which is sometime used in metaclasses, as valid names for class parameters. You\ncan set your own list of accepted names via the parameter <code>classParameterNames</code>.</p>\n<h2>How to fix it</h2>\n<p>Follow the naming convention for the first parameter name of a class method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Rectangle(object):\n\n  @classmethod\n  def area(bob, height, width):  #Noncompliant\n    return height * width\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Rectangle(object):\n\n  @classmethod\n  def area(cls, height, width):\n    return height * width\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP8 - <a href=\"https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments\">Function and Method Arguments</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule raises an issue when the first parameter of a class method is not an accepted name.</p>\n<h2>Why is this an issue?</h2>\n<p>By convention, the first argument in a class method, i.e. methods decorated with <code>@classmethod</code>, is named <code>cls</code> as a\nrepresentation and a reminder that the argument is the class itself. If you were to name the argument something else, you would stand a good chance of\nconfusing both users and maintainers of the code. It might also indicate that the <code>cls</code> parameter was forgotten, in which case calling the\nmethod will most probably fail. This rule also applies to methods <code>__init_subclass__</code>, <code>__class_getitem__</code> and\n<code>__new__</code> as their first argument is always the class instead of \"self\".</p>\n<p>By default this rule accepts <code>cls</code> and <code>mcs</code>, which is sometime used in metaclasses, as valid names for class parameters. You\ncan set your own list of accepted names via the parameter <code>classParameterNames</code>.</p>\n<h2>How to fix it</h2>\n<p>Follow the naming convention for the first parameter name of a class method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Rectangle(object):\n\n  @classmethod\n  def area(bob, height, width):  #Noncompliant\n    return height * width\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Rectangle(object):\n\n  @classmethod\n  def area(cls, height, width):\n    return height * width\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP8 - <a href=\"https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments\">Function and Method Arguments</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1186",
          "name": "Functions and methods should not be empty",
          "description": "<h2>Why is this an issue?</h2>\n<p>An empty method is generally considered bad practice and can lead to confusion, readability, and maintenance issues. Empty methods bring no\nfunctionality and are misleading to others as they might think the method implementation fulfills a specific and identified requirement.</p>\n<p>There are several reasons for a method not to have a body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h3>Exceptions</h3>\n<p>No issue will be raised when the empty method is abstract and meant to be overridden in a subclass, i.e. it is decorated with\n<code>abc.abstractmethod</code>, <code>abc.abstractstaticmethod</code>, <code>abc.abstractclassmethod</code> or <code>abc.abstractproperty</code>.\nNote however that these methods should normally have a docstring explaining how subclasses should implement these methods.</p>\n<pre>\nimport abc\n\nclass MyAbstractClass(abc.ABC):\n    @abc.abstractproperty\n    def myproperty(self):\n        pass\n\n    @abc.abstractclassmethod\n    def myclassmethod(cls):\n        pass\n\n    @abc.abstractmethod\n    def mymethod(self):\n        pass\n\n    @abc.abstractstaticmethod\n    def mystaticmethod():\n        pass\n</pre>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef shouldNotBeEmpty():  # Noncompliant - method is empty\n    pass\n\ndef notImplemented():  # Noncompliant - method is empty\n    pass\n\ndef emptyOnPurpose():  # Noncompliant - method is empty\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef shouldNotBeEmpty():\n    doSomething()\n\ndef notImplemented():\n    raise NotImplementedError(\"notImplemented() cannot be performed because ...\")\n\ndef emptyOnPurpose():\n    pass  # comment explaining why the method is empty\n\ndef emptyOnPurposeBis():\n    \"\"\"\n    Docstring explaining why this function is empty.\n    \"\"\"\n</pre>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>An empty method is generally considered bad practice and can lead to confusion, readability, and maintenance issues. Empty methods bring no\nfunctionality and are misleading to others as they might think the method implementation fulfills a specific and identified requirement.</p>\n<p>There are several reasons for a method not to have a body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h3>Exceptions</h3>\n<p>No issue will be raised when the empty method is abstract and meant to be overridden in a subclass, i.e. it is decorated with\n<code>abc.abstractmethod</code>, <code>abc.abstractstaticmethod</code>, <code>abc.abstractclassmethod</code> or <code>abc.abstractproperty</code>.\nNote however that these methods should normally have a docstring explaining how subclasses should implement these methods.</p>\n<pre>\nimport abc\n\nclass MyAbstractClass(abc.ABC):\n    @abc.abstractproperty\n    def myproperty(self):\n        pass\n\n    @abc.abstractclassmethod\n    def myclassmethod(cls):\n        pass\n\n    @abc.abstractmethod\n    def mymethod(self):\n        pass\n\n    @abc.abstractstaticmethod\n    def mystaticmethod():\n        pass\n</pre>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef shouldNotBeEmpty():  # Noncompliant - method is empty\n    pass\n\ndef notImplemented():  # Noncompliant - method is empty\n    pass\n\ndef emptyOnPurpose():  # Noncompliant - method is empty\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef shouldNotBeEmpty():\n    doSomething()\n\ndef notImplemented():\n    raise NotImplementedError(\"notImplemented() cannot be performed because ...\")\n\ndef emptyOnPurpose():\n    pass  # comment explaining why the method is empty\n\ndef emptyOnPurposeBis():\n    \"\"\"\n    Docstring explaining why this function is empty.\n    \"\"\"\n</pre>\n\n"
        },
        {
          "id": "S6776",
          "name": "Stack traces should not be disclosed",
          "description": "<p>Exception stack traces contain sensitive data that the application\u00e2\u20ac\u2122s code should not disclose as error messages.</p>\n<h2>Why is this an issue?</h2>\n<p>Stack traces contain sensitive data like filenames or folder hierarchies. They can expose implementation details, including the application\u00e2\u20ac\u2122s\narchitecture, logic, and potential vulnerabilities. Attackers can leverage these valuable insights to identify weaknesses, devise attack strategies,\nand exploit vulnerabilities.</p>\n<h2>How to fix it in Flask</h2>\n<p>Implement proper error handling by reporting customized error messages that do not contain a detailed stack trace. Log the exception stack trace if\nneeded.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@app.errorhandler(500)\ndef internal_server_error(error):\n    error_message = traceback.format_stack()\n    return render_template('error.html', error_message=error_message), 500\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@app.errorhandler(500)\ndef internal_server_error(error):\n    error_message = \"Internal Server Error\"\n    logging.exception()\n    return render_template('error.html', error_message=error_message), 500\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p>Python Documentation - <a href=\"https://docs.python.org/3/library/traceback.html\">traceback \u00e2\u20ac\u201d Print or retrieve a stack traceback</a></p>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/209\">CWE-209 - Generation of Error Message Containing Sensitive Information</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/489\">CWE-489 - Active Debug Code</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222610\">Application Security and\n  Development: V-222610</a> - The application must generate error messages that provide information necessary for corrective actions without revealing\n  information that could be exploited by adversaries. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Exception stack traces contain sensitive data that the application\u00e2\u20ac\u2122s code should not disclose as error messages.</p>\n<h2>Why is this an issue?</h2>\n<p>Stack traces contain sensitive data like filenames or folder hierarchies. They can expose implementation details, including the application\u00e2\u20ac\u2122s\narchitecture, logic, and potential vulnerabilities. Attackers can leverage these valuable insights to identify weaknesses, devise attack strategies,\nand exploit vulnerabilities.</p>\n<h2>How to fix it in Flask</h2>\n<p>Implement proper error handling by reporting customized error messages that do not contain a detailed stack trace. Log the exception stack trace if\nneeded.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@app.errorhandler(500)\ndef internal_server_error(error):\n    error_message = traceback.format_stack()\n    return render_template('error.html', error_message=error_message), 500\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@app.errorhandler(500)\ndef internal_server_error(error):\n    error_message = \"Internal Server Error\"\n    logging.exception()\n    return render_template('error.html', error_message=error_message), 500\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p>Python Documentation - <a href=\"https://docs.python.org/3/library/traceback.html\">traceback \u00e2\u20ac\u201d Print or retrieve a stack traceback</a></p>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/209\">CWE-209 - Generation of Error Message Containing Sensitive Information</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/489\">CWE-489 - Active Debug Code</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222610\">Application Security and\n  Development: V-222610</a> - The application must generate error messages that provide information necessary for corrective actions without revealing\n  information that could be exploited by adversaries. </li>\n</ul>\n\n"
        },
        {
          "id": "S905",
          "name": "Non-empty statements should change control flow or have at least one side-effect",
          "description": "<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p><strong>Intentionally empty statement</strong></p>\n<p>Statements such as <code>pass</code> or <code>...</code> (ellipsis) are clearly meant to have no effect and may be used to indicate an\nimplementation is missing. No issue will be raised in this case.</p>\n<p><strong>Strings</strong></p>\n<p>Some projects use string literals as comments. By default, this rule will not raise an issue on these strings. Reporting on string literals can be\nenabled by setting the rule parameter <code>reportOnStrings</code> to <code>true</code>.</p>\n<pre>\ndef foo():\n    bar()\n    \"\"\"Some comment\"\"\"  # Compliant by default. Noncompliant with \"reportOnStrings\" set to \"true\"\n    qix()\n</pre>\n<p><strong>Operators</strong></p>\n<p>By default, this rule considers that no arithmetic operator has a side effect. Some projects may redefine operators and add a side effect. You can\nlist such operators in the rule parameter <code>ignoredOperators</code>.</p>\n<pre>\ndef process(p, beam):\n    \"\"\"\n    Apache Beam redefines \"|\" and \"&gt;&gt;\" operators and they have a side effect.\n    Thus for Apache Beam projects \"ignoredOperators\"should be set to \"|,&gt;&gt;\"\n    \"\"\"\n    p | \"create\" &gt;&gt; beam.Create()  # Noncompliant by default\n</pre>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef get_result():\n    result = 42\n    if should_be_zero():\n        result == 0 # Noncompliant: no side effect, was an assignment intended?\n    return result\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef get_result():\n    result = 42\n    if should_be_zero():\n        result = 0 # Compliant\n    return result\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p><strong>Intentionally empty statement</strong></p>\n<p>Statements such as <code>pass</code> or <code>...</code> (ellipsis) are clearly meant to have no effect and may be used to indicate an\nimplementation is missing. No issue will be raised in this case.</p>\n<p><strong>Strings</strong></p>\n<p>Some projects use string literals as comments. By default, this rule will not raise an issue on these strings. Reporting on string literals can be\nenabled by setting the rule parameter <code>reportOnStrings</code> to <code>true</code>.</p>\n<pre>\ndef foo():\n    bar()\n    \"\"\"Some comment\"\"\"  # Compliant by default. Noncompliant with \"reportOnStrings\" set to \"true\"\n    qix()\n</pre>\n<p><strong>Operators</strong></p>\n<p>By default, this rule considers that no arithmetic operator has a side effect. Some projects may redefine operators and add a side effect. You can\nlist such operators in the rule parameter <code>ignoredOperators</code>.</p>\n<pre>\ndef process(p, beam):\n    \"\"\"\n    Apache Beam redefines \"|\" and \"&gt;&gt;\" operators and they have a side effect.\n    Thus for Apache Beam projects \"ignoredOperators\"should be set to \"|,&gt;&gt;\"\n    \"\"\"\n    p | \"create\" &gt;&gt; beam.Create()  # Noncompliant by default\n</pre>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef get_result():\n    result = 42\n    if should_be_zero():\n        result == 0 # Noncompliant: no side effect, was an assignment intended?\n    return result\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef get_result():\n    result = 42\n    if should_be_zero():\n        result = 0 # Compliant\n    return result\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6984",
          "name": "Einops pattern should be valid",
          "description": "<p>This rule raises an issue when an incorrect pattern is provided to an <code>einops</code> operation.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>einops</code> library provides a powerful and flexible way to manipulate tensors using the Einstein summation convention. The\n<code>einops</code> uses a different convention than the <a href=\"https://rockt.github.io/2018/04/30/einsum\">traditional</a> one. In particular, the\naxis names can be more than one letter long and are separated by spaces.</p>\n<h2>How to fix it</h2>\n<p>Correct the syntax of the <code>einops</code> operation by balancing the parentheses and following the convention.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom einops import rearrange\nimport torch\n\nx = torch.randn(2, 3, 4, 5)\nx2 = rearrange(x, 'b c h w -&gt; b (c h w') # Noncompliant : the parentheses are not balanced\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom einops import rearrange\nimport torch\n\nx = torch.randn(2, 3, 4, 5)\nx2 = rearrange(x, 'b c h w -&gt; b (c h w)')\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <code>einops</code> documentation - <a href=\"https://einops.rocks/1-einops-basics/#welcome-to-einops-land\">Einops basics</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when an incorrect pattern is provided to an <code>einops</code> operation.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>einops</code> library provides a powerful and flexible way to manipulate tensors using the Einstein summation convention. The\n<code>einops</code> uses a different convention than the <a href=\"https://rockt.github.io/2018/04/30/einsum\">traditional</a> one. In particular, the\naxis names can be more than one letter long and are separated by spaces.</p>\n<h2>How to fix it</h2>\n<p>Correct the syntax of the <code>einops</code> operation by balancing the parentheses and following the convention.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom einops import rearrange\nimport torch\n\nx = torch.randn(2, 3, 4, 5)\nx2 = rearrange(x, 'b c h w -&gt; b (c h w') # Noncompliant : the parentheses are not balanced\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom einops import rearrange\nimport torch\n\nx = torch.randn(2, 3, 4, 5)\nx2 = rearrange(x, 'b c h w -&gt; b (c h w)')\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <code>einops</code> documentation - <a href=\"https://einops.rocks/1-einops-basics/#welcome-to-einops-land\">Einops basics</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6899",
          "name": "datetime.datetime objects should not be compared with datetime.date objects",
          "description": "<p>This rule raises an issue when trying to perform comparison or arithmetic operations between <code>datetime.date</code> and\n<code>datetime.datetime</code> objects.</p>\n<h2>Why is this an issue?</h2>\n<p>Despite the fact that the <code>datetime.datetime</code> is inherited from the <code>datetime.date</code> they are not compatible from comparison\nand arithmetical operations perspective. Trying to compare a <code>datetime.datetime</code> with a <code>datetime.date</code> objects leads to a\n<code>TypeError</code>.</p>\n<h2>How to fix it</h2>\n<p>Make sure that comparison or arithmetic operations are performed between compatible types e.g. convert <code>datetime.datetime</code> to\n<code>datetime.date</code> or vice versa.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime, date\n\ndt = datetime.now()\nd = date.today()\n\nif dt &lt; d: # Noncompliant: TypeError: can't compare datetime.datetime to datetime.date\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime, date\n\ndt = datetime.now()\nd = date.today()\n\nif dt.date() &lt; d: # OK\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#datetime-objects\">Datetime Objects</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#date-objects\">Date Objects</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when trying to perform comparison or arithmetic operations between <code>datetime.date</code> and\n<code>datetime.datetime</code> objects.</p>\n<h2>Why is this an issue?</h2>\n<p>Despite the fact that the <code>datetime.datetime</code> is inherited from the <code>datetime.date</code> they are not compatible from comparison\nand arithmetical operations perspective. Trying to compare a <code>datetime.datetime</code> with a <code>datetime.date</code> objects leads to a\n<code>TypeError</code>.</p>\n<h2>How to fix it</h2>\n<p>Make sure that comparison or arithmetic operations are performed between compatible types e.g. convert <code>datetime.datetime</code> to\n<code>datetime.date</code> or vice versa.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime, date\n\ndt = datetime.now()\nd = date.today()\n\nif dt &lt; d: # Noncompliant: TypeError: can't compare datetime.datetime to datetime.date\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime, date\n\ndt = datetime.now()\nd = date.today()\n\nif dt.date() &lt; d: # OK\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#datetime-objects\">Datetime Objects</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#date-objects\">Date Objects</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6886",
          "name": "offset-naive datetime.time and datetime.datetime objects should not be compared with offset-aware ones",
          "description": "<p>This rule raises an issue when trying to perform comparison or arithmetic operations between <code>offset-naive</code> and\n<code>offset-aware</code> Datetimes.</p>\n<h2>Why is this an issue?</h2>\n<p><code>datetime.datetime</code> and <code>datetime.time</code> objects may be categorized as \"aware\" or \"naive\" depending on whether or not they\ninclude timezone information.</p>\n<p>Comparison or arithmetic operations between <code>offset-naive</code> and <code>offset-aware</code> datetimes raise a <code>TypeError</code>.</p>\n<h2>How to fix it</h2>\n<p>Perform comparison or arithmetic operations only between offset-naive or only between offset-aware Datetimes.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\nfrom pytz import timezone\n\n\ndef compare_tz():\n    dt1 = datetime.now(tz=timezone('America/New_York'))\n    dt2 = datetime.now()\n\n    if dt1 &lt; dt2: # Noncompliant: TypeError: can't compare offset-naive and offset-aware datetimes\n        ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime\nfrom pytz import timezone\n\n\ndef compare_tz():\n    dt1 = datetime.now(tz=timezone('America/New_York'))\n    dt2 = datetime.now(timezone.utc)\n\n    if dt1 &lt; dt2:\n        ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#aware-and-naive-objects\">Aware and Naive Objects</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when trying to perform comparison or arithmetic operations between <code>offset-naive</code> and\n<code>offset-aware</code> Datetimes.</p>\n<h2>Why is this an issue?</h2>\n<p><code>datetime.datetime</code> and <code>datetime.time</code> objects may be categorized as \"aware\" or \"naive\" depending on whether or not they\ninclude timezone information.</p>\n<p>Comparison or arithmetic operations between <code>offset-naive</code> and <code>offset-aware</code> datetimes raise a <code>TypeError</code>.</p>\n<h2>How to fix it</h2>\n<p>Perform comparison or arithmetic operations only between offset-naive or only between offset-aware Datetimes.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\nfrom pytz import timezone\n\n\ndef compare_tz():\n    dt1 = datetime.now(tz=timezone('America/New_York'))\n    dt2 = datetime.now()\n\n    if dt1 &lt; dt2: # Noncompliant: TypeError: can't compare offset-naive and offset-aware datetimes\n        ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime\nfrom pytz import timezone\n\n\ndef compare_tz():\n    dt1 = datetime.now(tz=timezone('America/New_York'))\n    dt2 = datetime.now(timezone.utc)\n\n    if dt1 &lt; dt2:\n        ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#aware-and-naive-objects\">Aware and Naive Objects</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6663",
          "name": "Sequence indexes must have an __index__ method",
          "description": "<p>This rule raises an issue when an object used as a sequence index does not define an <code>__index__</code> method.</p>\n<h2>Why is this an issue?</h2>\n<p>Objects can be used as sequence indexes to access a specific element from the sequence, through the following syntax:</p>\n<pre>\nmy_list = [1, 2, 3, 4]\nx = 1\nprint(my_list[x])  # This will print 2\n</pre>\n<p>Whenever an object is used as a sequence index, the Python interpreter calls its <code>__index__</code> method to compute the index that needs to\nbe accessed from the sequence.</p>\n<p>Any object can be used as sequence index, as long as it defines an <code>__index__</code> method that returns an <code>int</code>. Most commonly,\nsequence indexes are simply integers.</p>\n<p>Similarly, sequences can be sliced through the following syntax:</p>\n<pre>\nmy_list = [1, 2, 3, 4]\nx = 1\nprint(my_list[1:3]) # This will print [2, 3]\n</pre>\n<p>If an invalid object is used as a sequence index, a <code>TypeError</code> will be raised.</p>\n<h2>How to fix it</h2>\n<p>Make sure to use an object that defines an <code>__index__</code> method as sequence indexes.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    my_list = [\"spam\", \"eggs\"]\n    x = my_list[\"spam\"]  # Noncompliant: a str is not a valid index\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    my_list = [\"spam\", \"eggs\"]\n    x = my_list[0]\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p>Python Documentation - <a\nhref=\"https://docs.python.org/3/library/operator.html#operator\">https://docs.python.org/3/library/operator.html#operator</a>.<em>index</em>[<em>index</em>\nmethod]</p>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when an object used as a sequence index does not define an <code>__index__</code> method.</p>\n<h2>Why is this an issue?</h2>\n<p>Objects can be used as sequence indexes to access a specific element from the sequence, through the following syntax:</p>\n<pre>\nmy_list = [1, 2, 3, 4]\nx = 1\nprint(my_list[x])  # This will print 2\n</pre>\n<p>Whenever an object is used as a sequence index, the Python interpreter calls its <code>__index__</code> method to compute the index that needs to\nbe accessed from the sequence.</p>\n<p>Any object can be used as sequence index, as long as it defines an <code>__index__</code> method that returns an <code>int</code>. Most commonly,\nsequence indexes are simply integers.</p>\n<p>Similarly, sequences can be sliced through the following syntax:</p>\n<pre>\nmy_list = [1, 2, 3, 4]\nx = 1\nprint(my_list[1:3]) # This will print [2, 3]\n</pre>\n<p>If an invalid object is used as a sequence index, a <code>TypeError</code> will be raised.</p>\n<h2>How to fix it</h2>\n<p>Make sure to use an object that defines an <code>__index__</code> method as sequence indexes.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    my_list = [\"spam\", \"eggs\"]\n    x = my_list[\"spam\"]  # Noncompliant: a str is not a valid index\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    my_list = [\"spam\", \"eggs\"]\n    x = my_list[0]\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p>Python Documentation - <a\nhref=\"https://docs.python.org/3/library/operator.html#operator\">https://docs.python.org/3/library/operator.html#operator</a>.<em>index</em>[<em>index</em>\nmethod]</p>\n\n"
        },
        {
          "id": "S6662",
          "name": "Set members and dictionary keys should be hashable",
          "description": "<p>This rule raises an issue when an unhashable object is used as a set member or dictionary key.</p>\n<h2>Why is this an issue?</h2>\n<p>The hash value of an object is an integer returned by its <code>__hash__</code> method. Objects that are considered equal to each other (as per the\n<code>__eq__</code> method) should have the same hash value.</p>\n<p>Whenever using an object as a dictionary key or inserting it into a set, the hash value of that object will be used to derive a bucket in which the\nobject will be inserted.</p>\n<p>When attempting to insert an unhashable object into a set, a <code>TypeError</code> will be raised instead.</p>\n<p>If an object defines a <code>__hash__</code> method derived from mutable properties, no <code>TypeError</code> will be raised. However, having a\nmutable hash value should never be done as this would prevent dictionaries and set from retrieving the object.</p>\n<h2>How to fix it</h2>\n<p>Make sure to always use hashable (and immutable) objects as dictionary keys or set members.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    my_list = [1,2,3]\n    my_set = {my_list}  # Noncompliant: list is not hashable.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    my_list = [1,2,3]\n    my_set = set(my_list) # This will insert the elements of my_list into a new set.\n\n# OR\n\ndef foo():\n    my_tuple = (1,2,3)\n    my_set = {my_tuple} # tuples are immutable and hashable. They can be inserted into sets.\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object\">https://docs.python.org/3/reference/datamodel.html#object</a>.<em>hash</em>[object.<em>hash</em>] </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/functions.html#hash\">the hash built-in function</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when an unhashable object is used as a set member or dictionary key.</p>\n<h2>Why is this an issue?</h2>\n<p>The hash value of an object is an integer returned by its <code>__hash__</code> method. Objects that are considered equal to each other (as per the\n<code>__eq__</code> method) should have the same hash value.</p>\n<p>Whenever using an object as a dictionary key or inserting it into a set, the hash value of that object will be used to derive a bucket in which the\nobject will be inserted.</p>\n<p>When attempting to insert an unhashable object into a set, a <code>TypeError</code> will be raised instead.</p>\n<p>If an object defines a <code>__hash__</code> method derived from mutable properties, no <code>TypeError</code> will be raised. However, having a\nmutable hash value should never be done as this would prevent dictionaries and set from retrieving the object.</p>\n<h2>How to fix it</h2>\n<p>Make sure to always use hashable (and immutable) objects as dictionary keys or set members.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    my_list = [1,2,3]\n    my_set = {my_list}  # Noncompliant: list is not hashable.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    my_list = [1,2,3]\n    my_set = set(my_list) # This will insert the elements of my_list into a new set.\n\n# OR\n\ndef foo():\n    my_tuple = (1,2,3)\n    my_set = {my_tuple} # tuples are immutable and hashable. They can be inserted into sets.\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object\">https://docs.python.org/3/reference/datamodel.html#object</a>.<em>hash</em>[object.<em>hash</em>] </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/functions.html#hash\">the hash built-in function</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6560",
          "name": "The \"safe\" flag should be set to \"False\" when serializing non-dictionary objects in Django JSON-encoded responses.",
          "description": "<h2>Why is this an issue?</h2>\n<p>By default, only dictionary objects can be serialized in Django JSON-encoded response. Before ECMASCript 5, serializing non-dictionary objects\ncould lead to security vulnerabilities. Since most modern browsers implement ECMAScript 5, this vector of attack is no longer a threat and it is\npossible to serialize non-dictionary objects by setting the <code>safe</code> flag to <code>False</code>. However, if this flag is not set, a\n<code>TypeError</code> will be thrown by the serializer.</p>\n<p>Despite this possibility, it is still recommended to serialize dictionary objects, as an API based on <code>dict</code> is generally more\nextensible and easier to maintain.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, developers should ensure that the safe flag is set to \"False\" when attempting to serialize non-dictionary objects in Django.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom django.http import JsonResponse\nresponse = JsonResponse([1, 2, 3])\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nfrom django.http import JsonResponse\nresponse = JsonResponse([1, 2, 3], safe=False)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a href=\"https://docs.djangoproject.com/en/4.1/ref/request-response/#serializing-non-dictionary-objects\">Serializing non-dictionary objects</a></p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>By default, only dictionary objects can be serialized in Django JSON-encoded response. Before ECMASCript 5, serializing non-dictionary objects\ncould lead to security vulnerabilities. Since most modern browsers implement ECMAScript 5, this vector of attack is no longer a threat and it is\npossible to serialize non-dictionary objects by setting the <code>safe</code> flag to <code>False</code>. However, if this flag is not set, a\n<code>TypeError</code> will be thrown by the serializer.</p>\n<p>Despite this possibility, it is still recommended to serialize dictionary objects, as an API based on <code>dict</code> is generally more\nextensible and easier to maintain.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, developers should ensure that the safe flag is set to \"False\" when attempting to serialize non-dictionary objects in Django.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom django.http import JsonResponse\nresponse = JsonResponse([1, 2, 3])\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nfrom django.http import JsonResponse\nresponse = JsonResponse([1, 2, 3], safe=False)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a href=\"https://docs.djangoproject.com/en/4.1/ref/request-response/#serializing-non-dictionary-objects\">Serializing non-dictionary objects</a></p>\n\n"
        },
        {
          "id": "S6552",
          "name": "Django signal handler functions should have the '@receiver' decorator on top of all other decorators",
          "description": "<p>This rule enforces that the '@receiver' decorator is placed on top of all other decorators in Django functions.</p>\n<h2>Why is this an issue?</h2>\n<p>In Django, the '@receiver' decorator is used to register signal handlers. These handlers are used to respond to events that occur in the\napplication, such as a user logging in or a database record being saved.</p>\n<p>The order in which decorators are applied can have a significant impact on their behavior. In the case of the @receiver decorator, it is important\nthat it is applied first, before any other decorators, in order to ensure that the signal handler is registered correctly.</p>\n<p>If the '@receiver' decorator is not applied first, the decorators placed above it will be ignored, which can result in unexpected behavior or even\nerrors in the application.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, simply move the '@receiver' decorator to the top of the list of decorators used to decorate the function.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom django.dispatch import receiver\nfrom django.views.decorators.csrf import csrf_exempt\n\n@csrf_exempt\n@receiver(some_signal)\ndef my_handler(sender, **kwargs):\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nfrom django.dispatch import receiver\nfrom django.views.decorators.csrf import csrf_exempt\n\n@receiver(some_signal)\n@csrf_exempt\ndef my_handler(sender, **kwargs):\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.djangoproject.com/en/4.1/topics/signals/\">Django signals</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule enforces that the '@receiver' decorator is placed on top of all other decorators in Django functions.</p>\n<h2>Why is this an issue?</h2>\n<p>In Django, the '@receiver' decorator is used to register signal handlers. These handlers are used to respond to events that occur in the\napplication, such as a user logging in or a database record being saved.</p>\n<p>The order in which decorators are applied can have a significant impact on their behavior. In the case of the @receiver decorator, it is important\nthat it is applied first, before any other decorators, in order to ensure that the signal handler is registered correctly.</p>\n<p>If the '@receiver' decorator is not applied first, the decorators placed above it will be ignored, which can result in unexpected behavior or even\nerrors in the application.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, simply move the '@receiver' decorator to the top of the list of decorators used to decorate the function.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom django.dispatch import receiver\nfrom django.views.decorators.csrf import csrf_exempt\n\n@csrf_exempt\n@receiver(some_signal)\ndef my_handler(sender, **kwargs):\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nfrom django.dispatch import receiver\nfrom django.views.decorators.csrf import csrf_exempt\n\n@receiver(some_signal)\n@csrf_exempt\ndef my_handler(sender, **kwargs):\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.djangoproject.com/en/4.1/topics/signals/\">Django signals</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6468",
          "name": "ExceptionGroup and BaseExceptionGroup should not be caught with except*",
          "description": "<p>Catching <code>ExceptionGroup</code> with <code>except*</code> will raise a <code>TypeError</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>Python 3.11 introduced <code>except*</code> and <code>ExceptionGroup</code>, making it possible to handle and raise multiple unrelated exceptions\nsimultaneously.</p>\n<p>In the example below, we gather multiple exceptions in an <code>ExceptionGroup</code>. This <code>ExceptionGroup</code> is then caught by a single\nexcept block:</p>\n<pre>\ntry:\n  exception_group = ExceptionGroup(\"Files not found\", [FileNotFoundError(\"file1.py\"), FileNotFoundError(\"file2.py\")])\n\n  raise exception_group\n\nexcept ExceptionGroup as exceptions:\n  # Do something with all the exceptions\n  pass\n</pre>\n<p>To handle differently each type of exceptions present in an <code>ExceptionGroup</code>, we have to use the <code>except*</code> keyword.</p>\n<pre>\ntry:\n  exception_group = ExceptionGroup(\"Operation errors\", [ValueError(\"Value bigger than 100\"), TypeError(\"Type str is not allowed\")])\n\n  raise exception_group\n\nexcept* ValueError as v:\n  # Do something with only ValueErrors\n  pass\n\nexcept* TypeError as t:\n  # Do something with only TypeErrors\n  pass\n</pre>\n<p>While it is possible to catch the <code>ExceptionGroup</code> and <code>BaseExceptionGroup</code> types with <code>except</code>, a\n<code>TypeError</code> will be raised when this is done with <code>except*</code>.</p>\n<h2>How to fix it</h2>\n<p>Make sure to use <code>except</code> when catching ExceptionGroup errors.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ntry:\n    ...\nexcept* ExceptionGroup:  # Noncompliant: TypeError\n    pass\n\ntry:\n    ...\nexcept* (TypeError, ExceptionGroup):  # Noncompliant: TypeError\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntry:\n    ...\nexcept ExceptionGroup:\n    pass\n\ntry:\n    ...\nexcept (TypeError, ExceptionGroup):\n    pass\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://peps.python.org/pep-0654/#forbidden-combinations\">PEP-654</a> - Forbidden combinations </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Catching <code>ExceptionGroup</code> with <code>except*</code> will raise a <code>TypeError</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>Python 3.11 introduced <code>except*</code> and <code>ExceptionGroup</code>, making it possible to handle and raise multiple unrelated exceptions\nsimultaneously.</p>\n<p>In the example below, we gather multiple exceptions in an <code>ExceptionGroup</code>. This <code>ExceptionGroup</code> is then caught by a single\nexcept block:</p>\n<pre>\ntry:\n  exception_group = ExceptionGroup(\"Files not found\", [FileNotFoundError(\"file1.py\"), FileNotFoundError(\"file2.py\")])\n\n  raise exception_group\n\nexcept ExceptionGroup as exceptions:\n  # Do something with all the exceptions\n  pass\n</pre>\n<p>To handle differently each type of exceptions present in an <code>ExceptionGroup</code>, we have to use the <code>except*</code> keyword.</p>\n<pre>\ntry:\n  exception_group = ExceptionGroup(\"Operation errors\", [ValueError(\"Value bigger than 100\"), TypeError(\"Type str is not allowed\")])\n\n  raise exception_group\n\nexcept* ValueError as v:\n  # Do something with only ValueErrors\n  pass\n\nexcept* TypeError as t:\n  # Do something with only TypeErrors\n  pass\n</pre>\n<p>While it is possible to catch the <code>ExceptionGroup</code> and <code>BaseExceptionGroup</code> types with <code>except</code>, a\n<code>TypeError</code> will be raised when this is done with <code>except*</code>.</p>\n<h2>How to fix it</h2>\n<p>Make sure to use <code>except</code> when catching ExceptionGroup errors.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ntry:\n    ...\nexcept* ExceptionGroup:  # Noncompliant: TypeError\n    pass\n\ntry:\n    ...\nexcept* (TypeError, ExceptionGroup):  # Noncompliant: TypeError\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntry:\n    ...\nexcept ExceptionGroup:\n    pass\n\ntry:\n    ...\nexcept (TypeError, ExceptionGroup):\n    pass\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://peps.python.org/pep-0654/#forbidden-combinations\">PEP-654</a> - Forbidden combinations </li>\n</ul>\n\n"
        },
        {
          "id": "S6417",
          "name": "Collections should not be modified while they are iterated",
          "description": "<p>This rule raises an issue when a method modifies the size of a collection, while the same collection is iterated.</p>\n<h2>Why is this an issue?</h2>\n<p>Iterating over a collection using a <code>for</code> loop in Python relies on iterators.</p>\n<p>An iterator is an object that allows you to traverse a collection of elements, such as a list or a dictionary. Iterators are used in\n<code>for</code> loops to iterate over the elements of a collection one at a time.</p>\n<p>When you create an iterator, it keeps track of the current position in the collection and provides a way to access the next element. The\n<code>next()</code> function is used to retrieve the next element from the iterator. When there are no more elements to iterate over, the\n<code>next()</code> function raises a StopIteration exception and the iteration stops.</p>\n<p>It is important to note that iterators are designed to be read-only. Modifying a collection while iterating over it can cause unexpected behavior,\nas the iterator may skip over or repeat elements. A <code>RuntimeError</code> may also be raised in this situation, with the message <code>changed\nsize during iteration</code>. Therefore, it is important to avoid modifying a collection while iterating over it to ensure that your code behaves as\nexpected.</p>\n<p>If you still want to modify the collection, it is best to use a second collection or to iterate over a copy of the original collection instead.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef my_fun():\n    my_dict = {'a': 1, 'b': 2, 'c': 3}\n    for key in my_dict:\n        if my_dict[key] == 'foo':\n            my_dict.pop(key) # Noncompliant: this will make the iteration unreliable\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef my_fun():\n    my_dict = {'a': 1, 'b': 2, 'c': 3}\n    for key in list(my_dict.keys()):\n        if my_dict[key] == 'foo':\n            my_dict.pop(key)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/tutorial/controlflow.html#for-statements\"><code>for</code> Statements</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a method modifies the size of a collection, while the same collection is iterated.</p>\n<h2>Why is this an issue?</h2>\n<p>Iterating over a collection using a <code>for</code> loop in Python relies on iterators.</p>\n<p>An iterator is an object that allows you to traverse a collection of elements, such as a list or a dictionary. Iterators are used in\n<code>for</code> loops to iterate over the elements of a collection one at a time.</p>\n<p>When you create an iterator, it keeps track of the current position in the collection and provides a way to access the next element. The\n<code>next()</code> function is used to retrieve the next element from the iterator. When there are no more elements to iterate over, the\n<code>next()</code> function raises a StopIteration exception and the iteration stops.</p>\n<p>It is important to note that iterators are designed to be read-only. Modifying a collection while iterating over it can cause unexpected behavior,\nas the iterator may skip over or repeat elements. A <code>RuntimeError</code> may also be raised in this situation, with the message <code>changed\nsize during iteration</code>. Therefore, it is important to avoid modifying a collection while iterating over it to ensure that your code behaves as\nexpected.</p>\n<p>If you still want to modify the collection, it is best to use a second collection or to iterate over a copy of the original collection instead.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef my_fun():\n    my_dict = {'a': 1, 'b': 2, 'c': 3}\n    for key in my_dict:\n        if my_dict[key] == 'foo':\n            my_dict.pop(key) # Noncompliant: this will make the iteration unreliable\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef my_fun():\n    my_dict = {'a': 1, 'b': 2, 'c': 3}\n    for key in list(my_dict.keys()):\n        if my_dict[key] == 'foo':\n            my_dict.pop(key)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/tutorial/controlflow.html#for-statements\"><code>for</code> Statements</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6328",
          "name": "Replacement strings should reference existing regular expression groups",
          "description": "<h2>Why is this an issue?</h2>\n<p>The regex function <code>re.sub</code> can be used to perform a search and replace based on regular expression matches. The <code>repl</code>\nparameter can contain references to capturing groups used in the <code>pattern</code> parameter. This can be achieved with <code>\\n</code> to\nreference the n\u00e2\u20ac\u2122th group.</p>\n<p>When referencing a nonexistent group an error will be thrown for Python &lt; 3.5 or replaced by an empty string for Python &gt;= 3.5.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nre.sub(r\"(a)(b)(c)\", r\"\\1, \\9, \\3\", \"abc\") # Noncompliant - result is an re.error: invalid group reference\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nre.sub(r\"(a)(b)(c)\", r\"\\1, \\2, \\3\", \"abc\")\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.10/library/re.html#re.sub\">re.sub</a> - Python Documentation </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>The regex function <code>re.sub</code> can be used to perform a search and replace based on regular expression matches. The <code>repl</code>\nparameter can contain references to capturing groups used in the <code>pattern</code> parameter. This can be achieved with <code>\\n</code> to\nreference the n\u00e2\u20ac\u2122th group.</p>\n<p>When referencing a nonexistent group an error will be thrown for Python &lt; 3.5 or replaced by an empty string for Python &gt;= 3.5.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nre.sub(r\"(a)(b)(c)\", r\"\\1, \\9, \\3\", \"abc\") # Noncompliant - result is an re.error: invalid group reference\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nre.sub(r\"(a)(b)(c)\", r\"\\1, \\2, \\3\", \"abc\")\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.10/library/re.html#re.sub\">re.sub</a> - Python Documentation </li>\n</ul>\n\n"
        },
        {
          "id": "S3984",
          "name": "Exceptions should not be created without being raised",
          "description": "<h2>Why is this an issue?</h2>\n<p>Creating a new <code>Exception</code> without actually raising it has no effect and is probably due to a mistake.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef func(x):\n    if not isinstance(x, int):\n        TypeError(\"Wrong type for parameter 'x'. func expects an integer\")  # Noncompliant\n    if x &lt; 0:\n        ValueError  # Noncompliant\n    return x + 42\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef func(x):\n    if not isinstance(x, int):\n        raise TypeError(\"Wrong type for parameter 'x'. func expects an integer\")\n    if x &lt; 0:\n        raise ValueError\n    return x + 42\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/errors.html#raising-exceptions\">Python documentation - Raising Exceptions</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Creating a new <code>Exception</code> without actually raising it has no effect and is probably due to a mistake.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef func(x):\n    if not isinstance(x, int):\n        TypeError(\"Wrong type for parameter 'x'. func expects an integer\")  # Noncompliant\n    if x &lt; 0:\n        ValueError  # Noncompliant\n    return x + 42\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef func(x):\n    if not isinstance(x, int):\n        raise TypeError(\"Wrong type for parameter 'x'. func expects an integer\")\n    if x &lt; 0:\n        raise ValueError\n    return x + 42\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/errors.html#raising-exceptions\">Python documentation - Raising Exceptions</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S3699",
          "name": "The output of functions that don't return anything should not be used",
          "description": "<p>This rule raises an issue when a function call result is used, even though the function does not return anything.</p>\n<h2>Why is this an issue?</h2>\n<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return nothing, which is probably not what was intended.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n  l = [1, 2, 3]\n  result = l.append(42) # Noncompliant, `append` mutates list l\n  return result\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n  l = [1, 2, 3]\n  l.append(42)\n  return l\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/tutorial/controlflow.html#defining-functions\">Defining Functions</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a function call result is used, even though the function does not return anything.</p>\n<h2>Why is this an issue?</h2>\n<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return nothing, which is probably not what was intended.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n  l = [1, 2, 3]\n  result = l.append(42) # Noncompliant, `append` mutates list l\n  return result\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n  l = [1, 2, 3]\n  l.append(42)\n  return l\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/tutorial/controlflow.html#defining-functions\">Defining Functions</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2259",
          "name": "Attributes should not be accessed on \"None\" values",
          "description": "<p>Accessing attributes on <code>None</code> is almost always a logical error and will raise an <code>AttributeError</code>. To fix this issue, make\nsure not to access an attribute or method on a value that can be <code>None</code>.</p>\n<h2>Why is this an issue?</h2>\n<p><code>None</code> is a built-in object that represents the absence of a value. It is often used as a placeholder value for variables that only\nsometimes hold a value or as a return value for method calls that have no result.</p>\n<p>Attributes and methods of symbols that sometimes can be <code>None</code> should only be accessed in circumstances where it is certain that they\nare not set to <code>None</code>. Otherwise, an <code>AttributeError</code> is raised, and the program is interrupted. Hence, this issue indicates a\nlogical error as it results from incorrect assumptions about the state of variables or the results of computations.</p>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<p>If a <code>None</code> value can be induced by user input, this issue may even be exploited by attackers to disrupt your application or gain\ninformation from stack traces.</p>\n<h3>Exceptions</h3>\n<p><code>None</code> does support a fixed set of special attributes like <code>__class__</code> or <code>__bool__</code>, and this issue is not raised\nwhen accessing these attributes.</p>\n<h2>How to fix it</h2>\n<p>If your code contains <code>if-else</code> statements or similar constructs where some branches potentially assign the <code>None</code> value to a\nvariable, you must ensure that this variable is handled safely afterwards. I.e., its attributes should not be accessed at all or only after explicitly\nconfirming that it is not <code>None</code>.</p>\n<p>Similarly, for any function calls that can return <code>None</code> under certain conditions, carefully confirm that your code avoids these\nconditions. Again, the safest approach is to check for a <code>None</code> return value explicitly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef render(file_path):\n    if os.path.isfile(file_path):\n        data = interpret_csv(file_path)\n    else:\n        data = None\n\n    # ...\n\n    data.plot_graph() # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef render(file_path):\n    if os.path.isfile(file_path):\n        data = interpret_csv(file_path)\n    else:\n        data = None\n\n    # ...\n\n    if data is not None:\n        data.plot_graph()\n    else:\n        print(\"No data available.\")\n</pre>\n<h3>How does this work?</h3>\n<p>In the given example, the function <code>render</code> tries to load information into a variable <code>data</code>, depending on whether\n<code>file_path</code> is a path to a file. If this is not the case, <code>None</code> is assigned to <code>data</code>.</p>\n<p>At the end of the function, a method <code>plot_graph()</code> is called on <code>data</code>. The call is sure to fail if <code>data</code> was\nassigned to <code>None</code>. This is prevented by checking first whether <code>data</code> is not <code>None</code> before performing the call.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> The Python Data Model on <a href=\"https://docs.python.org/3/reference/datamodel.html#none\">None</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/exceptions.html#AttributeError\">Attribute Error</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/expressions.html#attribute-references\">Attribute References</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> CVE - <a href=\"https://cwe.mitre.org/data/definitions/476\">CWE-476 - NULL Pointer Dereference</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Accessing attributes on <code>None</code> is almost always a logical error and will raise an <code>AttributeError</code>. To fix this issue, make\nsure not to access an attribute or method on a value that can be <code>None</code>.</p>\n<h2>Why is this an issue?</h2>\n<p><code>None</code> is a built-in object that represents the absence of a value. It is often used as a placeholder value for variables that only\nsometimes hold a value or as a return value for method calls that have no result.</p>\n<p>Attributes and methods of symbols that sometimes can be <code>None</code> should only be accessed in circumstances where it is certain that they\nare not set to <code>None</code>. Otherwise, an <code>AttributeError</code> is raised, and the program is interrupted. Hence, this issue indicates a\nlogical error as it results from incorrect assumptions about the state of variables or the results of computations.</p>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<p>If a <code>None</code> value can be induced by user input, this issue may even be exploited by attackers to disrupt your application or gain\ninformation from stack traces.</p>\n<h3>Exceptions</h3>\n<p><code>None</code> does support a fixed set of special attributes like <code>__class__</code> or <code>__bool__</code>, and this issue is not raised\nwhen accessing these attributes.</p>\n<h2>How to fix it</h2>\n<p>If your code contains <code>if-else</code> statements or similar constructs where some branches potentially assign the <code>None</code> value to a\nvariable, you must ensure that this variable is handled safely afterwards. I.e., its attributes should not be accessed at all or only after explicitly\nconfirming that it is not <code>None</code>.</p>\n<p>Similarly, for any function calls that can return <code>None</code> under certain conditions, carefully confirm that your code avoids these\nconditions. Again, the safest approach is to check for a <code>None</code> return value explicitly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef render(file_path):\n    if os.path.isfile(file_path):\n        data = interpret_csv(file_path)\n    else:\n        data = None\n\n    # ...\n\n    data.plot_graph() # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef render(file_path):\n    if os.path.isfile(file_path):\n        data = interpret_csv(file_path)\n    else:\n        data = None\n\n    # ...\n\n    if data is not None:\n        data.plot_graph()\n    else:\n        print(\"No data available.\")\n</pre>\n<h3>How does this work?</h3>\n<p>In the given example, the function <code>render</code> tries to load information into a variable <code>data</code>, depending on whether\n<code>file_path</code> is a path to a file. If this is not the case, <code>None</code> is assigned to <code>data</code>.</p>\n<p>At the end of the function, a method <code>plot_graph()</code> is called on <code>data</code>. The call is sure to fail if <code>data</code> was\nassigned to <code>None</code>. This is prevented by checking first whether <code>data</code> is not <code>None</code> before performing the call.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> The Python Data Model on <a href=\"https://docs.python.org/3/reference/datamodel.html#none\">None</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/exceptions.html#AttributeError\">Attribute Error</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/expressions.html#attribute-references\">Attribute References</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> CVE - <a href=\"https://cwe.mitre.org/data/definitions/476\">CWE-476 - NULL Pointer Dereference</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2201",
          "name": "Return values from functions without side effects should not be ignored",
          "description": "<h2>Why is this an issue?</h2>\n<p>When the call to a function doesn\u00e2\u20ac\u2122t have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn\u00e2\u20ac\u2122t behave as expected.</p>\n<p>This rule raises an issue when a builtin function or methods which has no side effects is called and its result is not used.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nmyvar = \"this is a multiline\"\n\"message from {}\".format(sender)  # Noncompliant. The formatted string is not used because the concatenation is not done properly.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nmyvar = (\"this is a multiline\"\n\"message from {}\".format(sender))\n</pre>\n<h3>Exceptions</h3>\n<p>No issue will be raised when the function or method call is in a <code>try...except</code> body. This usually indicates that an exception is\nexpected, and this exception is the side-effect.</p>\n<pre>\ndef tryExcept():\n    d = {}\n    try:\n        d[1]\n    except IndexError as e:\n        pass\n\n    try:\n        divmod(1, 0)\n    except ZeroDivisionError as e:\n        pass\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html\">Python documentation - Built-in Functions</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>When the call to a function doesn\u00e2\u20ac\u2122t have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn\u00e2\u20ac\u2122t behave as expected.</p>\n<p>This rule raises an issue when a builtin function or methods which has no side effects is called and its result is not used.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nmyvar = \"this is a multiline\"\n\"message from {}\".format(sender)  # Noncompliant. The formatted string is not used because the concatenation is not done properly.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nmyvar = (\"this is a multiline\"\n\"message from {}\".format(sender))\n</pre>\n<h3>Exceptions</h3>\n<p>No issue will be raised when the function or method call is in a <code>try...except</code> body. This usually indicates that an exception is\nexpected, and this exception is the side-effect.</p>\n<pre>\ndef tryExcept():\n    d = {}\n    try:\n        d[1]\n    except IndexError as e:\n        pass\n\n    try:\n        divmod(1, 0)\n    except ZeroDivisionError as e:\n        pass\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html\">Python documentation - Built-in Functions</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1045",
          "name": "All \"except\" blocks should be able to catch exceptions",
          "description": "<p>This rule raises an issue when an <code>except</code> statement has had all its exceptions caught by a previous <code>except</code> clause.</p>\n<h2>Why is this an issue?</h2>\n<p>Exceptions handlers (<code>except</code>) are evaluated in the order they are written. Once a match is found, the evaluation stops.</p>\n<p>In some contexts, an except block is dead code as it will never catch any exception:</p>\n<ul>\n  <li> If there is a handler for a base class followed by a handler for class derived from that base class, the second handler will never trigger: The\n  handler for the base class will match the derived class, and will be the only executed handler. </li>\n  <li> When multiple <code>except</code> statements try to catch the same exception class, only the first one will be executed. </li>\n  <li> In Python 3, <code>BaseException</code> is the parent of every exception class. When a <code>BaseException</code> is caught by an\n  <code>except</code> clause, none of the subsequent <code>except</code> statement will catch anything. This is true as well for the bare except\n  statement (<code>except:</code>). </li>\n</ul>\n<h2>How to fix it</h2>\n<p>When using multiple <code>except</code> statements, make sure to:</p>\n<ul>\n  <li> Order the <code>except</code> blocks from the most specialzed exception to the most generic, i.e when wanting to catch a\n  <code>FloatingPointError</code> and an <code>ArithemticError</code>, as <code>FloatingPointError</code> is a subclass of\n  <code>ArithmeticError</code>, the first <code>except</code> statement should be <code>FloatingPointError</code>. </li>\n  <li> Catch the same exception only once. </li>\n  <li> Catch a <code>BaseException</code> only once with either an <code>except BaseException:</code> statement or a bare <code>except:</code>\n  statement, as the two statements are equivalent. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    try:\n        raise FloatingPointError()\n    except (ArithmeticError, RuntimeError) as e:\n        print(e)\n    except FloatingPointError as e: # Noncompliant: FloatingPointError is a subclass of ArithmeticError.\n        print(\"Never executed\")\n    except OverflowError as e: # Noncompliant: OverflowError is a subclass of ArithmeticError.\n        print(\"Never executed\")\n\n    try:\n        raise TypeError()\n    except TypeError as e:\n        print(e)\n    except TypeError as e: # Noncompliant: duplicate except.\n        print(\"Never executed\")\n\n    try:\n        raise ValueError()\n    except BaseException as e:\n        print(e)\n    except: # Noncompliant: this is equivalent to \"except BaseException\" block.\n        print(\"Never executed\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    try:\n        raise FloatingPointError()\n    except FloatingPointError as e:\n        print(\"Executed\")\n    except OverflowError as e:\n        print(\"Executed\")\n    except (ArithmeticError, RuntimeError) as e:\n        print(e)\n\n    try:\n        raise TypeError()\n    except TypeError as e:\n        print(e)\n\n    try:\n        raise ValueError()\n    except BaseException as e:\n        print(e)\n</pre>\n<p><strong>Note</strong>: <em>It is generally not recommended to try catching <code>BaseException</code>, as it is the base class for all built-in\nexceptions in Python, including system-exiting exceptions like <code>SystemExit</code> or <code>KeyboardInterrupt</code>, which are typically not\nmeant to be caught. See <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352</a> for more information.</em></p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-try-statement\">The <code>try</code> statement</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\">Exception hierarchy</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when an <code>except</code> statement has had all its exceptions caught by a previous <code>except</code> clause.</p>\n<h2>Why is this an issue?</h2>\n<p>Exceptions handlers (<code>except</code>) are evaluated in the order they are written. Once a match is found, the evaluation stops.</p>\n<p>In some contexts, an except block is dead code as it will never catch any exception:</p>\n<ul>\n  <li> If there is a handler for a base class followed by a handler for class derived from that base class, the second handler will never trigger: The\n  handler for the base class will match the derived class, and will be the only executed handler. </li>\n  <li> When multiple <code>except</code> statements try to catch the same exception class, only the first one will be executed. </li>\n  <li> In Python 3, <code>BaseException</code> is the parent of every exception class. When a <code>BaseException</code> is caught by an\n  <code>except</code> clause, none of the subsequent <code>except</code> statement will catch anything. This is true as well for the bare except\n  statement (<code>except:</code>). </li>\n</ul>\n<h2>How to fix it</h2>\n<p>When using multiple <code>except</code> statements, make sure to:</p>\n<ul>\n  <li> Order the <code>except</code> blocks from the most specialzed exception to the most generic, i.e when wanting to catch a\n  <code>FloatingPointError</code> and an <code>ArithemticError</code>, as <code>FloatingPointError</code> is a subclass of\n  <code>ArithmeticError</code>, the first <code>except</code> statement should be <code>FloatingPointError</code>. </li>\n  <li> Catch the same exception only once. </li>\n  <li> Catch a <code>BaseException</code> only once with either an <code>except BaseException:</code> statement or a bare <code>except:</code>\n  statement, as the two statements are equivalent. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    try:\n        raise FloatingPointError()\n    except (ArithmeticError, RuntimeError) as e:\n        print(e)\n    except FloatingPointError as e: # Noncompliant: FloatingPointError is a subclass of ArithmeticError.\n        print(\"Never executed\")\n    except OverflowError as e: # Noncompliant: OverflowError is a subclass of ArithmeticError.\n        print(\"Never executed\")\n\n    try:\n        raise TypeError()\n    except TypeError as e:\n        print(e)\n    except TypeError as e: # Noncompliant: duplicate except.\n        print(\"Never executed\")\n\n    try:\n        raise ValueError()\n    except BaseException as e:\n        print(e)\n    except: # Noncompliant: this is equivalent to \"except BaseException\" block.\n        print(\"Never executed\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    try:\n        raise FloatingPointError()\n    except FloatingPointError as e:\n        print(\"Executed\")\n    except OverflowError as e:\n        print(\"Executed\")\n    except (ArithmeticError, RuntimeError) as e:\n        print(e)\n\n    try:\n        raise TypeError()\n    except TypeError as e:\n        print(e)\n\n    try:\n        raise ValueError()\n    except BaseException as e:\n        print(e)\n</pre>\n<p><strong>Note</strong>: <em>It is generally not recommended to try catching <code>BaseException</code>, as it is the base class for all built-in\nexceptions in Python, including system-exiting exceptions like <code>SystemExit</code> or <code>KeyboardInterrupt</code>, which are typically not\nmeant to be caught. See <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352</a> for more information.</em></p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-try-statement\">The <code>try</code> statement</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\">Exception hierarchy</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6985",
          "name": "Usage of \"torch.load\" can lead to untrusted code execution",
          "description": "<p>This rule raises an issue when <code>pytorch.load</code> is used to load a model.</p>\n<h2>Why is this an issue?</h2>\n<p>In PyTorch, it is common to load serialized models using the <code>torch.load</code> function. Under the hood, <code>torch.load</code> uses the\n<code>pickle</code> library to load the model and the weights. If the model comes from an untrusted source, an attacker could inject a malicious\npayload which would be executed during the deserialization.</p>\n<h2>How to fix it</h2>\n<p>Use a safer alternative to load the model, such as <code>safetensors.torch.load_model</code>. Alternatively, PyTorch can be instructed to only load\nthe weights by setting the parameter <code>weights_only=True</code>. This avoids the use of the <code>pickle</code> library and is therefore safe.\nNote that the use of <code>weights_only</code> requires saving only the <code>state_dict</code> of a model instead of the whole model.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport torch\n\nmodel = torch.load('model.pth') # Noncompliant: torch.load is used to load the model\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport torch\nimport safetensors\n\nmodel = MyModel()\nsafetensors.torch.load_model(model, 'model.pth')\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pytorch documentation: <a href=\"https://pytorch.org/tutorials/beginner/saving_loading_models.html#save-load-entire-model\">Save/Load Entire\n  Model</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when <code>pytorch.load</code> is used to load a model.</p>\n<h2>Why is this an issue?</h2>\n<p>In PyTorch, it is common to load serialized models using the <code>torch.load</code> function. Under the hood, <code>torch.load</code> uses the\n<code>pickle</code> library to load the model and the weights. If the model comes from an untrusted source, an attacker could inject a malicious\npayload which would be executed during the deserialization.</p>\n<h2>How to fix it</h2>\n<p>Use a safer alternative to load the model, such as <code>safetensors.torch.load_model</code>. Alternatively, PyTorch can be instructed to only load\nthe weights by setting the parameter <code>weights_only=True</code>. This avoids the use of the <code>pickle</code> library and is therefore safe.\nNote that the use of <code>weights_only</code> requires saving only the <code>state_dict</code> of a model instead of the whole model.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport torch\n\nmodel = torch.load('model.pth') # Noncompliant: torch.load is used to load the model\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport torch\nimport safetensors\n\nmodel = MyModel()\nsafetensors.torch.load_model(model, 'model.pth')\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pytorch documentation: <a href=\"https://pytorch.org/tutorials/beginner/saving_loading_models.html#save-load-entire-model\">Save/Load Entire\n  Model</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6463",
          "name": "Allowing unrestricted outbound communications is security-sensitive",
          "description": "<p>Allowing unrestricted outbound communications can lead to data leaks.</p>\n<p>A restrictive security group is an additional layer of protection that might prevent the abuse or exploitation of a resource. For example, it\ncomplicates the exfiltration of data in the case of a successfully exploited vulnerability.</p>\n<p>When deciding if outgoing connections should be limited, consider that limiting the connections results in additional administration and\nmaintenance work.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The resource has access to sensitive data. </li>\n  <li> The resource is part of a private network. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to restrict outgoing connections to a set of trusted destinations.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_ec2 as ec2\n)\n\nec2.SecurityGroup(  # Sensitive; allow_all_outbound is enabled by default\n    self,\n    \"example\",\n    vpc=vpc\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_ec2 as ec2\n)\n\nsg = ec2.SecurityGroup(\n    self,\n    \"example\",\n    vpc=vpc,\n    allow_all_outbound=False\n)\n\nsg.add_egress_rule(\n    peer=ec2.Peer.ipv4(\"203.0.113.127/32\"),\n    connection=ec2.Port.tcp(443)\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\">AWS Documentation</a> - Control traffic to resources using\n  security groups </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Allowing unrestricted outbound communications can lead to data leaks.</p>\n<p>A restrictive security group is an additional layer of protection that might prevent the abuse or exploitation of a resource. For example, it\ncomplicates the exfiltration of data in the case of a successfully exploited vulnerability.</p>\n<p>When deciding if outgoing connections should be limited, consider that limiting the connections results in additional administration and\nmaintenance work.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The resource has access to sensitive data. </li>\n  <li> The resource is part of a private network. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to restrict outgoing connections to a set of trusted destinations.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_ec2 as ec2\n)\n\nec2.SecurityGroup(  # Sensitive; allow_all_outbound is enabled by default\n    self,\n    \"example\",\n    vpc=vpc\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_ec2 as ec2\n)\n\nsg = ec2.SecurityGroup(\n    self,\n    \"example\",\n    vpc=vpc,\n    allow_all_outbound=False\n)\n\nsg.add_egress_rule(\n    peer=ec2.Peer.ipv4(\"203.0.113.127/32\"),\n    connection=ec2.Port.tcp(443)\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\">AWS Documentation</a> - Control traffic to resources using\n  security groups </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6332",
          "name": "Using unencrypted EFS file systems is security-sensitive",
          "description": "<p>Amazon Elastic File System (EFS) is a serverless file system that does not require provisioning or managing storage. Stored files can be\nautomatically encrypted by the service. In the case that adversaries gain physical access to the storage medium or otherwise leak a message they are\nnot able to access the data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The file system contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to encrypt EFS file systems that contain sensitive information. Encryption and decryption are handled transparently by EFS, so no\nfurther modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.FileSystem.html\">aws_cdk.aws_efs.FileSystem</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.CfnFileSystem.html\">aws_cdk.aws_efs.CfnFileSystem</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_efs as efs\n)\n\nefs.FileSystem(\n    self,\n    \"example\",\n    encrypted=False  # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.FileSystem.html\">aws_cdk.aws_efs.FileSystem</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.CfnFileSystem.html\">aws_cdk.aws_efs.CfnFileSystem</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_efs as efs\n)\n\nefs.FileSystem(\n    self,\n    \"example\",\n    encrypted=True\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/efs/latest/ug/encryption.html\">AWS Documentation</a> - Data encryption in Amazon EFS </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Amazon Elastic File System (EFS) is a serverless file system that does not require provisioning or managing storage. Stored files can be\nautomatically encrypted by the service. In the case that adversaries gain physical access to the storage medium or otherwise leak a message they are\nnot able to access the data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The file system contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to encrypt EFS file systems that contain sensitive information. Encryption and decryption are handled transparently by EFS, so no\nfurther modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.FileSystem.html\">aws_cdk.aws_efs.FileSystem</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.CfnFileSystem.html\">aws_cdk.aws_efs.CfnFileSystem</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_efs as efs\n)\n\nefs.FileSystem(\n    self,\n    \"example\",\n    encrypted=False  # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.FileSystem.html\">aws_cdk.aws_efs.FileSystem</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.CfnFileSystem.html\">aws_cdk.aws_efs.CfnFileSystem</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_efs as efs\n)\n\nefs.FileSystem(\n    self,\n    \"example\",\n    encrypted=True\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/efs/latest/ug/encryption.html\">AWS Documentation</a> - Data encryption in Amazon EFS </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6330",
          "name": "Using unencrypted SQS queues is security-sensitive",
          "description": "<p>Amazon Simple Queue Service (SQS) is a managed message queuing service for application-to-application (A2A) communication. Amazon SQS can store\nmessages encrypted as soon as they are received. In the case that adversaries gain physical access to the storage medium or otherwise leak a message\nfrom the file system, for example through a vulnerability in the service, they are not able to access the data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The queue contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to encrypt SQS queues that contain sensitive information. Encryption and decryption are handled transparently by SQS, so no\nfurther modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.CfnQueue.html\">aws_cdk.aws_sqs.CfnQueue</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sqs as sqs\n)\n\nclass CfnQueueStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sqs.CfnQueue(\n            self,\n            \"example\",\n            sqs_managed_sse_enabled=False # Sensitive, unencrypted\n        )\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.CfnQueue.html\">aws_cdk.aws_sqs.CfnQueue</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sqs as sqs\n)\n\nclass CfnQueueStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sqs.CfnQueue(\n            self,\n            \"example\",\n            sqs_managed_sse_enabled=True\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\">AWS Documentation</a> -\n  Encryption at rest </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222588\">Application Security and\n  Development: V-222588</a> - The application must implement approved cryptographic mechanisms to prevent unauthorized modification of information at\n  rest. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Amazon Simple Queue Service (SQS) is a managed message queuing service for application-to-application (A2A) communication. Amazon SQS can store\nmessages encrypted as soon as they are received. In the case that adversaries gain physical access to the storage medium or otherwise leak a message\nfrom the file system, for example through a vulnerability in the service, they are not able to access the data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The queue contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to encrypt SQS queues that contain sensitive information. Encryption and decryption are handled transparently by SQS, so no\nfurther modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.CfnQueue.html\">aws_cdk.aws_sqs.CfnQueue</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sqs as sqs\n)\n\nclass CfnQueueStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sqs.CfnQueue(\n            self,\n            \"example\",\n            sqs_managed_sse_enabled=False # Sensitive, unencrypted\n        )\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.CfnQueue.html\">aws_cdk.aws_sqs.CfnQueue</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sqs as sqs\n)\n\nclass CfnQueueStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sqs.CfnQueue(\n            self,\n            \"example\",\n            sqs_managed_sse_enabled=True\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\">AWS Documentation</a> -\n  Encryption at rest </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222588\">Application Security and\n  Development: V-222588</a> - The application must implement approved cryptographic mechanisms to prevent unauthorized modification of information at\n  rest. </li>\n</ul>\n\n"
        },
        {
          "id": "S6327",
          "name": "Using unencrypted SNS topics is security-sensitive",
          "description": "<p>Amazon Simple Notification Service (SNS) is a managed messaging service for application-to-application (A2A) and application-to-person (A2P)\ncommunication. SNS topics allows publisher systems to fanout messages to a large number of subscriber systems. Amazon SNS allows to encrypt messages\nwhen they are received. In the case that adversaries gain physical access to the storage medium or otherwise leak a message they are not able to\naccess the data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The topic contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to encrypt SNS topics that contain sensitive information. Encryption and decryption are handled transparently by SNS, so no\nfurther modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.Topic.html\">aws_cdk.aws_sns.Topic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sns.Topic( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.CfnTopic.html\">aws_cdk.aws_sns.CfnTopic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sns.CfnTopic( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.Topic.html\">aws_cdk.aws_sns.Topic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        my_key = kms.Key(self, \"key\")\n        sns.Topic(\n            self,\n            \"example\",\n            master_key=my_key\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.CfnTopic.html\">aws_cdk.aws_sns.CfnTopic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        my_key = kms.Key(self, \"key\")\n        sns.CfnTopic(\n            self,\n            \"example\",\n            kms_master_key_id=my_key.key_id\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\">AWS Documentation</a> - Encryption at rest </li>\n  <li> <a href=\"https://aws.amazon.com/blogs/compute/encrypting-messages-published-to-amazon-sns-with-aws-kms/\">Encrypting messages published to\n  Amazon SNS with AWS KMS</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222588\">Application Security and\n  Development: V-222588</a> - The application must implement approved cryptographic mechanisms to prevent unauthorized modification of information at\n  rest. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Amazon Simple Notification Service (SNS) is a managed messaging service for application-to-application (A2A) and application-to-person (A2P)\ncommunication. SNS topics allows publisher systems to fanout messages to a large number of subscriber systems. Amazon SNS allows to encrypt messages\nwhen they are received. In the case that adversaries gain physical access to the storage medium or otherwise leak a message they are not able to\naccess the data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The topic contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to encrypt SNS topics that contain sensitive information. Encryption and decryption are handled transparently by SNS, so no\nfurther modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.Topic.html\">aws_cdk.aws_sns.Topic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sns.Topic( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.CfnTopic.html\">aws_cdk.aws_sns.CfnTopic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sns.CfnTopic( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.Topic.html\">aws_cdk.aws_sns.Topic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        my_key = kms.Key(self, \"key\")\n        sns.Topic(\n            self,\n            \"example\",\n            master_key=my_key\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.CfnTopic.html\">aws_cdk.aws_sns.CfnTopic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        my_key = kms.Key(self, \"key\")\n        sns.CfnTopic(\n            self,\n            \"example\",\n            kms_master_key_id=my_key.key_id\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\">AWS Documentation</a> - Encryption at rest </li>\n  <li> <a href=\"https://aws.amazon.com/blogs/compute/encrypting-messages-published-to-amazon-sns-with-aws-kms/\">Encrypting messages published to\n  Amazon SNS with AWS KMS</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222588\">Application Security and\n  Development: V-222588</a> - The application must implement approved cryptographic mechanisms to prevent unauthorized modification of information at\n  rest. </li>\n</ul>\n\n"
        },
        {
          "id": "S6308",
          "name": "Using unencrypted OpenSearch domains is security-sensitive",
          "description": "<p>Amazon OpenSearch Service is a managed service to host OpenSearch instances. It replaces Elasticsearch Service, which has been deprecated.</p>\n<p>To harden domain (cluster) data in case of unauthorized access, OpenSearch provides data-at-rest encryption if the engine is OpenSearch (any\nversion), or Elasticsearch with a version of 5.1 or above. Enabling encryption at rest will help protect:</p>\n<ul>\n  <li> indices </li>\n  <li> logs </li>\n  <li> swap files </li>\n  <li> data in the application directory </li>\n  <li> automated snapshots </li>\n</ul>\n<p>Thus, adversaries cannot access the data if they gain physical access to the storage medium.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The database contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to encrypt OpenSearch domains that contain sensitive information.</p>\n<p>OpenSearch handles encryption and decryption transparently, so no further modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/Domain.html\">aws_cdk.aws_opensearchservice.Domain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import Domain, EngineVersion\n\nclass DomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        Domain(self, \"Sensitive\",\n            version=EngineVersion.OPENSEARCH_1_3\n        ) # Sensitive, encryption is disabled by default\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/CfnDomain.html\">aws_cdk.aws_opensearchservice.CfnDomain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import CfnDomain\n\nclass CfnDomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        CfnDomain(self, \"Sensitive\") # Sensitive, encryption is disabled by default\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/Domain.html\">aws_cdk.aws_opensearchservice.Domain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import Domain, EncryptionAtRestOptions, EngineVersion\n\nclass DomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        Domain(self, \"Compliant\",\n            version=EngineVersion.OPENSEARCH_1_3,\n            encryption_at_rest=EncryptionAtRestOptions(\n                enabled=True\n            )\n        )\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/CfnDomain.html\">aws_cdk.aws_opensearchservice.CfnDomain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import CfnDomain\n\nclass CfnDomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        CfnDomain(self, \"Compliant\",\n            encryption_at_rest_options=CfnDomain.EncryptionAtRestOptionsProperty(\n                enabled=True\n            )\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/encryption-at-rest.html\">AWS Documentation</a> - Encryption of\n  data at rest for Amazon OpenSearch Service </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222588\">Application Security and\n  Development: V-222588</a> - The application must implement approved cryptographic mechanisms to prevent unauthorized modification of information at\n  rest. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Amazon OpenSearch Service is a managed service to host OpenSearch instances. It replaces Elasticsearch Service, which has been deprecated.</p>\n<p>To harden domain (cluster) data in case of unauthorized access, OpenSearch provides data-at-rest encryption if the engine is OpenSearch (any\nversion), or Elasticsearch with a version of 5.1 or above. Enabling encryption at rest will help protect:</p>\n<ul>\n  <li> indices </li>\n  <li> logs </li>\n  <li> swap files </li>\n  <li> data in the application directory </li>\n  <li> automated snapshots </li>\n</ul>\n<p>Thus, adversaries cannot access the data if they gain physical access to the storage medium.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The database contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to encrypt OpenSearch domains that contain sensitive information.</p>\n<p>OpenSearch handles encryption and decryption transparently, so no further modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/Domain.html\">aws_cdk.aws_opensearchservice.Domain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import Domain, EngineVersion\n\nclass DomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        Domain(self, \"Sensitive\",\n            version=EngineVersion.OPENSEARCH_1_3\n        ) # Sensitive, encryption is disabled by default\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/CfnDomain.html\">aws_cdk.aws_opensearchservice.CfnDomain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import CfnDomain\n\nclass CfnDomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        CfnDomain(self, \"Sensitive\") # Sensitive, encryption is disabled by default\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/Domain.html\">aws_cdk.aws_opensearchservice.Domain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import Domain, EncryptionAtRestOptions, EngineVersion\n\nclass DomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        Domain(self, \"Compliant\",\n            version=EngineVersion.OPENSEARCH_1_3,\n            encryption_at_rest=EncryptionAtRestOptions(\n                enabled=True\n            )\n        )\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/CfnDomain.html\">aws_cdk.aws_opensearchservice.CfnDomain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import CfnDomain\n\nclass CfnDomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        CfnDomain(self, \"Compliant\",\n            encryption_at_rest_options=CfnDomain.EncryptionAtRestOptionsProperty(\n                enabled=True\n            )\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/encryption-at-rest.html\">AWS Documentation</a> - Encryption of\n  data at rest for Amazon OpenSearch Service </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222588\">Application Security and\n  Development: V-222588</a> - The application must implement approved cryptographic mechanisms to prevent unauthorized modification of information at\n  rest. </li>\n</ul>\n\n"
        },
        {
          "id": "S6303",
          "name": "Using unencrypted RDS DB resources is security-sensitive",
          "description": "<p>Using unencrypted RDS DB resources exposes data to unauthorized access.<br> This includes database data, logs, automatic backups, read replicas,\nsnapshots, and cluster metadata.</p>\n<p>This situation can occur in a variety of scenarios, such as:</p>\n<ul>\n  <li> A malicious insider working at the cloud provider gains physical access to the storage device. </li>\n  <li> Unknown attackers penetrate the cloud provider\u00e2\u20ac\u2122s logical infrastructure and systems. </li>\n</ul>\n<p>After a successful intrusion, the underlying applications are exposed to:</p>\n<ul>\n  <li> theft of intellectual property and/or personal data </li>\n  <li> extortion </li>\n  <li> denial of services and security bypasses via data corruption or deletion </li>\n</ul>\n<p>AWS-managed encryption at rest reduces this risk with a simple switch.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The database contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to enable encryption at rest on any RDS DB resource, regardless of the engine.<br> In any case, no further maintenance is\nrequired as encryption at rest is fully managed by AWS.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseCluster.html\">aws_cdk.aws_rds.DatabaseCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseInstance.html\">aws_cdk.aws_rds.DatabaseInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.DatabaseCluster( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBCluster.html\">aws_cdk.aws_rds.CfnDBCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.CfnDBCluster( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseCluster.html\">aws_cdk.aws_rds.DatabaseCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseInstance.html\">aws_cdk.aws_rds.DatabaseInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.DatabaseCluster(\n            self,\n            \"example\",\n            storage_encrypted=True\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBCluster.html\">aws_cdk.aws_rds.CfnDBCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.CfnDBCluster(\n            self,\n            \"example\",\n            storage_encrypted=True\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html\">AWS Documentation</a> - Encrypting Amazon RDS\n  resources </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222588\">Application Security and\n  Development: V-222588</a> - The application must implement approved cryptographic mechanisms to prevent unauthorized modification of information at\n  rest. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Using unencrypted RDS DB resources exposes data to unauthorized access.<br> This includes database data, logs, automatic backups, read replicas,\nsnapshots, and cluster metadata.</p>\n<p>This situation can occur in a variety of scenarios, such as:</p>\n<ul>\n  <li> A malicious insider working at the cloud provider gains physical access to the storage device. </li>\n  <li> Unknown attackers penetrate the cloud provider\u00e2\u20ac\u2122s logical infrastructure and systems. </li>\n</ul>\n<p>After a successful intrusion, the underlying applications are exposed to:</p>\n<ul>\n  <li> theft of intellectual property and/or personal data </li>\n  <li> extortion </li>\n  <li> denial of services and security bypasses via data corruption or deletion </li>\n</ul>\n<p>AWS-managed encryption at rest reduces this risk with a simple switch.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The database contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to enable encryption at rest on any RDS DB resource, regardless of the engine.<br> In any case, no further maintenance is\nrequired as encryption at rest is fully managed by AWS.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseCluster.html\">aws_cdk.aws_rds.DatabaseCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseInstance.html\">aws_cdk.aws_rds.DatabaseInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.DatabaseCluster( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBCluster.html\">aws_cdk.aws_rds.CfnDBCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.CfnDBCluster( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseCluster.html\">aws_cdk.aws_rds.DatabaseCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseInstance.html\">aws_cdk.aws_rds.DatabaseInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.DatabaseCluster(\n            self,\n            \"example\",\n            storage_encrypted=True\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBCluster.html\">aws_cdk.aws_rds.CfnDBCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.CfnDBCluster(\n            self,\n            \"example\",\n            storage_encrypted=True\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html\">AWS Documentation</a> - Encrypting Amazon RDS\n  resources </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222588\">Application Security and\n  Development: V-222588</a> - The application must implement approved cryptographic mechanisms to prevent unauthorized modification of information at\n  rest. </li>\n</ul>\n\n"
        },
        {
          "id": "S6979",
          "name": "\"torch.tensor\" should be used instead of \"torch.autograd.Variable\"",
          "description": "<p>This rule raises when a <code>torch.autograd.Variable</code> is instantiated.</p>\n<h2>Why is this an issue?</h2>\n<p>The Pytorch Variable API has been deprecated. The behavior of Variables is now provided by the Pytorch tensors and can be controlled with the\n<code>requires_grad</code> parameter.</p>\n<p>The Variable API now returns tensors anyway, so there should not be any breaking changes.</p>\n<h2>How to fix it</h2>\n<p>Replace the call to <code>torch.autograd.Variable</code> with a call to <code>torch.tensor</code> and set the <code>requires_grad</code> attribute\nto <code>True</code> if needed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport torch\n\nx = torch.autograd.Variable(torch.tensor([1.0]), requires_grad=True) # Noncompliant\nx2 = torch.autograd.Variable(torch.tensor([1.0])) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport torch\n\nx = torch.tensor([1.0], requires_grad=True)\nx2 = torch.tensor([1.0])\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pytorch documentation - <a href=\"https://pytorch.org/docs/stable/autograd.html#variable-deprecated\">Variable API</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises when a <code>torch.autograd.Variable</code> is instantiated.</p>\n<h2>Why is this an issue?</h2>\n<p>The Pytorch Variable API has been deprecated. The behavior of Variables is now provided by the Pytorch tensors and can be controlled with the\n<code>requires_grad</code> parameter.</p>\n<p>The Variable API now returns tensors anyway, so there should not be any breaking changes.</p>\n<h2>How to fix it</h2>\n<p>Replace the call to <code>torch.autograd.Variable</code> with a call to <code>torch.tensor</code> and set the <code>requires_grad</code> attribute\nto <code>True</code> if needed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport torch\n\nx = torch.autograd.Variable(torch.tensor([1.0]), requires_grad=True) # Noncompliant\nx2 = torch.autograd.Variable(torch.tensor([1.0])) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport torch\n\nx = torch.tensor([1.0], requires_grad=True)\nx2 = torch.tensor([1.0])\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pytorch documentation - <a href=\"https://pytorch.org/docs/stable/autograd.html#variable-deprecated\">Variable API</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6974",
          "name": "Subclasses of Scikit-Learn's \"BaseEstimator\" should not set attributes ending with \"_\" in the \"__init__\" method",
          "description": "<p>This rule raises an issue when an attribute ending with <code>_</code> is set in the <code>__init__</code> method of a class inheriting from\nScikit-Learn <code>BaseEstimator</code></p>\n<h2>Why is this an issue?</h2>\n<p>On a Scikit-Learn estimator, attributes that have a trailing underscore represent attributes that are estimated. These attributes have to be set in\nthe fit method. Their presence is used to verify if an estimator has been fitted.</p>\n<pre>\nfrom sklearn.neighbors import KNeighborsClassifier\n\nX = [[0], [1], [2], [3]]\ny = [0, 0, 1, 1]\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X, y)\nknn.n_samples_fit_\n</pre>\n<p>In the example above the attributes of the <code>KNeighborsClassifier</code>, <code>n_samples_fit_</code> is set only after the estimator\u00e2\u20ac\u2122s\n<code>fit</code> method is called. Calling <code>n_samples_fit_</code> before the estimator is fitted would raise an <code>AttributeError</code>\nexception.</p>\n<p>When implementing a custom estimator by subclassing Scikit-Learn\u00e2\u20ac\u2122s <code>BaseEstimator</code>, it is important to follow the above convention and\nnot set attributes with a trailing underscore inside the <code>__init__</code> method.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, move the attributes with a trailing underscore from the <code>__init__</code> method to the <code>fit</code> method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom sklearn.base import BaseEstimator\n\nclass MyEstimator(BaseEstimator):\n    def __init__(self):\n        self.estimated_attribute_ = None # Noncompliant: an estimated attribute is set in the __init__ method.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom sklearn.base import BaseEstimator\n\nclass MyEstimator(BaseEstimator):\n    def fit(self, X, y):\n        self.estimated_attribute_ = some_estimation(X) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Scikit-Learn documentation - <a href=\"https://scikit-learn.org/stable/developers/develop.html#parameters-and-init\">Parameters and init</a>\n  </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when an attribute ending with <code>_</code> is set in the <code>__init__</code> method of a class inheriting from\nScikit-Learn <code>BaseEstimator</code></p>\n<h2>Why is this an issue?</h2>\n<p>On a Scikit-Learn estimator, attributes that have a trailing underscore represent attributes that are estimated. These attributes have to be set in\nthe fit method. Their presence is used to verify if an estimator has been fitted.</p>\n<pre>\nfrom sklearn.neighbors import KNeighborsClassifier\n\nX = [[0], [1], [2], [3]]\ny = [0, 0, 1, 1]\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X, y)\nknn.n_samples_fit_\n</pre>\n<p>In the example above the attributes of the <code>KNeighborsClassifier</code>, <code>n_samples_fit_</code> is set only after the estimator\u00e2\u20ac\u2122s\n<code>fit</code> method is called. Calling <code>n_samples_fit_</code> before the estimator is fitted would raise an <code>AttributeError</code>\nexception.</p>\n<p>When implementing a custom estimator by subclassing Scikit-Learn\u00e2\u20ac\u2122s <code>BaseEstimator</code>, it is important to follow the above convention and\nnot set attributes with a trailing underscore inside the <code>__init__</code> method.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, move the attributes with a trailing underscore from the <code>__init__</code> method to the <code>fit</code> method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom sklearn.base import BaseEstimator\n\nclass MyEstimator(BaseEstimator):\n    def __init__(self):\n        self.estimated_attribute_ = None # Noncompliant: an estimated attribute is set in the __init__ method.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom sklearn.base import BaseEstimator\n\nclass MyEstimator(BaseEstimator):\n    def fit(self, X, y):\n        self.estimated_attribute_ = some_estimation(X) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Scikit-Learn documentation - <a href=\"https://scikit-learn.org/stable/developers/develop.html#parameters-and-init\">Parameters and init</a>\n  </li>\n</ul>\n\n"
        },
        {
          "id": "S6973",
          "name": "Important hyperparameters should be specified for machine learning libraries' estimators and optimizers",
          "description": "<p>This rule raises an issue when a machine learning estimator or optimizer is instantiated without specifying the important hyperparameters.</p>\n<h2>Why is this an issue?</h2>\n<p>When instantiating an estimator or an optimizer, default values for any hyperparameters that are not specified will be used. Relying on the default\nvalues can lead to non-reproducible results across different versions of the library.</p>\n<p>Furthermore, the default values might not be the best choice for the specific problem at hand and can lead to suboptimal performance.</p>\n<p>Here are the estimators and the parameters considered by this rule :</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Scikit-learn - Estimator</th>\n      <th>Hyperparameters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>AdaBoostClassifier</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>AdaBoostRegressor</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>GradientBoostingClassifier</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>GradientBoostingRegressor</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>HistGradientBoostingClassifier</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>HistGradientBoostingRegressor</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>RandomForestClassifier</p></td>\n      <td><p>min_samples_leaf, max_features</p></td>\n    </tr>\n    <tr>\n      <td><p>RandomForestRegressor</p></td>\n      <td><p>min_samples_leaf, max_features</p></td>\n    </tr>\n    <tr>\n      <td><p>ElasticNet</p></td>\n      <td><p>alpha, l1_ratio</p></td>\n    </tr>\n    <tr>\n      <td><p>NearestNeighbors</p></td>\n      <td><p>n_neighbors</p></td>\n    </tr>\n    <tr>\n      <td><p>KNeighborsClassifier</p></td>\n      <td><p>n_neighbors</p></td>\n    </tr>\n    <tr>\n      <td><p>KNeighborsRegressor</p></td>\n      <td><p>n_neighbors</p></td>\n    </tr>\n    <tr>\n      <td><p>NuSVC</p></td>\n      <td><p>nu, kernel, gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>NuSVR</p></td>\n      <td><p>C, kernel, gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>SVC</p></td>\n      <td><p>C, kernel, gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>SVR</p></td>\n      <td><p>C, kernel, gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>DecisionTreeClassifier</p></td>\n      <td><p>ccp_alpha</p></td>\n    </tr>\n    <tr>\n      <td><p>DecisionTreeRegressor</p></td>\n      <td><p>ccp_alpha</p></td>\n    </tr>\n    <tr>\n      <td><p>MLPClassifier</p></td>\n      <td><p>hidden_layer_sizes</p></td>\n    </tr>\n    <tr>\n      <td><p>MLPRegressor</p></td>\n      <td><p>hidden_layer_sizes</p></td>\n    </tr>\n    <tr>\n      <td><p>PolynomialFeatures</p></td>\n      <td><p>degree, interaction_only</p></td>\n    </tr>\n  </tbody>\n</table>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>PyTorch - Optimizer</th>\n      <th>Hyperparameters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>Adadelta</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>Adagrad</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>Adam</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>AdamW</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>SparseAdam</p></td>\n      <td><p>lr</p></td>\n    </tr>\n    <tr>\n      <td><p>Adamax</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>ASGD</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>LBFGS</p></td>\n      <td><p>lr</p></td>\n    </tr>\n    <tr>\n      <td><p>NAdam</p></td>\n      <td><p>lr, weight_decay, momentum_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>RAdam</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>RMSprop</p></td>\n      <td><p>lr, weight_decay, momentum</p></td>\n    </tr>\n    <tr>\n      <td><p>Rprop</p></td>\n      <td><p>lr</p></td>\n    </tr>\n    <tr>\n      <td><p>SGD</p></td>\n      <td><p>lr, weight_decay, momentum</p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>How to fix it in Scikit-Learn</h2>\n<p>Specify the hyperparameters when instantiating the estimator.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclf = KNeighborsClassifier() # Noncompliant : n_neighbors is not specified, different values can change the behaviour of the predictor significantly\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclf = KNeighborsClassifier( # Compliant\n    n_neighbors=5\n)\n</pre>\n<h2>How to fix it in PyTorch</h2>\n<p>Specify the hyperparameters when instantiating the optimizer</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom my_model import model\nfrom torch.optim import AdamW\n\noptimizer = AdamW(model.parameters(), lr = 0.001) # Noncompliant : weight_decay is not specified, different values can change the behaviour of the optimizer significantly\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom my_model import model\nfrom torch.optim import AdamW\n\noptimizer = AdamW(model.parameters(), lr = 0.001, weight_decay = 0.003) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Probst, P., Boulesteix, A. L., &amp; Bischl, B. (2019). Tunability: Importance of Hyperparameters of Machine Learning Algorithms. Journal of\n  Machine Learning Research, 20(53), 1-32. </li>\n  <li> van Rijn, J. N., &amp; Hutter, F. (2018, July). Hyperparameter importance across datasets. In Proceedings of the 24th ACM SIGKDD International\n  Conference on Knowledge Discovery &amp; Data Mining (pp. 2367-2376). </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/stable/optim.html\">torch.optim</a> </li>\n</ul>\n<h3>External coding guidelines</h3>\n<ul>\n  <li> Code Smells for Machine Learning Applications - <a\n  href=\"https://hynn01.github.io/ml-smells/posts/codesmells/11-hyperparameter-not-explicitly-set/\">Hyperparameter not Explicitly Set</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a machine learning estimator or optimizer is instantiated without specifying the important hyperparameters.</p>\n<h2>Why is this an issue?</h2>\n<p>When instantiating an estimator or an optimizer, default values for any hyperparameters that are not specified will be used. Relying on the default\nvalues can lead to non-reproducible results across different versions of the library.</p>\n<p>Furthermore, the default values might not be the best choice for the specific problem at hand and can lead to suboptimal performance.</p>\n<p>Here are the estimators and the parameters considered by this rule :</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Scikit-learn - Estimator</th>\n      <th>Hyperparameters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>AdaBoostClassifier</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>AdaBoostRegressor</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>GradientBoostingClassifier</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>GradientBoostingRegressor</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>HistGradientBoostingClassifier</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>HistGradientBoostingRegressor</p></td>\n      <td><p>learning_rate</p></td>\n    </tr>\n    <tr>\n      <td><p>RandomForestClassifier</p></td>\n      <td><p>min_samples_leaf, max_features</p></td>\n    </tr>\n    <tr>\n      <td><p>RandomForestRegressor</p></td>\n      <td><p>min_samples_leaf, max_features</p></td>\n    </tr>\n    <tr>\n      <td><p>ElasticNet</p></td>\n      <td><p>alpha, l1_ratio</p></td>\n    </tr>\n    <tr>\n      <td><p>NearestNeighbors</p></td>\n      <td><p>n_neighbors</p></td>\n    </tr>\n    <tr>\n      <td><p>KNeighborsClassifier</p></td>\n      <td><p>n_neighbors</p></td>\n    </tr>\n    <tr>\n      <td><p>KNeighborsRegressor</p></td>\n      <td><p>n_neighbors</p></td>\n    </tr>\n    <tr>\n      <td><p>NuSVC</p></td>\n      <td><p>nu, kernel, gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>NuSVR</p></td>\n      <td><p>C, kernel, gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>SVC</p></td>\n      <td><p>C, kernel, gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>SVR</p></td>\n      <td><p>C, kernel, gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>DecisionTreeClassifier</p></td>\n      <td><p>ccp_alpha</p></td>\n    </tr>\n    <tr>\n      <td><p>DecisionTreeRegressor</p></td>\n      <td><p>ccp_alpha</p></td>\n    </tr>\n    <tr>\n      <td><p>MLPClassifier</p></td>\n      <td><p>hidden_layer_sizes</p></td>\n    </tr>\n    <tr>\n      <td><p>MLPRegressor</p></td>\n      <td><p>hidden_layer_sizes</p></td>\n    </tr>\n    <tr>\n      <td><p>PolynomialFeatures</p></td>\n      <td><p>degree, interaction_only</p></td>\n    </tr>\n  </tbody>\n</table>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>PyTorch - Optimizer</th>\n      <th>Hyperparameters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>Adadelta</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>Adagrad</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>Adam</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>AdamW</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>SparseAdam</p></td>\n      <td><p>lr</p></td>\n    </tr>\n    <tr>\n      <td><p>Adamax</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>ASGD</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>LBFGS</p></td>\n      <td><p>lr</p></td>\n    </tr>\n    <tr>\n      <td><p>NAdam</p></td>\n      <td><p>lr, weight_decay, momentum_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>RAdam</p></td>\n      <td><p>lr, weight_decay</p></td>\n    </tr>\n    <tr>\n      <td><p>RMSprop</p></td>\n      <td><p>lr, weight_decay, momentum</p></td>\n    </tr>\n    <tr>\n      <td><p>Rprop</p></td>\n      <td><p>lr</p></td>\n    </tr>\n    <tr>\n      <td><p>SGD</p></td>\n      <td><p>lr, weight_decay, momentum</p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>How to fix it in Scikit-Learn</h2>\n<p>Specify the hyperparameters when instantiating the estimator.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclf = KNeighborsClassifier() # Noncompliant : n_neighbors is not specified, different values can change the behaviour of the predictor significantly\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclf = KNeighborsClassifier( # Compliant\n    n_neighbors=5\n)\n</pre>\n<h2>How to fix it in PyTorch</h2>\n<p>Specify the hyperparameters when instantiating the optimizer</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom my_model import model\nfrom torch.optim import AdamW\n\noptimizer = AdamW(model.parameters(), lr = 0.001) # Noncompliant : weight_decay is not specified, different values can change the behaviour of the optimizer significantly\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom my_model import model\nfrom torch.optim import AdamW\n\noptimizer = AdamW(model.parameters(), lr = 0.001, weight_decay = 0.003) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Probst, P., Boulesteix, A. L., &amp; Bischl, B. (2019). Tunability: Importance of Hyperparameters of Machine Learning Algorithms. Journal of\n  Machine Learning Research, 20(53), 1-32. </li>\n  <li> van Rijn, J. N., &amp; Hutter, F. (2018, July). Hyperparameter importance across datasets. In Proceedings of the 24th ACM SIGKDD International\n  Conference on Knowledge Discovery &amp; Data Mining (pp. 2367-2376). </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/stable/optim.html\">torch.optim</a> </li>\n</ul>\n<h3>External coding guidelines</h3>\n<ul>\n  <li> Code Smells for Machine Learning Applications - <a\n  href=\"https://hynn01.github.io/ml-smells/posts/codesmells/11-hyperparameter-not-explicitly-set/\">Hyperparameter not Explicitly Set</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6929",
          "name": "The reduction axis/dimension should be specified when using reduction operations",
          "description": "<p>This rule raises an issue when the <code>axis</code>/<code>dim`</code> argument is not provided to reduction operations.</p>\n<h2>Why is this an issue?</h2>\n<h3>TensorFlow</h3>\n<p>The result of reduction operations (i.e. <code>tf.math.reduce_sum</code>, <code>tf.math.reduce_std</code>, <code>torch.sum</code>,\n<code>torch.mean</code>, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039), highly depends on the shape of the Tensor provided.</p>\n<pre>\nimport tensorflow as tf\n\nx = tf.constant([[1, 1, 1], [1, 1, 1]])\ntf.math.reduce_sum(x)\n</pre>\n<p>In the example above the reduction of the 2 dimensional array will return the value <code>6</code> as all the elements are added together. By\ndefault TensorFlow\u00e2\u20ac\u2122s reduction operations are applied across all axis. When specifying an axis the result will be completely different.</p>\n<pre>\nimport tensorflow as tf\n\nx = tf.constant([[1, 1, 1], [1, 1, 1]])\ntf.math.reduce_sum(x, axis=0)\n</pre>\n<p>Here the result will be <code>[2,2,2]</code> as the reduction is applied only on the axis 0.</p>\n<p>TensorFlow\u00e2\u20ac\u2122s default behavior can be confusing, especially when the reducing array of different shapes.</p>\n<p>Considering the following example:</p>\n<pre>\nimport tensorflow as tf\n\nx = tf.constant([[1], [2]])\ny = tf.constant([1, 2])\ntf.math.reduce_sum(x + y)\n</pre>\n<p>Here the result will be <code>12</code> instead of the <code>6</code> that could be expected. This is because the implicit broadcasting reshapes\nthe first array to <code>[[1,1], [2,2]]</code> which is then added to the <code>y</code> array <code>[1,2]</code> resulting in <code>[[2,3],\n[3,4]]</code>. As the reduction happen across all dimensions the result is then <code>2 + 3 + 3 + 4 = 12</code>. It is not clear by looking at the\nexample if this was intentional or if the user made a mistake.</p>\n<p>This is why a good practice is to always specify the axis on which to perform the reduction.</p>\n<p>For example:</p>\n<pre>\nimport tensorflow as tf\n\nx = tf.constant([[1], [2]])\ny = tf.constant([1, 2])\ntf.math.reduce_sum(x + y, axis=0)\n</pre>\n<p>In the example above, specifying the axis clarifies the intent, as the result now is <code>[5, 7]</code>. If the intent was to effectively reduce\nacross all dimensions the user should provide the list of axis <code>axis=[0,1]</code> or clearly state the default behavior should be applied with\n<code>axis=None</code>.</p>\n<h3>The PyTorch equivalent</h3>\n<p>The same behavior occurs in PyTorch, but the argument is called <code>dim</code> instead of <code>axis</code>.</p>\n<h2>How to fix it in TensorFlow</h2>\n<p>To fix this issue provide the axis argument when using a TensorFlow reduction operation such as <code>tf.math.reduce_sum</code>,\n<code>tf.math.reduce_prod</code>, <code>tf.math.reduce_mean</code>, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\nx = tf.constant([[1, 1, 1], [1, 1, 1]])\ntf.math.reduce_sum(x) # Noncompliant: the axis arguments defaults to None\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\nx = tf.constant([[1, 1, 1], [1, 1, 1]])\ntf.math.reduce_sum(x, axis=0) # Compliant: the reduction will happen only on the axis 0, resulting in `[2,2,2]`\n</pre>\n<h2>How to fix it in PyTorch</h2>\n<p>To fix this issue provide the dim argument when using a PyTorch reduction operation such as <code>torch.sum</code>, <code>torch.prod</code>,\n<code>torch.mean</code>, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport torch\n\nx = torch.tensor([[1, 1, 1], [1, 1, 1]])\ntorch.sum(x) # Noncompliant: the dim argument defaults to None\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport torch\n\nx = torch.tensor([[1, 1, 1], [1, 1, 1]])\ntorch.sum(x, dim=None) # Compliant: all dimensions will be reduced\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_max\">tf.math.reduce_max reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_mean\">tf.math.reduce_mean reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_min\">tf.math.reduce_min reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_prod\">tf.math.reduce_prod reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_std\">tf.math.reduce_std reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_sum\">tf.math.reduce_sum reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_variance\">tf.math.reduce_variance reference</a>\n  </li>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/stable/torch.html#reduction-ops\">Reduction operations</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Vahidk Developers Guide - <a\n  href=\"https://github.com/vahidk/EffectiveTensorflow?tab=readme-ov-file#broadcasting-the-good-and-the-ugly\">Broadcasting the good and the ugly</a>\n  </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the <code>axis</code>/<code>dim`</code> argument is not provided to reduction operations.</p>\n<h2>Why is this an issue?</h2>\n<h3>TensorFlow</h3>\n<p>The result of reduction operations (i.e. <code>tf.math.reduce_sum</code>, <code>tf.math.reduce_std</code>, <code>torch.sum</code>,\n<code>torch.mean</code>, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039), highly depends on the shape of the Tensor provided.</p>\n<pre>\nimport tensorflow as tf\n\nx = tf.constant([[1, 1, 1], [1, 1, 1]])\ntf.math.reduce_sum(x)\n</pre>\n<p>In the example above the reduction of the 2 dimensional array will return the value <code>6</code> as all the elements are added together. By\ndefault TensorFlow\u00e2\u20ac\u2122s reduction operations are applied across all axis. When specifying an axis the result will be completely different.</p>\n<pre>\nimport tensorflow as tf\n\nx = tf.constant([[1, 1, 1], [1, 1, 1]])\ntf.math.reduce_sum(x, axis=0)\n</pre>\n<p>Here the result will be <code>[2,2,2]</code> as the reduction is applied only on the axis 0.</p>\n<p>TensorFlow\u00e2\u20ac\u2122s default behavior can be confusing, especially when the reducing array of different shapes.</p>\n<p>Considering the following example:</p>\n<pre>\nimport tensorflow as tf\n\nx = tf.constant([[1], [2]])\ny = tf.constant([1, 2])\ntf.math.reduce_sum(x + y)\n</pre>\n<p>Here the result will be <code>12</code> instead of the <code>6</code> that could be expected. This is because the implicit broadcasting reshapes\nthe first array to <code>[[1,1], [2,2]]</code> which is then added to the <code>y</code> array <code>[1,2]</code> resulting in <code>[[2,3],\n[3,4]]</code>. As the reduction happen across all dimensions the result is then <code>2 + 3 + 3 + 4 = 12</code>. It is not clear by looking at the\nexample if this was intentional or if the user made a mistake.</p>\n<p>This is why a good practice is to always specify the axis on which to perform the reduction.</p>\n<p>For example:</p>\n<pre>\nimport tensorflow as tf\n\nx = tf.constant([[1], [2]])\ny = tf.constant([1, 2])\ntf.math.reduce_sum(x + y, axis=0)\n</pre>\n<p>In the example above, specifying the axis clarifies the intent, as the result now is <code>[5, 7]</code>. If the intent was to effectively reduce\nacross all dimensions the user should provide the list of axis <code>axis=[0,1]</code> or clearly state the default behavior should be applied with\n<code>axis=None</code>.</p>\n<h3>The PyTorch equivalent</h3>\n<p>The same behavior occurs in PyTorch, but the argument is called <code>dim</code> instead of <code>axis</code>.</p>\n<h2>How to fix it in TensorFlow</h2>\n<p>To fix this issue provide the axis argument when using a TensorFlow reduction operation such as <code>tf.math.reduce_sum</code>,\n<code>tf.math.reduce_prod</code>, <code>tf.math.reduce_mean</code>, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\nx = tf.constant([[1, 1, 1], [1, 1, 1]])\ntf.math.reduce_sum(x) # Noncompliant: the axis arguments defaults to None\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\nx = tf.constant([[1, 1, 1], [1, 1, 1]])\ntf.math.reduce_sum(x, axis=0) # Compliant: the reduction will happen only on the axis 0, resulting in `[2,2,2]`\n</pre>\n<h2>How to fix it in PyTorch</h2>\n<p>To fix this issue provide the dim argument when using a PyTorch reduction operation such as <code>torch.sum</code>, <code>torch.prod</code>,\n<code>torch.mean</code>, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport torch\n\nx = torch.tensor([[1, 1, 1], [1, 1, 1]])\ntorch.sum(x) # Noncompliant: the dim argument defaults to None\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport torch\n\nx = torch.tensor([[1, 1, 1], [1, 1, 1]])\ntorch.sum(x, dim=None) # Compliant: all dimensions will be reduced\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_max\">tf.math.reduce_max reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_mean\">tf.math.reduce_mean reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_min\">tf.math.reduce_min reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_prod\">tf.math.reduce_prod reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_std\">tf.math.reduce_std reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_sum\">tf.math.reduce_sum reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/math/reduce_variance\">tf.math.reduce_variance reference</a>\n  </li>\n  <li> PyTorch Documentation - <a href=\"https://pytorch.org/docs/stable/torch.html#reduction-ops\">Reduction operations</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Vahidk Developers Guide - <a\n  href=\"https://github.com/vahidk/EffectiveTensorflow?tab=readme-ov-file#broadcasting-the-good-and-the-ugly\">Broadcasting the good and the ugly</a>\n  </li>\n</ul>\n\n"
        },
        {
          "id": "S6928",
          "name": "Python side effects should not be used inside a \"tf.function\"",
          "description": "<p>This rule raises an issue when a Python side effect happens inside a <code>tensorflow.function</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>Python sides effects such as printing, mutating a list or a global variable, inside of a <code>tensorflow.function</code> may not behave as\nexpected. Because of the <a href=\"https://www.tensorflow.org/guide/function#rules_of_tracing\">Rules of tracing</a>, the execution of side effects will\ndepend on the input values of the function and will execute only once per tracing.</p>\n<pre>\nimport tensorflow as tf\n\n@tf.function\ndef f(x):\n  print(\"A side effect\", x)\n\nf(1) # prints \"A side effect 1\"\nf(1) # does not print anything\nf(2) # prints \"A side effect 2\"\n</pre>\n<p>The example above depicts the issue encountered when using Python side effects in a <code>tensorflow.function</code>. As a single trace is created\nper input values, the second call to <code>f(1)</code> does not output anything to the console.</p>\n<p>The best practice would be to avoid using Python side effects and prefer the usage of the TensorFlow API with functions such as\n<code>tf.print</code> or tf.TensorArray`.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue either remove the side effect or use the corresponding TensorFlow function.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\n@tf.function\ndef f(x):\n  print(\"Printing\", x) # Noncompliant print is a side effect\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\n@tf.function\ndef f(x):\n  tf.print(\"Printing\", x) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/guide/function#executing_python_side_effects\">Executing Python side effects</a>\n  </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/print\">tf.print reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/summary\">tf.summary reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/Variable#methods\">tf.Variable methods reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/TensorArray\">tf.TensorArray reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/data\">tf.data reference</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a Python side effect happens inside a <code>tensorflow.function</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>Python sides effects such as printing, mutating a list or a global variable, inside of a <code>tensorflow.function</code> may not behave as\nexpected. Because of the <a href=\"https://www.tensorflow.org/guide/function#rules_of_tracing\">Rules of tracing</a>, the execution of side effects will\ndepend on the input values of the function and will execute only once per tracing.</p>\n<pre>\nimport tensorflow as tf\n\n@tf.function\ndef f(x):\n  print(\"A side effect\", x)\n\nf(1) # prints \"A side effect 1\"\nf(1) # does not print anything\nf(2) # prints \"A side effect 2\"\n</pre>\n<p>The example above depicts the issue encountered when using Python side effects in a <code>tensorflow.function</code>. As a single trace is created\nper input values, the second call to <code>f(1)</code> does not output anything to the console.</p>\n<p>The best practice would be to avoid using Python side effects and prefer the usage of the TensorFlow API with functions such as\n<code>tf.print</code> or tf.TensorArray`.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue either remove the side effect or use the corresponding TensorFlow function.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\n@tf.function\ndef f(x):\n  print(\"Printing\", x) # Noncompliant print is a side effect\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\n@tf.function\ndef f(x):\n  tf.print(\"Printing\", x) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/guide/function#executing_python_side_effects\">Executing Python side effects</a>\n  </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/print\">tf.print reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/summary\">tf.summary reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/Variable#methods\">tf.Variable methods reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/TensorArray\">tf.TensorArray reference</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/data\">tf.data reference</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6925",
          "name": "The \"validate_indices\" argument should not be set for \"tf.gather\" function call",
          "description": "<p>This rule raises an issue when the <code>validate_indices</code> argument is set for `tf.gather ` function call.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>tf.gather</code> function allows you to gather slices from a tensor along a specified axis according to the indices provided. The\n<code>validate_indices</code> argument is deprecated and setting its value has no effect. Indices are always validated on CPU and never validated on\nGPU.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\nx = tf.constant([[1, 2], [3, 4]])\ny = tf.gather(x, [1], validate_indices=True)  # Noncompliant: validate_indices is deprecated\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\nx = tf.constant([[1, 2], [3, 4]])\ny = tf.gather(x, [1])  # OK\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Tensorflow documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/gather\">tf.gather</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the <code>validate_indices</code> argument is set for `tf.gather ` function call.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>tf.gather</code> function allows you to gather slices from a tensor along a specified axis according to the indices provided. The\n<code>validate_indices</code> argument is deprecated and setting its value has no effect. Indices are always validated on CPU and never validated on\nGPU.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\nx = tf.constant([[1, 2], [3, 4]])\ny = tf.gather(x, [1], validate_indices=True)  # Noncompliant: validate_indices is deprecated\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\nx = tf.constant([[1, 2], [3, 4]])\ny = tf.gather(x, [1])  # OK\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Tensorflow documentation - <a href=\"https://www.tensorflow.org/api_docs/python/tf/gather\">tf.gather</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6911",
          "name": "\"tf.function\" should not depend on global or free Python variables",
          "description": "<p>This rule raises an issue when a <code>tensorflow.function</code> depends on a global or free Python variable.</p>\n<h2>Why is this an issue?</h2>\n<p>When calling a <code>tensorflow.function</code> behind the scenes a <code>ConcreteFunction</code> is created everytime a new value is passed as\nargument. This is not the case with Python global variables, closure or nonlocal variables.</p>\n<p>This means the state and the result of the <code>tensorflow.function</code> may not be what is expected.</p>\n<pre>\nimport tensorflow as tf\n\n@tf.function\ndef addition():\n  return 1 + foo\n\nfoo = 4\naddition() # tf.Tensor(5, shape=(), dtype=int32): on this first step we obtain the expected result\n\nfoo = 10\naddition() # tf.Tensor(5, shape=(), dtype=int32): unexpected result of 5 instead of 11\n</pre>\n<p>As we can see in the example above the second time <code>addition</code> is called, we obtain the same result as the first call. This is due to the\nfact that between the 2 calls of <code>addition</code> the value of the argument passed to the function did not change. This result in the creation of\na single <code>ConcreteFunction</code> during the first call of <code>addition</code>, with the value of foo set to 4.</p>\n<p>This is why it is a good practice to not use and mutate global variables or nonlocal variables inside of a <code>tensorflow.function</code>.</p>\n<h3>Exceptions</h3>\n<p>This rule will not raise an issue if the global or nonlocal variable is a <code>tensorflow.Variable</code>.</p>\n<pre>\nimport tensorflow as tf\n\n@tf.function\ndef addition():\n  return 1 + foo\n\nfoo = tf.Variable(4)\naddition()\n\nfoo.assign(10)\naddition()\n</pre>\n<p>In this case the <code>ConcreteFunction</code> will be created properly each call if the value of the variable changes.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue refactor the Python global or nonlocal variable to be an argument of the <code>tensorflow.function</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\n@tf.function\ndef addition():\n  return 1 + foo # Noncompliant the usage of the nonlocal variable may not behave as expected.\n\nfoo = 4\naddition()\n\nfoo = 10\naddition()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\n@tf.function\ndef addition(foo):\n  return 1 + foo # Compliant\n\nfoo = 4\naddition(foo)\n\nfoo = 10\naddition(foo)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/guide/function#depending_on_python_global_and_free_variables\">Depending on\n  Python global and free variables</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/jvm/api_docs/java/org/tensorflow/ConcreteFunction?hl=en\">ConcreteFunction\n  reference</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a <code>tensorflow.function</code> depends on a global or free Python variable.</p>\n<h2>Why is this an issue?</h2>\n<p>When calling a <code>tensorflow.function</code> behind the scenes a <code>ConcreteFunction</code> is created everytime a new value is passed as\nargument. This is not the case with Python global variables, closure or nonlocal variables.</p>\n<p>This means the state and the result of the <code>tensorflow.function</code> may not be what is expected.</p>\n<pre>\nimport tensorflow as tf\n\n@tf.function\ndef addition():\n  return 1 + foo\n\nfoo = 4\naddition() # tf.Tensor(5, shape=(), dtype=int32): on this first step we obtain the expected result\n\nfoo = 10\naddition() # tf.Tensor(5, shape=(), dtype=int32): unexpected result of 5 instead of 11\n</pre>\n<p>As we can see in the example above the second time <code>addition</code> is called, we obtain the same result as the first call. This is due to the\nfact that between the 2 calls of <code>addition</code> the value of the argument passed to the function did not change. This result in the creation of\na single <code>ConcreteFunction</code> during the first call of <code>addition</code>, with the value of foo set to 4.</p>\n<p>This is why it is a good practice to not use and mutate global variables or nonlocal variables inside of a <code>tensorflow.function</code>.</p>\n<h3>Exceptions</h3>\n<p>This rule will not raise an issue if the global or nonlocal variable is a <code>tensorflow.Variable</code>.</p>\n<pre>\nimport tensorflow as tf\n\n@tf.function\ndef addition():\n  return 1 + foo\n\nfoo = tf.Variable(4)\naddition()\n\nfoo.assign(10)\naddition()\n</pre>\n<p>In this case the <code>ConcreteFunction</code> will be created properly each call if the value of the variable changes.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue refactor the Python global or nonlocal variable to be an argument of the <code>tensorflow.function</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\n@tf.function\ndef addition():\n  return 1 + foo # Noncompliant the usage of the nonlocal variable may not behave as expected.\n\nfoo = 4\naddition()\n\nfoo = 10\naddition()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\n@tf.function\ndef addition(foo):\n  return 1 + foo # Compliant\n\nfoo = 4\naddition(foo)\n\nfoo = 10\naddition(foo)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/guide/function#depending_on_python_global_and_free_variables\">Depending on\n  Python global and free variables</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/jvm/api_docs/java/org/tensorflow/ConcreteFunction?hl=en\">ConcreteFunction\n  reference</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6908",
          "name": "\"tensorflow.function\" should not be recursive",
          "description": "<p>This rule raises an issue when a <code>tensorflow.function</code> is recursive.</p>\n<h2>Why is this an issue?</h2>\n<p>When defining a <code>tensorflow.function</code> it is generally a bad practice to make this function recursive. TensorFlow does not support\nrecursive <code>tensorflow.function</code> and will in the majority of cases throw an exception. However it is possible as well that the execution of\nsuch function succeeds, but with multiple tracings which has strong performance implications. When executing <code>tensorflow.function</code>, the\ncode is split into two distinct stages. The first stage call <code>tracing</code> creates a new <code>tensorflow.Graph</code>, runs the Python code\nnormally, but defers the execution of TensorFlow operations (i.e. adding two Tensors). These operations are added to the graph without being ran. The\nsecond stage which is much faster than the first, runs everything that was deferred previously. Depending on the input of the\n<code>tensorflow.function</code> the first stage may not be needed, see: <a href=\"https://www.tensorflow.org/guide/function#rules_of_tracing\">Rules of\ntracing</a>. Skipping this first stage is what provides the user with TensorFlow\u00e2\u20ac\u2122s high performance.</p>\n<p>Having a recursive <code>tensorflow.function</code> prevents the user from benefiting of TensorFlow\u00e2\u20ac\u2122s capabilities.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, refactor the <code>tensorflow.function</code> so that is it not recursive.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\n@tf.function\ndef factorial(n):\n     if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) # Noncompliant: the function is recursive\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\n@tf.function\ndef factorial(n):\n     return tf.exp(tf.lgamma(n + 1)) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/guide/function#recursive_tffunctions_are_not_supported\">Recursive tf.functions\n  are not supported</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/guide/function#rules_of_tracing\">Rules of tracing</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a <code>tensorflow.function</code> is recursive.</p>\n<h2>Why is this an issue?</h2>\n<p>When defining a <code>tensorflow.function</code> it is generally a bad practice to make this function recursive. TensorFlow does not support\nrecursive <code>tensorflow.function</code> and will in the majority of cases throw an exception. However it is possible as well that the execution of\nsuch function succeeds, but with multiple tracings which has strong performance implications. When executing <code>tensorflow.function</code>, the\ncode is split into two distinct stages. The first stage call <code>tracing</code> creates a new <code>tensorflow.Graph</code>, runs the Python code\nnormally, but defers the execution of TensorFlow operations (i.e. adding two Tensors). These operations are added to the graph without being ran. The\nsecond stage which is much faster than the first, runs everything that was deferred previously. Depending on the input of the\n<code>tensorflow.function</code> the first stage may not be needed, see: <a href=\"https://www.tensorflow.org/guide/function#rules_of_tracing\">Rules of\ntracing</a>. Skipping this first stage is what provides the user with TensorFlow\u00e2\u20ac\u2122s high performance.</p>\n<p>Having a recursive <code>tensorflow.function</code> prevents the user from benefiting of TensorFlow\u00e2\u20ac\u2122s capabilities.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, refactor the <code>tensorflow.function</code> so that is it not recursive.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport tensorflow as tf\n\n@tf.function\ndef factorial(n):\n     if n == 1:\n        return 1\n    else:\n        return (n * factorial(n-1)) # Noncompliant: the function is recursive\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport tensorflow as tf\n\n@tf.function\ndef factorial(n):\n     return tf.exp(tf.lgamma(n + 1)) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/guide/function#recursive_tffunctions_are_not_supported\">Recursive tf.functions\n  are not supported</a> </li>\n  <li> TensorFlow Documentation - <a href=\"https://www.tensorflow.org/guide/function#rules_of_tracing\">Rules of tracing</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6903",
          "name": "Using timezone-aware \"datetime\" objects should be preferred over using \"datetime.datetime.utcnow\" and \"datetime.datetime.utcfromtimestamp\"",
          "description": "<p>This rule raises an issue when the functions <code>datetime.datetime.utcnow</code> or <code>datetime.datetime.utcfromtimestamp</code> are used.</p>\n<h2>Why is this an issue?</h2>\n<p>Python\u00e2\u20ac\u2122s <code>datetime</code> API provide several different ways to create <code>datetime</code> objects. One possibility is the to use\n<code>datetime.datetime.utcnow</code> or <code>datetime.datetime.utcfromtimestamp</code> functions. The issue with these two functions is they are not\ntime zone aware, even if their name would suggest otherwise.</p>\n<p>Using these functions could cause issue as they may not behave as expected, for example:</p>\n<pre>\nfrom datetime import datetime\ntimestamp = 1571595618.0\ndate = datetime.utcfromtimestamp(timestamp)\ndate_timestamp = date.timestamp()\n\nassert timestamp == date_timestamp\n</pre>\n<p>This assertion will fail if the system locale is not set to UTC. For this reason these 2 functions are deprecated in Python 3.12.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, prefer the usage of a timezone-aware datetime.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.utcnow\">utcnow reference</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp\">utcfromtimestamp\n  reference</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Paul Ganssle blog - <a href=\"https://blog.ganssle.io/articles/2019/11/utcnow.html\">Stop using utcnow and utcfromtimestamp</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the functions <code>datetime.datetime.utcnow</code> or <code>datetime.datetime.utcfromtimestamp</code> are used.</p>\n<h2>Why is this an issue?</h2>\n<p>Python\u00e2\u20ac\u2122s <code>datetime</code> API provide several different ways to create <code>datetime</code> objects. One possibility is the to use\n<code>datetime.datetime.utcnow</code> or <code>datetime.datetime.utcfromtimestamp</code> functions. The issue with these two functions is they are not\ntime zone aware, even if their name would suggest otherwise.</p>\n<p>Using these functions could cause issue as they may not behave as expected, for example:</p>\n<pre>\nfrom datetime import datetime\ntimestamp = 1571595618.0\ndate = datetime.utcfromtimestamp(timestamp)\ndate_timestamp = date.timestamp()\n\nassert timestamp == date_timestamp\n</pre>\n<p>This assertion will fail if the system locale is not set to UTC. For this reason these 2 functions are deprecated in Python 3.12.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, prefer the usage of a timezone-aware datetime.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import datetime\n\ndatetime.utcnow() # Noncompliant\n\ntimestamp = 1571595618.0\ndatetime.utcfromtimestamp(timestamp) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import datetime, timezone\n\ndatetime.now(timezone.utc) # Compliant\n\ntimestamp = 1571595618.0\ndatetime.fromtimestamp(timestamp, timezone.utc) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.utcnow\">utcnow reference</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp\">utcfromtimestamp\n  reference</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Paul Ganssle blog - <a href=\"https://blog.ganssle.io/articles/2019/11/utcnow.html\">Stop using utcnow and utcfromtimestamp</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6900",
          "name": "Numpy weekmask should have a valid value",
          "description": "<p>This rule raises an issue when a <code>numpy</code> weekmask format is incorrect.</p>\n<h2>Why is this an issue?</h2>\n<p>To allow a datetime to be used in contexts where only certain days of the week are valid, NumPy includes a set of business day functions.\n<code>Weekmask</code> is used to customize valid business days.</p>\n<p><code>Weekmask</code> can be specified in several formats:</p>\n<ol>\n  <li> As an array of 7 <code>1</code> or <code>0</code> values, e.g. <code>[1, 1, 1, 1, 1, 0, 0]</code> </li>\n  <li> As a string of 7 <code>1</code> or <code>0</code> characters, e.g. <code>\"1111100\"</code> </li>\n  <li> As a string with abbreviations of valid days from this list: <code>Mon Tue Wed Thu Fri Sat Sun</code>, e.g. <code>\"Mon Tue Wed Thu Fri\"</code>\n  </li>\n</ol>\n<p>Setting an incorrect <code>weekmask</code> leads to <code>ValueError</code>.</p>\n<h2>How to fix it</h2>\n<p>Provide a <code>weekmask</code> with correct values.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\n\noffset = np.busday_offset('2012-05', 1, roll='forward', weekmask='01') # Noncompliant: ValueError\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\n\noffset = np.busday_offset('2012-05', 1, roll='forward', weekmask='0111100') # OK\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Numpy documentation - <a href=\"https://numpy.org/doc/stable/reference/arrays.datetime.html#business-day-functionality\">Business Day\n  Functionality</a> </li>\n  <li> Numpy documentation - <a href=\"https://numpy.org/doc/stable/reference/arrays.datetime.html#custom-weekmasks\">Custom Weekmasks</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a <code>numpy</code> weekmask format is incorrect.</p>\n<h2>Why is this an issue?</h2>\n<p>To allow a datetime to be used in contexts where only certain days of the week are valid, NumPy includes a set of business day functions.\n<code>Weekmask</code> is used to customize valid business days.</p>\n<p><code>Weekmask</code> can be specified in several formats:</p>\n<ol>\n  <li> As an array of 7 <code>1</code> or <code>0</code> values, e.g. <code>[1, 1, 1, 1, 1, 0, 0]</code> </li>\n  <li> As a string of 7 <code>1</code> or <code>0</code> characters, e.g. <code>\"1111100\"</code> </li>\n  <li> As a string with abbreviations of valid days from this list: <code>Mon Tue Wed Thu Fri Sat Sun</code>, e.g. <code>\"Mon Tue Wed Thu Fri\"</code>\n  </li>\n</ol>\n<p>Setting an incorrect <code>weekmask</code> leads to <code>ValueError</code>.</p>\n<h2>How to fix it</h2>\n<p>Provide a <code>weekmask</code> with correct values.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\n\noffset = np.busday_offset('2012-05', 1, roll='forward', weekmask='01') # Noncompliant: ValueError\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\n\noffset = np.busday_offset('2012-05', 1, roll='forward', weekmask='0111100') # OK\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Numpy documentation - <a href=\"https://numpy.org/doc/stable/reference/arrays.datetime.html#business-day-functionality\">Business Day\n  Functionality</a> </li>\n  <li> Numpy documentation - <a href=\"https://numpy.org/doc/stable/reference/arrays.datetime.html#custom-weekmasks\">Custom Weekmasks</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6894",
          "name": "Dates should be formatted correctly when using \"pandas.to_datetime\" with \"dayfirst\" or \"yearfirst\" arguments",
          "description": "<p>This rule raises an issue when the argument <code>dayfirst</code> or <code>yearfirst</code> is set to <code>True</code> on\n<code>pandas.to_datetime</code> function with an incorrect string format.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>pandas.to_datetime</code> function transforms a string to a date object. The string representation of the date can take multiple formats.\nTo correctly parse these strings, <code>pandas.to_datetime</code> provides several arguments to setup the parsing, such as <code>dayfirst</code> or\n<code>yearfirst</code>. For example setting <code>dayfirst</code> to <code>True</code> indicates to <code>pandas.to_datetime</code> that the date and\ntime will be represented as a string with the shape <code>day month year time</code>. Similarly with <code>yearfirst</code>, the string should have\nthe following shape <code>year month day time</code>.</p>\n<p>These two arguments are not strict, meaning if the shape of the string is not the one expected by <code>pandas.to_datetime</code>, the function\nwill not fail and try to figure out which part of the string is the day, month or year.</p>\n<p>In the following example the <code>dayfirst</code> argument is set to <code>True</code> but we can clearly see that the <code>month</code> part of\nthe date would be incorrect. In this case <code>pandas.to_datetime</code> will ignore the <code>dayfirst</code> argument, and parse the date as the\n22nd of January.</p>\n<pre>\nimport pandas as pd\n\npd.to_datetime([\"01-22-2000 10:00\"], dayfirst=True)\n</pre>\n<p>No issue will be raised in such a case, which could lead to bugs later in the program. Either the user made a mistake by setting\n<code>dayfirst</code> to <code>True</code> or the month part of the date is incorrect.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue either correct the string representation of the date to match the expected format, or remove the arguments <code>dayfirst</code>\nor <code>yearfirst</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\n\npd.to_datetime([\"01-22-2000 10:00\"], dayfirst=True) # Noncompliant: the second part of the date (22) is not a valid month\n\npd.to_datetime([\"02/03/2000 12:00\"], yearfirst=True) # Noncompliant: the year is not the first part of the date\n\npd.to_datetime([\"03-14-2000 10:00\"], dayfirst=True) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\n\npd.to_datetime([\"01-12-2000 10:00\"], dayfirst=True) # Compliant: the date will be parsed as expected\n\npd.to_datetime([\"2000/02/28 12:00\"], yearfirst=True) # Compliant\n\npd.to_datetime([\"03-14-2000 10:00\"]) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas documentation - <a href=\"https://pandas.pydata.org/docs/user_guide/timeseries.html#converting-to-timestamps\">Converting to\n  timestamps</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the argument <code>dayfirst</code> or <code>yearfirst</code> is set to <code>True</code> on\n<code>pandas.to_datetime</code> function with an incorrect string format.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>pandas.to_datetime</code> function transforms a string to a date object. The string representation of the date can take multiple formats.\nTo correctly parse these strings, <code>pandas.to_datetime</code> provides several arguments to setup the parsing, such as <code>dayfirst</code> or\n<code>yearfirst</code>. For example setting <code>dayfirst</code> to <code>True</code> indicates to <code>pandas.to_datetime</code> that the date and\ntime will be represented as a string with the shape <code>day month year time</code>. Similarly with <code>yearfirst</code>, the string should have\nthe following shape <code>year month day time</code>.</p>\n<p>These two arguments are not strict, meaning if the shape of the string is not the one expected by <code>pandas.to_datetime</code>, the function\nwill not fail and try to figure out which part of the string is the day, month or year.</p>\n<p>In the following example the <code>dayfirst</code> argument is set to <code>True</code> but we can clearly see that the <code>month</code> part of\nthe date would be incorrect. In this case <code>pandas.to_datetime</code> will ignore the <code>dayfirst</code> argument, and parse the date as the\n22nd of January.</p>\n<pre>\nimport pandas as pd\n\npd.to_datetime([\"01-22-2000 10:00\"], dayfirst=True)\n</pre>\n<p>No issue will be raised in such a case, which could lead to bugs later in the program. Either the user made a mistake by setting\n<code>dayfirst</code> to <code>True</code> or the month part of the date is incorrect.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue either correct the string representation of the date to match the expected format, or remove the arguments <code>dayfirst</code>\nor <code>yearfirst</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\n\npd.to_datetime([\"01-22-2000 10:00\"], dayfirst=True) # Noncompliant: the second part of the date (22) is not a valid month\n\npd.to_datetime([\"02/03/2000 12:00\"], yearfirst=True) # Noncompliant: the year is not the first part of the date\n\npd.to_datetime([\"03-14-2000 10:00\"], dayfirst=True) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\n\npd.to_datetime([\"01-12-2000 10:00\"], dayfirst=True) # Compliant: the date will be parsed as expected\n\npd.to_datetime([\"2000/02/28 12:00\"], yearfirst=True) # Compliant\n\npd.to_datetime([\"03-14-2000 10:00\"]) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas documentation - <a href=\"https://pandas.pydata.org/docs/user_guide/timeseries.html#converting-to-timestamps\">Converting to\n  timestamps</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6883",
          "name": "The 12-hour format should be used with the AM/PM marker, otherwise the 24-hour format should be used",
          "description": "<p>This rule raises an issue when a date format string has the 24-hour code with the AM/PM marker or the 12-hour code without the AM/PM marker.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>%p</code> directive in the <code>strftime</code> method is used to represent the AM/PM marker in a time string. It is commonly used in\nconjunction with the <code>%I</code> directive, which represents the hour in a 12-hour clock.</p>\n<p>Using the 24-hour format directive with an AM/PM marker can lead to unwanted results e.g.:</p>\n<pre>\ntime_string = time(16,0).strftime(\"%H:%M %p\")\nprint(time_string)\n</pre>\n<p>will print <code>16:00 PM</code> which makes no sense.</p>\n<p>On the other hand the AM/PM marker is needed when the 12-hour format directive is used to show complete information about an hour e.g.:</p>\n<pre>\ntime_string = time(16,0).strftime(\"%I:%M\")\nprint(time_string)\n</pre>\n<p>will print 04:00 without indicating if the time is in the morning or the afternoon.</p>\n<h2>How to fix it</h2>\n<p>Use either the 12-hour time format with an AM/PM marker or the 24-hour format without.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import time\n\ndef foo():\n    t = time(16, 0)\n    formatted_time1 = t.strftime(\"%H:%M %p\") # Noncompliant: 16:00 PM\n    formatted_time2 = t.strftime(\"%I:%M\") # Noncompliant: 04:00\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import time\n\ndef foo():\n    t = time(16, 0)\n    formatted_time1 = t.strftime(\"%I:%M %p\") # OK: 04:00 PM\n    formatted_time2 = t.strftime(\"%H:%M\") # OK: 16:00\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\">strftime() and strptime()\n  Format Codes</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a date format string has the 24-hour code with the AM/PM marker or the 12-hour code without the AM/PM marker.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>%p</code> directive in the <code>strftime</code> method is used to represent the AM/PM marker in a time string. It is commonly used in\nconjunction with the <code>%I</code> directive, which represents the hour in a 12-hour clock.</p>\n<p>Using the 24-hour format directive with an AM/PM marker can lead to unwanted results e.g.:</p>\n<pre>\ntime_string = time(16,0).strftime(\"%H:%M %p\")\nprint(time_string)\n</pre>\n<p>will print <code>16:00 PM</code> which makes no sense.</p>\n<p>On the other hand the AM/PM marker is needed when the 12-hour format directive is used to show complete information about an hour e.g.:</p>\n<pre>\ntime_string = time(16,0).strftime(\"%I:%M\")\nprint(time_string)\n</pre>\n<p>will print 04:00 without indicating if the time is in the morning or the afternoon.</p>\n<h2>How to fix it</h2>\n<p>Use either the 12-hour time format with an AM/PM marker or the 24-hour format without.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom datetime import time\n\ndef foo():\n    t = time(16, 0)\n    formatted_time1 = t.strftime(\"%H:%M %p\") # Noncompliant: 16:00 PM\n    formatted_time2 = t.strftime(\"%I:%M\") # Noncompliant: 04:00\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom datetime import time\n\ndef foo():\n    t = time(16, 0)\n    formatted_time1 = t.strftime(\"%I:%M %p\") # OK: 04:00 PM\n    formatted_time2 = t.strftime(\"%H:%M\") # OK: 16:00\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\">strftime() and strptime()\n  Format Codes</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6882",
          "name": "Constructor attributes of date and time objects should be in the range of possible values",
          "description": "<p>This rule raises an issue when an incorrect value is set as an attribute of <code>datetime.date</code>, <code>datetime.time</code>, or\n<code>datetime.datetime</code></p>\n<h2>Why is this an issue?</h2>\n<p>Setting a date attribute value with a value which is out of the range of possible values will lead to a <code>ValueError</code>.</p>\n<h2>How to fix it</h2>\n<p>Set attribute values with values that are within the range of possible values.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    dt = datetime(year=2024, day=66, month=1, hour=16, minute=1) # ValueError: day is out of range for month\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    dt = datetime(year=2024, day=1, month=1, hour=16, minute=1)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#\">datetime</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when an incorrect value is set as an attribute of <code>datetime.date</code>, <code>datetime.time</code>, or\n<code>datetime.datetime</code></p>\n<h2>Why is this an issue?</h2>\n<p>Setting a date attribute value with a value which is out of the range of possible values will lead to a <code>ValueError</code>.</p>\n<h2>How to fix it</h2>\n<p>Set attribute values with values that are within the range of possible values.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo():\n    dt = datetime(year=2024, day=66, month=1, hour=16, minute=1) # ValueError: day is out of range for month\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo():\n    dt = datetime(year=2024, day=1, month=1, hour=16, minute=1)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/datetime.html#\">datetime</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6799",
          "name": "\"f-strings\" should not be nested too deeply",
          "description": "<p>This rule raises an issue when \"f-strings\" are deeply nested.</p>\n<h2>Why is this an issue?</h2>\n<p>Through <a href=\"https://peps.python.org/pep-0701/\">PEP 701</a>, Python 3.12 lifts restrictions on how to construct \"f-strings\".</p>\n<p>Prior to Python 3.12, it was not possible to reuse string quotes when nesting \"f-strings\". Therefore, the maximum level of nesting was:</p>\n<pre>\nf\"\"\"{f'''{f'{f\"{1+1}\"}'}'''}\"\"\"\n</pre>\n<p>It is now possible to arbitrarily nest \"f-strings\" by reusing string quotes. The following snippet is therefore valid:</p>\n<pre>\nf\"{f\"{f\"{f\"{f\"{f\"{1+1}\"}\"}\"}\"}\"}\"\n</pre>\n<p>It is, however, not recommended to nest \"f-strings\" too deeply as this would make the code confusing and hard to maintain.</p>\n<p>This rule will raise an issue when \"f-string\" literals are nested 3 times or more.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, refactor the code to avoid nesting \"f-string\" literals too deeply. This may be done by introducing new variables to store\nintermediate results.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nhello = \"Hello\"\nname = \"John\"\nmy_string = f\"{f\"{f\"{hello}\"},\"} {name}!\" # Noncompliant: deep nesting of \"f-strings\" is confusing\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nhello = \"Hello\"\nname = \"John\"\ngreeting = f\"{f\"{hello}\"},\"\nmy_string = f\"{greeting} {name}!\" # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP 701 - <a href=\"https://peps.python.org/pep-0701/\">Syntactic formalization of \"f-strings\"</a> </li>\n  <li> Python Release Notes - <a href=\"https://docs.python.org/3/whatsnew/3.12.html#what-s-new-in-python-3-12\">What\u00e2\u20ac\u2122s New In Python 3.12</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when \"f-strings\" are deeply nested.</p>\n<h2>Why is this an issue?</h2>\n<p>Through <a href=\"https://peps.python.org/pep-0701/\">PEP 701</a>, Python 3.12 lifts restrictions on how to construct \"f-strings\".</p>\n<p>Prior to Python 3.12, it was not possible to reuse string quotes when nesting \"f-strings\". Therefore, the maximum level of nesting was:</p>\n<pre>\nf\"\"\"{f'''{f'{f\"{1+1}\"}'}'''}\"\"\"\n</pre>\n<p>It is now possible to arbitrarily nest \"f-strings\" by reusing string quotes. The following snippet is therefore valid:</p>\n<pre>\nf\"{f\"{f\"{f\"{f\"{f\"{1+1}\"}\"}\"}\"}\"}\"\n</pre>\n<p>It is, however, not recommended to nest \"f-strings\" too deeply as this would make the code confusing and hard to maintain.</p>\n<p>This rule will raise an issue when \"f-string\" literals are nested 3 times or more.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, refactor the code to avoid nesting \"f-string\" literals too deeply. This may be done by introducing new variables to store\nintermediate results.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nhello = \"Hello\"\nname = \"John\"\nmy_string = f\"{f\"{f\"{hello}\"},\"} {name}!\" # Noncompliant: deep nesting of \"f-strings\" is confusing\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nhello = \"Hello\"\nname = \"John\"\ngreeting = f\"{f\"{hello}\"},\"\nmy_string = f\"{greeting} {name}!\" # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP 701 - <a href=\"https://peps.python.org/pep-0701/\">Syntactic formalization of \"f-strings\"</a> </li>\n  <li> Python Release Notes - <a href=\"https://docs.python.org/3/whatsnew/3.12.html#what-s-new-in-python-3-12\">What\u00e2\u20ac\u2122s New In Python 3.12</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6796",
          "name": "Generic functions should be defined using the type parameter syntax",
          "description": "<p>This rule raises an issue when a <code>TypeVar</code> is used in a function instead of the generic function type syntax.</p>\n<h2>Why is this an issue?</h2>\n<p>Prior to Python 3.12 functions using generic types were created as follows:</p>\n<pre>\nfrom typing import TypeVar\n\n_T = TypeVar(\"_T\")\n\ndef func(a: _T, b: _T) -&gt; _T:\n    ...\n</pre>\n<p>This snippet of code can be confusing and difficult to read. This is why is it a good idea to use the new type parameter syntax of Python 3.12 that\nallows for a more concise and more readable code by removing the <code>TypeVar</code> and its import statement:</p>\n<pre>\ndef func[T](a: T, b: T) -&gt; T:\n    ...\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will only raise an issue when the Python version of the analyzed project is set to 3.12 or higher.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, replace the usage of a <code>TypeVar</code> as a parameter type with the generic type parameter syntax.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom typing import TypeVar\n\n_T = TypeVar(\"_T\", bound=str)\n\ndef func(a: _T, b: int) -&gt; _T: # Noncompliant: the usage of a TypeVar could be simplified with a generic type parameter.\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef func[T: str](a: T, b: int) -&gt; T: # Compliant: the code is clear and concise.\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.12/reference/simple_stmts.html#type\">The type statement</a> </li>\n  <li> Python 3.12 Release Notes - <a href=\"https://docs.python.org/3.12/whatsnew/3.12.html#pep-695-type-parameter-syntax\">PEP 695: Type Parameter\n  Syntax</a> </li>\n  <li> PEP 695 - <a href=\"https://peps.python.org/pep-0695/\">Type Parameter Syntax</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a <code>TypeVar</code> is used in a function instead of the generic function type syntax.</p>\n<h2>Why is this an issue?</h2>\n<p>Prior to Python 3.12 functions using generic types were created as follows:</p>\n<pre>\nfrom typing import TypeVar\n\n_T = TypeVar(\"_T\")\n\ndef func(a: _T, b: _T) -&gt; _T:\n    ...\n</pre>\n<p>This snippet of code can be confusing and difficult to read. This is why is it a good idea to use the new type parameter syntax of Python 3.12 that\nallows for a more concise and more readable code by removing the <code>TypeVar</code> and its import statement:</p>\n<pre>\ndef func[T](a: T, b: T) -&gt; T:\n    ...\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will only raise an issue when the Python version of the analyzed project is set to 3.12 or higher.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, replace the usage of a <code>TypeVar</code> as a parameter type with the generic type parameter syntax.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom typing import TypeVar\n\n_T = TypeVar(\"_T\", bound=str)\n\ndef func(a: _T, b: int) -&gt; _T: # Noncompliant: the usage of a TypeVar could be simplified with a generic type parameter.\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef func[T: str](a: T, b: int) -&gt; T: # Compliant: the code is clear and concise.\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.12/reference/simple_stmts.html#type\">The type statement</a> </li>\n  <li> Python 3.12 Release Notes - <a href=\"https://docs.python.org/3.12/whatsnew/3.12.html#pep-695-type-parameter-syntax\">PEP 695: Type Parameter\n  Syntax</a> </li>\n  <li> PEP 695 - <a href=\"https://peps.python.org/pep-0695/\">Type Parameter Syntax</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6795",
          "name": "Generic type statements should not use \"TypeVars\"",
          "description": "<p>This rule raises an issue when a <code>TypeVar</code> is used as a type parameter in a <code>type</code> statement.</p>\n<h2>Why is this an issue?</h2>\n<p>Prior to Python 3.12, generic type aliases were defined as follows:</p>\n<pre>\nfrom typing import TypeAlias, TypeVar\n\n_T = TypeVar(\"_T\")\n\nMyAlias: TypeAlias = set[_T]\n</pre>\n<p>Python 3.12 introduced the <code>type</code> statement to facilitate the use of such type aliases, allowing for less confusing and more concise\ncode:</p>\n<pre>\ntype MyAlias[T] = set[T]\n</pre>\n<p>Python is transitioning away from explicit <code>TypeVar</code> declaration from Python 3.12 onward. This means that Type alias expressions are not\nallowed to use <code>TypeVar</code> allocated with an explicit constructor call:</p>\n<pre>\nfrom typing import TypeVar\n\n_T = TypeVar(\"_T\")\n\ntype MyAlias[A: str] = dict[A, _T]  # Type checker error would be raise\n</pre>\n<p>It is a good practice to use the new syntax only, as it fulfills all the requirements of the <code>TypeVar</code> declaration in a more concise and\nreadable way.</p>\n<h3>Exceptions</h3>\n<p>This rule will only raise an issue when the Python version of the analyzed project is set to 3.12 or higher.</p>\n<h2>How to fix it</h2>\n<p>To fix this error use a generic <code>type</code> statement and remove the use of the <code>TypeVar</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom typing import TypeAlias\n\n_T = TypeVar(\"_T\")\n\ntype MyAlias = set[_T]  # Noncompliant: a TypeVar is used as part of the type statement\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntype MyAlias[T] = set[T]  # Compliant: the new type statement syntax is used.\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.12/reference/simple_stmts.html#type\">The type statement</a> </li>\n  <li> Python 3.12 Release Notes - <a href=\"https://docs.python.org/3.12/whatsnew/3.12.html#pep-695-type-parameter-syntax\">PEP 695: Type Parameter\n  Syntax</a> </li>\n  <li> PEP 695 - <a href=\"https://peps.python.org/pep-0695/\">Type Parameter Syntax</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a <code>TypeVar</code> is used as a type parameter in a <code>type</code> statement.</p>\n<h2>Why is this an issue?</h2>\n<p>Prior to Python 3.12, generic type aliases were defined as follows:</p>\n<pre>\nfrom typing import TypeAlias, TypeVar\n\n_T = TypeVar(\"_T\")\n\nMyAlias: TypeAlias = set[_T]\n</pre>\n<p>Python 3.12 introduced the <code>type</code> statement to facilitate the use of such type aliases, allowing for less confusing and more concise\ncode:</p>\n<pre>\ntype MyAlias[T] = set[T]\n</pre>\n<p>Python is transitioning away from explicit <code>TypeVar</code> declaration from Python 3.12 onward. This means that Type alias expressions are not\nallowed to use <code>TypeVar</code> allocated with an explicit constructor call:</p>\n<pre>\nfrom typing import TypeVar\n\n_T = TypeVar(\"_T\")\n\ntype MyAlias[A: str] = dict[A, _T]  # Type checker error would be raise\n</pre>\n<p>It is a good practice to use the new syntax only, as it fulfills all the requirements of the <code>TypeVar</code> declaration in a more concise and\nreadable way.</p>\n<h3>Exceptions</h3>\n<p>This rule will only raise an issue when the Python version of the analyzed project is set to 3.12 or higher.</p>\n<h2>How to fix it</h2>\n<p>To fix this error use a generic <code>type</code> statement and remove the use of the <code>TypeVar</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom typing import TypeAlias\n\n_T = TypeVar(\"_T\")\n\ntype MyAlias = set[_T]  # Noncompliant: a TypeVar is used as part of the type statement\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntype MyAlias[T] = set[T]  # Compliant: the new type statement syntax is used.\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.12/reference/simple_stmts.html#type\">The type statement</a> </li>\n  <li> Python 3.12 Release Notes - <a href=\"https://docs.python.org/3.12/whatsnew/3.12.html#pep-695-type-parameter-syntax\">PEP 695: Type Parameter\n  Syntax</a> </li>\n  <li> PEP 695 - <a href=\"https://peps.python.org/pep-0695/\">Type Parameter Syntax</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6742",
          "name": "pandas.pipe method should be preferred over long chains of instructions",
          "description": "<p>This rule raises an issue when 7 or more commands are applied on a data frame.</p>\n<h2>Why is this an issue?</h2>\n<p>The pandas library provides many ways to filter, select, reshape and modify a data frame. Pandas supports as well method chaining, which means that\nmany <code>DataFrame</code> methods return a modified <code>DataFrame</code>. This allows the user to chain multiple operations together, making it\neffortless perform several of them in one line of code:</p>\n<pre>\nimport pandas as pd\n\nschema = {'name':str, 'domain': str, 'revenue': 'Int64'}\njoe = pd.read_csv(\"data.csv\", dtype=schema).set_index('name').filter(like='joe', axis=0).groupby('domain').mean().round().sample()\n</pre>\n<p>While this code is correct and concise, it can be challenging to follow its logic and flow, making it harder to debug or modify in the future.</p>\n<p>To improve code readability, debugging, and maintainability, it is recommended to break down long chains of pandas instructions into smaller, more\nmodular steps. This can be done with the help of the pandas <code>pipe</code> method, which takes a function as a parameter. This function takes the\ndata frame as a parameter, operates on it and returns it for further processing. Grouping complex transformations of a data frame inside a function\nwith a meaningful name can further enhance the readability and maintainability of the code.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue refactor chains of instruction into a function that can be consumed by the <code>pandas.pipe</code> method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\n\ndef foo(df: pd.DataFrame):\n  return df.set_index('name').filter(like='joe', axis=0).groupby('team').mean().round().sort_values('salary').take([0]) # Noncompliant: too many operations happen on this data frame.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\n\ndef select_joes(df):\n  return df.set_index('name').filter(like='joe', axis=0)\n\ndef compute_mean_salary_per_team(df):\n  return df.groupby('team').mean().round()\n\ndef foo(df: pd.DataFrame):\n  return df.pipe(select_joes).pipe(compute_mean_salary_per_team).sort_values('salary').take([0]) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas Documentation - <a\n  href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pipe.html#pandas-dataframe-pipe\">pandas.DataFrame.pipe</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when 7 or more commands are applied on a data frame.</p>\n<h2>Why is this an issue?</h2>\n<p>The pandas library provides many ways to filter, select, reshape and modify a data frame. Pandas supports as well method chaining, which means that\nmany <code>DataFrame</code> methods return a modified <code>DataFrame</code>. This allows the user to chain multiple operations together, making it\neffortless perform several of them in one line of code:</p>\n<pre>\nimport pandas as pd\n\nschema = {'name':str, 'domain': str, 'revenue': 'Int64'}\njoe = pd.read_csv(\"data.csv\", dtype=schema).set_index('name').filter(like='joe', axis=0).groupby('domain').mean().round().sample()\n</pre>\n<p>While this code is correct and concise, it can be challenging to follow its logic and flow, making it harder to debug or modify in the future.</p>\n<p>To improve code readability, debugging, and maintainability, it is recommended to break down long chains of pandas instructions into smaller, more\nmodular steps. This can be done with the help of the pandas <code>pipe</code> method, which takes a function as a parameter. This function takes the\ndata frame as a parameter, operates on it and returns it for further processing. Grouping complex transformations of a data frame inside a function\nwith a meaningful name can further enhance the readability and maintainability of the code.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue refactor chains of instruction into a function that can be consumed by the <code>pandas.pipe</code> method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\n\ndef foo(df: pd.DataFrame):\n  return df.set_index('name').filter(like='joe', axis=0).groupby('team').mean().round().sort_values('salary').take([0]) # Noncompliant: too many operations happen on this data frame.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\n\ndef select_joes(df):\n  return df.set_index('name').filter(like='joe', axis=0)\n\ndef compute_mean_salary_per_team(df):\n  return df.groupby('team').mean().round()\n\ndef foo(df: pd.DataFrame):\n  return df.pipe(select_joes).pipe(compute_mean_salary_per_team).sort_values('salary').take([0]) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas Documentation - <a\n  href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pipe.html#pandas-dataframe-pipe\">pandas.DataFrame.pipe</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6735",
          "name": "When using pandas.merge or pandas.join, the parameters on, how and validate should be provided",
          "description": "<p>This rule raises an issue when the parameters <code>how</code>, <code>on</code> and <code>validate</code> are not provided when using\n<code>pandas.merge</code> or <code>pandas.join</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>The Pandas library provides a user-friendly API to concatenate two data frames together with the methods <code>merge</code> and\n<code>join</code>.</p>\n<p>When using these methods, it is possible to specify how the merge will be performed:</p>\n<ul>\n  <li> The parameter <code>how</code> specifies the type of merge (<code>left</code>, <code>inner</code>, <code>outer</code>, etc..). </li>\n  <li> The parameter <code>on</code> specifies the column(s) on which the merge will be performed. </li>\n  <li> The parameter <code>validate</code> specifies a way to verify if the merge result is what was expected. </li>\n</ul>\n<pre>\nimport pandas as pd\n\nage_df = pd.DataFrame({\"user_id\":[1,2,4], \"age\":[42,45, 35]})\nname_df = pd.DataFrame({\"user_id\":[1,2,3,4], \"name\":[\"a\",\"b\",\"c\",\"d\"]})\n\nresult = age_df.merge(name_df, on=\"user_id\", how=\"right\", validate=\"1:1\")\n</pre>\n<p>In the example above, both data frames will be merged together based on the column <code>user_id</code>, specified by the parameter\n<code>on</code>.</p>\n<p>The parameter <code>how</code> set to <code>right</code> states that the resulting data frame will contain all the <code>user_id</code>s present in\nthe data frame <code>name_df</code> (including <code>3</code>, which is absent from <code>age_df</code> and will therefore be assigned a\n<code>NaN</code> value for the <code>age</code> column).</p>\n<p>Lastly, setting the <code>validate</code> parameter to <code>1:1</code> means a check will be performed to verify that the column used for the\nmerge only contains unique keys in both data frames. If this check fails a <code>MergeError</code> will be raised.</p>\n<p>Here is the resulting data frame:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n  </colgroup>\n  <tbody>\n    <tr>\n      <td><p>row</p></td>\n      <td><p>user_id</p></td>\n      <td><p>age</p></td>\n      <td><p>name</p></td>\n    </tr>\n    <tr>\n      <td><p>0</p></td>\n      <td><p>1</p></td>\n      <td><p>42</p></td>\n      <td><p>a</p></td>\n    </tr>\n    <tr>\n      <td><p>1</p></td>\n      <td><p>2</p></td>\n      <td><p>45</p></td>\n      <td><p>b</p></td>\n    </tr>\n    <tr>\n      <td><p>2</p></td>\n      <td><p>3</p></td>\n      <td><p>NaN</p></td>\n      <td><p>c</p></td>\n    </tr>\n    <tr>\n      <td><p>3</p></td>\n      <td><p>4</p></td>\n      <td><p>35</p></td>\n      <td><p>d</p></td>\n    </tr>\n  </tbody>\n</table>\n<p>More information about these methods and their parameters can be found in the pandas documentation: <a\nhref=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html#pandas-dataframe-merge\">merge</a> and <a\nhref=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.join.html#pandas-dataframe-join\">join</a>.</p>\n<p>The <code>how</code>, <code>on</code> and <code>validate</code> parameters are optional and pandas provides sensible default values.</p>\n<p>This means <code>merge</code> could be used as follow:</p>\n<pre>\nimport pandas as pd\n\nage_df = pd.DataFrame({\"user_id\":[1,2,4], \"age\":[42,45, 35]})\nname_df = pd.DataFrame({\"user_id\":[1,2,3,4], \"name\":[\"a\",\"b\",\"c\",\"d\"]})\n\nresult = age_df.merge(name_df)\n</pre>\n<p>In this example:</p>\n<ul>\n  <li> The <code>how</code> parameter defaults to <code>inner</code>. </li>\n  <li> The <code>on</code> parameter defaults to the columns which have a similar name, in our case <code>user_id</code> . </li>\n  <li> The <code>validate</code> parameter will be set to <code>many_to_many</code>, meaning no validation will be performed. </li>\n</ul>\n<p>Here is the resulting data frame:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n  </colgroup>\n  <tbody>\n    <tr>\n      <td><p>row</p></td>\n      <td><p>user_id</p></td>\n      <td><p>age</p></td>\n      <td><p>name</p></td>\n    </tr>\n    <tr>\n      <td><p>0</p></td>\n      <td><p>1</p></td>\n      <td><p>42</p></td>\n      <td><p>a</p></td>\n    </tr>\n    <tr>\n      <td><p>1</p></td>\n      <td><p>2</p></td>\n      <td><p>45</p></td>\n      <td><p>b</p></td>\n    </tr>\n    <tr>\n      <td><p>2</p></td>\n      <td><p>4</p></td>\n      <td><p>35</p></td>\n      <td><p>d</p></td>\n    </tr>\n  </tbody>\n</table>\n<p>While the example above is perfectly valid, using the <code>merge</code> and <code>join</code> methods without providing the <code>how</code>,\n<code>on</code> and <code>validate</code> arguments has two main drawbacks:</p>\n<ul>\n  <li> It makes the code intention unclear: without the <code>how</code> parameter set, it is unclear if the developer noticed that a\n  <code>user_id</code> (<code>3</code>) will be missing from the resulting data frame, or if it is done on purpose. </li>\n  <li> It makes the code harder to maintain: if one of the data frame would change its <code>user_id</code> column name to <code>id</code>, the code\n  would still run but the result would be entirely different. </li>\n</ul>\n<p>In order to mitigate these drawbacks, setting the <code>how</code> parameter to <code>inner</code> would better convey that the intention is to\nonly keep <code>user_id</code>s present in both data frame. Setting the <code>on</code> parameter to <code>user_id</code> could also avoid issues in\nthe future, for example if the input data frames came to change.</p>\n<p>The information provided by these parameters is extremely valuable, especially when another developer is in charge of refactoring or debugging this\nparticular piece of code.</p>\n<p>This is why it is a good practice to provide the parameters <code>how</code>, <code>on</code> (or <code>left_on</code> and <code>right_on</code>)\nand <code>validate</code> to the pandas' <code>merge</code> and <code>join</code>.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue provide the parameters <code>how</code>, <code>on</code> (or <code>left_on</code> and <code>right_on</code>) and\n<code>validate</code> to the <code>pd.merge</code> or <code>pd.join</code> methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\n\ndef merge_dfs(age_df:pd.DataFrame, name_df:pd.DataFrame):\n  return age_df.merge(name_df) # Noncompliant: it is unclear on which column the merge should happen, as well as what is the expected result.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\n\ndef merge_dfs(age_df:pd.DataFrame, name_df:pd.DataFrame):\n  return age_df.merge(\n          name_df,\n          on=\"user_id\",\n          how=\"inner\",\n          validate=\"1:1\"\n         ) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas Documentation - <a\n  href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html#pandas-dataframe-merge\">pandas.DataFrame.merge</a> </li>\n  <li> Pandas Documentation - <a\n  href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.join.html#pandas-dataframe-join\">pandas.DataFrame.join</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the parameters <code>how</code>, <code>on</code> and <code>validate</code> are not provided when using\n<code>pandas.merge</code> or <code>pandas.join</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>The Pandas library provides a user-friendly API to concatenate two data frames together with the methods <code>merge</code> and\n<code>join</code>.</p>\n<p>When using these methods, it is possible to specify how the merge will be performed:</p>\n<ul>\n  <li> The parameter <code>how</code> specifies the type of merge (<code>left</code>, <code>inner</code>, <code>outer</code>, etc..). </li>\n  <li> The parameter <code>on</code> specifies the column(s) on which the merge will be performed. </li>\n  <li> The parameter <code>validate</code> specifies a way to verify if the merge result is what was expected. </li>\n</ul>\n<pre>\nimport pandas as pd\n\nage_df = pd.DataFrame({\"user_id\":[1,2,4], \"age\":[42,45, 35]})\nname_df = pd.DataFrame({\"user_id\":[1,2,3,4], \"name\":[\"a\",\"b\",\"c\",\"d\"]})\n\nresult = age_df.merge(name_df, on=\"user_id\", how=\"right\", validate=\"1:1\")\n</pre>\n<p>In the example above, both data frames will be merged together based on the column <code>user_id</code>, specified by the parameter\n<code>on</code>.</p>\n<p>The parameter <code>how</code> set to <code>right</code> states that the resulting data frame will contain all the <code>user_id</code>s present in\nthe data frame <code>name_df</code> (including <code>3</code>, which is absent from <code>age_df</code> and will therefore be assigned a\n<code>NaN</code> value for the <code>age</code> column).</p>\n<p>Lastly, setting the <code>validate</code> parameter to <code>1:1</code> means a check will be performed to verify that the column used for the\nmerge only contains unique keys in both data frames. If this check fails a <code>MergeError</code> will be raised.</p>\n<p>Here is the resulting data frame:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n  </colgroup>\n  <tbody>\n    <tr>\n      <td><p>row</p></td>\n      <td><p>user_id</p></td>\n      <td><p>age</p></td>\n      <td><p>name</p></td>\n    </tr>\n    <tr>\n      <td><p>0</p></td>\n      <td><p>1</p></td>\n      <td><p>42</p></td>\n      <td><p>a</p></td>\n    </tr>\n    <tr>\n      <td><p>1</p></td>\n      <td><p>2</p></td>\n      <td><p>45</p></td>\n      <td><p>b</p></td>\n    </tr>\n    <tr>\n      <td><p>2</p></td>\n      <td><p>3</p></td>\n      <td><p>NaN</p></td>\n      <td><p>c</p></td>\n    </tr>\n    <tr>\n      <td><p>3</p></td>\n      <td><p>4</p></td>\n      <td><p>35</p></td>\n      <td><p>d</p></td>\n    </tr>\n  </tbody>\n</table>\n<p>More information about these methods and their parameters can be found in the pandas documentation: <a\nhref=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html#pandas-dataframe-merge\">merge</a> and <a\nhref=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.join.html#pandas-dataframe-join\">join</a>.</p>\n<p>The <code>how</code>, <code>on</code> and <code>validate</code> parameters are optional and pandas provides sensible default values.</p>\n<p>This means <code>merge</code> could be used as follow:</p>\n<pre>\nimport pandas as pd\n\nage_df = pd.DataFrame({\"user_id\":[1,2,4], \"age\":[42,45, 35]})\nname_df = pd.DataFrame({\"user_id\":[1,2,3,4], \"name\":[\"a\",\"b\",\"c\",\"d\"]})\n\nresult = age_df.merge(name_df)\n</pre>\n<p>In this example:</p>\n<ul>\n  <li> The <code>how</code> parameter defaults to <code>inner</code>. </li>\n  <li> The <code>on</code> parameter defaults to the columns which have a similar name, in our case <code>user_id</code> . </li>\n  <li> The <code>validate</code> parameter will be set to <code>many_to_many</code>, meaning no validation will be performed. </li>\n</ul>\n<p>Here is the resulting data frame:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n  </colgroup>\n  <tbody>\n    <tr>\n      <td><p>row</p></td>\n      <td><p>user_id</p></td>\n      <td><p>age</p></td>\n      <td><p>name</p></td>\n    </tr>\n    <tr>\n      <td><p>0</p></td>\n      <td><p>1</p></td>\n      <td><p>42</p></td>\n      <td><p>a</p></td>\n    </tr>\n    <tr>\n      <td><p>1</p></td>\n      <td><p>2</p></td>\n      <td><p>45</p></td>\n      <td><p>b</p></td>\n    </tr>\n    <tr>\n      <td><p>2</p></td>\n      <td><p>4</p></td>\n      <td><p>35</p></td>\n      <td><p>d</p></td>\n    </tr>\n  </tbody>\n</table>\n<p>While the example above is perfectly valid, using the <code>merge</code> and <code>join</code> methods without providing the <code>how</code>,\n<code>on</code> and <code>validate</code> arguments has two main drawbacks:</p>\n<ul>\n  <li> It makes the code intention unclear: without the <code>how</code> parameter set, it is unclear if the developer noticed that a\n  <code>user_id</code> (<code>3</code>) will be missing from the resulting data frame, or if it is done on purpose. </li>\n  <li> It makes the code harder to maintain: if one of the data frame would change its <code>user_id</code> column name to <code>id</code>, the code\n  would still run but the result would be entirely different. </li>\n</ul>\n<p>In order to mitigate these drawbacks, setting the <code>how</code> parameter to <code>inner</code> would better convey that the intention is to\nonly keep <code>user_id</code>s present in both data frame. Setting the <code>on</code> parameter to <code>user_id</code> could also avoid issues in\nthe future, for example if the input data frames came to change.</p>\n<p>The information provided by these parameters is extremely valuable, especially when another developer is in charge of refactoring or debugging this\nparticular piece of code.</p>\n<p>This is why it is a good practice to provide the parameters <code>how</code>, <code>on</code> (or <code>left_on</code> and <code>right_on</code>)\nand <code>validate</code> to the pandas' <code>merge</code> and <code>join</code>.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue provide the parameters <code>how</code>, <code>on</code> (or <code>left_on</code> and <code>right_on</code>) and\n<code>validate</code> to the <code>pd.merge</code> or <code>pd.join</code> methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\n\ndef merge_dfs(age_df:pd.DataFrame, name_df:pd.DataFrame):\n  return age_df.merge(name_df) # Noncompliant: it is unclear on which column the merge should happen, as well as what is the expected result.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\n\ndef merge_dfs(age_df:pd.DataFrame, name_df:pd.DataFrame):\n  return age_df.merge(\n          name_df,\n          on=\"user_id\",\n          how=\"inner\",\n          validate=\"1:1\"\n         ) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas Documentation - <a\n  href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html#pandas-dataframe-merge\">pandas.DataFrame.merge</a> </li>\n  <li> Pandas Documentation - <a\n  href=\"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.join.html#pandas-dataframe-join\">pandas.DataFrame.join</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6734",
          "name": "inplace=True should not be used when modifying a Pandas DataFrame",
          "description": "<p>This rule raises an issue when the <code>inplace</code> parameter is set to <code>True</code> when modifying a Pandas DataFrame.</p>\n<h2>Why is this an issue?</h2>\n<p>Using <code>inplace=True</code> when modifying a Pandas DataFrame means that the method will modify the DataFrame in place, rather than returning a\nnew object:</p>\n<pre>\ndf.an_operation(inplace=True)\n</pre>\n<p>When <code>inplace</code> is <code>False</code> (which is the default behavior), a new object is returned instead:</p>\n<pre>\ndf2 = df.an_operation(inplace=False)\n</pre>\n<p>Generally speaking, the motivation for modifying an object in place is to improve efficiency by avoiding the creation of a copy of the original\nobject. Unfortunately, many methods supporting the inplace keyword either cannot actually be done inplace, or make a copy as a consequence of the\noperations they perform, regardless of whether <code>inplace</code> is <code>True</code> or not. For example, the following methods can never operate\nin place:</p>\n<ul>\n  <li> drop (dropping rows) </li>\n  <li> dropna </li>\n  <li> drop_duplicates </li>\n  <li> sort_values </li>\n  <li> sort_index </li>\n  <li> eval </li>\n  <li> query </li>\n</ul>\n<p>Because of this, expecting efficiency gains through the use of <code>inplace=True</code> is not reliable.</p>\n<p>Additionally, using <code>inplace=True</code> may trigger a <code>SettingWithCopyWarning</code> and make the overall intention of the code unclear.\nIn the following example, modifying <code>df2</code> will not modify the original <code>df</code> dataframe, and a warning will be raised:</p>\n<pre>\ndf = pd.DataFrame({'a': [3, 2, 1], 'b': ['x', 'y', 'z']})\n\ndf2 = df[df['a'] &gt; 1]\ndf2['b'].replace({'x': 'abc'}, inplace=True)\n# SettingWithCopyWarning:\n# A value is trying to be set on a copy of a slice from a DataFrame\n</pre>\n<p>In general, side effects such as object mutation may be the source of subtle bugs and explicit reassignment is considered safer.</p>\n<p>When intermediate results are not needed, method chaining is a more explicit alternative to the <code>inplace</code> parameter. For instance, one\nmay write:</p>\n<pre>\ndf.drop('City', axis=1, inplace=True)\ndf.sort_values('Name', inplace=True)\ndf.reset_index(drop=True, inplace=True)\n</pre>\n<p>Through method chaining, this previous example may be rewritten as:</p>\n<pre>\nresult = df.drop('City', axis=1).sort_values('Name').reset_index(drop=True)\n</pre>\n<p>For these reasons, it is therefore recommended to avoid using <code>inplace=True</code> in favor of more explicit and less error-prone\nalternatives.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, avoid using the <code>inplace=True</code> parameter. Either opt for method chaining when intermediary results are not needed, or\nfor explicit reassignment when the intention is to perform a simple operation.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\ndef foo():\n    df.drop(columns='A', inplace=True)  # Noncompliant: Using inplace=True is error-prone and should be avoided\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\ndef foo():\n    df = df.drop(columns='A')  # OK: explicit reassignment\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas Enhancement Proposal - <a href=\"https://github.com/pandas-dev/pandas/pull/51466\">PDEP-8: In-place methods in pandas</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the <code>inplace</code> parameter is set to <code>True</code> when modifying a Pandas DataFrame.</p>\n<h2>Why is this an issue?</h2>\n<p>Using <code>inplace=True</code> when modifying a Pandas DataFrame means that the method will modify the DataFrame in place, rather than returning a\nnew object:</p>\n<pre>\ndf.an_operation(inplace=True)\n</pre>\n<p>When <code>inplace</code> is <code>False</code> (which is the default behavior), a new object is returned instead:</p>\n<pre>\ndf2 = df.an_operation(inplace=False)\n</pre>\n<p>Generally speaking, the motivation for modifying an object in place is to improve efficiency by avoiding the creation of a copy of the original\nobject. Unfortunately, many methods supporting the inplace keyword either cannot actually be done inplace, or make a copy as a consequence of the\noperations they perform, regardless of whether <code>inplace</code> is <code>True</code> or not. For example, the following methods can never operate\nin place:</p>\n<ul>\n  <li> drop (dropping rows) </li>\n  <li> dropna </li>\n  <li> drop_duplicates </li>\n  <li> sort_values </li>\n  <li> sort_index </li>\n  <li> eval </li>\n  <li> query </li>\n</ul>\n<p>Because of this, expecting efficiency gains through the use of <code>inplace=True</code> is not reliable.</p>\n<p>Additionally, using <code>inplace=True</code> may trigger a <code>SettingWithCopyWarning</code> and make the overall intention of the code unclear.\nIn the following example, modifying <code>df2</code> will not modify the original <code>df</code> dataframe, and a warning will be raised:</p>\n<pre>\ndf = pd.DataFrame({'a': [3, 2, 1], 'b': ['x', 'y', 'z']})\n\ndf2 = df[df['a'] &gt; 1]\ndf2['b'].replace({'x': 'abc'}, inplace=True)\n# SettingWithCopyWarning:\n# A value is trying to be set on a copy of a slice from a DataFrame\n</pre>\n<p>In general, side effects such as object mutation may be the source of subtle bugs and explicit reassignment is considered safer.</p>\n<p>When intermediate results are not needed, method chaining is a more explicit alternative to the <code>inplace</code> parameter. For instance, one\nmay write:</p>\n<pre>\ndf.drop('City', axis=1, inplace=True)\ndf.sort_values('Name', inplace=True)\ndf.reset_index(drop=True, inplace=True)\n</pre>\n<p>Through method chaining, this previous example may be rewritten as:</p>\n<pre>\nresult = df.drop('City', axis=1).sort_values('Name').reset_index(drop=True)\n</pre>\n<p>For these reasons, it is therefore recommended to avoid using <code>inplace=True</code> in favor of more explicit and less error-prone\nalternatives.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, avoid using the <code>inplace=True</code> parameter. Either opt for method chaining when intermediary results are not needed, or\nfor explicit reassignment when the intention is to perform a simple operation.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\ndef foo():\n    df.drop(columns='A', inplace=True)  # Noncompliant: Using inplace=True is error-prone and should be avoided\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\ndef foo():\n    df = df.drop(columns='A')  # OK: explicit reassignment\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas Enhancement Proposal - <a href=\"https://github.com/pandas-dev/pandas/pull/51466\">PDEP-8: In-place methods in pandas</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6730",
          "name": "Deprecated NumPy aliases of built-in types should not be used",
          "description": "<p>This rule raises an issue when a deprecated Numpy alias of a built-in type is used.</p>\n<h2>Why is this an issue?</h2>\n<p>In NumPy, some built-in types such as <code>int</code> have aliases in the form of <code>numpy.int</code>. However, these aliases have been\ndeprecated and should not be used anymore.</p>\n<p>The following deprecated aliases should be replaced with their built-in alternatives:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Deprecated name</th>\n      <th>Equivalent built-in type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>numpy.bool</p></td>\n      <td><p>bool</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.int</p></td>\n      <td><p>int</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.float</p></td>\n      <td><p>float</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.complex</p></td>\n      <td><p>complex</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.object</p></td>\n      <td><p>object</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.str</p></td>\n      <td><p>str</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.long</p></td>\n      <td><p>int</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.unicode</p></td>\n      <td><p>str</p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to replace deprecated NumPy type aliases with their corresponding built-in types.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\ndef foo():\n    x = np.int(42)  # Noncompliant: deprecated type alias\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\ndef foo():\n    x = 42  # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/devdocs/user/basics.types.html#basics-types\">Data types</a> </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\">Deprecation of aliases of builtin types</a>\n  </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a deprecated Numpy alias of a built-in type is used.</p>\n<h2>Why is this an issue?</h2>\n<p>In NumPy, some built-in types such as <code>int</code> have aliases in the form of <code>numpy.int</code>. However, these aliases have been\ndeprecated and should not be used anymore.</p>\n<p>The following deprecated aliases should be replaced with their built-in alternatives:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Deprecated name</th>\n      <th>Equivalent built-in type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>numpy.bool</p></td>\n      <td><p>bool</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.int</p></td>\n      <td><p>int</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.float</p></td>\n      <td><p>float</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.complex</p></td>\n      <td><p>complex</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.object</p></td>\n      <td><p>object</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.str</p></td>\n      <td><p>str</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.long</p></td>\n      <td><p>int</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.unicode</p></td>\n      <td><p>str</p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to replace deprecated NumPy type aliases with their corresponding built-in types.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\ndef foo():\n    x = np.int(42)  # Noncompliant: deprecated type alias\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\ndef foo():\n    x = 42  # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/devdocs/user/basics.types.html#basics-types\">Data types</a> </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\">Deprecation of aliases of builtin types</a>\n  </li>\n</ul>\n\n"
        },
        {
          "id": "S6729",
          "name": "np.nonzero should be preferred over np.where when only the condition parameter is set",
          "description": "<p>This rule raises an issue when <code>np.where</code> is used with only the condition parameter set.</p>\n<h2>Why is this an issue?</h2>\n<p>The NumPy function <code>np.where</code> provides a way to execute operations on an array under a certain condition:</p>\n<pre>\nimport numpy as np\n\narr = np.array([1,2,3,4])\n\nresult = np.where(arr &gt; 3, arr * 2, arr)\n</pre>\n<p>In the example above the <code>np.where</code> function will multiply all the elements in the array which satisfy the condition: <code>element &gt;\n3</code> by 2. The elements that do not satisfy the condition will be left untouched. The <code>result</code> array holds now the values 1, 2, 3 and\n8.</p>\n<p>It is also possible to call <code>np.where</code> with only the condition parameter set:</p>\n<pre>\nimport numpy as np\n\narr = np.array([1,2,3,4])\n\nresult = np.where(arr &gt; 2)\n</pre>\n<p>Even though this is perfectly valid code in NumPy, it may not yield the expected results.</p>\n<p>When providing only the condition parameter to the <code>np.where</code> function, it will behave as <code>np.asarray(condition).nonzero()</code>\nor <code>np.nonzero(condition)</code>. Both these functions provide a way to find the indices of the elements satisfying the condition passed as\nparameter. Be mindful that <code>np.asarray(condition).nonzero()</code> and <code>np.nonzero(condition)</code> do not return the\n<strong>values</strong> that satisfy the condition but only their <strong>indices</strong>. This means the <code>result</code> variable now holds a\ntuple with the first element being an array of all the indices where the condition <code>arr &gt; 2</code> was satisfied:\n<code>(array([2,3]),)</code>.</p>\n<p>If the intention is to find the indices of the elements which satisfy a certain condition it is preferable to use the\n<code>np.asarray(condition).nonzero()</code> or <code>np.nonzero(condition)</code> function instead.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue either:</p>\n<ul>\n  <li> provide all three parameters to the <code>np.where</code> function (condition, value if the condition is satisfied, value if the condition is\n  not satisfied) or, </li>\n  <li> use the <code>np.nonzero</code> function. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\n\ndef bigger_than_two():\n  arr = np.array([1,2,3,4])\n  result = np.where(arr &gt; 2) # Noncompliant: only the condition parameter is provided to the np.where function.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\n\ndef bigger_than_two():\n  arr = np.array([1,2,3,4])\n  result = np.where(arr &gt; 2, arr + 1, arr) # Compliant\n  indices = np.nonzero(arr &gt; 2) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.where.html#numpy-where\">numpy.where</a> </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.nonzero.html#numpy.nonzero\">numpy.nonzero</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when <code>np.where</code> is used with only the condition parameter set.</p>\n<h2>Why is this an issue?</h2>\n<p>The NumPy function <code>np.where</code> provides a way to execute operations on an array under a certain condition:</p>\n<pre>\nimport numpy as np\n\narr = np.array([1,2,3,4])\n\nresult = np.where(arr &gt; 3, arr * 2, arr)\n</pre>\n<p>In the example above the <code>np.where</code> function will multiply all the elements in the array which satisfy the condition: <code>element &gt;\n3</code> by 2. The elements that do not satisfy the condition will be left untouched. The <code>result</code> array holds now the values 1, 2, 3 and\n8.</p>\n<p>It is also possible to call <code>np.where</code> with only the condition parameter set:</p>\n<pre>\nimport numpy as np\n\narr = np.array([1,2,3,4])\n\nresult = np.where(arr &gt; 2)\n</pre>\n<p>Even though this is perfectly valid code in NumPy, it may not yield the expected results.</p>\n<p>When providing only the condition parameter to the <code>np.where</code> function, it will behave as <code>np.asarray(condition).nonzero()</code>\nor <code>np.nonzero(condition)</code>. Both these functions provide a way to find the indices of the elements satisfying the condition passed as\nparameter. Be mindful that <code>np.asarray(condition).nonzero()</code> and <code>np.nonzero(condition)</code> do not return the\n<strong>values</strong> that satisfy the condition but only their <strong>indices</strong>. This means the <code>result</code> variable now holds a\ntuple with the first element being an array of all the indices where the condition <code>arr &gt; 2</code> was satisfied:\n<code>(array([2,3]),)</code>.</p>\n<p>If the intention is to find the indices of the elements which satisfy a certain condition it is preferable to use the\n<code>np.asarray(condition).nonzero()</code> or <code>np.nonzero(condition)</code> function instead.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue either:</p>\n<ul>\n  <li> provide all three parameters to the <code>np.where</code> function (condition, value if the condition is satisfied, value if the condition is\n  not satisfied) or, </li>\n  <li> use the <code>np.nonzero</code> function. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\n\ndef bigger_than_two():\n  arr = np.array([1,2,3,4])\n  result = np.where(arr &gt; 2) # Noncompliant: only the condition parameter is provided to the np.where function.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\n\ndef bigger_than_two():\n  arr = np.array([1,2,3,4])\n  result = np.where(arr &gt; 2, arr + 1, arr) # Compliant\n  indices = np.nonzero(arr &gt; 2) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.where.html#numpy-where\">numpy.where</a> </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.nonzero.html#numpy.nonzero\">numpy.nonzero</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6714",
          "name": "Passing a list to np.array should be preferred over passing a generator",
          "description": "<p>This rule raises an issue when a generator is passed to <code>np.array</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>The creation of a NumPy array can be done in several ways, for example by passing a Python list to the <code>np.array</code> function. Another way\nwould be to pass a generator to the <code>np.array</code> function, but doing so creates a 0-dimensional array of objects and may not be the intended\ngoal. This NumPy array will have a have a data type (dtype) of <code>object</code> and could hold any Python objects.</p>\n<p>One of the characteristics of NumPy arrays is homogeneity, meaning all its elements are of the same type. Creating an array of objects allows the\nuser to create heterogeneous array without raising any errors and creating such an array can lead to bugs further in the program.</p>\n<pre>\narr = np.array(x**2 for x in range(10))\n\narr.reshape(1)\narr.resize(2)\narr.put(indices=1, values=3) # No issues raised.\n</pre>\n<p>The NumPy array <code>arr</code> shown above now holds 2 values: a generator and the number 3.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, either:</p>\n<ul>\n  <li> pass a Python list instead of a generator to the <code>np.array</code> function or, </li>\n  <li> explicitly show the intention to create a 0-dimensional array of objects by either adding <code>Any</code> as the type hint of the generator or\n  by specifying the <code>dtype</code> parameter of the NumPy array as <code>object</code>. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\narr = np.array(x**2 for x in range(10)) # Noncompliant: the resulting array will be of the data type: object.\n\ngen = (x*2 for x in range(5))\narr = np.array(gen) # Noncompliant: the resulting array will be of the data type: object.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom typing import Any\n\narr = np.array([x**2 for x in range(10)]) # Compliant: a list of 10 elements is passed to the np.array function.\n\narr = np.array(x**2 for x in range(10), dtype=object) # Compliant: the dtype parameter of np.array is set to object.\n\ngen: Any = (x*2 for x in range(5))\narr = np.array(gen) # Compliant: the generator is explicitly type hinted with Any.\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/typing.html#arraylike\">ArrayLike</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a generator is passed to <code>np.array</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>The creation of a NumPy array can be done in several ways, for example by passing a Python list to the <code>np.array</code> function. Another way\nwould be to pass a generator to the <code>np.array</code> function, but doing so creates a 0-dimensional array of objects and may not be the intended\ngoal. This NumPy array will have a have a data type (dtype) of <code>object</code> and could hold any Python objects.</p>\n<p>One of the characteristics of NumPy arrays is homogeneity, meaning all its elements are of the same type. Creating an array of objects allows the\nuser to create heterogeneous array without raising any errors and creating such an array can lead to bugs further in the program.</p>\n<pre>\narr = np.array(x**2 for x in range(10))\n\narr.reshape(1)\narr.resize(2)\narr.put(indices=1, values=3) # No issues raised.\n</pre>\n<p>The NumPy array <code>arr</code> shown above now holds 2 values: a generator and the number 3.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, either:</p>\n<ul>\n  <li> pass a Python list instead of a generator to the <code>np.array</code> function or, </li>\n  <li> explicitly show the intention to create a 0-dimensional array of objects by either adding <code>Any</code> as the type hint of the generator or\n  by specifying the <code>dtype</code> parameter of the NumPy array as <code>object</code>. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\narr = np.array(x**2 for x in range(10)) # Noncompliant: the resulting array will be of the data type: object.\n\ngen = (x*2 for x in range(5))\narr = np.array(gen) # Noncompliant: the resulting array will be of the data type: object.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom typing import Any\n\narr = np.array([x**2 for x in range(10)]) # Compliant: a list of 10 elements is passed to the np.array function.\n\narr = np.array(x**2 for x in range(10), dtype=object) # Compliant: the dtype parameter of np.array is set to object.\n\ngen: Any = (x*2 for x in range(5))\narr = np.array(gen) # Compliant: the generator is explicitly type hinted with Any.\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/typing.html#arraylike\">ArrayLike</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6711",
          "name": "numpy.random.Generator should be preferred to numpy.random.RandomState",
          "description": "<p>This rule raises an issue when legacy <code>numpy.random.RandomState</code> is used.</p>\n<h2>Why is this an issue?</h2>\n<p>Using a predictable seed is a common best practice when using NumPy to create reproducible results. To that end, using\n<code>np.random.seed(number)</code> to set the seed of the global <code>numpy.random.RandomState</code> has been the privileged solution for a long\ntime.</p>\n<p><code>numpy.random.RandomState</code> and its associated methods rely on a global state, which may be problematic when threads or other forms of\nconcurrency are involved. The global state may be altered and the global seed may be reset at various points in the program (for instance, through an\nimported package or script), which would lead to irreproducible results.</p>\n<p>Instead, the preferred best practice to generate reproducible pseudorandom numbers is to instantiate a <code>numpy.random.Generator</code> object\nwith a seed and reuse it in different parts of the code. This avoids the reliance on a global state. Whenever a new seed is needed, a new generator\nmay be created instead of mutating a global state.</p>\n<p>Below is the list of legacy functions and their alternatives:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <tbody>\n    <tr>\n      <td><p>Legacy function name</p></td>\n      <td><p>numpy.random.Generator alternative</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.seed</p></td>\n      <td><p>numpy.random.default_rng</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.rand</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.randn</p></td>\n      <td><p>numpy.random.Generator.standard_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.randint</p></td>\n      <td><p>numpy.random.Generator.integers</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.random_integers</p></td>\n      <td><p>numpy.random.Generator.integers</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.random_sample</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.choice</p></td>\n      <td><p>numpy.random.Generator.choice</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.bytes</p></td>\n      <td><p>numpy.random.Generator.bytes</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.shuffle</p></td>\n      <td><p>numpy.random.Generator.shuffle</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.permutation</p></td>\n      <td><p>numpy.random.Generator.permutation</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.beta</p></td>\n      <td><p>numpy.random.Generator.beta</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.binomial</p></td>\n      <td><p>numpy.random.Generator.binomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.chisquare</p></td>\n      <td><p>numpy.random.Generator.chisquare</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.dirichlet</p></td>\n      <td><p>numpy.random.Generator.dirichlet</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.exponential</p></td>\n      <td><p>numpy.random.Generator.exponential</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.f</p></td>\n      <td><p>numpy.random.Generator.f</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.gamma</p></td>\n      <td><p>numpy.random.Generator.gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.geometric</p></td>\n      <td><p>numpy.random.Generator.geometric</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.gumbel</p></td>\n      <td><p>numpy.random.Generator.gumbel</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.hypergeometric</p></td>\n      <td><p>numpy.random.Generator.hypergeometric</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.laplace</p></td>\n      <td><p>numpy.random.Generator.laplace</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.logistic</p></td>\n      <td><p>numpy.random.Generator.logistic</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.lognormal</p></td>\n      <td><p>numpy.random.Generator.lognormal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.logseries</p></td>\n      <td><p>numpy.random.Generator.logseries</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.multinomial</p></td>\n      <td><p>numpy.random.Generator.multinomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.multivariate_normal</p></td>\n      <td><p>numpy.random.Generator.multivariate_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.negative_binomial</p></td>\n      <td><p>numpy.random.Generator.negative_binomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.noncentral_chisquare</p></td>\n      <td><p>numpy.random.Generator.noncentral_chisquare</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.noncentral_f</p></td>\n      <td><p>numpy.random.Generator.noncentral_f</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.normal</p></td>\n      <td><p>numpy.random.Generator.normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.pareto</p></td>\n      <td><p>numpy.random.Generator.pareto</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.poisson</p></td>\n      <td><p>numpy.random.Generator.poisson</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.power</p></td>\n      <td><p>numpy.random.Generator.power</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.rayleigh</p></td>\n      <td><p>numpy.random.Generator.rayleigh</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.standard_cauchy</p></td>\n      <td><p>numpy.random.Generator.standard_cauchy</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.standard_exponential</p></td>\n      <td><p>numpy.random.Generator.standard_exponential</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.standard_gamma</p></td>\n      <td><p>numpy.random.Generator.standard_gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.standard_normal</p></td>\n      <td><p>numpy.random.Generator.standard_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.standard_t</p></td>\n      <td><p>numpy.random.Generator.standard_t</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.triangular</p></td>\n      <td><p>numpy.random.Generator.triangular</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.uniform</p></td>\n      <td><p>numpy.random.Generator.uniform</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.vonmises</p></td>\n      <td><p>numpy.random.Generator.vonmises</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.wald</p></td>\n      <td><p>numpy.random.Generator.wald</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.weibull</p></td>\n      <td><p>numpy.random.Generator.weibull</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.zipf</p></td>\n      <td><p>numpy.random.Generator.zipf</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.beta</p></td>\n      <td><p>numpy.random.Generator.beta</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.binomial</p></td>\n      <td><p>numpy.random.Generator.binomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.bytes</p></td>\n      <td><p>numpy.random.Generator.bytes</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.chisquare</p></td>\n      <td><p>numpy.random.Generator.chisquare</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.choice</p></td>\n      <td><p>numpy.random.Generator.choice</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.dirichlet</p></td>\n      <td><p>numpy.random.Generator.dirichlet</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.exponential</p></td>\n      <td><p>numpy.random.Generator.exponential</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.f</p></td>\n      <td><p>numpy.random.Generator.f</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.gamma</p></td>\n      <td><p>numpy.random.Generator.gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.geometric</p></td>\n      <td><p>numpy.random.Generator.geometric</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.gumbel</p></td>\n      <td><p>numpy.random.Generator.gumbel</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.hypergeometric</p></td>\n      <td><p>numpy.random.Generator.hypergeometric</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.laplace</p></td>\n      <td><p>numpy.random.Generator.laplace</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.logistic</p></td>\n      <td><p>numpy.random.Generator.logistic</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.lognormal</p></td>\n      <td><p>numpy.random.Generator.lognormal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.logseries</p></td>\n      <td><p>numpy.random.Generator.logseries</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.multinomial</p></td>\n      <td><p>numpy.random.Generator.multinomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.multivariate_normal</p></td>\n      <td><p>numpy.random.Generator.multivariate_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.negative_binomial</p></td>\n      <td><p>numpy.random.Generator.negative_binomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.noncentral_chisquare</p></td>\n      <td><p>numpy.random.Generator.noncentral_chisquare</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.noncentral_f</p></td>\n      <td><p>numpy.random.Generator.noncentral_f</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.normal</p></td>\n      <td><p>numpy.random.Generator.normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.pareto</p></td>\n      <td><p>numpy.random.Generator.pareto</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.permutation</p></td>\n      <td><p>numpy.random.Generator.permutation</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.poisson</p></td>\n      <td><p>numpy.random.Generator.poisson</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.power</p></td>\n      <td><p>numpy.random.Generator.power</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.rand</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.randint</p></td>\n      <td><p>numpy.random.Generator.integers</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.randn</p></td>\n      <td><p>numpy.random.Generator.standard_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.random</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.random_integers</p></td>\n      <td><p>numpy.random.Generator.integers</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.random_sample</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.ranf</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.rayleigh</p></td>\n      <td><p>numpy.random.Generator.rayleigh</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.sample</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.seed</p></td>\n      <td><p>numpy.random.default_rng</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.shuffle</p></td>\n      <td><p>numpy.random.Generator.shuffle</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.standard_cauchy</p></td>\n      <td><p>numpy.random.Generator.standard_cauchy</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.standard_exponential</p></td>\n      <td><p>numpy.random.Generator.standard_exponential</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.standard_gamma</p></td>\n      <td><p>numpy.random.Generator.standard_gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.standard_normal</p></td>\n      <td><p>numpy.random.Generator.standard_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.standard_t</p></td>\n      <td><p>numpy.random.Generator.standard_t</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.triangular</p></td>\n      <td><p>numpy.random.Generator.triangular</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.uniform</p></td>\n      <td><p>numpy.random.Generator.uniform</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.vonmises</p></td>\n      <td><p>numpy.random.Generator.vonmises</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.wald</p></td>\n      <td><p>numpy.random.Generator.wald</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.weibull</p></td>\n      <td><p>numpy.random.Generator.weibull</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.zipf</p></td>\n      <td><p>numpy.random.Generator.zipf</p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>How to fix it</h2>\n<p>To fix this issue, replace usages of <code>numpy.random.RandomState</code> to <code>numpy.random.Generator</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\nnp.random.seed(42)\nx = np.random.randn()  # Noncompliant: this relies on numpy.random.RandomState, which is deprecated\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\ngenerator = np.random.default_rng(42)\nx = generator.standard_normal()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/random/generator.html#random-generator\">Random Generator</a> </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/random/legacy.html#legacy-random-generation\">Legacy Random Generation</a>\n  </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/neps/nep-0019-rng-policy.html\">NEP19 RNG Policy</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when legacy <code>numpy.random.RandomState</code> is used.</p>\n<h2>Why is this an issue?</h2>\n<p>Using a predictable seed is a common best practice when using NumPy to create reproducible results. To that end, using\n<code>np.random.seed(number)</code> to set the seed of the global <code>numpy.random.RandomState</code> has been the privileged solution for a long\ntime.</p>\n<p><code>numpy.random.RandomState</code> and its associated methods rely on a global state, which may be problematic when threads or other forms of\nconcurrency are involved. The global state may be altered and the global seed may be reset at various points in the program (for instance, through an\nimported package or script), which would lead to irreproducible results.</p>\n<p>Instead, the preferred best practice to generate reproducible pseudorandom numbers is to instantiate a <code>numpy.random.Generator</code> object\nwith a seed and reuse it in different parts of the code. This avoids the reliance on a global state. Whenever a new seed is needed, a new generator\nmay be created instead of mutating a global state.</p>\n<p>Below is the list of legacy functions and their alternatives:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <tbody>\n    <tr>\n      <td><p>Legacy function name</p></td>\n      <td><p>numpy.random.Generator alternative</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.seed</p></td>\n      <td><p>numpy.random.default_rng</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.rand</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.randn</p></td>\n      <td><p>numpy.random.Generator.standard_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.randint</p></td>\n      <td><p>numpy.random.Generator.integers</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.random_integers</p></td>\n      <td><p>numpy.random.Generator.integers</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.random_sample</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.choice</p></td>\n      <td><p>numpy.random.Generator.choice</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.bytes</p></td>\n      <td><p>numpy.random.Generator.bytes</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.shuffle</p></td>\n      <td><p>numpy.random.Generator.shuffle</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.permutation</p></td>\n      <td><p>numpy.random.Generator.permutation</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.beta</p></td>\n      <td><p>numpy.random.Generator.beta</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.binomial</p></td>\n      <td><p>numpy.random.Generator.binomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.chisquare</p></td>\n      <td><p>numpy.random.Generator.chisquare</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.dirichlet</p></td>\n      <td><p>numpy.random.Generator.dirichlet</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.exponential</p></td>\n      <td><p>numpy.random.Generator.exponential</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.f</p></td>\n      <td><p>numpy.random.Generator.f</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.gamma</p></td>\n      <td><p>numpy.random.Generator.gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.geometric</p></td>\n      <td><p>numpy.random.Generator.geometric</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.gumbel</p></td>\n      <td><p>numpy.random.Generator.gumbel</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.hypergeometric</p></td>\n      <td><p>numpy.random.Generator.hypergeometric</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.laplace</p></td>\n      <td><p>numpy.random.Generator.laplace</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.logistic</p></td>\n      <td><p>numpy.random.Generator.logistic</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.lognormal</p></td>\n      <td><p>numpy.random.Generator.lognormal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.logseries</p></td>\n      <td><p>numpy.random.Generator.logseries</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.multinomial</p></td>\n      <td><p>numpy.random.Generator.multinomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.multivariate_normal</p></td>\n      <td><p>numpy.random.Generator.multivariate_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.negative_binomial</p></td>\n      <td><p>numpy.random.Generator.negative_binomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.noncentral_chisquare</p></td>\n      <td><p>numpy.random.Generator.noncentral_chisquare</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.noncentral_f</p></td>\n      <td><p>numpy.random.Generator.noncentral_f</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.normal</p></td>\n      <td><p>numpy.random.Generator.normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.pareto</p></td>\n      <td><p>numpy.random.Generator.pareto</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.poisson</p></td>\n      <td><p>numpy.random.Generator.poisson</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.power</p></td>\n      <td><p>numpy.random.Generator.power</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.rayleigh</p></td>\n      <td><p>numpy.random.Generator.rayleigh</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.standard_cauchy</p></td>\n      <td><p>numpy.random.Generator.standard_cauchy</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.standard_exponential</p></td>\n      <td><p>numpy.random.Generator.standard_exponential</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.standard_gamma</p></td>\n      <td><p>numpy.random.Generator.standard_gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.standard_normal</p></td>\n      <td><p>numpy.random.Generator.standard_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.standard_t</p></td>\n      <td><p>numpy.random.Generator.standard_t</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.triangular</p></td>\n      <td><p>numpy.random.Generator.triangular</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.uniform</p></td>\n      <td><p>numpy.random.Generator.uniform</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.vonmises</p></td>\n      <td><p>numpy.random.Generator.vonmises</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.wald</p></td>\n      <td><p>numpy.random.Generator.wald</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.weibull</p></td>\n      <td><p>numpy.random.Generator.weibull</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.RandomState.zipf</p></td>\n      <td><p>numpy.random.Generator.zipf</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.beta</p></td>\n      <td><p>numpy.random.Generator.beta</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.binomial</p></td>\n      <td><p>numpy.random.Generator.binomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.bytes</p></td>\n      <td><p>numpy.random.Generator.bytes</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.chisquare</p></td>\n      <td><p>numpy.random.Generator.chisquare</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.choice</p></td>\n      <td><p>numpy.random.Generator.choice</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.dirichlet</p></td>\n      <td><p>numpy.random.Generator.dirichlet</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.exponential</p></td>\n      <td><p>numpy.random.Generator.exponential</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.f</p></td>\n      <td><p>numpy.random.Generator.f</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.gamma</p></td>\n      <td><p>numpy.random.Generator.gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.geometric</p></td>\n      <td><p>numpy.random.Generator.geometric</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.gumbel</p></td>\n      <td><p>numpy.random.Generator.gumbel</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.hypergeometric</p></td>\n      <td><p>numpy.random.Generator.hypergeometric</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.laplace</p></td>\n      <td><p>numpy.random.Generator.laplace</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.logistic</p></td>\n      <td><p>numpy.random.Generator.logistic</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.lognormal</p></td>\n      <td><p>numpy.random.Generator.lognormal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.logseries</p></td>\n      <td><p>numpy.random.Generator.logseries</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.multinomial</p></td>\n      <td><p>numpy.random.Generator.multinomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.multivariate_normal</p></td>\n      <td><p>numpy.random.Generator.multivariate_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.negative_binomial</p></td>\n      <td><p>numpy.random.Generator.negative_binomial</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.noncentral_chisquare</p></td>\n      <td><p>numpy.random.Generator.noncentral_chisquare</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.noncentral_f</p></td>\n      <td><p>numpy.random.Generator.noncentral_f</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.normal</p></td>\n      <td><p>numpy.random.Generator.normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.pareto</p></td>\n      <td><p>numpy.random.Generator.pareto</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.permutation</p></td>\n      <td><p>numpy.random.Generator.permutation</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.poisson</p></td>\n      <td><p>numpy.random.Generator.poisson</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.power</p></td>\n      <td><p>numpy.random.Generator.power</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.rand</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.randint</p></td>\n      <td><p>numpy.random.Generator.integers</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.randn</p></td>\n      <td><p>numpy.random.Generator.standard_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.random</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.random_integers</p></td>\n      <td><p>numpy.random.Generator.integers</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.random_sample</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.ranf</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.rayleigh</p></td>\n      <td><p>numpy.random.Generator.rayleigh</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.sample</p></td>\n      <td><p>numpy.random.Generator.random</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.seed</p></td>\n      <td><p>numpy.random.default_rng</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.shuffle</p></td>\n      <td><p>numpy.random.Generator.shuffle</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.standard_cauchy</p></td>\n      <td><p>numpy.random.Generator.standard_cauchy</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.standard_exponential</p></td>\n      <td><p>numpy.random.Generator.standard_exponential</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.standard_gamma</p></td>\n      <td><p>numpy.random.Generator.standard_gamma</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.standard_normal</p></td>\n      <td><p>numpy.random.Generator.standard_normal</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.standard_t</p></td>\n      <td><p>numpy.random.Generator.standard_t</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.triangular</p></td>\n      <td><p>numpy.random.Generator.triangular</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.uniform</p></td>\n      <td><p>numpy.random.Generator.uniform</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.vonmises</p></td>\n      <td><p>numpy.random.Generator.vonmises</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.wald</p></td>\n      <td><p>numpy.random.Generator.wald</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.weibull</p></td>\n      <td><p>numpy.random.Generator.weibull</p></td>\n    </tr>\n    <tr>\n      <td><p>numpy.random.zipf</p></td>\n      <td><p>numpy.random.Generator.zipf</p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>How to fix it</h2>\n<p>To fix this issue, replace usages of <code>numpy.random.RandomState</code> to <code>numpy.random.Generator</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\nnp.random.seed(42)\nx = np.random.randn()  # Noncompliant: this relies on numpy.random.RandomState, which is deprecated\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\ngenerator = np.random.default_rng(42)\nx = generator.standard_normal()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/random/generator.html#random-generator\">Random Generator</a> </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/doc/stable/reference/random/legacy.html#legacy-random-generation\">Legacy Random Generation</a>\n  </li>\n  <li> NumPy Documentation - <a href=\"https://numpy.org/neps/nep-0019-rng-policy.html\">NEP19 RNG Policy</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6709",
          "name": "Results that depend on random number generation should be reproducible",
          "description": "<p>This rule raises an issue when random number generators do not specify a seed parameter.</p>\n<h2>Why is this an issue?</h2>\n<p>Data science and machine learning tasks make extensive use of random number generation. It may, for example, be used for:</p>\n<ul>\n  <li> Model initialization\n    <ul>\n      <li> Randomness is used to initialize the parameters of machine learning models. Initializing parameters with random values helps to break\n      symmetry and prevents models from getting stuck in local optima during training. By providing a random starting point, the model can explore\n      different regions of the parameter space and potentially find better solutions. </li>\n    </ul>  </li>\n  <li> Regularization techniques\n    <ul>\n      <li> Randomness is used to introduce noise into the learning process. Techniques like dropout and data augmentation use random numbers to\n      randomly drop or modify features or samples during training. This helps to regularize the model, reduce overfitting, and improve generalization\n      performance. </li>\n    </ul>  </li>\n  <li> Cross-validation and bootstrapping\n    <ul>\n      <li> Randomness is often used in techniques like cross-validation, where data is split into multiple subsets. By using a predictable seed, the\n      same data splits can be generated, allowing for fair and consistent model evaluation. </li>\n    </ul>  </li>\n  <li> Hyperparameter tuning\n    <ul>\n      <li> Many machine learning algorithms have hyperparameters that need to be tuned for optimal performance. Randomness is often used in techniques\n      like random search or Bayesian optimization to explore the hyperparameter space. By using a fixed seed, the same set of hyperparameters can be\n      explored, making the tuning process more controlled and reproducible. </li>\n    </ul>  </li>\n  <li> Simulation and synthetic data generation\n    <ul>\n      <li> Randomness is often used in techniques such as data augmentation and synthetic data generation to generate diverse and realistic datasets.\n      </li>\n    </ul>  </li>\n</ul>\n<p>To ensure that results are reproducible, it is important to use a predictable seed in this context.</p>\n<p>The preferred way to do this in <code>numpy</code> is by instantiating a <code>Generator</code> object, typically through\n<code>numpy.random.default_rng</code>, which should be provided with a seed parameter.</p>\n<p>Note that a global seed for <code>RandomState</code> can be set using <code>numpy.random.seed</code> or <code>numpy.seed</code>, this will set the\nseed for <code>RandomState</code> methods such as <code>numpy.random.randn</code>. This approach is, however, deprecated and <code>Generator</code>\nshould be used instead. This is reported by rule {rule:python:S6711}.</p>\n<h3>Exception</h3>\n<p>In contexts that are not related to data science and machine learning, having a predictable seed may not be the desired behavior. Therefore, this\nrule will only raise issues if machine learning and data science libraries are being used.</p>\n<h2>How to fix it in Numpy</h2>\n<p>To fix this issue, provide a predictable seed to the random number generator.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\n\ndef foo():\n    generator = np.random.default_rng()  # Noncompliant: no seed parameter is provided\n    x = generator.uniform()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\n\ndef foo():\n    generator = np.random.default_rng(42)  # Compliant\n    x = generator.uniform()\n</pre>\n<h2>How to fix it in Scikit-Learn</h2>\n<p>To fix this issue, provide a predictable seed to the estimator or the utility function.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\n\nX, y = load_iris(return_X_y=True)\nX_train, _, y_train, _ = train_test_split(X, y) # Noncompliant: no seed parameter is provided\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\nimport numpy as np\n\nrng = np.random.default_rng(42)\nX, y = load_iris(return_X_y=True)\nX_train, _, y_train, _ = train_test_split(X, y, random_state=rng.integers(1)) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy documentation - <a href=\"https://numpy.org/neps/nep-0019-rng-policy.html\">NEP 19 RNG Policy</a> </li>\n  <li> Scikit-learn documentation - <a href=\"https://scikit-learn.org/stable/glossary.html#term-random_state\">Glossary random_state</a> </li>\n  <li> Scikit-learn documentation - <a href=\"https://scikit-learn.org/stable/common_pitfalls.html#controlling-randomness\">Controlling randomness</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S6711} - <code>numpy.random.Generator</code> should be preferred to <code>numpy.random.RandomState</code> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when random number generators do not specify a seed parameter.</p>\n<h2>Why is this an issue?</h2>\n<p>Data science and machine learning tasks make extensive use of random number generation. It may, for example, be used for:</p>\n<ul>\n  <li> Model initialization\n    <ul>\n      <li> Randomness is used to initialize the parameters of machine learning models. Initializing parameters with random values helps to break\n      symmetry and prevents models from getting stuck in local optima during training. By providing a random starting point, the model can explore\n      different regions of the parameter space and potentially find better solutions. </li>\n    </ul>  </li>\n  <li> Regularization techniques\n    <ul>\n      <li> Randomness is used to introduce noise into the learning process. Techniques like dropout and data augmentation use random numbers to\n      randomly drop or modify features or samples during training. This helps to regularize the model, reduce overfitting, and improve generalization\n      performance. </li>\n    </ul>  </li>\n  <li> Cross-validation and bootstrapping\n    <ul>\n      <li> Randomness is often used in techniques like cross-validation, where data is split into multiple subsets. By using a predictable seed, the\n      same data splits can be generated, allowing for fair and consistent model evaluation. </li>\n    </ul>  </li>\n  <li> Hyperparameter tuning\n    <ul>\n      <li> Many machine learning algorithms have hyperparameters that need to be tuned for optimal performance. Randomness is often used in techniques\n      like random search or Bayesian optimization to explore the hyperparameter space. By using a fixed seed, the same set of hyperparameters can be\n      explored, making the tuning process more controlled and reproducible. </li>\n    </ul>  </li>\n  <li> Simulation and synthetic data generation\n    <ul>\n      <li> Randomness is often used in techniques such as data augmentation and synthetic data generation to generate diverse and realistic datasets.\n      </li>\n    </ul>  </li>\n</ul>\n<p>To ensure that results are reproducible, it is important to use a predictable seed in this context.</p>\n<p>The preferred way to do this in <code>numpy</code> is by instantiating a <code>Generator</code> object, typically through\n<code>numpy.random.default_rng</code>, which should be provided with a seed parameter.</p>\n<p>Note that a global seed for <code>RandomState</code> can be set using <code>numpy.random.seed</code> or <code>numpy.seed</code>, this will set the\nseed for <code>RandomState</code> methods such as <code>numpy.random.randn</code>. This approach is, however, deprecated and <code>Generator</code>\nshould be used instead. This is reported by rule {rule:python:S6711}.</p>\n<h3>Exception</h3>\n<p>In contexts that are not related to data science and machine learning, having a predictable seed may not be the desired behavior. Therefore, this\nrule will only raise issues if machine learning and data science libraries are being used.</p>\n<h2>How to fix it in Numpy</h2>\n<p>To fix this issue, provide a predictable seed to the random number generator.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport numpy as np\n\ndef foo():\n    generator = np.random.default_rng()  # Noncompliant: no seed parameter is provided\n    x = generator.uniform()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport numpy as np\n\ndef foo():\n    generator = np.random.default_rng(42)  # Compliant\n    x = generator.uniform()\n</pre>\n<h2>How to fix it in Scikit-Learn</h2>\n<p>To fix this issue, provide a predictable seed to the estimator or the utility function.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\n\nX, y = load_iris(return_X_y=True)\nX_train, _, y_train, _ = train_test_split(X, y) # Noncompliant: no seed parameter is provided\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\nimport numpy as np\n\nrng = np.random.default_rng(42)\nX, y = load_iris(return_X_y=True)\nX_train, _, y_train, _ = train_test_split(X, y, random_state=rng.integers(1)) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> NumPy documentation - <a href=\"https://numpy.org/neps/nep-0019-rng-policy.html\">NEP 19 RNG Policy</a> </li>\n  <li> Scikit-learn documentation - <a href=\"https://scikit-learn.org/stable/glossary.html#term-random_state\">Glossary random_state</a> </li>\n  <li> Scikit-learn documentation - <a href=\"https://scikit-learn.org/stable/common_pitfalls.html#controlling-randomness\">Controlling randomness</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S6711} - <code>numpy.random.Generator</code> should be preferred to <code>numpy.random.RandomState</code> </li>\n</ul>\n\n"
        },
        {
          "id": "S6559",
          "name": "Fields of a Django ModelFom should be defined explicitly",
          "description": "<p>This rule discourages the use of <code>exclude</code> or <code>__all__</code> with ModelForm in Django and suggests using fields instead.</p>\n<h2>Why is this an issue?</h2>\n<p>In Django, when creating a <code>ModelForm</code>, it is common to use <code>exclude</code> to remove fields from the form. It is also possible to\nset the <code>fields</code> value to <code>__all__</code> to conveniently indicate that all the model fields should be included in the form. However,\nthis can lead to security issues when new fields are added to the model, as they will automatically be included in the form, which may not be\nintended. Additionally, <code>exclude</code> or <code>__all__</code> can make it harder to maintain the codebase by hiding the dependencies between\nthe model and the form.</p>\n<h2>How to fix it</h2>\n<p>Developers should use the \"fields\" attribute instead of \"exclude\" or \"all\" when creating ModelForms in Django. This ensures that all fields are\nexplicitly listed and makes it clear what fields are included in the form.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom django import forms\n\nclass MyForm(forms.ModelForm):\n    class Meta:\n        model = MyModel\n        exclude = ['field1', 'field2']  # Noncompliant\n\n\nclass MyOtherForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = '__all__'  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nfrom django import forms\n\nclass MyForm(forms.ModelForm):\n    class Meta:\n        model = MyModel\n        fields = ['field3', 'field4']\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a href=\"https://docs.djangoproject.com/en/4.1/topics/forms/modelforms/\">Django ModelForm documentation</a> <a\nhref=\"https://docs.djangoproject.com/en/4.1/ref/forms/fields/\">Django form fields documentation</a></p>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule discourages the use of <code>exclude</code> or <code>__all__</code> with ModelForm in Django and suggests using fields instead.</p>\n<h2>Why is this an issue?</h2>\n<p>In Django, when creating a <code>ModelForm</code>, it is common to use <code>exclude</code> to remove fields from the form. It is also possible to\nset the <code>fields</code> value to <code>__all__</code> to conveniently indicate that all the model fields should be included in the form. However,\nthis can lead to security issues when new fields are added to the model, as they will automatically be included in the form, which may not be\nintended. Additionally, <code>exclude</code> or <code>__all__</code> can make it harder to maintain the codebase by hiding the dependencies between\nthe model and the form.</p>\n<h2>How to fix it</h2>\n<p>Developers should use the \"fields\" attribute instead of \"exclude\" or \"all\" when creating ModelForms in Django. This ensures that all fields are\nexplicitly listed and makes it clear what fields are included in the form.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom django import forms\n\nclass MyForm(forms.ModelForm):\n    class Meta:\n        model = MyModel\n        exclude = ['field1', 'field2']  # Noncompliant\n\n\nclass MyOtherForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = '__all__'  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nfrom django import forms\n\nclass MyForm(forms.ModelForm):\n    class Meta:\n        model = MyModel\n        fields = ['field3', 'field4']\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a href=\"https://docs.djangoproject.com/en/4.1/topics/forms/modelforms/\">Django ModelForm documentation</a> <a\nhref=\"https://docs.djangoproject.com/en/4.1/ref/forms/fields/\">Django form fields documentation</a></p>\n\n"
        },
        {
          "id": "S6556",
          "name": "\"locals()\" should not be passed to a Django \"render()\" function",
          "description": "<p>This rule suggests avoiding the use of the built-in Python function \"locals()\" when passing context to a Django \"render()\" function.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the \"locals()\" function to pass context to a Django \"render()\" function can lead to security vulnerabilities and unexpected behavior.\n\"locals()\" returns a dictionary of the current local scope, including any sensitive information that may be present in the function\u00e2\u20ac\u2122s local namespace.\nThis means that if \"locals()\" is used to pass context to \"render()\", sensitive data such as passwords, keys, and other secrets could be leaked.</p>\n<p>Additionally, using \"locals()\" to pass context can make code more difficult to read and understand. It can also make it harder to maintain code\nover time.</p>\n<h2>How to fix it</h2>\n<p>Instead of passing \"locals()\" to the \"render()\" function, explicitly define the context dictionary with only the variables that are required. This\nway, sensitive data is not accidentally included in the context, and the code is easier to read and maintain.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef my_view(request):\n    username = \"alice\"\n    password = \"p@ssw0rd\"\n    context = locals()\n    return render(request, \"my_template.html\", context)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef my_view(request):\n    username = \"alice\"\n    context = {\"username\": username}\n    return render(request, \"my_template.html\", context)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a href=\"https://docs.djangoproject.com/en/4.1/topics/http/shortcuts/#render\">Django render() function</a></p>\n<p><a href=\"https://docs.python.org/3/library/functions.html#locals\">Python locals() function</a></p>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule suggests avoiding the use of the built-in Python function \"locals()\" when passing context to a Django \"render()\" function.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the \"locals()\" function to pass context to a Django \"render()\" function can lead to security vulnerabilities and unexpected behavior.\n\"locals()\" returns a dictionary of the current local scope, including any sensitive information that may be present in the function\u00e2\u20ac\u2122s local namespace.\nThis means that if \"locals()\" is used to pass context to \"render()\", sensitive data such as passwords, keys, and other secrets could be leaked.</p>\n<p>Additionally, using \"locals()\" to pass context can make code more difficult to read and understand. It can also make it harder to maintain code\nover time.</p>\n<h2>How to fix it</h2>\n<p>Instead of passing \"locals()\" to the \"render()\" function, explicitly define the context dictionary with only the variables that are required. This\nway, sensitive data is not accidentally included in the context, and the code is easier to read and maintain.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef my_view(request):\n    username = \"alice\"\n    password = \"p@ssw0rd\"\n    context = locals()\n    return render(request, \"my_template.html\", context)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef my_view(request):\n    username = \"alice\"\n    context = {\"username\": username}\n    return render(request, \"my_template.html\", context)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a href=\"https://docs.djangoproject.com/en/4.1/topics/http/shortcuts/#render\">Django render() function</a></p>\n<p><a href=\"https://docs.python.org/3/library/functions.html#locals\">Python locals() function</a></p>\n\n"
        },
        {
          "id": "S6553",
          "name": "'null=True' should not be used on string-based fields in Django models",
          "description": "<p>This rule suggests avoiding the use of \"null=True\" on string-based fields such as CharField and TextField in Django models. Instead, it recommends\nusing blank=True, which allows an empty string as a valid value while still maintaining the ability to query and filter on the field.</p>\n<h2>Why is this an issue?</h2>\n<p>Using \"null=True\" on string-based fields can lead to inconsistent and unexpected behavior. In Django, \"null=True\" allows the field to have a NULL\nvalue in the database. However, the Django convention to represent the absence of data for a string is an empty string. Having two ways to represent\nthe absence of data can cause problems when querying and filtering on the field. For example, if a CharField with \"null=True\" has a value of NULL in\nthe database, querying for an empty string will not return that object.</p>\n<h2>How to fix it</h2>\n<p>Instead of using \"null=True\", use \"blank=True\" on string-based fields such as CharField and TextField. This allows an empty string as a valid value\nwhile still maintaining the ability to query and filter on the field. If a field should not be left empty, specify a default value using the default\nargument.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass ExampleModel(models.Model):\n    name = models.CharField(max_length=50, null=True)\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass ExampleModel(models.Model):\n    name = models.CharField(max_length=50, blank=True)\n</pre>\n<h2>Exceptions</h2>\n<p>If <code>unique=True</code> and <code>blank=True</code> are both set, <code>null=True</code> is required to avoid unique constraint violations when\nsaving multiple objects with blank values. No issue will be raised in this scenario.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a href=\"https://docs.djangoproject.com/en/4.1/ref/models/fields\">Django model field reference</a></p>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule suggests avoiding the use of \"null=True\" on string-based fields such as CharField and TextField in Django models. Instead, it recommends\nusing blank=True, which allows an empty string as a valid value while still maintaining the ability to query and filter on the field.</p>\n<h2>Why is this an issue?</h2>\n<p>Using \"null=True\" on string-based fields can lead to inconsistent and unexpected behavior. In Django, \"null=True\" allows the field to have a NULL\nvalue in the database. However, the Django convention to represent the absence of data for a string is an empty string. Having two ways to represent\nthe absence of data can cause problems when querying and filtering on the field. For example, if a CharField with \"null=True\" has a value of NULL in\nthe database, querying for an empty string will not return that object.</p>\n<h2>How to fix it</h2>\n<p>Instead of using \"null=True\", use \"blank=True\" on string-based fields such as CharField and TextField. This allows an empty string as a valid value\nwhile still maintaining the ability to query and filter on the field. If a field should not be left empty, specify a default value using the default\nargument.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass ExampleModel(models.Model):\n    name = models.CharField(max_length=50, null=True)\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass ExampleModel(models.Model):\n    name = models.CharField(max_length=50, blank=True)\n</pre>\n<h2>Exceptions</h2>\n<p>If <code>unique=True</code> and <code>blank=True</code> are both set, <code>null=True</code> is required to avoid unique constraint violations when\nsaving multiple objects with blank values. No issue will be raised in this scenario.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a href=\"https://docs.djangoproject.com/en/4.1/ref/models/fields\">Django model field reference</a></p>\n\n"
        },
        {
          "id": "S6546",
          "name": "Union type expressions should be preferred over \"typing.Union\" in type hints",
          "description": "<h2>Why is this an issue?</h2>\n<p>Python 3.10 introduced a specific syntax using the \"or\" operator (<code>X | Y</code>) to represent a union of types. This syntax has the same\nfunctionality as <code>typing.Union</code>, but it is more concise and easier to read.</p>\n<p>Using <code>typing.Union</code> is more verbose and less convenient. It can also create inconsistencies when different parts of the codebase use\ndifferent syntaxes for the same type.</p>\n<h2>How to fix it</h2>\n<p>Replace usages of <code>typing.Union</code> with the union type syntax.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom typing import Union\n\ndef foo(arg: Union[int, str]) -&gt; Union[int, str]:\n    if isinstance(arg, int):\n        return arg + 1\n    else:\n        return arg.upper()\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef foo(arg: int | str) -&gt; int | str:\n    if isinstance(arg, int):\n        return arg + 1\n    else:\n        return arg.upper()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://peps.python.org/pep-0604/\">PEP 604 - Allow writing union types as X | Y</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#types-union\">Python documentation on union type expressions</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Python 3.10 introduced a specific syntax using the \"or\" operator (<code>X | Y</code>) to represent a union of types. This syntax has the same\nfunctionality as <code>typing.Union</code>, but it is more concise and easier to read.</p>\n<p>Using <code>typing.Union</code> is more verbose and less convenient. It can also create inconsistencies when different parts of the codebase use\ndifferent syntaxes for the same type.</p>\n<h2>How to fix it</h2>\n<p>Replace usages of <code>typing.Union</code> with the union type syntax.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom typing import Union\n\ndef foo(arg: Union[int, str]) -&gt; Union[int, str]:\n    if isinstance(arg, int):\n        return arg + 1\n    else:\n        return arg.upper()\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef foo(arg: int | str) -&gt; int | str:\n    if isinstance(arg, int):\n        return arg + 1\n    else:\n        return arg.upper()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://peps.python.org/pep-0604/\">PEP 604 - Allow writing union types as X | Y</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#types-union\">Python documentation on union type expressions</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5890",
          "name": "Values assigned to variables should match their type annotations",
          "description": "<p>This rule raises an issue when an assigned value type is not compatible with the type hint of the assigning variable.</p>\n<h2>Why is this an issue?</h2>\n<p>Type hints in Python allow you to specify the expected types of variables and function return values. While type hints are not enforced at runtime,\nthey serve as documentation and can be checked using static type checkers to catch type-related errors during development.</p>\n<p>When an assigned value type is incompatible with the type hint of the assigning variable, it can lead to several issues:</p>\n<ul>\n  <li> <strong>Type-related bugs:</strong> Assigning a value of an incompatible type to a variable with a specific type hint may lead to unexpected\n  behavior or errors at runtime. </li>\n  <li> <strong>Readability and maintainability:</strong> Type hints improve code readability by explicitly stating the intended types of variables and\n  functions. When the assigned value type doesn\u00e2\u20ac\u2122t match the hint, it can confuse other developers and make the code harder to maintain. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Assign the variable to the value compatible with the type hint or change the type hint to be compatible with the variable\u00e2\u20ac\u2122s type.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef my_function():\n    my_int: int = \"string\"  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef my_function():\n    my_str: str = \"string\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/typing.html\">typing \u00e2\u20ac\u201d Support for type hints</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when an assigned value type is not compatible with the type hint of the assigning variable.</p>\n<h2>Why is this an issue?</h2>\n<p>Type hints in Python allow you to specify the expected types of variables and function return values. While type hints are not enforced at runtime,\nthey serve as documentation and can be checked using static type checkers to catch type-related errors during development.</p>\n<p>When an assigned value type is incompatible with the type hint of the assigning variable, it can lead to several issues:</p>\n<ul>\n  <li> <strong>Type-related bugs:</strong> Assigning a value of an incompatible type to a variable with a specific type hint may lead to unexpected\n  behavior or errors at runtime. </li>\n  <li> <strong>Readability and maintainability:</strong> Type hints improve code readability by explicitly stating the intended types of variables and\n  functions. When the assigned value type doesn\u00e2\u20ac\u2122t match the hint, it can confuse other developers and make the code harder to maintain. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Assign the variable to the value compatible with the type hint or change the type hint to be compatible with the variable\u00e2\u20ac\u2122s type.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef my_function():\n    my_int: int = \"string\"  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef my_function():\n    my_str: str = \"string\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/typing.html\">typing \u00e2\u20ac\u201d Support for type hints</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5886",
          "name": "Function return types should be consistent with their type hint",
          "description": "<p>This rule raises an issue when a function or method returns a value that contradicts its type hint.</p>\n<h2>Why is this an issue?</h2>\n<p>Developers can use type hints to specify which type a function is expected to return. Doing so improves maintainability since it clarifies the\ncontract of the function, making it easier to use and understand.</p>\n<p>When annotating a function with a specific type hint, it is expected that the returned value matches the type specified in the hint.</p>\n<p>If the type hint specifies a class or a named type, then the value returned should be an instance of that class or type. If the type hint specifies\na structural type, then the value returned should have the same structure as the type hint.</p>\n<p>In the following example, while <code>Bucket</code> does not directly inherit from <code>Iterable</code>, it does implement the\n<code>Iterable</code> protocol thanks to its <code>__iter__</code> method and can therefore be used as a valid <code>Iterable</code> return type.</p>\n<pre>\nfrom collections.abc import Iterator, Iterable\n\nclass Bucket:  # Note: no base classes\n    ...\n    def __len__(self) -&gt; int: ...\n    def __iter__(self) -&gt; Iterator[int]: ...\n\n\ndef collect() -&gt; Iterable: return Bucket()\n</pre>\n<p>Since type annotations are not enforced at runtime, returning a completely different type might not fail. It is however likely to be unintended and\nwill lead to maintainability issues, if not bugs.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>To fix this issue, make sure that the returned value of your function is compatible with its type hint.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef hello() -&gt; str:\n    return 42  # Noncompliant: Function's type hint asks for a string return value\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef hello() -&gt; str:\n    return \"Hello\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/typing.html\">Support for type hints</a> </li>\n  <li> PEP 544 - <a href=\"https://peps.python.org/pep-0544/\">Protocols: Structural subtyping (static duck typing)</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a function or method returns a value that contradicts its type hint.</p>\n<h2>Why is this an issue?</h2>\n<p>Developers can use type hints to specify which type a function is expected to return. Doing so improves maintainability since it clarifies the\ncontract of the function, making it easier to use and understand.</p>\n<p>When annotating a function with a specific type hint, it is expected that the returned value matches the type specified in the hint.</p>\n<p>If the type hint specifies a class or a named type, then the value returned should be an instance of that class or type. If the type hint specifies\na structural type, then the value returned should have the same structure as the type hint.</p>\n<p>In the following example, while <code>Bucket</code> does not directly inherit from <code>Iterable</code>, it does implement the\n<code>Iterable</code> protocol thanks to its <code>__iter__</code> method and can therefore be used as a valid <code>Iterable</code> return type.</p>\n<pre>\nfrom collections.abc import Iterator, Iterable\n\nclass Bucket:  # Note: no base classes\n    ...\n    def __len__(self) -&gt; int: ...\n    def __iter__(self) -&gt; Iterator[int]: ...\n\n\ndef collect() -&gt; Iterable: return Bucket()\n</pre>\n<p>Since type annotations are not enforced at runtime, returning a completely different type might not fail. It is however likely to be unintended and\nwill lead to maintainability issues, if not bugs.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>To fix this issue, make sure that the returned value of your function is compatible with its type hint.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef hello() -&gt; str:\n    return 42  # Noncompliant: Function's type hint asks for a string return value\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef hello() -&gt; str:\n    return \"Hello\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/typing.html\">Support for type hints</a> </li>\n  <li> PEP 544 - <a href=\"https://peps.python.org/pep-0544/\">Protocols: Structural subtyping (static duck typing)</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5864",
          "name": "Type checks shouldn't be confusing",
          "description": "<h2>Why is this an issue?</h2>\n<p>Checking that variable X has type T with <a href=\"https://docs.python.org/3/library/typing.html\">type annotations</a> implies that X\u00e2\u20ac\u2122s value is of\ntype T or a subtype of T. After such a check, it is a good practice to limit actions on X to those allowed by type T, even if a subclass of T allows\ndifferent actions. Doing otherwise will confuse your fellow developers.</p>\n<p>Just to be clear, it is common in python to perform an action without checking first if it is possible (see <a\nhref=\"https://docs.python.org/3/glossary.html#term-eafp\">\"Easier to ask for forgiveness than permission.\"</a>). However when type checks are\nperformed, they should not contradict the following actions.</p>\n<p>This rule raises an issue when an action performed on a variable might be possible, but it contradicts a previous type check. The list of checked\nactions corresponds to rules {rule:python:S2159}, {rule:python:S3403}, {rule:python:S5607}, {rule:python:S5756}, {rule:python:S5644},\n{rule:python:S3862}, {rule:python:S5797}, {rule:python:S5795} and {rule:python:S5632}. These other rules only detect cases where the type of a\nvariable is certain, i.e. it cannot be a subclass.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef add_the_answer(param: str):\n    return param + 42  # Noncompliant. Fix this \"+\" operation; Type annotation on \"param\" suggest that operands have incompatible types.\n    # Note: In practice it is possible to create a class inheriting from both \"str\" and \"int\", but this would be a very confusing design.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef add_the_answer(param: str):\n    return param + \"42\"\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#isinstance\">Python documentation - <code>isinstance</code> function</a> </li>\n  <li> <a href=\"https://docs.python.org/3/glossary.html#term-eafp\">Python glossary - \"Easier to ask for forgiveness than permission.\"</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Checking that variable X has type T with <a href=\"https://docs.python.org/3/library/typing.html\">type annotations</a> implies that X\u00e2\u20ac\u2122s value is of\ntype T or a subtype of T. After such a check, it is a good practice to limit actions on X to those allowed by type T, even if a subclass of T allows\ndifferent actions. Doing otherwise will confuse your fellow developers.</p>\n<p>Just to be clear, it is common in python to perform an action without checking first if it is possible (see <a\nhref=\"https://docs.python.org/3/glossary.html#term-eafp\">\"Easier to ask for forgiveness than permission.\"</a>). However when type checks are\nperformed, they should not contradict the following actions.</p>\n<p>This rule raises an issue when an action performed on a variable might be possible, but it contradicts a previous type check. The list of checked\nactions corresponds to rules {rule:python:S2159}, {rule:python:S3403}, {rule:python:S5607}, {rule:python:S5756}, {rule:python:S5644},\n{rule:python:S3862}, {rule:python:S5797}, {rule:python:S5795} and {rule:python:S5632}. These other rules only detect cases where the type of a\nvariable is certain, i.e. it cannot be a subclass.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef add_the_answer(param: str):\n    return param + 42  # Noncompliant. Fix this \"+\" operation; Type annotation on \"param\" suggest that operands have incompatible types.\n    # Note: In practice it is possible to create a class inheriting from both \"str\" and \"int\", but this would be a very confusing design.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef add_the_answer(param: str):\n    return param + \"42\"\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#isinstance\">Python documentation - <code>isinstance</code> function</a> </li>\n  <li> <a href=\"https://docs.python.org/3/glossary.html#term-eafp\">Python glossary - \"Easier to ask for forgiveness than permission.\"</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5806",
          "name": "Builtins should not be shadowed by local variables",
          "description": "<p>This rule raises an issue when the name of a local variable matches the name of a builtin.</p>\n<h2>Why is this an issue?</h2>\n<p>Defining a variable with the same name as a built-in symbol will \"shadow\" it. That means that the builtin will no longer be accessible through its\noriginal name, having locally been replaced by the variable.</p>\n<p>Shadowing a builtin makes the code more difficult to read and maintain. It may also be a source of bugs as you can reference the builtin by\nmistake.</p>\n<p>It is sometimes acceptable to shadow a builtin to improve the readability of a public API or to support multiple versions of a library. In these\ncases, benefits are greater than the maintainability cost. This should, however, be done with care.</p>\n<p>It is generally not a good practice to shadow builtins with variables which are local to a function or method. These variables are not public and\ncan easily be renamed, thus reducing the confusion and making the code less error-prone.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef a_function():\n    int = 42  # Noncompliant; int is a builtin\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef a_function():\n    value = 42\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3.8/library/stdtypes.html\">Built-in Types</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/functions.html\">Built-in Functions</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the name of a local variable matches the name of a builtin.</p>\n<h2>Why is this an issue?</h2>\n<p>Defining a variable with the same name as a built-in symbol will \"shadow\" it. That means that the builtin will no longer be accessible through its\noriginal name, having locally been replaced by the variable.</p>\n<p>Shadowing a builtin makes the code more difficult to read and maintain. It may also be a source of bugs as you can reference the builtin by\nmistake.</p>\n<p>It is sometimes acceptable to shadow a builtin to improve the readability of a public API or to support multiple versions of a library. In these\ncases, benefits are greater than the maintainability cost. This should, however, be done with care.</p>\n<p>It is generally not a good practice to shadow builtins with variables which are local to a function or method. These variables are not public and\ncan easily be renamed, thus reducing the confusion and making the code less error-prone.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef a_function():\n    int = 42  # Noncompliant; int is a builtin\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef a_function():\n    value = 42\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3.8/library/stdtypes.html\">Built-in Types</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/functions.html\">Built-in Functions</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5795",
          "name": "Identity comparisons should not be used with cached types",
          "description": "<p>This rule raises an issue when the identity operator is used with cached literals.</p>\n<h2>Why is this an issue?</h2>\n<p>The identity operators <code>is</code> and <code>is not</code> check if the same object is on both sides, i.e. <code>a is b</code> returns\n<code>True</code> if <code>id(a) == id(b)</code>.</p>\n<p>The CPython interpreter caches certain built-in values for integers, bytes, floats, strings, frozensets and tuples. When a value is cached, all its\nreferences are pointing to the same object in memory; their ids are identical.</p>\n<p>The following example illustrates this caching mechanism:</p>\n<pre>\nmy_int = 1\nother_int = 1\n\nid(my_int) == id(other_int) # True\n</pre>\n<p>In both assignments (to <code>my_int</code> and <code>other_int</code>), the assigned value <code>1</code> comes from the interpreter cache, only\none integer object <code>1</code> is created in memory. This means both variables are referencing the same object. For this reason, their ids are\nidentical and <code>my_int is other_int</code> evaluates to <code>True</code>. This mechanism allows the interpreter for better performance, saving\nmemory space, by not creating new objects every time for commonly accessed values.</p>\n<p>However this caching mechanism does not apply to every value:</p>\n<pre>\nmy_int = 1000\n\nid(my_int) == id(1000) # False\nmy_int is 1000 # False\n</pre>\n<p>In this example the integer <code>1000</code> is not cached. Each reference to <code>1000</code> creates an new integer object in memory with a new\nid. This means that <code>my_int is 1000</code> is always <code>False</code>, as the two objects have different ids.</p>\n<p>This is the reason why using the identity operators on integers, bytes, floats, strings, frozensets and tuples is unreliable as the behavior\nchanges depending on the value.</p>\n<p>Moreover the caching behavior is not part of the Python language specification and could vary between interpreters. CPython 3.8 <a\nhref=\"https://docs.python.org/3.8/whatsnew/3.8.html#changes-in-python-behavior\">warns about comparing literals using identity operators</a>.</p>\n<p>This rule raises an issue when at least one operand of an identity operator:</p>\n<ul>\n  <li> is of type <code>int</code>, <code>bytes</code>, <code>float</code>, <code>frozenset</code> or <code>tuple</code>. </li>\n  <li> is a string literal. </li>\n</ul>\n<p>If you need to compare these types you should use the equality operators instead <code>==</code> or <code>!=</code>.</p>\n<h3>Exceptions</h3>\n<p>The only case where the <code>is</code> operator could be used with a cached type is with \"interned\" strings. The Python interpreter provides a way\nto explicitly cache any string literals and benefit from improved performances, such as:</p>\n<ul>\n  <li> saved memory space. </li>\n  <li> faster string comparison: as only their memory address need to be compared. </li>\n  <li> faster dictionary lookup: if the dictionary keys are interned, the lookup can be done by comparing memory address as well. </li>\n</ul>\n<p>This explicit caching is done through interned strings (i.e. <code>sys.intern(\"some string\")</code>).</p>\n<pre>\nfrom sys import intern\n\nmy_text = \"text\"\nintern(\"text\") is intern(my_text) # True\n</pre>\n<p>Note however that interned strings don\u00e2\u20ac\u2122t necessarily have the same identity as string literals.</p>\n<p>It is also important to note that interned strings may be garbage collected, so in order to benefit from their caching mechanism, a reference to\nthe interned string should be kept.</p>\n<h2>How to fix it</h2>\n<p>Use the equality operators (<code>==</code> or <code>!=</code>) to compare <code>int</code>, <code>bytes</code>, <code>float</code>,\n<code>frozenset</code>, <code>tuple</code> and string literals.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nmy_int = 2000\nmy_int is 2000 # Noncompliant: the integer 2000 may not be cached, the identity operator could return False.\n\n() is tuple() # Noncompliant: this will return True only because the CPython interpreter cached the empty tuple.\n(1,) is tuple([1])  # Noncompliant: comparing non empty tuples will return False as none of these objects are cached.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nmy_int = 2000\nmy_int == 2000\n\n() == tuple()\n(1,) == tuple([1])\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.8/whatsnew/3.8.html#changes-in-python-behavior\">Changes in Python behaviour</a>.\n  </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/sys.html?highlight=sys.intern#sys.intern\">sys.intern</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Adam Johnson\u00e2\u20ac\u2122s Blog - <a href=\"https://adamj.eu/tech/2020/01/21/why-does-python-3-8-syntaxwarning-for-is-literal/\">Why does Python 3.8 log a\n  SyntaxWarning for 'is' with literals?</a> </li>\n  <li> Trey Hunner\u00e2\u20ac\u2122s Blog - <a href=\"https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/#Equality_vs_identity\">Equality vs\n  identity</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the identity operator is used with cached literals.</p>\n<h2>Why is this an issue?</h2>\n<p>The identity operators <code>is</code> and <code>is not</code> check if the same object is on both sides, i.e. <code>a is b</code> returns\n<code>True</code> if <code>id(a) == id(b)</code>.</p>\n<p>The CPython interpreter caches certain built-in values for integers, bytes, floats, strings, frozensets and tuples. When a value is cached, all its\nreferences are pointing to the same object in memory; their ids are identical.</p>\n<p>The following example illustrates this caching mechanism:</p>\n<pre>\nmy_int = 1\nother_int = 1\n\nid(my_int) == id(other_int) # True\n</pre>\n<p>In both assignments (to <code>my_int</code> and <code>other_int</code>), the assigned value <code>1</code> comes from the interpreter cache, only\none integer object <code>1</code> is created in memory. This means both variables are referencing the same object. For this reason, their ids are\nidentical and <code>my_int is other_int</code> evaluates to <code>True</code>. This mechanism allows the interpreter for better performance, saving\nmemory space, by not creating new objects every time for commonly accessed values.</p>\n<p>However this caching mechanism does not apply to every value:</p>\n<pre>\nmy_int = 1000\n\nid(my_int) == id(1000) # False\nmy_int is 1000 # False\n</pre>\n<p>In this example the integer <code>1000</code> is not cached. Each reference to <code>1000</code> creates an new integer object in memory with a new\nid. This means that <code>my_int is 1000</code> is always <code>False</code>, as the two objects have different ids.</p>\n<p>This is the reason why using the identity operators on integers, bytes, floats, strings, frozensets and tuples is unreliable as the behavior\nchanges depending on the value.</p>\n<p>Moreover the caching behavior is not part of the Python language specification and could vary between interpreters. CPython 3.8 <a\nhref=\"https://docs.python.org/3.8/whatsnew/3.8.html#changes-in-python-behavior\">warns about comparing literals using identity operators</a>.</p>\n<p>This rule raises an issue when at least one operand of an identity operator:</p>\n<ul>\n  <li> is of type <code>int</code>, <code>bytes</code>, <code>float</code>, <code>frozenset</code> or <code>tuple</code>. </li>\n  <li> is a string literal. </li>\n</ul>\n<p>If you need to compare these types you should use the equality operators instead <code>==</code> or <code>!=</code>.</p>\n<h3>Exceptions</h3>\n<p>The only case where the <code>is</code> operator could be used with a cached type is with \"interned\" strings. The Python interpreter provides a way\nto explicitly cache any string literals and benefit from improved performances, such as:</p>\n<ul>\n  <li> saved memory space. </li>\n  <li> faster string comparison: as only their memory address need to be compared. </li>\n  <li> faster dictionary lookup: if the dictionary keys are interned, the lookup can be done by comparing memory address as well. </li>\n</ul>\n<p>This explicit caching is done through interned strings (i.e. <code>sys.intern(\"some string\")</code>).</p>\n<pre>\nfrom sys import intern\n\nmy_text = \"text\"\nintern(\"text\") is intern(my_text) # True\n</pre>\n<p>Note however that interned strings don\u00e2\u20ac\u2122t necessarily have the same identity as string literals.</p>\n<p>It is also important to note that interned strings may be garbage collected, so in order to benefit from their caching mechanism, a reference to\nthe interned string should be kept.</p>\n<h2>How to fix it</h2>\n<p>Use the equality operators (<code>==</code> or <code>!=</code>) to compare <code>int</code>, <code>bytes</code>, <code>float</code>,\n<code>frozenset</code>, <code>tuple</code> and string literals.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nmy_int = 2000\nmy_int is 2000 # Noncompliant: the integer 2000 may not be cached, the identity operator could return False.\n\n() is tuple() # Noncompliant: this will return True only because the CPython interpreter cached the empty tuple.\n(1,) is tuple([1])  # Noncompliant: comparing non empty tuples will return False as none of these objects are cached.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nmy_int = 2000\nmy_int == 2000\n\n() == tuple()\n(1,) == tuple([1])\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3.8/whatsnew/3.8.html#changes-in-python-behavior\">Changes in Python behaviour</a>.\n  </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/sys.html?highlight=sys.intern#sys.intern\">sys.intern</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Adam Johnson\u00e2\u20ac\u2122s Blog - <a href=\"https://adamj.eu/tech/2020/01/21/why-does-python-3-8-syntaxwarning-for-is-literal/\">Why does Python 3.8 log a\n  SyntaxWarning for 'is' with literals?</a> </li>\n  <li> Trey Hunner\u00e2\u20ac\u2122s Blog - <a href=\"https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/#Equality_vs_identity\">Equality vs\n  identity</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5781",
          "name": "Expressions creating sets should not have duplicate values",
          "description": "<p>This rule raises an issue when the same value is used multiple times when instantiating a set literal.</p>\n<h2>Why is this an issue?</h2>\n<p>By definition, a set cannot hold the same value multiple times. When instantiating a set literal with the same value repeated multiple times, only\nthe last occurrence of the duplicated value will remain.</p>\n<p>Creating a set with redundant elements is prone to errors and confusion. A duplicated value in a set literal should be either:</p>\n<ul>\n  <li> modified, as it was mistakenly put in the set instead an actual value which would lead to bugs and errors further in the program. </li>\n  <li> removed, as it was a simple duplication, making the code confusing and difficult to maintain. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n{\"one\", \"two\", \"one\"}  # Noncompliant: the value \"one\" is duplicated.\n\ndef func(a1, a2, a3):\n    {a1, a2, a1}  # Noncompliant: the value a1 is duplicated.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n{\"one\", \"two\", \"three\"}\n\ndef func(a1, a2, a3):\n    {a1, a2, a3}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/expressions.html#set-displays\">Set displays</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the same value is used multiple times when instantiating a set literal.</p>\n<h2>Why is this an issue?</h2>\n<p>By definition, a set cannot hold the same value multiple times. When instantiating a set literal with the same value repeated multiple times, only\nthe last occurrence of the duplicated value will remain.</p>\n<p>Creating a set with redundant elements is prone to errors and confusion. A duplicated value in a set literal should be either:</p>\n<ul>\n  <li> modified, as it was mistakenly put in the set instead an actual value which would lead to bugs and errors further in the program. </li>\n  <li> removed, as it was a simple duplication, making the code confusing and difficult to maintain. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n{\"one\", \"two\", \"one\"}  # Noncompliant: the value \"one\" is duplicated.\n\ndef func(a1, a2, a3):\n    {a1, a2, a1}  # Noncompliant: the value a1 is duplicated.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n{\"one\", \"two\", \"three\"}\n\ndef func(a1, a2, a3):\n    {a1, a2, a3}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/expressions.html#set-displays\">Set displays</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5780",
          "name": "Expressions creating dictionaries should not have duplicate keys",
          "description": "<p>This rule raises an issue when the same key is used multiple times when instantiating a dictionary literal.</p>\n<h2>Why is this an issue?</h2>\n<p>By definition, a dictionary cannot hold the same key multiple times. When instantiating a dictionary literal, if a key is repeated, only the last\noccurrence of the key will be retained.</p>\n<p>This can lead to errors and confusion, as it is not clear which value belongs to which key. This can be remedied by either:</p>\n<ul>\n  <li> replacing the duplicated key with the correct key to prevent bugs and errors from occurring later in the program. </li>\n  <li> removing the duplicated key to make the code more concise and easier to maintain. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n{\"one\": 1, \"two\": 2, \"one\": 3}  # Noncompliant: the key \"one\" is duplicated.\n\ndef func(a1, a2):\n    {a1: 1, a2: 2, a1: 3}  # Noncompliant: the key a1 is duplicated.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n{\"one\": 1, \"two\": 2, \"three\": 3}\n\ndef func(a1, a2):\n    {a1: 1, a2: 2}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/expressions.html#dictionary-displays\">Dictionary displays</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the same key is used multiple times when instantiating a dictionary literal.</p>\n<h2>Why is this an issue?</h2>\n<p>By definition, a dictionary cannot hold the same key multiple times. When instantiating a dictionary literal, if a key is repeated, only the last\noccurrence of the key will be retained.</p>\n<p>This can lead to errors and confusion, as it is not clear which value belongs to which key. This can be remedied by either:</p>\n<ul>\n  <li> replacing the duplicated key with the correct key to prevent bugs and errors from occurring later in the program. </li>\n  <li> removing the duplicated key to make the code more concise and easier to maintain. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n{\"one\": 1, \"two\": 2, \"one\": 3}  # Noncompliant: the key \"one\" is duplicated.\n\ndef func(a1, a2):\n    {a1: 1, a2: 2, a1: 3}  # Noncompliant: the key a1 is duplicated.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n{\"one\": 1, \"two\": 2, \"three\": 3}\n\ndef func(a1, a2):\n    {a1: 1, a2: 2}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/expressions.html#dictionary-displays\">Dictionary displays</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5706",
          "name": "Special method \"__exit__\" should not re-raise the provided exception",
          "description": "<p>This rule raises an issue when:</p>\n<ul>\n  <li> an <code>__exit__</code> method has a bare <code>raise</code> outside of an <code>except</code> block. </li>\n  <li> an <code>__exit__</code> method raises the exception provided as parameter. </li>\n</ul>\n<h2>Why is this an issue?</h2>\n<p>Methods <code>__enter__</code> and <code>__exit__</code> make it possible to implement objects which can be used as the expression of a\n<code>with</code> statement:</p>\n<pre>\nwith MyContextManager() as c :\n    ... # do something with c\n</pre>\n<p>This statement can be rewritten as a <code>try...finally</code> and an explicit call to the <code>__enter__</code> and <code>__exit__</code>\nmethods:</p>\n<pre>\nc = MyContextManager()\nc.__enter__()\ntry:\n    ... # do something with c\nfinally:\n    c.__exit__()\n</pre>\n<p>The <code>__exit__</code> is the method of a statement context manager which is called when exiting the runtime context related to this object.</p>\n<p>If an exception is supplied as an argument, its propagation can be suppressed by having the method return a truthy value. Otherwise, the exception\nwill be processed normally upon exit from the method.</p>\n<p>The special method <a\nhref=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special#object.__exit__\"><code>__exit__</code></a> should only raise an\nexception when it fails. It should never raise the provided exception, it is the caller\u00e2\u20ac\u2122s responsibility. The <code>__exit__</code> method can filter\nprovided exceptions by simply returning True or False. Raising this exception will make the stack trace difficult to understand.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to avoid raising the exception provided to an <code>__exit__</code> method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyContextManager:\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        raise  # Noncompliant: __exit__ method has a bare raise outside of an except block.\n\nclass MyContextManager:\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        raise args[2]  # Noncompliant: __exit__() methods should not reraise the provided exception; this is the caller\u00e2\u20ac\u2122s responsibility.\n\nclass MyContextManager:\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        raise exc_value # Noncompliant: __exit__() methods should not reraise the provided exception; this is the caller\u00e2\u20ac\u2122s responsibility.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyContextManager:\n    def __enter__(self, stop_exceptions):\n        return self\n\n    def __exit__(self, *args):\n        try:\n            ...\n        except:\n            raise  # No issue when raising another exception. The __exit__ method can fail and raise an exception\n\nclass MyContextManager:\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        pass # by default the function will return None, which is always False, and the exc_value will naturally raise.\n\nclass MyContextManager:\n    def __enter__(self, stop_exceptions):\n        return self\n\n    def __exit__(self, *args):\n        raise MemoryError(\"No more memory\")  # This is ok too.\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation \u00e2\u20ac\u201c <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special#object.__exit__\">The\n  <code>__exit__</code> special method</a> </li>\n  <li> PEP 343 \u00e2\u20ac\u201c <a href=\"https://www.python.org/dev/peps/pep-0343/\">The \"with\" Statement</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when:</p>\n<ul>\n  <li> an <code>__exit__</code> method has a bare <code>raise</code> outside of an <code>except</code> block. </li>\n  <li> an <code>__exit__</code> method raises the exception provided as parameter. </li>\n</ul>\n<h2>Why is this an issue?</h2>\n<p>Methods <code>__enter__</code> and <code>__exit__</code> make it possible to implement objects which can be used as the expression of a\n<code>with</code> statement:</p>\n<pre>\nwith MyContextManager() as c :\n    ... # do something with c\n</pre>\n<p>This statement can be rewritten as a <code>try...finally</code> and an explicit call to the <code>__enter__</code> and <code>__exit__</code>\nmethods:</p>\n<pre>\nc = MyContextManager()\nc.__enter__()\ntry:\n    ... # do something with c\nfinally:\n    c.__exit__()\n</pre>\n<p>The <code>__exit__</code> is the method of a statement context manager which is called when exiting the runtime context related to this object.</p>\n<p>If an exception is supplied as an argument, its propagation can be suppressed by having the method return a truthy value. Otherwise, the exception\nwill be processed normally upon exit from the method.</p>\n<p>The special method <a\nhref=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special#object.__exit__\"><code>__exit__</code></a> should only raise an\nexception when it fails. It should never raise the provided exception, it is the caller\u00e2\u20ac\u2122s responsibility. The <code>__exit__</code> method can filter\nprovided exceptions by simply returning True or False. Raising this exception will make the stack trace difficult to understand.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to avoid raising the exception provided to an <code>__exit__</code> method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyContextManager:\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        raise  # Noncompliant: __exit__ method has a bare raise outside of an except block.\n\nclass MyContextManager:\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        raise args[2]  # Noncompliant: __exit__() methods should not reraise the provided exception; this is the caller\u00e2\u20ac\u2122s responsibility.\n\nclass MyContextManager:\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        raise exc_value # Noncompliant: __exit__() methods should not reraise the provided exception; this is the caller\u00e2\u20ac\u2122s responsibility.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyContextManager:\n    def __enter__(self, stop_exceptions):\n        return self\n\n    def __exit__(self, *args):\n        try:\n            ...\n        except:\n            raise  # No issue when raising another exception. The __exit__ method can fail and raise an exception\n\nclass MyContextManager:\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        pass # by default the function will return None, which is always False, and the exc_value will naturally raise.\n\nclass MyContextManager:\n    def __enter__(self, stop_exceptions):\n        return self\n\n    def __exit__(self, *args):\n        raise MemoryError(\"No more memory\")  # This is ok too.\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation \u00e2\u20ac\u201c <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special#object.__exit__\">The\n  <code>__exit__</code> special method</a> </li>\n  <li> PEP 343 \u00e2\u20ac\u201c <a href=\"https://www.python.org/dev/peps/pep-0343/\">The \"with\" Statement</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S3985",
          "name": "Unused private nested classes should be removed",
          "description": "<p>This rule raises an issue when a private nested class is never used.</p>\n<h2>Why is this an issue?</h2>\n<p>\"Private\" nested classes that are never used inside the enclosing class are usually dead code: unnecessary, inoperative code that should be\nremoved. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from\nbeing introduced.</p>\n<p>Python has no real private classes. Every class is accessible. There are however two conventions indicating that a class is not meant to be\n\"public\":</p>\n<ul>\n  <li> classes with a name starting with a single underscore (ex: <code>_MyClass</code>) should be seen as non-public and might change without prior\n  notice. They should not be used by third-party libraries or software. It is ok to use those classes inside the library defining them but it should\n  be done with caution. </li>\n  <li> \"class-private\" classes are defined inside another class, and have a name starting with at least two underscores and ending with at most one\n  underscore. These classes' names will be automatically mangled to avoid collision with subclasses' nested classes. For example\n  <code>__MyClass</code> will be renamed as <code>_classname__MyClass</code>, where <code>classname</code> is the enclosing class\u00e2\u20ac\u2122s name without its\n  leading underscore(s). Class-Private classes shouldn\u00e2\u20ac\u2122t be used outside of their enclosing class. </li>\n</ul>\n<p>This rule raises an issue when a private nested class (either with one or two leading underscores) is never used inside its parent class.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass TopLevel:\n    class __Nested():  # Noncompliant: __Nested is never used\n        pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass TopLevel:\n    class __Nested():\n        pass\n\n    def process(self):\n        return TopLevel.__Nested()\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/tutorial/classes.html#private-variables\">Python documentation \u00e2\u20ac\u201c Private Variables</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance\">PEP 8 \u00e2\u20ac\u201c Style Guide for Python Code</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a private nested class is never used.</p>\n<h2>Why is this an issue?</h2>\n<p>\"Private\" nested classes that are never used inside the enclosing class are usually dead code: unnecessary, inoperative code that should be\nremoved. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from\nbeing introduced.</p>\n<p>Python has no real private classes. Every class is accessible. There are however two conventions indicating that a class is not meant to be\n\"public\":</p>\n<ul>\n  <li> classes with a name starting with a single underscore (ex: <code>_MyClass</code>) should be seen as non-public and might change without prior\n  notice. They should not be used by third-party libraries or software. It is ok to use those classes inside the library defining them but it should\n  be done with caution. </li>\n  <li> \"class-private\" classes are defined inside another class, and have a name starting with at least two underscores and ending with at most one\n  underscore. These classes' names will be automatically mangled to avoid collision with subclasses' nested classes. For example\n  <code>__MyClass</code> will be renamed as <code>_classname__MyClass</code>, where <code>classname</code> is the enclosing class\u00e2\u20ac\u2122s name without its\n  leading underscore(s). Class-Private classes shouldn\u00e2\u20ac\u2122t be used outside of their enclosing class. </li>\n</ul>\n<p>This rule raises an issue when a private nested class (either with one or two leading underscores) is never used inside its parent class.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass TopLevel:\n    class __Nested():  # Noncompliant: __Nested is never used\n        pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass TopLevel:\n    class __Nested():\n        pass\n\n    def process(self):\n        return TopLevel.__Nested()\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/tutorial/classes.html#private-variables\">Python documentation \u00e2\u20ac\u201c Private Variables</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance\">PEP 8 \u00e2\u20ac\u201c Style Guide for Python Code</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2836",
          "name": "Loops without \"break\" should not have \"else\" clauses",
          "description": "<p>This rule raises an issue when a loop with an <code>else</code> clause doesn\u00e2\u20ac\u2122t contain any <code>break</code> statement in its body.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>else</code> clause of a loop is skipped when a <code>break</code> is executed in this loop. In other words, a loop with an\n<code>else</code> but no <code>break</code> statement will always execute the <code>else</code> part (unless of course an exception is raised or\n<code>return</code> is used). If this is what the developer intended, it would be much simpler to have the <code>else</code> statement removed and its\nbody unindented. Thus having a loop with an <code>else</code> and no <code>break</code> is most likely an error.</p>\n<h2>How to fix it</h2>\n<p>Add a <code>break</code> statement to the loop body containing an <code>else</code> clause or remove the <code>else</code> clause.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom typing import List\n\ndef foo(elements: List[str]):\n    for elt in elements:\n        if elt.isnumeric():\n            return elt\n    else:  # Noncompliant: no break in the loop\n        raise ValueError(\"List does not contain any number\")\n\ndef bar(elements: List[str]):\n    for elt in elements:\n        if elt.isnumeric():\n            return elt\n    else:  # Noncompliant: no break in the loop\n        raise ValueError(\"List does not contain any number\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom typing import List\n\ndef foo(elements: List[str]):\n    for elt in elements:\n        if elt.isnumeric():\n            break\n    else:\n        raise ValueError(\"List does not contain any number\")\n    return elt\n\ndef bar(elements: List[str]):\n    for elt in elements:\n        if elt.isnumeric():\n            return elt\n    raise ValueError(\"List does not contain any number\")\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a\n  href=\"https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops\">Break and continue Statements,\n  and else Clauses on Loops</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a loop with an <code>else</code> clause doesn\u00e2\u20ac\u2122t contain any <code>break</code> statement in its body.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>else</code> clause of a loop is skipped when a <code>break</code> is executed in this loop. In other words, a loop with an\n<code>else</code> but no <code>break</code> statement will always execute the <code>else</code> part (unless of course an exception is raised or\n<code>return</code> is used). If this is what the developer intended, it would be much simpler to have the <code>else</code> statement removed and its\nbody unindented. Thus having a loop with an <code>else</code> and no <code>break</code> is most likely an error.</p>\n<h2>How to fix it</h2>\n<p>Add a <code>break</code> statement to the loop body containing an <code>else</code> clause or remove the <code>else</code> clause.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom typing import List\n\ndef foo(elements: List[str]):\n    for elt in elements:\n        if elt.isnumeric():\n            return elt\n    else:  # Noncompliant: no break in the loop\n        raise ValueError(\"List does not contain any number\")\n\ndef bar(elements: List[str]):\n    for elt in elements:\n        if elt.isnumeric():\n            return elt\n    else:  # Noncompliant: no break in the loop\n        raise ValueError(\"List does not contain any number\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom typing import List\n\ndef foo(elements: List[str]):\n    for elt in elements:\n        if elt.isnumeric():\n            break\n    else:\n        raise ValueError(\"List does not contain any number\")\n    return elt\n\ndef bar(elements: List[str]):\n    for elt in elements:\n        if elt.isnumeric():\n            return elt\n    raise ValueError(\"List does not contain any number\")\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python documentation - <a\n  href=\"https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops\">Break and continue Statements,\n  and else Clauses on Loops</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2318",
          "name": "\"<>\" should not be used to test inequality",
          "description": "<p>This rule raises an issue when the inequality operator <code>&lt;&gt;</code> is used.</p>\n<h2>Why is this an issue?</h2>\n<p>The operators <code>&lt;&gt;</code> and <code>!=</code> are equivalent. However, the <code>&lt;&gt;</code> operator is considered obsolete in\nPython 2.7 and has been removed from Python 3. Therefore, it is recommended to use <code>!=</code> instead.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nreturn a &lt;&gt; b # Noncompliant: the operator \"&lt;&gt;\" is deprecated.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nreturn a != b\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation: <a href=\"https://docs.python.org/2.7/reference/lexical_analysis.html#operators\">Python 2.7 - Operators</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when the inequality operator <code>&lt;&gt;</code> is used.</p>\n<h2>Why is this an issue?</h2>\n<p>The operators <code>&lt;&gt;</code> and <code>!=</code> are equivalent. However, the <code>&lt;&gt;</code> operator is considered obsolete in\nPython 2.7 and has been removed from Python 3. Therefore, it is recommended to use <code>!=</code> instead.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nreturn a &lt;&gt; b # Noncompliant: the operator \"&lt;&gt;\" is deprecated.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nreturn a != b\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation: <a href=\"https://docs.python.org/2.7/reference/lexical_analysis.html#operators\">Python 2.7 - Operators</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1607",
          "name": "A reason should be provided when skipping a test",
          "description": "<h2>Why is this an issue?</h2>\n<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each skipped test with \"<code>unittest.skip</code>\" or \"<code>pytest.mark.skip</code>\" without providing a reason\nargument.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n    @unittest.skip  # Noncompliant\n    def test_something(self): ...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n    @unittest.skip(\"need to fix something\")\n    def test_something(self): ...\n</pre>\n<h2>Resources</h2>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures\">Unittest documentation - skipping tests and expected\nfailures</a></p>\n<p><a href=\"https://docs.pytest.org/en/latest/how-to/skipping.html#skipping-test-functions\">Pytest documentation - skipping test functions</a></p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each skipped test with \"<code>unittest.skip</code>\" or \"<code>pytest.mark.skip</code>\" without providing a reason\nargument.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n    @unittest.skip  # Noncompliant\n    def test_something(self): ...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n    @unittest.skip(\"need to fix something\")\n    def test_something(self): ...\n</pre>\n<h2>Resources</h2>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures\">Unittest documentation - skipping tests and expected\nfailures</a></p>\n<p><a href=\"https://docs.pytest.org/en/latest/how-to/skipping.html#skipping-test-functions\">Pytest documentation - skipping test functions</a></p>\n\n"
        },
        {
          "id": "S1542",
          "name": "Function names should comply with a naming convention",
          "description": "<p>This rule raises an issue when a function name doesn\u00e2\u20ac\u2122t respect the naming convention.</p>\n<h2>Why is this an issue?</h2>\n<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n<p>According to PEP8, function names should be lowercase, with words separated by underscores as necessary to improve readability. This convention is\nknown as \"snake_case.\" For example: <code>calculate_area</code>, <code>print_hello</code>, <code>process_data</code></p>\n<p>To fix this, respect the naming convention for the function. The default naming convention is snake case, as recommended by PEP8. Other naming\nconventions can be defined through the <code>format</code> rule parameter.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>With the default provided regular expression: <code>^[a-z_][a-z0-9_]*$</code></p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef MyFunction(a,b):\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef my_function(a,b):\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP8 - <a href=\"https://peps.python.org/pep-0008/#function-and-variable-names\">Function and Variable Names</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a function name doesn\u00e2\u20ac\u2122t respect the naming convention.</p>\n<h2>Why is this an issue?</h2>\n<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n<p>According to PEP8, function names should be lowercase, with words separated by underscores as necessary to improve readability. This convention is\nknown as \"snake_case.\" For example: <code>calculate_area</code>, <code>print_hello</code>, <code>process_data</code></p>\n<p>To fix this, respect the naming convention for the function. The default naming convention is snake case, as recommended by PEP8. Other naming\nconventions can be defined through the <code>format</code> rule parameter.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>With the default provided regular expression: <code>^[a-z_][a-z0-9_]*$</code></p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef MyFunction(a,b):\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef my_function(a,b):\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PEP8 - <a href=\"https://peps.python.org/pep-0008/#function-and-variable-names\">Function and Variable Names</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1515",
          "name": "Functions and lambdas should not reference variables defined in enclosing loops",
          "description": "<h2>Why is this an issue?</h2>\n<p>Nested functions and lambdas can reference variables defined in enclosing scopes. This can create tricky bugs when the variable and the function\nare defined in a loop. If the function is called in another iteration or after the loop finishes, it will see the variables' last value instead of\nseeing the values corresponding to the iteration where the function was defined.</p>\n<p>Capturing loop variables might work for some time but:</p>\n<ul>\n  <li> it makes the code difficult to understand. </li>\n  <li> it increases the risk of introducing a bug when the code is refactored or when dependencies are updated. See an example with the builtin \"map\"\n  below. </li>\n</ul>\n<p>One solution is to add a parameter to the function/lambda and use the previously captured variable as its default value. Default values are only\nexecuted once, when the function is defined, which means that the parameter\u00e2\u20ac\u2122s value will remain the same even when the variable is reassigned in\nfollowing iterations.</p>\n<p>Another solution is to pass the variable as an argument to the function/lambda when it is called.</p>\n<p>This rule raises an issue when a function or lambda references a variable defined in an enclosing loop.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef run():\n    mylist = []\n    for i in range(5):\n        mylist.append(lambda: i)  # Noncompliant\n\n        def func():\n            return i  # Noncompliant\n        mylist.append(func)\n\ndef example_of_api_change():\n    \"\"\"\"\n    Passing loop variable as default values also makes sure that the code is future-proof.\n    For example the following code will work as intended with python 2 but not python 3.\n    Why? because \"map\" behavior changed. It now returns an iterator and only executes\n    the lambda when required. The same is true for other functions such as \"filter\".\n    \"\"\"\n    lst = []\n    for i in range(5):\n        lst.append(map(lambda x: x + i, range(3)))  # Noncompliant\n    for sublist in lst:\n        # prints [4, 5, 6] x 4 with python 3, with python 2 it prints [0, 1, 2], [1, 2, 3], ...\n        print(list(sublist))\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef run():\n    mylist = []\n    for i in range(5):\n        mylist.append(lambda i=i: i)  # passing the variable as a parameter with a default value\n\n        def func(i=i):  # same for nested functions\n            return i\n        mylist.append(func)\n\ndef example_of_api_change():\n    \"\"\"\"\n    This will work for both python 2 and python 3.\n    \"\"\"\n    lst = []\n    for i in range(5):\n        lst.append(map(lambda x, value=i: x + value, range(3)))  # Passing \"i\" as a default value\n    for sublist in lst:\n        print(list(sublist))\n</pre>\n<h3>Exceptions</h3>\n<p>No issue will be raised if the function or lambda is directly called in the same loop. This still makes the design difficult to understand but it\nis less error prone.</p>\n<pre>\ndef function_called_in_loop():\n    for i in range(10):\n        print((lambda param: param * i)(42)) # Calling the lambda directly\n\n        def func(param):\n            return param * i\n\n        print(func(42))  # Calling \"func\" directly\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments\">The Hitchhiker\u00e2\u20ac\u2122s Guide to Python - Common Gotchas</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#function-definitions\">Function definitions</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Nested functions and lambdas can reference variables defined in enclosing scopes. This can create tricky bugs when the variable and the function\nare defined in a loop. If the function is called in another iteration or after the loop finishes, it will see the variables' last value instead of\nseeing the values corresponding to the iteration where the function was defined.</p>\n<p>Capturing loop variables might work for some time but:</p>\n<ul>\n  <li> it makes the code difficult to understand. </li>\n  <li> it increases the risk of introducing a bug when the code is refactored or when dependencies are updated. See an example with the builtin \"map\"\n  below. </li>\n</ul>\n<p>One solution is to add a parameter to the function/lambda and use the previously captured variable as its default value. Default values are only\nexecuted once, when the function is defined, which means that the parameter\u00e2\u20ac\u2122s value will remain the same even when the variable is reassigned in\nfollowing iterations.</p>\n<p>Another solution is to pass the variable as an argument to the function/lambda when it is called.</p>\n<p>This rule raises an issue when a function or lambda references a variable defined in an enclosing loop.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef run():\n    mylist = []\n    for i in range(5):\n        mylist.append(lambda: i)  # Noncompliant\n\n        def func():\n            return i  # Noncompliant\n        mylist.append(func)\n\ndef example_of_api_change():\n    \"\"\"\"\n    Passing loop variable as default values also makes sure that the code is future-proof.\n    For example the following code will work as intended with python 2 but not python 3.\n    Why? because \"map\" behavior changed. It now returns an iterator and only executes\n    the lambda when required. The same is true for other functions such as \"filter\".\n    \"\"\"\n    lst = []\n    for i in range(5):\n        lst.append(map(lambda x: x + i, range(3)))  # Noncompliant\n    for sublist in lst:\n        # prints [4, 5, 6] x 4 with python 3, with python 2 it prints [0, 1, 2], [1, 2, 3], ...\n        print(list(sublist))\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef run():\n    mylist = []\n    for i in range(5):\n        mylist.append(lambda i=i: i)  # passing the variable as a parameter with a default value\n\n        def func(i=i):  # same for nested functions\n            return i\n        mylist.append(func)\n\ndef example_of_api_change():\n    \"\"\"\"\n    This will work for both python 2 and python 3.\n    \"\"\"\n    lst = []\n    for i in range(5):\n        lst.append(map(lambda x, value=i: x + value, range(3)))  # Passing \"i\" as a default value\n    for sublist in lst:\n        print(list(sublist))\n</pre>\n<h3>Exceptions</h3>\n<p>No issue will be raised if the function or lambda is directly called in the same loop. This still makes the design difficult to understand but it\nis less error prone.</p>\n<pre>\ndef function_called_in_loop():\n    for i in range(10):\n        print((lambda param: param * i)(42)) # Calling the lambda directly\n\n        def func(param):\n            return param * i\n\n        print(func(42))  # Calling \"func\" directly\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments\">The Hitchhiker\u00e2\u20ac\u2122s Guide to Python - Common Gotchas</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#function-definitions\">Function definitions</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S125",
          "name": "Sections of code should not be commented out",
          "description": "<h2>Why is this an issue?</h2>\n<p>Commented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.</p>\n<p>Commented-out code should be deleted and can be retrieved from source control history if required.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Commented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.</p>\n<p>Commented-out code should be deleted and can be retrieved from source control history if required.</p>\n\n"
        },
        {
          "id": "S1172",
          "name": "Unused function parameters should be removed",
          "description": "<h2>Why is this an issue?</h2>\n<p>A typical code smell known as unused function parameters refers to parameters declared in a function but not used anywhere within the function\u00e2\u20ac\u2122s\nbody. While this might seem harmless at first glance, it can lead to confusion and potential errors in your code. Disregarding the values passed to\nsuch parameters, the function\u00e2\u20ac\u2122s behavior will be the same, but the programmer\u00e2\u20ac\u2122s intention won\u00e2\u20ac\u2122t be clearly expressed anymore. Therefore, removing\nfunction parameters that are not being utilized is considered best practice.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores overriding methods.</p>\n<pre>\nclass C(B):\n  def do_something(self, a, b): # no issue reported on b\n    return self.compute(a)\n</pre>\n<p>This rule also ignores variables named with a single underscore <code>_</code>. Such naming is a common practice for indicating that the variable\nis insignificant.</p>\n<pre>\ndef do_something(a, _): # no issue reported on _\n  return compute(a)\n</pre>\n<p>The rule also won\u00e2\u20ac\u2122t raise an issue if the parameter is referenced in a docstring or a comment:</p>\n<pre>\nclass MyClass:\n    def do_something(self, my_param): # no issue reported\n      # Overrides may use my_param to ...\n      return compute(a)\n</pre>\n<pre>\nclass MyClass:\n    def do_something(self, my_param): # no issue reported\n      \"\"\"Overrides may use my_param to ...\"\"\"\n      return compute(a)\n</pre>\n<h2>How to fix it</h2>\n<p>Having unused function parameters in your code can lead to confusion and misunderstanding of a developer\u00e2\u20ac\u2122s intention. They reduce code readability\nand introduce the potential for errors. To avoid these problems, developers should remove unused parameters from function declarations.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef do_something(a, b): # \"b\" is unused\n  return compute(a)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef do_something(a):\n  return compute(a)\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>A typical code smell known as unused function parameters refers to parameters declared in a function but not used anywhere within the function\u00e2\u20ac\u2122s\nbody. While this might seem harmless at first glance, it can lead to confusion and potential errors in your code. Disregarding the values passed to\nsuch parameters, the function\u00e2\u20ac\u2122s behavior will be the same, but the programmer\u00e2\u20ac\u2122s intention won\u00e2\u20ac\u2122t be clearly expressed anymore. Therefore, removing\nfunction parameters that are not being utilized is considered best practice.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores overriding methods.</p>\n<pre>\nclass C(B):\n  def do_something(self, a, b): # no issue reported on b\n    return self.compute(a)\n</pre>\n<p>This rule also ignores variables named with a single underscore <code>_</code>. Such naming is a common practice for indicating that the variable\nis insignificant.</p>\n<pre>\ndef do_something(a, _): # no issue reported on _\n  return compute(a)\n</pre>\n<p>The rule also won\u00e2\u20ac\u2122t raise an issue if the parameter is referenced in a docstring or a comment:</p>\n<pre>\nclass MyClass:\n    def do_something(self, my_param): # no issue reported\n      # Overrides may use my_param to ...\n      return compute(a)\n</pre>\n<pre>\nclass MyClass:\n    def do_something(self, my_param): # no issue reported\n      \"\"\"Overrides may use my_param to ...\"\"\"\n      return compute(a)\n</pre>\n<h2>How to fix it</h2>\n<p>Having unused function parameters in your code can lead to confusion and misunderstanding of a developer\u00e2\u20ac\u2122s intention. They reduce code readability\nand introduce the potential for errors. To avoid these problems, developers should remove unused parameters from function declarations.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef do_something(a, b): # \"b\" is unused\n  return compute(a)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef do_something(a):\n  return compute(a)\n</pre>\n\n"
        },
        {
          "id": "S1144",
          "name": "Unused class-private methods should be removed",
          "description": "<p>This rule raises an issue when a \"class-private\" method is never called inside the class where it was declared.</p>\n<h2>Why is this an issue?</h2>\n<p>A method that is never called is dead code, and should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it\neasier to understand the program and preventing bugs from being introduced.</p>\n<p>Python has no real private methods. Every method is accessible. There are however two conventions indicating that a method is not meant to be\n\"public\":</p>\n<ul>\n  <li> methods with a name starting with a single underscore (ex: <code>_mymethod</code>) should be seen as non-public and might change without prior\n  notice. They should not be used by third-party libraries or software. It is ok to use those methods inside the library defining them but it should\n  be done with caution. </li>\n  <li> \"class-private\" methods have a name which starts with at least two underscores and ends with at most one underscore. These methods' names will\n  be automatically mangled to avoid collision with subclasses' methods. For example <code>__mymethod</code> will be renamed as\n  <code>_classname__mymethod</code>, where <code>classname</code> is the method\u00e2\u20ac\u2122s class name without its leading underscore(s). These methods\n  shouldn\u00e2\u20ac\u2122t be used outside of their enclosing class. </li>\n</ul>\n<p>This rule raises an issue when a class-private method (two leading underscores, max one underscore at the end) is never called inside the class.\nClass methods, static methods and instance methods will all raise an issue.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass Noncompliant:\n\n    @classmethod\n    def __mangled_class_method(cls):  # Noncompliant\n        print(\"__mangled_class_method\")\n\n    @staticmethod\n    def __mangled_static_method():  # Noncompliant\n        print(\"__mangled_static_method\")\n\n    def __mangled_instance_method(self):  # Noncompliant\n        print(\"__mangled_instance_method\")\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass Compliant:\n\n    def __init__(self):\n        Compliant.__mangled_class_method()\n        Compliant.__mangled_static_method()\n        self.__mangled_instance_method()\n\n    @classmethod\n    def __mangled_class_method(cls):\n        print(\"__mangled_class_method\")\n\n    @staticmethod\n    def __mangled_static_method():\n        print(\"__mangled_static_method\")\n\n    def __mangled_instance_method(self):\n        print(\"__mangled_instance_method\")\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/tutorial/classes.html#private-variables\">Python documentation \u00e2\u20ac\u201c Private Variables</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance\">PEP8 \u00e2\u20ac\u201c Designing for Inheritance</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a \"class-private\" method is never called inside the class where it was declared.</p>\n<h2>Why is this an issue?</h2>\n<p>A method that is never called is dead code, and should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it\neasier to understand the program and preventing bugs from being introduced.</p>\n<p>Python has no real private methods. Every method is accessible. There are however two conventions indicating that a method is not meant to be\n\"public\":</p>\n<ul>\n  <li> methods with a name starting with a single underscore (ex: <code>_mymethod</code>) should be seen as non-public and might change without prior\n  notice. They should not be used by third-party libraries or software. It is ok to use those methods inside the library defining them but it should\n  be done with caution. </li>\n  <li> \"class-private\" methods have a name which starts with at least two underscores and ends with at most one underscore. These methods' names will\n  be automatically mangled to avoid collision with subclasses' methods. For example <code>__mymethod</code> will be renamed as\n  <code>_classname__mymethod</code>, where <code>classname</code> is the method\u00e2\u20ac\u2122s class name without its leading underscore(s). These methods\n  shouldn\u00e2\u20ac\u2122t be used outside of their enclosing class. </li>\n</ul>\n<p>This rule raises an issue when a class-private method (two leading underscores, max one underscore at the end) is never called inside the class.\nClass methods, static methods and instance methods will all raise an issue.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass Noncompliant:\n\n    @classmethod\n    def __mangled_class_method(cls):  # Noncompliant\n        print(\"__mangled_class_method\")\n\n    @staticmethod\n    def __mangled_static_method():  # Noncompliant\n        print(\"__mangled_static_method\")\n\n    def __mangled_instance_method(self):  # Noncompliant\n        print(\"__mangled_instance_method\")\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass Compliant:\n\n    def __init__(self):\n        Compliant.__mangled_class_method()\n        Compliant.__mangled_static_method()\n        self.__mangled_instance_method()\n\n    @classmethod\n    def __mangled_class_method(cls):\n        print(\"__mangled_class_method\")\n\n    @staticmethod\n    def __mangled_static_method():\n        print(\"__mangled_static_method\")\n\n    def __mangled_instance_method(self):\n        print(\"__mangled_instance_method\")\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/tutorial/classes.html#private-variables\">Python documentation \u00e2\u20ac\u201c Private Variables</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance\">PEP8 \u00e2\u20ac\u201c Designing for Inheritance</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1134",
          "name": "Track uses of \"FIXME\" tags",
          "description": "<h2>Why is this an issue?</h2>\n<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<pre>\ndef divide(numerator, denominator):\n  return numerator / denominator              # FIXME denominator value might be 0\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/546\">CWE-546 - Suspicious Comment</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<pre>\ndef divide(numerator, denominator):\n  return numerator / denominator              # FIXME denominator value might be 0\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/546\">CWE-546 - Suspicious Comment</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S112",
          "name": "\"Exception\" and \"BaseException\" should not be raised",
          "description": "<p>This rule raises an issue when a generic exception (such as <code>Exception</code> or <code>BaseException</code>) is raised.</p>\n<h2>Why is this an issue?</h2>\n<p>Raising instances of <a href=\"https://docs.python.org/3/library/exceptions.html#Exception\"><code>Exception</code></a> and <a\nhref=\"https://docs.python.org/3/library/exceptions.html#BaseException\"><code>BaseException</code></a> will have a negative impact on any code trying\nto catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally not be\ncaught and let to propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers\nto catch exceptions they do not intend to handle, which they then have to re-raise.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, if an exception such as <code>SystemExit</code> is caught and not re-raised, it will prevent the program from stopping.</p>\n<p>When raising an exception, it is therefore recommended to raising the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific <a href=\"https://docs.python.org/3/library/exceptions.html\">Built-in exception</a> when one matches. For example\n  <code>TypeError</code> should be raised when the type of a parameter is not the one expected. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef check_value(value):\n    if value &lt; 0:\n        raise BaseException(\"Value cannot be negative\") # Noncompliant: this will be difficult for consumers to handle\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef check_value(value):\n    if value &lt; 0:\n        raise ValueError(\"Value cannot be negative\") # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html#BaseException\">Built-in exceptions</a> </li>\n  <li> PEP 352 - <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">Required Superclass for Exceptions</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when a generic exception (such as <code>Exception</code> or <code>BaseException</code>) is raised.</p>\n<h2>Why is this an issue?</h2>\n<p>Raising instances of <a href=\"https://docs.python.org/3/library/exceptions.html#Exception\"><code>Exception</code></a> and <a\nhref=\"https://docs.python.org/3/library/exceptions.html#BaseException\"><code>BaseException</code></a> will have a negative impact on any code trying\nto catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally not be\ncaught and let to propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers\nto catch exceptions they do not intend to handle, which they then have to re-raise.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, if an exception such as <code>SystemExit</code> is caught and not re-raised, it will prevent the program from stopping.</p>\n<p>When raising an exception, it is therefore recommended to raising the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific <a href=\"https://docs.python.org/3/library/exceptions.html\">Built-in exception</a> when one matches. For example\n  <code>TypeError</code> should be raised when the type of a parameter is not the one expected. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef check_value(value):\n    if value &lt; 0:\n        raise BaseException(\"Value cannot be negative\") # Noncompliant: this will be difficult for consumers to handle\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef check_value(value):\n    if value &lt; 0:\n        raise ValueError(\"Value cannot be negative\") # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html#BaseException\">Built-in exceptions</a> </li>\n  <li> PEP 352 - <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">Required Superclass for Exceptions</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S108",
          "name": "Nested blocks of code should not be left empty",
          "description": "<h2>Why is this an issue?</h2>\n<p>An empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.</p>\n<pre>\n# Noncompliant: is the block empty on purpose, or is code missing?\nfor i in range(3):\n    pass\n</pre>\n<p>Removing or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores code blocks that contain comments.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>An empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.</p>\n<pre>\n# Noncompliant: is the block empty on purpose, or is code missing?\nfor i in range(3):\n    pass\n</pre>\n<p>Removing or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores code blocks that contain comments.</p>\n\n"
        },
        {
          "id": "S6321",
          "name": "Administration services access should be restricted to specific IP addresses",
          "description": "<h2>Why is this an issue?</h2>\n<p>Cloud platforms such as AWS, Azure, or GCP support virtual firewalls that can be used to restrict access to services by controlling inbound and\noutbound traffic.<br> Any firewall rule allowing traffic from all IP addresses to standard network ports on which administration services\ntraditionally listen, such as 22 for SSH, can expose these services to exploits and unauthorized access.</p>\n<h3>What is the potential impact?</h3>\n<p>Like any other service, administration services can contain vulnerabilities. Administration services run with elevated privileges and thus a\nvulnerability could have a high impact on the system.</p>\n<p>Additionally, credentials might be leaked through phishing or similar techniques. Attackers who are able to reach the services could use the\ncredentials to log in to the system.</p>\n<h2>How to fix it</h2>\n<p>It is recommended to restrict access to remote administration services to only trusted IP addresses. In practice, trusted IP addresses are those\nheld by system administrators or those of <a href=\"https://aws.amazon.com/quickstart/architecture/linux-bastion/?nc1=h_ls\">bastion-like</a>\nservers.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a> and other constructs that\nsupport a <code>connections</code> attribute:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\ninstance = ec2.Instance(\n    self,\n    \"my_instance\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc\n)\n\ninstance.connections.allow_from(\n    ec2.Peer.any_ipv4(), # Noncompliant\n    ec2.Port.tcp(22),\n    description=\"Allows SSH from all IPv4\"\n)\ninstance.connections.allow_from_any_ipv4( # Noncompliant\n    ec2.Port.tcp(3389),\n    description=\"Allows Terminal Server from all IPv4\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a></p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom aws_cdk import aws_ec2 as ec2\nsecurity_group = ec2.SecurityGroup(\n    self,\n    \"custom-security-group\",\n    vpc=vpc\n)\n\nsecurity_group.add_ingress_rule(\n    ec2.Peer.any_ipv4(), # Noncompliant\n    ec2.Port.tcp_range(1, 1024)\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroup.html\">aws_cdk.aws_ec2.CfnSecurityGroup</a></p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroup(\n    self,\n    \"cfn-based-security-group\",\n    group_description=\"cfn based security group\",\n    group_name=\"cfn-based-security-group\",\n    vpc_id=vpc.vpc_id,\n    security_group_ingress=[\n        ec2.CfnSecurityGroup.IngressProperty( # Noncompliant\n            ip_protocol=\"6\",\n            cidr_ip=\"0.0.0.0/0\",\n            from_port=22,\n            to_port=22\n        ),\n        ec2.CfnSecurityGroup.IngressProperty( # Noncompliant\n            ip_protocol=\"tcp\",\n            cidr_ip=\"0.0.0.0/0\",\n            from_port=3389,\n            to_port=3389\n        ),\n        { # Noncompliant\n            \"ipProtocol\":\"-1\",\n            \"cidrIpv6\":\"::/0\"\n        }\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroupIngress.html\">aws_cdk.aws_ec2.CfnSecurityGroupIngress</a></p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroupIngress( # Noncompliant\n    self,\n    \"ingress-all-ip-tcp-ssh\",\n    ip_protocol=\"tcp\",\n    cidr_ip=\"0.0.0.0/0\",\n    from_port=22,\n    to_port=22,\n    group_id=security_group.attr_group_id\n)\n\nec2.CfnSecurityGroupIngress( # Noncompliant\n    self,\n    \"ingress-all-ipv6-all-tcp\",\n    ip_protocol=\"-1\",\n    cidr_ipv6=\"::/0\",\n    group_id=security_group.attr_group_id\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a> and other constructs that\nsupport a <code>connections</code> attribute:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\ninstance = ec2.Instance(\n    self,\n    \"my_instance\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc\n)\n\ninstance.connections.allow_from_any_ipv4(\n    ec2.Port.tcp(1234),\n    description=\"Allows 1234 from all IPv4\"\n)\n\ninstance.connections.allow_from(\n    ec2.Peer.ipv4(\"192.0.2.0/24\"),\n    ec2.Port.tcp(22),\n    description=\"Allows SSH from all IPv4\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a></p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom aws_cdk import aws_ec2 as ec2\nsecurity_group = ec2.SecurityGroup(\n    self,\n    \"custom-security-group\",\n    vpc=vpc\n)\n\nsecurity_group.add_ingress_rule(\n    ec2.Peer.any_ipv4(),\n    ec2.Port.tcp_range(1024, 1048)\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroup.html\">aws_cdk.aws_ec2.CfnSecurityGroup</a></p>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroup(\n    self,\n    \"cfn-based-security-group\",\n    group_description=\"cfn based security group\",\n    group_name=\"cfn-based-security-group\",\n    vpc_id=vpc.vpc_id,\n    security_group_ingress=[\n        ec2.CfnSecurityGroup.IngressProperty(\n            ip_protocol=\"tcp\",\n            cidr_ip=\"0.0.0.0/0\",\n            from_port=1024,\n            to_port=1048\n        ),\n        {\n            \"ipProtocol\":\"6\",\n            \"cidrIp\":\"192.0.2.0/24\",\n            \"fromPort\":22,\n            \"toPort\":22\n        }\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroupIngress.html\">aws_cdk.aws_ec2.CfnSecurityGroupIngress</a></p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroupIngress(\n    self,\n    \"ingress-all-ipv4-tcp-http\",\n    ip_protocol=\"6\",\n    cidr_ip=\"0.0.0.0/0\",\n    from_port=80,\n    to_port=80,\n    group_id=security_group.attr_group_id\n)\n\nec2.CfnSecurityGroupIngress(\n    self,\n    \"ingress-range-tcp-rdp\",\n    ip_protocol=\"tcp\",\n    cidr_ip=\"192.0.2.0/24\",\n    from_port=3389,\n    to_port=3389,\n    group_id=security_group.attr_group_id\n)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\">AWS Documentation</a> - Security groups for your VPC </li>\n  <li> <a href=\"https://docs.microsoft.com/en-us/azure/virtual-network/network-security-groups-overview\">Azure Documentation</a> - Network security\n  groups </li>\n  <li> <a href=\"https://cloud.google.com/vpc/docs/using-firewalls\">GCP Documentation</a> - Firewalls </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Cloud platforms such as AWS, Azure, or GCP support virtual firewalls that can be used to restrict access to services by controlling inbound and\noutbound traffic.<br> Any firewall rule allowing traffic from all IP addresses to standard network ports on which administration services\ntraditionally listen, such as 22 for SSH, can expose these services to exploits and unauthorized access.</p>\n<h3>What is the potential impact?</h3>\n<p>Like any other service, administration services can contain vulnerabilities. Administration services run with elevated privileges and thus a\nvulnerability could have a high impact on the system.</p>\n<p>Additionally, credentials might be leaked through phishing or similar techniques. Attackers who are able to reach the services could use the\ncredentials to log in to the system.</p>\n<h2>How to fix it</h2>\n<p>It is recommended to restrict access to remote administration services to only trusted IP addresses. In practice, trusted IP addresses are those\nheld by system administrators or those of <a href=\"https://aws.amazon.com/quickstart/architecture/linux-bastion/?nc1=h_ls\">bastion-like</a>\nservers.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a> and other constructs that\nsupport a <code>connections</code> attribute:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\ninstance = ec2.Instance(\n    self,\n    \"my_instance\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc\n)\n\ninstance.connections.allow_from(\n    ec2.Peer.any_ipv4(), # Noncompliant\n    ec2.Port.tcp(22),\n    description=\"Allows SSH from all IPv4\"\n)\ninstance.connections.allow_from_any_ipv4( # Noncompliant\n    ec2.Port.tcp(3389),\n    description=\"Allows Terminal Server from all IPv4\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a></p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom aws_cdk import aws_ec2 as ec2\nsecurity_group = ec2.SecurityGroup(\n    self,\n    \"custom-security-group\",\n    vpc=vpc\n)\n\nsecurity_group.add_ingress_rule(\n    ec2.Peer.any_ipv4(), # Noncompliant\n    ec2.Port.tcp_range(1, 1024)\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroup.html\">aws_cdk.aws_ec2.CfnSecurityGroup</a></p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroup(\n    self,\n    \"cfn-based-security-group\",\n    group_description=\"cfn based security group\",\n    group_name=\"cfn-based-security-group\",\n    vpc_id=vpc.vpc_id,\n    security_group_ingress=[\n        ec2.CfnSecurityGroup.IngressProperty( # Noncompliant\n            ip_protocol=\"6\",\n            cidr_ip=\"0.0.0.0/0\",\n            from_port=22,\n            to_port=22\n        ),\n        ec2.CfnSecurityGroup.IngressProperty( # Noncompliant\n            ip_protocol=\"tcp\",\n            cidr_ip=\"0.0.0.0/0\",\n            from_port=3389,\n            to_port=3389\n        ),\n        { # Noncompliant\n            \"ipProtocol\":\"-1\",\n            \"cidrIpv6\":\"::/0\"\n        }\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroupIngress.html\">aws_cdk.aws_ec2.CfnSecurityGroupIngress</a></p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroupIngress( # Noncompliant\n    self,\n    \"ingress-all-ip-tcp-ssh\",\n    ip_protocol=\"tcp\",\n    cidr_ip=\"0.0.0.0/0\",\n    from_port=22,\n    to_port=22,\n    group_id=security_group.attr_group_id\n)\n\nec2.CfnSecurityGroupIngress( # Noncompliant\n    self,\n    \"ingress-all-ipv6-all-tcp\",\n    ip_protocol=\"-1\",\n    cidr_ipv6=\"::/0\",\n    group_id=security_group.attr_group_id\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a> and other constructs that\nsupport a <code>connections</code> attribute:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\ninstance = ec2.Instance(\n    self,\n    \"my_instance\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc\n)\n\ninstance.connections.allow_from_any_ipv4(\n    ec2.Port.tcp(1234),\n    description=\"Allows 1234 from all IPv4\"\n)\n\ninstance.connections.allow_from(\n    ec2.Peer.ipv4(\"192.0.2.0/24\"),\n    ec2.Port.tcp(22),\n    description=\"Allows SSH from all IPv4\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a></p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom aws_cdk import aws_ec2 as ec2\nsecurity_group = ec2.SecurityGroup(\n    self,\n    \"custom-security-group\",\n    vpc=vpc\n)\n\nsecurity_group.add_ingress_rule(\n    ec2.Peer.any_ipv4(),\n    ec2.Port.tcp_range(1024, 1048)\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroup.html\">aws_cdk.aws_ec2.CfnSecurityGroup</a></p>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroup(\n    self,\n    \"cfn-based-security-group\",\n    group_description=\"cfn based security group\",\n    group_name=\"cfn-based-security-group\",\n    vpc_id=vpc.vpc_id,\n    security_group_ingress=[\n        ec2.CfnSecurityGroup.IngressProperty(\n            ip_protocol=\"tcp\",\n            cidr_ip=\"0.0.0.0/0\",\n            from_port=1024,\n            to_port=1048\n        ),\n        {\n            \"ipProtocol\":\"6\",\n            \"cidrIp\":\"192.0.2.0/24\",\n            \"fromPort\":22,\n            \"toPort\":22\n        }\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroupIngress.html\">aws_cdk.aws_ec2.CfnSecurityGroupIngress</a></p>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroupIngress(\n    self,\n    \"ingress-all-ipv4-tcp-http\",\n    ip_protocol=\"6\",\n    cidr_ip=\"0.0.0.0/0\",\n    from_port=80,\n    to_port=80,\n    group_id=security_group.attr_group_id\n)\n\nec2.CfnSecurityGroupIngress(\n    self,\n    \"ingress-range-tcp-rdp\",\n    ip_protocol=\"tcp\",\n    cidr_ip=\"192.0.2.0/24\",\n    from_port=3389,\n    to_port=3389,\n    group_id=security_group.attr_group_id\n)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\">AWS Documentation</a> - Security groups for your VPC </li>\n  <li> <a href=\"https://docs.microsoft.com/en-us/azure/virtual-network/network-security-groups-overview\">Azure Documentation</a> - Network security\n  groups </li>\n  <li> <a href=\"https://cloud.google.com/vpc/docs/using-firewalls\">GCP Documentation</a> - Firewalls </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/284\">CWE-284 - Improper Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6252",
          "name": "Disabling versioning of S3 buckets is security-sensitive",
          "description": "<p>S3 buckets can be versioned. When the S3 bucket is unversioned it means that a new version of an object overwrites an existing one in the S3\nbucket.</p>\n<p>It can lead to unintentional or intentional information loss.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The bucket stores information that require high availability. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to enable S3 versioning and thus to have the possibility to retrieve and restore different versions of an object.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    versioned=False       # Sensitive\n)\n</pre>\n<p>The default value of <code>versioned</code> is <code>False</code> so the absence of this parameter is also sensitive.</p>\n<h2>Compliant Solution</h2>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    versioned=True\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/Versioning.html\">AWS documentation</a> - Using versioning in S3 buckets </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.Bucket.html#versioned\">AWS CDK version 2</a> - Using versioning in S3\n  buckets </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>S3 buckets can be versioned. When the S3 bucket is unversioned it means that a new version of an object overwrites an existing one in the S3\nbucket.</p>\n<p>It can lead to unintentional or intentional information loss.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The bucket stores information that require high availability. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to enable S3 versioning and thus to have the possibility to retrieve and restore different versions of an object.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    versioned=False       # Sensitive\n)\n</pre>\n<p>The default value of <code>versioned</code> is <code>False</code> so the absence of this parameter is also sensitive.</p>\n<h2>Compliant Solution</h2>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    versioned=True\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/Versioning.html\">AWS documentation</a> - Using versioning in S3 buckets </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.Bucket.html#versioned\">AWS CDK version 2</a> - Using versioning in S3\n  buckets </li>\n</ul>\n\n"
        },
        {
          "id": "S1313",
          "name": "Using hardcoded IP addresses is security-sensitive",
          "description": "<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901\">CVE-2006-5901</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725\">CVE-2005-3725</a> </li>\n</ul>\n<p>Today\u00e2\u20ac\u2122s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:</p>\n<ul>\n  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>\n  <li> It misleads to use the same address in every environment (dev, sys, qa, prod). </li>\n</ul>\n<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack\u00e2\u20ac\u2122s impact.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The disclosed IP address is sensitive, e.g.:</p>\n<ul>\n  <li> Can give information to an attacker about the network topology. </li>\n  <li> It\u00e2\u20ac\u2122s a personal (assigned to an identifiable person) IP address. </li>\n</ul>\n<p>There is a risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Don\u00e2\u20ac\u2122t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nip = '192.168.12.42'\nsock = socket.socket()\nsock.bind((ip, 9090))\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nip = config.get(section, ipAddress)\nsock = socket.socket()\nsock.bind((ip, 9090))\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>\n  <li> Broadcast address 255.255.255.255 </li>\n  <li> Non-routable address 0.0.0.0 </li>\n  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID) </li>\n  <li> Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by <a\n  href=\"https://datatracker.ietf.org/doc/html/rfc5737\">RFC 5737</a> </li>\n  <li> Addresses in the range 2001:db8::/32, reserved for documentation purposes by <a href=\"https://datatracker.ietf.org/doc/html/rfc3849\">RFC\n  3849</a> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901\">CVE-2006-5901</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725\">CVE-2005-3725</a> </li>\n</ul>\n<p>Today\u00e2\u20ac\u2122s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:</p>\n<ul>\n  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>\n  <li> It misleads to use the same address in every environment (dev, sys, qa, prod). </li>\n</ul>\n<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack\u00e2\u20ac\u2122s impact.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The disclosed IP address is sensitive, e.g.:</p>\n<ul>\n  <li> Can give information to an attacker about the network topology. </li>\n  <li> It\u00e2\u20ac\u2122s a personal (assigned to an identifiable person) IP address. </li>\n</ul>\n<p>There is a risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Don\u00e2\u20ac\u2122t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nip = '192.168.12.42'\nsock = socket.socket()\nsock.bind((ip, 9090))\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nip = config.get(section, ipAddress)\nsock = socket.socket()\nsock.bind((ip, 9090))\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>\n  <li> Broadcast address 255.255.255.255 </li>\n  <li> Non-routable address 0.0.0.0 </li>\n  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID) </li>\n  <li> Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by <a\n  href=\"https://datatracker.ietf.org/doc/html/rfc5737\">RFC 5737</a> </li>\n  <li> Addresses in the range 2001:db8::/32, reserved for documentation purposes by <a href=\"https://datatracker.ietf.org/doc/html/rfc3849\">RFC\n  3849</a> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6983",
          "name": "The \"num_workers\" parameter should be specified for \"torch.utils.data.DataLoader\"",
          "description": "<p>This rule raises an issue when a <code>torch.utils.data.Dataloader</code> is instantiated without specifying the <code>num_workers</code>\nparameter.</p>\n<h2>Why is this an issue?</h2>\n<p>In the PyTorch library, the data loaders are used to provide an interface where common operations such as batching can be implemented. It is also\npossible to parallelize the data loading process by using multiple worker processes. This can improve performance by increasing the number of batches\nbeing fetched in parallel, at the cost of higher memory usage. This performance increase can also be attributed to avoiding the Global Interpreter\nLock (GIL) in the Python interpreter.</p>\n<h2>How to fix it</h2>\n<p>Specify the <code>num_workers</code> parameter when instantiating the <code>torch.utils.data.Dataloader</code> object.</p>\n<p>The default value of <code>0</code> will use the main process to load the data, and might be faster for small datasets that can fit completely in\nmemory.</p>\n<p>For larger datasets, it is recommended to use a value of <code>1</code> or higher to parallelize the data loading process.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\n\ntrain_dataset = datasets.MNIST(root='data', train=True, transform=ToTensor())\ntrain_data_loader = DataLoader(train_dataset, batch_size=32)# Noncompliant: the num_workers parameter is not specified\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\n\ntrain_dataset = datasets.MNIST(root='data', train=True, transform=ToTensor())\ntrain_data_loader = DataLoader(train_dataset, batch_size=32, num_workers=4)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PyTorch documentation - <a href=\"https://pytorch.org/docs/stable/data.html#single-and-multi-process-data-loading\">Single- and Multi-process\n  Data Loading</a> </li>\n  <li> PyTorch documentation - <a href=\"https://pytorch.org/tutorials/beginner/basics/data_tutorial.html\">Datasets and DataLoaders</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>This rule raises an issue when a <code>torch.utils.data.Dataloader</code> is instantiated without specifying the <code>num_workers</code>\nparameter.</p>\n<h2>Why is this an issue?</h2>\n<p>In the PyTorch library, the data loaders are used to provide an interface where common operations such as batching can be implemented. It is also\npossible to parallelize the data loading process by using multiple worker processes. This can improve performance by increasing the number of batches\nbeing fetched in parallel, at the cost of higher memory usage. This performance increase can also be attributed to avoiding the Global Interpreter\nLock (GIL) in the Python interpreter.</p>\n<h2>How to fix it</h2>\n<p>Specify the <code>num_workers</code> parameter when instantiating the <code>torch.utils.data.Dataloader</code> object.</p>\n<p>The default value of <code>0</code> will use the main process to load the data, and might be faster for small datasets that can fit completely in\nmemory.</p>\n<p>For larger datasets, it is recommended to use a value of <code>1</code> or higher to parallelize the data loading process.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\n\ntrain_dataset = datasets.MNIST(root='data', train=True, transform=ToTensor())\ntrain_data_loader = DataLoader(train_dataset, batch_size=32)# Noncompliant: the num_workers parameter is not specified\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\n\ntrain_dataset = datasets.MNIST(root='data', train=True, transform=ToTensor())\ntrain_data_loader = DataLoader(train_dataset, batch_size=32, num_workers=4)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> PyTorch documentation - <a href=\"https://pytorch.org/docs/stable/data.html#single-and-multi-process-data-loading\">Single- and Multi-process\n  Data Loading</a> </li>\n  <li> PyTorch documentation - <a href=\"https://pytorch.org/tutorials/beginner/basics/data_tutorial.html\">Datasets and DataLoaders</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6660",
          "name": "\"isinstance()\" should be preferred to direct type comparisons",
          "description": "<p>This rule raises an issue when performing direct type comparisons instead of using the <code>isinstance()</code> function.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python, using the <code>isinstance()</code> function is generally preferred over direct type comparison for several reasons:</p>\n<ol>\n  <li> <strong>Compatibility with inheritance:</strong> <code>isinstance()</code> considers inheritance hierarchy, whereas direct type comparison does\n  not. This means that <code>isinstance()</code> can handle cases where an object belongs to a subclass of the specified type, making your code more\n  flexible and robust. It allows you to write code that can work with objects of different but related types. </li>\n  <li> <strong>Support for duck typing:</strong> Python follows the principle of \"duck typing,\" which focuses on an object\u00e2\u20ac\u2122s behavior rather than its\n  actual type. <code>isinstance()</code> enables you to check if an object has certain behavior (by checking if it belongs to a particular class or\n  subclass) rather than strictly requiring a specific type. This promotes code reusability and enhances the flexibility of your programs. </li>\n  <li> <strong>Code maintainability and extensibility:</strong> By using <code>isinstance()</code>, your code becomes more maintainable and\n  extensible. If you directly compare types, you would need to modify your code whenever a new subtype is introduced or the inheritance hierarchy is\n  changed. On the other hand, <code>isinstance()</code> allows your code to accommodate new types without requiring any modifications, as long as they\n  exhibit the desired behavior. </li>\n  <li> <strong>Polymorphism and interface-based programming:</strong> <code>isinstance()</code> supports polymorphism, which is the ability of\n  different objects to respond to the same method calls. It allows you to design code that interacts with objects based on their shared interface\n  rather than their specific types. This promotes code reuse and modularity, as you can write functions and methods that operate on a range of\n  compatible objects. </li>\n  <li> <strong>Third-party library compatibility:</strong> Many third-party libraries and frameworks in Python rely on <code>isinstance()</code> for\n  type checking and handling different types of objects. By using <code>isinstance()</code>, your code becomes more compatible with these libraries\n  and frameworks, making it easier to integrate your code into larger projects or collaborate with other developers. </li>\n</ol>\n<p>In summary, using <code>isinstance()</code> over direct type comparison in Python promotes flexibility, code reusability, maintainability,\nextensibility, and compatibility with the wider Python ecosystem. It aligns with the principles of object-oriented programming and supports the\ndynamic nature of Python. It is also recommended by the <a href=\"https://peps.python.org/pep-0008/\">PEP8</a> style guide.</p>\n<h2>How to fix it</h2>\n<p>Use the <code>isinstance()</code> function instead of performing direct type comparisons.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n  ...\n\ndef foo(a):\n  if type(a) == MyClass: # Noncompliant\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n  ...\n\ndef foo(a):\n  if isinstance(a, MyClass):\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/functions.html#isinstance\">isInstance() function</a> </li>\n  <li> Style Guide for Python Code - <a href=\"https://peps.python.org/pep-0008/\">PEP8</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>This rule raises an issue when performing direct type comparisons instead of using the <code>isinstance()</code> function.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python, using the <code>isinstance()</code> function is generally preferred over direct type comparison for several reasons:</p>\n<ol>\n  <li> <strong>Compatibility with inheritance:</strong> <code>isinstance()</code> considers inheritance hierarchy, whereas direct type comparison does\n  not. This means that <code>isinstance()</code> can handle cases where an object belongs to a subclass of the specified type, making your code more\n  flexible and robust. It allows you to write code that can work with objects of different but related types. </li>\n  <li> <strong>Support for duck typing:</strong> Python follows the principle of \"duck typing,\" which focuses on an object\u00e2\u20ac\u2122s behavior rather than its\n  actual type. <code>isinstance()</code> enables you to check if an object has certain behavior (by checking if it belongs to a particular class or\n  subclass) rather than strictly requiring a specific type. This promotes code reusability and enhances the flexibility of your programs. </li>\n  <li> <strong>Code maintainability and extensibility:</strong> By using <code>isinstance()</code>, your code becomes more maintainable and\n  extensible. If you directly compare types, you would need to modify your code whenever a new subtype is introduced or the inheritance hierarchy is\n  changed. On the other hand, <code>isinstance()</code> allows your code to accommodate new types without requiring any modifications, as long as they\n  exhibit the desired behavior. </li>\n  <li> <strong>Polymorphism and interface-based programming:</strong> <code>isinstance()</code> supports polymorphism, which is the ability of\n  different objects to respond to the same method calls. It allows you to design code that interacts with objects based on their shared interface\n  rather than their specific types. This promotes code reuse and modularity, as you can write functions and methods that operate on a range of\n  compatible objects. </li>\n  <li> <strong>Third-party library compatibility:</strong> Many third-party libraries and frameworks in Python rely on <code>isinstance()</code> for\n  type checking and handling different types of objects. By using <code>isinstance()</code>, your code becomes more compatible with these libraries\n  and frameworks, making it easier to integrate your code into larger projects or collaborate with other developers. </li>\n</ol>\n<p>In summary, using <code>isinstance()</code> over direct type comparison in Python promotes flexibility, code reusability, maintainability,\nextensibility, and compatibility with the wider Python ecosystem. It aligns with the principles of object-oriented programming and supports the\ndynamic nature of Python. It is also recommended by the <a href=\"https://peps.python.org/pep-0008/\">PEP8</a> style guide.</p>\n<h2>How to fix it</h2>\n<p>Use the <code>isinstance()</code> function instead of performing direct type comparisons.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n  ...\n\ndef foo(a):\n  if type(a) == MyClass: # Noncompliant\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n  ...\n\ndef foo(a):\n  if isinstance(a, MyClass):\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/functions.html#isinstance\">isInstance() function</a> </li>\n  <li> Style Guide for Python Code - <a href=\"https://peps.python.org/pep-0008/\">PEP8</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6659",
          "name": "'startswith' or 'endswith' methods should be used instead of string slicing in condition expressions",
          "description": "<p>This rule raises an issue when string slicing is used in condition expressions instead of the <code>startswith</code> or <code>endswith</code>\nmethods.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the <code>startswith</code> and <code>endswith</code> methods in Python instead of string slicing offers several advantages:</p>\n<ol>\n  <li> <strong>Readability and Intent:</strong> Using <code>startswith</code> and <code>endswith</code> methods provides code that is more readable\n  and self-explanatory. It clearly communicates your intention to check if a string starts or ends with a specific pattern. This makes the code more\n  maintainable and easier to understand for other developers. </li>\n  <li> <strong>Flexibility:</strong> The <code>startswith</code> and <code>endswith</code> methods allow you to check for patterns of varying lengths.\n  With string slicing, you would need to specify the exact length of the substring to compare. However, with the methods, you can pass in a pattern of\n  any length, making your code more flexible and adaptable. </li>\n  <li> <strong>Error Handling:</strong> The methods handle edge cases automatically. If you pass a substring length that exceeds the length of the\n  original string, slicing would raise an <code>IndexError</code> exception. On the other hand, the methods gracefully handle such cases and return\n  <code>False</code>, avoiding any potential errors. </li>\n  <li> <strong>Performance Optimization:</strong> In some cases, using <code>startswith</code> and <code>endswith</code> methods can provide better\n  performance. These methods are optimized and implemented in C, which can make them faster than manually slicing the string in Python. Although the\n  performance gain might be negligible for small strings, it can be significant when working with large strings or processing them in a loop. </li>\n</ol>\n<p>Overall, using <code>startswith</code> and <code>endswith</code> methods provides a cleaner, more readable, and error-resistant approach for\nchecking if a string starts or ends with a specific pattern. It promotes code clarity, flexibility, and can potentially improve performance. This is\nalso recommended by the <a href=\"https://peps.python.org/pep-0008/\">PEP8</a> style guide.</p>\n<h2>How to fix it</h2>\n<p>Use <code>startswith</code> and <code>endswith</code> methods instead of string slicing in condition expressions.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nmessage = \"Hello, world!\"\n\nif message[:5] == \"Hello\":\n    ...\n\nif message[-6:] == \"world!\":\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nmessage = \"Hello, world!\"\n\nif message.startswith(\"Hello\"):\n    ...\n\nif message.endswith(\"world!\"):\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">String Methods</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>This rule raises an issue when string slicing is used in condition expressions instead of the <code>startswith</code> or <code>endswith</code>\nmethods.</p>\n<h2>Why is this an issue?</h2>\n<p>Using the <code>startswith</code> and <code>endswith</code> methods in Python instead of string slicing offers several advantages:</p>\n<ol>\n  <li> <strong>Readability and Intent:</strong> Using <code>startswith</code> and <code>endswith</code> methods provides code that is more readable\n  and self-explanatory. It clearly communicates your intention to check if a string starts or ends with a specific pattern. This makes the code more\n  maintainable and easier to understand for other developers. </li>\n  <li> <strong>Flexibility:</strong> The <code>startswith</code> and <code>endswith</code> methods allow you to check for patterns of varying lengths.\n  With string slicing, you would need to specify the exact length of the substring to compare. However, with the methods, you can pass in a pattern of\n  any length, making your code more flexible and adaptable. </li>\n  <li> <strong>Error Handling:</strong> The methods handle edge cases automatically. If you pass a substring length that exceeds the length of the\n  original string, slicing would raise an <code>IndexError</code> exception. On the other hand, the methods gracefully handle such cases and return\n  <code>False</code>, avoiding any potential errors. </li>\n  <li> <strong>Performance Optimization:</strong> In some cases, using <code>startswith</code> and <code>endswith</code> methods can provide better\n  performance. These methods are optimized and implemented in C, which can make them faster than manually slicing the string in Python. Although the\n  performance gain might be negligible for small strings, it can be significant when working with large strings or processing them in a loop. </li>\n</ol>\n<p>Overall, using <code>startswith</code> and <code>endswith</code> methods provides a cleaner, more readable, and error-resistant approach for\nchecking if a string starts or ends with a specific pattern. It promotes code clarity, flexibility, and can potentially improve performance. This is\nalso recommended by the <a href=\"https://peps.python.org/pep-0008/\">PEP8</a> style guide.</p>\n<h2>How to fix it</h2>\n<p>Use <code>startswith</code> and <code>endswith</code> methods instead of string slicing in condition expressions.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nmessage = \"Hello, world!\"\n\nif message[:5] == \"Hello\":\n    ...\n\nif message[-6:] == \"world!\":\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nmessage = \"Hello, world!\"\n\nif message.startswith(\"Hello\"):\n    ...\n\nif message.endswith(\"world!\"):\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\">String Methods</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5713",
          "name": "A subclass should not be in the same \"except\" statement as a parent class",
          "description": "<p>This rule raises an issue when an exception class is duplicated in an <code>except</code> statement, or when an exception class has a parent class\nin the same <code>except</code> statement.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python it is possible to catch multiple types of exception in a single <code>except</code> statement using a tuple of the exceptions.</p>\n<p>Repeating an exception class in a single <code>except</code> statement will not fail but it does not have any effect. Either the exception class is\nnot the one which should be caught, or it is duplicated code which should be removed.</p>\n<p>Having a subclass and a parent class in the same <code>except</code> statement does not provide any benefit either. It is enough to keep only the\nparent class.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ntry:\n    ...\nexcept (TypeError, TypeError):  # Noncompliant: duplicated code or incorrect exception class.\n    print(\"Foo\")\n\ntry:\n    ...\nexcept (NotImplementedError, RuntimeError):  # Noncompliant: NotImplementedError inherits from RuntimeError.\n    print(\"Foo\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntry:\n    ...\nexcept (TypeError, ValueError):\n    print(\"Foo\")\n\ntry:\n    ...\nexcept RuntimeError:\n    print(\"Foo\")\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/tutorial/errors.html#handling-exceptions\">Handling Exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\">Exception hierarchy</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>This rule raises an issue when an exception class is duplicated in an <code>except</code> statement, or when an exception class has a parent class\nin the same <code>except</code> statement.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python it is possible to catch multiple types of exception in a single <code>except</code> statement using a tuple of the exceptions.</p>\n<p>Repeating an exception class in a single <code>except</code> statement will not fail but it does not have any effect. Either the exception class is\nnot the one which should be caught, or it is duplicated code which should be removed.</p>\n<p>Having a subclass and a parent class in the same <code>except</code> statement does not provide any benefit either. It is enough to keep only the\nparent class.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ntry:\n    ...\nexcept (TypeError, TypeError):  # Noncompliant: duplicated code or incorrect exception class.\n    print(\"Foo\")\n\ntry:\n    ...\nexcept (NotImplementedError, RuntimeError):  # Noncompliant: NotImplementedError inherits from RuntimeError.\n    print(\"Foo\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntry:\n    ...\nexcept (TypeError, ValueError):\n    print(\"Foo\")\n\ntry:\n    ...\nexcept RuntimeError:\n    print(\"Foo\")\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/tutorial/errors.html#handling-exceptions\">Handling Exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\">Exception hierarchy</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5685",
          "name": "Walrus operator should not make code confusing",
          "description": "<p>This rule raises an issue when the walrus operator is used in a way which makes the code confusing, as described in <a\nhref=\"https://www.python.org/dev/peps/pep-0572/#exceptional-cases\">PEP 572</a>.</p>\n<h2>Why is this an issue?</h2>\n<p>The <a href=\"https://www.python.org/dev/peps/pep-0572\">walrus operator</a> <code>:=</code> (also known as \"assignment expression\") should be used\nwith caution as it can easily make code more difficult to understand and thus maintain. In such case it is advised to refactor the code and use an\nassignment statement (i.e. <code>=</code>) instead.</p>\n<p>Reasons why it is better to avoid using the walrus operator in Python:</p>\n<ul>\n  <li> <strong>Readability:</strong> The walrus operator can lead to more complex and nested expressions, which might reduce the readability of the\n  code, especially for developers who are not familiar with this feature. </li>\n  <li> <strong>Compatibility:</strong> If you are working on projects that need to be compatible with older versions of Python (before 3.8), you\n  should avoid using the walrus operator, as it won\u00e2\u20ac\u2122t be available in those versions. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Avoid using the walrus operator for the cases when it is not mandatory.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nv0 = (v1 := f(p))  # Noncompliant: Use an assignment statement (\"=\") instead; \":=\" operator is confusing in this context\nf'{(x:=10)}' # Noncompliant: Move this assignment out of the f-string; \":=\" operator is confusing in this context\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nv0 = v1 = f(p)\nx = 10\nf'{x}'\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://www.python.org/dev/peps/pep-0572\">PEP 572 \u00e2\u20ac\u201c Assignment Expressions</a> </li>\n  <li> Python Documentation - <a href=\"https://www.python.org/dev/peps/pep-0572/#exceptional-cases\">PEP 572 - Assignment Expressions - Exceptional\n  cases</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>This rule raises an issue when the walrus operator is used in a way which makes the code confusing, as described in <a\nhref=\"https://www.python.org/dev/peps/pep-0572/#exceptional-cases\">PEP 572</a>.</p>\n<h2>Why is this an issue?</h2>\n<p>The <a href=\"https://www.python.org/dev/peps/pep-0572\">walrus operator</a> <code>:=</code> (also known as \"assignment expression\") should be used\nwith caution as it can easily make code more difficult to understand and thus maintain. In such case it is advised to refactor the code and use an\nassignment statement (i.e. <code>=</code>) instead.</p>\n<p>Reasons why it is better to avoid using the walrus operator in Python:</p>\n<ul>\n  <li> <strong>Readability:</strong> The walrus operator can lead to more complex and nested expressions, which might reduce the readability of the\n  code, especially for developers who are not familiar with this feature. </li>\n  <li> <strong>Compatibility:</strong> If you are working on projects that need to be compatible with older versions of Python (before 3.8), you\n  should avoid using the walrus operator, as it won\u00e2\u20ac\u2122t be available in those versions. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Avoid using the walrus operator for the cases when it is not mandatory.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nv0 = (v1 := f(p))  # Noncompliant: Use an assignment statement (\"=\") instead; \":=\" operator is confusing in this context\nf'{(x:=10)}' # Noncompliant: Move this assignment out of the f-string; \":=\" operator is confusing in this context\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nv0 = v1 = f(p)\nx = 10\nf'{x}'\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://www.python.org/dev/peps/pep-0572\">PEP 572 \u00e2\u20ac\u201c Assignment Expressions</a> </li>\n  <li> Python Documentation - <a href=\"https://www.python.org/dev/peps/pep-0572/#exceptional-cases\">PEP 572 - Assignment Expressions - Exceptional\n  cases</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2772",
          "name": "\"pass\" should not be used needlessly",
          "description": "<p>This rule raises an issue when a <code>pass</code> statement is redundant.</p>\n<h2>Why is this an issue?</h2>\n<p>The use of a <code>pass</code> statement where it is not required by the syntax is redundant. It makes the code less readable and its intent\nconfusing.</p>\n<p>To fix this issue, remove <code>pass</code> statements that do not affect the behaviour of the program.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo(arg):\n    print(arg)\n    pass # Noncompliant: the `pass` statement is not needed as it does not change the behaviour of the program.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo(arg):\n    print(arg)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-pass-statement\">The pass statement</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>This rule raises an issue when a <code>pass</code> statement is redundant.</p>\n<h2>Why is this an issue?</h2>\n<p>The use of a <code>pass</code> statement where it is not required by the syntax is redundant. It makes the code less readable and its intent\nconfusing.</p>\n<p>To fix this issue, remove <code>pass</code> statements that do not affect the behaviour of the program.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo(arg):\n    print(arg)\n    pass # Noncompliant: the `pass` statement is not needed as it does not change the behaviour of the program.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo(arg):\n    print(arg)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-pass-statement\">The pass statement</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S101",
          "name": "Class names should comply with a naming convention",
          "description": "<h2>Why is this an issue?</h2>\n<p>Shared naming conventions allow teams to collaborate efficiently.</p>\n<p>This rule raises an issue when a class name does not match a provided regular expression.</p>\n<p>The default regular expression allows the \"CapWords\" convention and the \"snake_case\" in lowercase. The style guide PEP-8 recommends using the\n\"CapWords\" convention in every case but also accepts the \"snake_case\" convention when the class is primarily used as a callable (ex: decorator,\ncontext manager, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039).</p>\n<p>For example, with the default provided regular expression <code>^_?([A-Z_][a-zA-Z0-9]*|[a-z_][a-z0-9_]*)$</code>, the classes:</p>\n<pre>\nclass myClass:  # Noncompliant\n   ...\n\nclass my_CONTEXT_manager:  # Noncompliant\n    def __enter__(self):\n        pass\n    def __exit__(self, type, value, traceback):\n        pass\n</pre>\n<p>should be renamed to</p>\n<pre>\nclass MyClass:\n   ...\n\nclass my_context_manager:\n    def __enter__(self):\n        pass\n    def __exit__(self, type, value, traceback):\n        pass\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://peps.python.org/pep-0008/#class-names\">PEP 8 \u00e2\u20ac\u201c Style Guide for Python Code</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Snake_case\">Wikipedia: Snake case</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Shared naming conventions allow teams to collaborate efficiently.</p>\n<p>This rule raises an issue when a class name does not match a provided regular expression.</p>\n<p>The default regular expression allows the \"CapWords\" convention and the \"snake_case\" in lowercase. The style guide PEP-8 recommends using the\n\"CapWords\" convention in every case but also accepts the \"snake_case\" convention when the class is primarily used as a callable (ex: decorator,\ncontext manager, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039).</p>\n<p>For example, with the default provided regular expression <code>^_?([A-Z_][a-zA-Z0-9]*|[a-z_][a-z0-9_]*)$</code>, the classes:</p>\n<pre>\nclass myClass:  # Noncompliant\n   ...\n\nclass my_CONTEXT_manager:  # Noncompliant\n    def __enter__(self):\n        pass\n    def __exit__(self, type, value, traceback):\n        pass\n</pre>\n<p>should be renamed to</p>\n<pre>\nclass MyClass:\n   ...\n\nclass my_context_manager:\n    def __enter__(self):\n        pass\n    def __exit__(self, type, value, traceback):\n        pass\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://peps.python.org/pep-0008/#class-names\">PEP 8 \u00e2\u20ac\u201c Style Guide for Python Code</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Snake_case\">Wikipedia: Snake case</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1135",
          "name": "Track uses of \"TODO\" tags",
          "description": "<h2>Why is this an issue?</h2>\n<p>Developers often use <code>TODO</code> tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these <code>TODO</code> tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This rule aims to\nidentify and address unattended <code>TODO</code> tags to ensure a clean and maintainable codebase. This description explores why this is a problem\nand how it can be fixed to improve the overall code quality.</p>\n<h3>What is the potential impact?</h3>\n<p>Unattended <code>TODO</code> tags in code can have significant implications for the development process and the overall codebase.</p>\n<p>Incomplete Functionality: When developers leave <code>TODO</code> tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.</p>\n<p>Missed Bug Fixes: If developers do not promptly address <code>TODO</code> tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.</p>\n<p>Impact on Collaboration: In team-based development environments, unattended <code>TODO</code> tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.</p>\n<p>Codebase Bloat: The accumulation of unattended <code>TODO</code> tags over time can clutter the codebase and make it difficult to distinguish\nbetween work in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.</p>\n<p>Addressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef doSomething:\n  # TODO : Complete function\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/546\">CWE-546 - Suspicious Comment</a> </li>\n</ul>\n\n",
          "severity": "Info",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Developers often use <code>TODO</code> tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these <code>TODO</code> tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This rule aims to\nidentify and address unattended <code>TODO</code> tags to ensure a clean and maintainable codebase. This description explores why this is a problem\nand how it can be fixed to improve the overall code quality.</p>\n<h3>What is the potential impact?</h3>\n<p>Unattended <code>TODO</code> tags in code can have significant implications for the development process and the overall codebase.</p>\n<p>Incomplete Functionality: When developers leave <code>TODO</code> tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.</p>\n<p>Missed Bug Fixes: If developers do not promptly address <code>TODO</code> tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.</p>\n<p>Impact on Collaboration: In team-based development environments, unattended <code>TODO</code> tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.</p>\n<p>Codebase Bloat: The accumulation of unattended <code>TODO</code> tags over time can clutter the codebase and make it difficult to distinguish\nbetween work in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.</p>\n<p>Addressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef doSomething:\n  # TODO : Complete function\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/546\">CWE-546 - Suspicious Comment</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6740",
          "name": "'dtype' parameter should be provided when using 'pandas.read_csv' or 'pandas.read_table'",
          "description": "<p>This rule raises an error when the <code>dtype</code> parameter is not provided when using <code>pandas.read_csv</code> or\n<code>pandas.read_table</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>The pandas library provides an easy way to load data from documents hosted locally or remotely, for example with the <code>pandas.read_csv</code>\nor <code>pandas.read_table</code> functions:</p>\n<pre>\nimport pandas as pd\n\ndf = pd.read_csv(\"my_file.csv\")\n</pre>\n<p>Pandas will infer the type of each columns of the CSV file and specify the datatype accordingly, making this code perfectly valid. However this\nsnippet of code does not convey the proper intent of the user, and can raise questions such as:</p>\n<ul>\n  <li> What information can I access in <code>df</code>? </li>\n  <li> What are the names of the columns available in <code>df</code>? </li>\n</ul>\n<p>These questions arise as there are no descriptions of what kind of data is loaded into the data frame, making the code less understandable and\nharder to maintain.</p>\n<p>A straightforward way to fix these issues is by providing the schema of the data through the usage of the <code>dtype</code> parameter.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue provide the <code>dtype</code> parameter to the <code>read_csv</code> or <code>read_table</code> function.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\n\ndef foo():\n  return pd.read_csv(\"my_file.csv\") # Noncompliant: it is unclear which type of data the data frame holds.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\n\ndef foo():\n  return pd.read_csv(\n          \"my_file.csv\",\n          dtype={'name': 'str', 'age': 'int'}) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas Documentation - <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html#pandas-read-csv\">pandas.read_csv</a> </li>\n  <li> Pandas Documentation - <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.read_table.html#pandas-read-table\">pandas.read_table</a>\n  </li>\n  <li> Pandas Documentation - <a href=\"https://pandas.pydata.org/docs/user_guide/basics.html#dtypes\">dtypes</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an error when the <code>dtype</code> parameter is not provided when using <code>pandas.read_csv</code> or\n<code>pandas.read_table</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>The pandas library provides an easy way to load data from documents hosted locally or remotely, for example with the <code>pandas.read_csv</code>\nor <code>pandas.read_table</code> functions:</p>\n<pre>\nimport pandas as pd\n\ndf = pd.read_csv(\"my_file.csv\")\n</pre>\n<p>Pandas will infer the type of each columns of the CSV file and specify the datatype accordingly, making this code perfectly valid. However this\nsnippet of code does not convey the proper intent of the user, and can raise questions such as:</p>\n<ul>\n  <li> What information can I access in <code>df</code>? </li>\n  <li> What are the names of the columns available in <code>df</code>? </li>\n</ul>\n<p>These questions arise as there are no descriptions of what kind of data is loaded into the data frame, making the code less understandable and\nharder to maintain.</p>\n<p>A straightforward way to fix these issues is by providing the schema of the data through the usage of the <code>dtype</code> parameter.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue provide the <code>dtype</code> parameter to the <code>read_csv</code> or <code>read_table</code> function.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport pandas as pd\n\ndef foo():\n  return pd.read_csv(\"my_file.csv\") # Noncompliant: it is unclear which type of data the data frame holds.\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport pandas as pd\n\ndef foo():\n  return pd.read_csv(\n          \"my_file.csv\",\n          dtype={'name': 'str', 'age': 'int'}) # Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Pandas Documentation - <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html#pandas-read-csv\">pandas.read_csv</a> </li>\n  <li> Pandas Documentation - <a href=\"https://pandas.pydata.org/docs/reference/api/pandas.read_table.html#pandas-read-table\">pandas.read_table</a>\n  </li>\n  <li> Pandas Documentation - <a href=\"https://pandas.pydata.org/docs/user_guide/basics.html#dtypes\">dtypes</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6554",
          "name": "Django models should define a \"__str__\" method",
          "description": "<p>This rule ensures that Django models have a <code>__str__</code> method defined.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>__str__</code> method in Django models is used to represent the model instance as a string. For example, the return value of this method\nwill be inserted in a template when displaying an object in the Django admin site. Without this method, the model instance will be represented by its\nobject identifier, which is not meaningful to end-users. This can result in confusion and make debugging more difficult.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, the Django model must define a <code>__str__</code> method that returns a string representation of the instance. This string\nshould be meaningful to end-users and provide information about the model instance.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom django.db import models\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nfrom django.db import models\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a\nhref=\"https://docs.djangoproject.com/en/4.1/ref/models/instances/#django.db.models.Model\">https://docs.djangoproject.com/en/4.1/ref/models/instances/#django.db.models.Model</a>.<em>str</em>[Django\nModel.<em>str</em>()]</p>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule ensures that Django models have a <code>__str__</code> method defined.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>__str__</code> method in Django models is used to represent the model instance as a string. For example, the return value of this method\nwill be inserted in a template when displaying an object in the Django admin site. Without this method, the model instance will be represented by its\nobject identifier, which is not meaningful to end-users. This can result in confusion and make debugging more difficult.</p>\n<h2>How to fix it</h2>\n<p>To fix this issue, the Django model must define a <code>__str__</code> method that returns a string representation of the instance. This string\nshould be meaningful to end-users and provide information about the model instance.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nfrom django.db import models\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nfrom django.db import models\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a\nhref=\"https://docs.djangoproject.com/en/4.1/ref/models/instances/#django.db.models.Model\">https://docs.djangoproject.com/en/4.1/ref/models/instances/#django.db.models.Model</a>.<em>str</em>[Django\nModel.<em>str</em>()]</p>\n\n"
        },
        {
          "id": "S6543",
          "name": "Type hints of generic types should specify their type parameters",
          "description": "<h2>Why is this an issue?</h2>\n<p>Generic types, such as <code>list</code> or <code>dict</code> accept type arguments to specify the type of elements contained in the list or the\nkeys and values in the dictionary.</p>\n<p>If a generic type is used without a type argument, the type arguments will implicitly assumed to be <code>Any</code>. This makes the type hint less\ninformative and makes the contract of the function or variable annotated with the type hint more difficult to understand.</p>\n<p>Furthermore, incomplete type hints can hinder IDE autocompletion and code insight capabilities of static analyis tools.</p>\n<h2>How to fix it</h2>\n<p>Add the missing type parameters to this generic type.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef print_list(numbers: list) -&gt; None:\n    for n in numbers:\n        print(n)\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef print_list(numbers: list[int]) -&gt; None:\n    for n in numbers:\n        print(n)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html#generic-concrete-collections\">Python documentation on generic collections</a> </li>\n  <li> <a href=\"https://mypy.readthedocs.io/en/stable/builtin_types.html#generic-types\">Built-in generic types</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Generic types, such as <code>list</code> or <code>dict</code> accept type arguments to specify the type of elements contained in the list or the\nkeys and values in the dictionary.</p>\n<p>If a generic type is used without a type argument, the type arguments will implicitly assumed to be <code>Any</code>. This makes the type hint less\ninformative and makes the contract of the function or variable annotated with the type hint more difficult to understand.</p>\n<p>Furthermore, incomplete type hints can hinder IDE autocompletion and code insight capabilities of static analyis tools.</p>\n<h2>How to fix it</h2>\n<p>Add the missing type parameters to this generic type.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef print_list(numbers: list) -&gt; None:\n    for n in numbers:\n        print(n)\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef print_list(numbers: list[int]) -&gt; None:\n    for n in numbers:\n        print(n)\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html#generic-concrete-collections\">Python documentation on generic collections</a> </li>\n  <li> <a href=\"https://mypy.readthedocs.io/en/stable/builtin_types.html#generic-types\">Built-in generic types</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6542",
          "name": "Any should not be used as a type hint",
          "description": "<h2>Why is this an issue?</h2>\n<p>The type hint <code>Any</code> represents any possible Python type, on which all operations are possible. This conveys the information that all\noperations could be possible on a value annotated with <code>Any</code>, making the value dynamically-typed.</p>\n<p><code>Any</code> as a type hint provides no information about the expected type of the variable or parameter, essentially losing the benefits of\ntype hinting. This can make the code less clear and harder to understand and will reduce the code insight capabilities of IDEs and static analysis\ntools.</p>\n<h2>How to fix it</h2>\n<p>Replace this use of <code>Any</code> with a more specific type hint.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef foo(arg: Any) -&gt; Any:\n    if isinstance(arg, int):\n        return arg + 1\n    else:\n        return arg.upper()\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef foo(arg: int | str) -&gt; int | str:\n    if isinstance(arg, int):\n        return arg + 1\n    else:\n        return arg.upper()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html#the-any-type\">Python3 documentation on Any</a> </li>\n  <li> <a href=\"https://mypy.readthedocs.io/en/stable/kinds_of_types.html#the-any-type\">Mypy documentation on the Any type</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>The type hint <code>Any</code> represents any possible Python type, on which all operations are possible. This conveys the information that all\noperations could be possible on a value annotated with <code>Any</code>, making the value dynamically-typed.</p>\n<p><code>Any</code> as a type hint provides no information about the expected type of the variable or parameter, essentially losing the benefits of\ntype hinting. This can make the code less clear and harder to understand and will reduce the code insight capabilities of IDEs and static analysis\ntools.</p>\n<h2>How to fix it</h2>\n<p>Replace this use of <code>Any</code> with a more specific type hint.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef foo(arg: Any) -&gt; Any:\n    if isinstance(arg, int):\n        return arg + 1\n    else:\n        return arg.upper()\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef foo(arg: int | str) -&gt; int | str:\n    if isinstance(arg, int):\n        return arg + 1\n    else:\n        return arg.upper()\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html#the-any-type\">Python3 documentation on Any</a> </li>\n  <li> <a href=\"https://mypy.readthedocs.io/en/stable/kinds_of_types.html#the-any-type\">Mypy documentation on the Any type</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S6540",
          "name": "Function parameters should have type hints",
          "description": "<h2>Why is this an issue?</h2>\n<p>Being a dynamically typed language, the Python interpreter only does type checking during runtime. Getting the typing right is important as certain\noperations may result in a <code>TypeError</code>.</p>\n<p>Type hints can be used to clarify the expected parameters of a function, enabling developers to better document its contract. Applying them\nconsistently makes the code easier to read and understand.</p>\n<p>In addition, type hints allow some development environments to offer better autocompletion and improve the precision of static analysis tools.</p>\n<h2>How to fix it</h2>\n<p>Add a type hint to the function parameter.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef hello(name) -&gt; str:\n    return 'Hello ' + name\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef hello(name: str) -&gt; str:\n    return 'Hello ' + name\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html\">Python3 documentation on type hints</a> </li>\n  <li> <a href=\"https://peps.python.org/pep-0484\">PEP-484 - Type Hints</a> </li>\n  <li> <a href=\"https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html\">Cheat sheet on type annotations as part of the mypy documentation</a>\n  </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Being a dynamically typed language, the Python interpreter only does type checking during runtime. Getting the typing right is important as certain\noperations may result in a <code>TypeError</code>.</p>\n<p>Type hints can be used to clarify the expected parameters of a function, enabling developers to better document its contract. Applying them\nconsistently makes the code easier to read and understand.</p>\n<p>In addition, type hints allow some development environments to offer better autocompletion and improve the precision of static analysis tools.</p>\n<h2>How to fix it</h2>\n<p>Add a type hint to the function parameter.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef hello(name) -&gt; str:\n    return 'Hello ' + name\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef hello(name: str) -&gt; str:\n    return 'Hello ' + name\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html\">Python3 documentation on type hints</a> </li>\n  <li> <a href=\"https://peps.python.org/pep-0484\">PEP-484 - Type Hints</a> </li>\n  <li> <a href=\"https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html\">Cheat sheet on type annotations as part of the mypy documentation</a>\n  </li>\n</ul>\n\n"
        },
        {
          "id": "S6538",
          "name": "Function returns should have type hints",
          "description": "<h2>Why is this an issue?</h2>\n<p>Being a dynamically typed language, the Python interpreter only does type checking during runtime. Getting the typing right is important as certain\noperations may result in a <code>TypeError</code>.</p>\n<p>Type hints can be used to clarify the expected return type of a function, enabling developers to better document its contract. Applying them\nconsistently makes the code easier to read and understand.</p>\n<p>In addition, type hints allow some development environments to offer better autocompletion and improve the precision of static analysis tools.</p>\n<h2>How to fix it</h2>\n<p>Add a type hint to the function definition.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef hello(name):\n   return 'Hello ' + name\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef hello(name) -&gt; str:\n   return 'Hello ' + name\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html\">Python3 documentation on type hints</a> </li>\n  <li> <a href=\"https://peps.python.org/pep-0484\">PEP-484 - Type Hints</a> </li>\n  <li> <a href=\"https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html\">Cheat sheet on type annotations as part of the mypy documentation</a>\n  </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Being a dynamically typed language, the Python interpreter only does type checking during runtime. Getting the typing right is important as certain\noperations may result in a <code>TypeError</code>.</p>\n<p>Type hints can be used to clarify the expected return type of a function, enabling developers to better document its contract. Applying them\nconsistently makes the code easier to read and understand.</p>\n<p>In addition, type hints allow some development environments to offer better autocompletion and improve the precision of static analysis tools.</p>\n<h2>How to fix it</h2>\n<p>Add a type hint to the function definition.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\ndef hello(name):\n   return 'Hello ' + name\n</pre>\n<h4>Compliant solution</h4>\n<pre>\ndef hello(name) -&gt; str:\n   return 'Hello ' + name\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html\">Python3 documentation on type hints</a> </li>\n  <li> <a href=\"https://peps.python.org/pep-0484\">PEP-484 - Type Hints</a> </li>\n  <li> <a href=\"https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html\">Cheat sheet on type annotations as part of the mypy documentation</a>\n  </li>\n</ul>\n\n"
        },
        {
          "id": "S124",
          "name": "Track comments matching a regular expression",
          "description": "<h2>Why is this an issue?</h2>\n<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>\n\n"
        },
        {
          "id": "S6245",
          "name": "Disabling server-side encryption of S3 buckets is security-sensitive",
          "description": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Server-side encryption (SSE) encrypts an object (not the metadata) as it is written to disk (where the S3 bucket resides) and decrypts it as it is\nread from disk. This doesn\u00e2\u20ac\u2122t change the way the objects are accessed, as long as the user has the necessary permissions, objects are retrieved as if\nthey were unencrypted. Thus, SSE only helps in the event of disk thefts, improper disposals of disks and other attacks on the AWS infrastructure\nitself.</p>\n<p>There are three SSE options:</p>\n<ul>\n  <li> Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)\n    <ul>\n      <li> AWS manages encryption keys and the encryption itself (with AES-256) on its own. </li>\n    </ul>  </li>\n  <li> Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS)\n    <ul>\n      <li> AWS manages the encryption (AES-256) of objects and encryption keys provided by the AWS KMS service. </li>\n    </ul>  </li>\n  <li> Server-Side Encryption with Customer-Provided Keys (SSE-C)\n    <ul>\n      <li> AWS manages only the encryption (AES-256) of objects with encryption keys provided by the customer. AWS doesn\u00e2\u20ac\u2122t store the customer\u00e2\u20ac\u2122s\n      encryption keys. </li>\n    </ul>  </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The S3 bucket stores sensitive information. </li>\n  <li> The infrastructure needs to comply to some regulations, like HIPAA or PCI DSS, and other standards. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to use SSE. Choosing the appropriate option depends on the level of control required for the management of encryption keys.</p>\n<h2>Sensitive Code Example</h2>\n<p>Server-side encryption is not used:</p>\n<pre>\nbucket = s3.Bucket(self,\"bucket\",\n    encryption=s3.BucketEncryption.UNENCRYPTED       # Sensitive\n)\n</pre>\n<p>The default value of <code>encryption</code> is <code>KMS</code> if <code>encryptionKey</code> is set. Otherwise, if both parameters are absent the\nbucket is unencrypted.</p>\n<h2>Compliant Solution</h2>\n<p>Server-side encryption with Amazon S3-Managed Keys is used:</p>\n<pre>\nbucket = s3.Bucket(self,\"bucket\",\n    encryption=s3.BucketEncryption.S3_MANAGED\n)\n\n# Alternatively with a KMS key managed by the user.\n\nbucket = s3.Bucket(self,\"bucket\",\n    encryptionKey=access_key\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html\">AWS documentation</a> - Protecting data using\n  server-side encryption </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.BucketEncryption.html\">AWS CDK version 2</a> - BucketEncryption </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Server-side encryption (SSE) encrypts an object (not the metadata) as it is written to disk (where the S3 bucket resides) and decrypts it as it is\nread from disk. This doesn\u00e2\u20ac\u2122t change the way the objects are accessed, as long as the user has the necessary permissions, objects are retrieved as if\nthey were unencrypted. Thus, SSE only helps in the event of disk thefts, improper disposals of disks and other attacks on the AWS infrastructure\nitself.</p>\n<p>There are three SSE options:</p>\n<ul>\n  <li> Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)\n    <ul>\n      <li> AWS manages encryption keys and the encryption itself (with AES-256) on its own. </li>\n    </ul>  </li>\n  <li> Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS)\n    <ul>\n      <li> AWS manages the encryption (AES-256) of objects and encryption keys provided by the AWS KMS service. </li>\n    </ul>  </li>\n  <li> Server-Side Encryption with Customer-Provided Keys (SSE-C)\n    <ul>\n      <li> AWS manages only the encryption (AES-256) of objects with encryption keys provided by the customer. AWS doesn\u00e2\u20ac\u2122t store the customer\u00e2\u20ac\u2122s\n      encryption keys. </li>\n    </ul>  </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The S3 bucket stores sensitive information. </li>\n  <li> The infrastructure needs to comply to some regulations, like HIPAA or PCI DSS, and other standards. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to use SSE. Choosing the appropriate option depends on the level of control required for the management of encryption keys.</p>\n<h2>Sensitive Code Example</h2>\n<p>Server-side encryption is not used:</p>\n<pre>\nbucket = s3.Bucket(self,\"bucket\",\n    encryption=s3.BucketEncryption.UNENCRYPTED       # Sensitive\n)\n</pre>\n<p>The default value of <code>encryption</code> is <code>KMS</code> if <code>encryptionKey</code> is set. Otherwise, if both parameters are absent the\nbucket is unencrypted.</p>\n<h2>Compliant Solution</h2>\n<p>Server-side encryption with Amazon S3-Managed Keys is used:</p>\n<pre>\nbucket = s3.Bucket(self,\"bucket\",\n    encryption=s3.BucketEncryption.S3_MANAGED\n)\n\n# Alternatively with a KMS key managed by the user.\n\nbucket = s3.Bucket(self,\"bucket\",\n    encryptionKey=access_key\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html\">AWS documentation</a> - Protecting data using\n  server-side encryption </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.BucketEncryption.html\">AWS CDK version 2</a> - BucketEncryption </li>\n</ul>\n\n"
        },
        {
          "id": "S1707",
          "name": "Track \"TODO\" and \"FIXME\" comments that do not contain a reference to a person",
          "description": "<h2>Why is this an issue?</h2>\n<p>TODO and FIXME comments are typically intended to be short-lived; they are placeholders and reminders that programmers leave for themselves.\nUnfortunately, even with the best of intentions, those comments are not always acted on and removed in a timely manner. Thus, they can become\nmysterious, lingering cruft in a code base, reducing both readability and understand-ability.</p>\n<p>This rule flags all FIXME and TODO comments that do not have an attribution matching the specified regular expression immediately after the FIXME\nor TODO. Ideally, such comments will also contain information about what needs to be fixed or done, but this rule does not enforce that.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n# TODO\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n# TODO(ganncamp) per the business partners, more checks needed\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>TODO and FIXME comments are typically intended to be short-lived; they are placeholders and reminders that programmers leave for themselves.\nUnfortunately, even with the best of intentions, those comments are not always acted on and removed in a timely manner. Thus, they can become\nmysterious, lingering cruft in a code base, reducing both readability and understand-ability.</p>\n<p>This rule flags all FIXME and TODO comments that do not have an attribution matching the specified regular expression immediately after the FIXME\nor TODO. Ideally, such comments will also contain information about what needs to be fixed or done, but this rule does not enforce that.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n# TODO\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n# TODO(ganncamp) per the business partners, more checks needed\n</pre>\n\n"
        },
        {
          "id": "S139",
          "name": "Comments should not be located at the end of lines of code",
          "description": "<h2>Why is this an issue?</h2>\n<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h3>Noncompliant code example</h3>\n<pre>\na = b + c   # This is a trailing comment that can be very very long\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n# This very long comment is better placed before the line of code\na = b + c\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h3>Noncompliant code example</h3>\n<pre>\na = b + c   # This is a trailing comment that can be very very long\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n# This very long comment is better placed before the line of code\na = b + c\n</pre>\n\n"
        }
      ]
    },
    {
      "category": "Error Handling",
      "rules": [
        {
          "id": "S5496",
          "name": "Server-side templates should not be vulnerable to injection attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>Server-side template injections occur when an application retrieves data from a user or a third-party service and inserts it into a template,\nwithout sanitizing it first.</p>\n<p>If an application contains a template that is vulnerable to injections, it is exposed to attacks that target the underlying rendering server.</p>\n<p>A user with malicious intent can create requests that will cause the template to change its logic into unwanted behavior.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting a server-side template injection vulnerability will be able to execute arbitrary commands on the underlying operating\nsystem.</p>\n<p>The impact depends on the access control measures taken on the target system OS. In the worst-case scenario, the process runs with root privileges,\nand therefore any OS commands or programs may be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Denial of service and data leaks</h4>\n<p>In this scenario, the attack aims to disrupt the organization\u00e2\u20ac\u2122s activities and profit from data leaks.</p>\n<p>An attacker could, for example:</p>\n<ul>\n  <li> download the internal server\u00e2\u20ac\u2122s data, most likely to sell it </li>\n  <li> modify data, send malware </li>\n  <li> stop services or exhaust resources (with fork bombs for example) </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker also manages to elevate\ntheir privileges to an administrative level and attacks other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nby a combination of OS injections and <strong>misconfiguration</strong> of:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following code is vulnerable to server-side template injection because it is inserting untrusted inputs into a string that is then processed\nfor rendering.<br> This vulnerability arises because the rendering function does not validate the input, allowing attackers to potentially inject\nmalicious Python code for execution.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request, render_template_string\n\n@app.route('/example')\ndef example():\n    username = request.args.get('username')\n    template = f\"&lt;p&gt;Hello {username}&lt;/p&gt;\"\n    return render_template_string(template) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request, render_template_string\n\n@app.route('/example')\ndef example():\n    username = request.args.get('username')\n    template = \"&lt;p&gt;Hello {{ username }}&lt;/p&gt;\"\n    return render_template_string(template, username=username)\n</pre>\n<h3>How does this work?</h3>\n<h4>Use template variables</h4>\n<p>The universal method to prevent path injection is to sanitize untrusted data. Manual sanitization is error-prone, so it is best to automate the\nprocess.</p>\n<p>Here, <code>render_template_string</code> automatically sanitizes template variables by escaping them. This means that any untrusted data will not\nbe able to break out of the initially intended template logic.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://medium.com/@nyomanpradipta120/ssti-in-flask-jinja2-20b068fdaeee\">SSTI in Flask/Jinja2</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/94\">CWE-94 - Improper Control of Generation of Code</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Server-side template injections occur when an application retrieves data from a user or a third-party service and inserts it into a template,\nwithout sanitizing it first.</p>\n<p>If an application contains a template that is vulnerable to injections, it is exposed to attacks that target the underlying rendering server.</p>\n<p>A user with malicious intent can create requests that will cause the template to change its logic into unwanted behavior.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting a server-side template injection vulnerability will be able to execute arbitrary commands on the underlying operating\nsystem.</p>\n<p>The impact depends on the access control measures taken on the target system OS. In the worst-case scenario, the process runs with root privileges,\nand therefore any OS commands or programs may be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Denial of service and data leaks</h4>\n<p>In this scenario, the attack aims to disrupt the organization\u00e2\u20ac\u2122s activities and profit from data leaks.</p>\n<p>An attacker could, for example:</p>\n<ul>\n  <li> download the internal server\u00e2\u20ac\u2122s data, most likely to sell it </li>\n  <li> modify data, send malware </li>\n  <li> stop services or exhaust resources (with fork bombs for example) </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker also manages to elevate\ntheir privileges to an administrative level and attacks other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nby a combination of OS injections and <strong>misconfiguration</strong> of:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following code is vulnerable to server-side template injection because it is inserting untrusted inputs into a string that is then processed\nfor rendering.<br> This vulnerability arises because the rendering function does not validate the input, allowing attackers to potentially inject\nmalicious Python code for execution.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request, render_template_string\n\n@app.route('/example')\ndef example():\n    username = request.args.get('username')\n    template = f\"&lt;p&gt;Hello {username}&lt;/p&gt;\"\n    return render_template_string(template) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request, render_template_string\n\n@app.route('/example')\ndef example():\n    username = request.args.get('username')\n    template = \"&lt;p&gt;Hello {{ username }}&lt;/p&gt;\"\n    return render_template_string(template, username=username)\n</pre>\n<h3>How does this work?</h3>\n<h4>Use template variables</h4>\n<p>The universal method to prevent path injection is to sanitize untrusted data. Manual sanitization is error-prone, so it is best to automate the\nprocess.</p>\n<p>Here, <code>render_template_string</code> automatically sanitizes template variables by escaping them. This means that any untrusted data will not\nbe able to break out of the initially intended template logic.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://medium.com/@nyomanpradipta120/ssti-in-flask-jinja2-20b068fdaeee\">SSTI in Flask/Jinja2</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/94\">CWE-94 - Improper Control of Generation of Code</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S5334",
          "name": "Dynamic code execution should not be vulnerable to injection attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>Code injections occur when applications allow the dynamic execution of code instructions from untrusted data.<br> An attacker can influence the\nbehavior of the targeted application and modify it to get access to sensitive data.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting a dynamic code injection vulnerability will be able to execute arbitrary code in the context of the vulnerable\napplication.</p>\n<p>The impact depends on the access control measures taken on the target system OS. In the worst-case scenario, the process that executes the code\nruns with root privileges, and therefore any OS commands or programs may be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Denial of service and data leaks</h4>\n<p>In this scenario, the attack aims to disrupt the organization\u00e2\u20ac\u2122s activities and profit from data leaks.</p>\n<p>An attacker could, for example:</p>\n<ul>\n  <li> download the internal server\u00e2\u20ac\u2122s data, most likely to sell it </li>\n  <li> modify data, send malware </li>\n  <li> stop services or exhaust resources (with fork bombs for example) </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker also manages to elevate\ntheir privileges to an administrative level and attacks other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nby a combination of code injections and <strong>misconfiguration</strong> of:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to arbitrary code execution because it runs dynamic Python code based on untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\n\n@app.route(\"/\")\ndef example():\n    operation = request.args.get(\"operation\")\n    eval(f\"product_{operation}()\") # Noncompliant\n    return \"OK\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\n\n@app.route(\"/\")\ndef example():\n    allowed = [\"add\", \"remove\", \"update\"]\n    operation = allowed[request.args.get(\"operationId\")]\n    eval(f\"product_{operation}()\")\n\n    return \"OK\"\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to execute code dynamically generally creates more problems than it solves.</p>\n<p>Anything that can be done via dynamic code execution can usually be done via a language\u00e2\u20ac\u2122s native SDK and static code.<br> Therefore, our suggestion\nis to avoid executing code dynamically.<br> If the application requires the execution of dynamic code, additional security measures must be taken.</p>\n<h4>Dynamic parameters</h4>\n<p>When the untrusted values are only expected to be values used in standard processing, it is generally possible to provide them as parameters of the\ndynamic code. In that case, care should be taken to ensure that only the <strong>name</strong> of the untrusted parameter is passed to the dynamic\ncode and not that its value is expanded into it. After that, the dynamic code will be able to safely access the untrusted parameter content and\nperform the processing.</p>\n<h4>Allow list</h4>\n<p>When the untrusted parameters are expected to contain operators, function names or other reflection-related values, best practices would encourage\nusing an allow list. This one would contain a list of accepted safe values that can be used as part of the dynamic code.</p>\n<p>When receiving an untrusted parameter, the application would verify its value is contained in the configured allow list. If it is present, the\nparameter is accepted. Otherwise, it is rejected and an error is raised.</p>\n<p>Another similar approach is using a binding between identifiers and accepted values. That way, users are only allowed to provide identifiers, where\nonly valid ones can be converted to a safe value.</p>\n<p>The example compliant code uses such a binding approach.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://blog.sonarsource.com/moodle-remote-code-execution/\">SonarSource, Evil Teacher: Code Injection in Moodle</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/95\">CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval\n  Injection')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Code injections occur when applications allow the dynamic execution of code instructions from untrusted data.<br> An attacker can influence the\nbehavior of the targeted application and modify it to get access to sensitive data.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting a dynamic code injection vulnerability will be able to execute arbitrary code in the context of the vulnerable\napplication.</p>\n<p>The impact depends on the access control measures taken on the target system OS. In the worst-case scenario, the process that executes the code\nruns with root privileges, and therefore any OS commands or programs may be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Denial of service and data leaks</h4>\n<p>In this scenario, the attack aims to disrupt the organization\u00e2\u20ac\u2122s activities and profit from data leaks.</p>\n<p>An attacker could, for example:</p>\n<ul>\n  <li> download the internal server\u00e2\u20ac\u2122s data, most likely to sell it </li>\n  <li> modify data, send malware </li>\n  <li> stop services or exhaust resources (with fork bombs for example) </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker also manages to elevate\ntheir privileges to an administrative level and attacks other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nby a combination of code injections and <strong>misconfiguration</strong> of:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to arbitrary code execution because it runs dynamic Python code based on untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\n\n@app.route(\"/\")\ndef example():\n    operation = request.args.get(\"operation\")\n    eval(f\"product_{operation}()\") # Noncompliant\n    return \"OK\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\n\n@app.route(\"/\")\ndef example():\n    allowed = [\"add\", \"remove\", \"update\"]\n    operation = allowed[request.args.get(\"operationId\")]\n    eval(f\"product_{operation}()\")\n\n    return \"OK\"\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to execute code dynamically generally creates more problems than it solves.</p>\n<p>Anything that can be done via dynamic code execution can usually be done via a language\u00e2\u20ac\u2122s native SDK and static code.<br> Therefore, our suggestion\nis to avoid executing code dynamically.<br> If the application requires the execution of dynamic code, additional security measures must be taken.</p>\n<h4>Dynamic parameters</h4>\n<p>When the untrusted values are only expected to be values used in standard processing, it is generally possible to provide them as parameters of the\ndynamic code. In that case, care should be taken to ensure that only the <strong>name</strong> of the untrusted parameter is passed to the dynamic\ncode and not that its value is expanded into it. After that, the dynamic code will be able to safely access the untrusted parameter content and\nperform the processing.</p>\n<h4>Allow list</h4>\n<p>When the untrusted parameters are expected to contain operators, function names or other reflection-related values, best practices would encourage\nusing an allow list. This one would contain a list of accepted safe values that can be used as part of the dynamic code.</p>\n<p>When receiving an untrusted parameter, the application would verify its value is contained in the configured allow list. If it is present, the\nparameter is accepted. Otherwise, it is rejected and an error is raised.</p>\n<p>Another similar approach is using a binding between identifiers and accepted values. That way, users are only allowed to provide identifiers, where\nonly valid ones can be converted to a safe value.</p>\n<p>The example compliant code uses such a binding approach.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://blog.sonarsource.com/moodle-remote-code-execution/\">SonarSource, Evil Teacher: Code Injection in Moodle</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/95\">CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval\n  Injection')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S2115",
          "name": "A secure password should be used when connecting to a database",
          "description": "<p>When accessing a database, an empty password should be avoided as it introduces a weakness.</p>\n<h2>Why is this an issue?</h2>\n<p>When a database does not require a password for authentication, it allows anyone to access and manipulate the data stored within it. Exploiting\nthis vulnerability typically involves identifying the target database and establishing a connection to it without the need for any authentication\ncredentials.</p>\n<h3>What is the potential impact?</h3>\n<p>Once connected, an attacker can perform various malicious actions, such as viewing, modifying, or deleting sensitive information, potentially\nleading to data breaches or unauthorized access to critical systems. It is crucial to address this vulnerability promptly to ensure the security and\nintegrity of the database and the data it contains.</p>\n<h4>Unauthorized Access to Sensitive Data</h4>\n<p>When a database lacks a password for authentication, it opens the door for unauthorized individuals to gain access to sensitive data. This can\ninclude personally identifiable information (PII), financial records, intellectual property, or any other confidential information stored in the\ndatabase. Without proper access controls in place, malicious actors can exploit this vulnerability to retrieve sensitive data, potentially leading to\nidentity theft, financial loss, or reputational damage.</p>\n<h4>Compromise of System Integrity</h4>\n<p>Without a password requirement, unauthorized individuals can gain unrestricted access to a database, potentially compromising the integrity of the\nentire system. Attackers can inject malicious code, alter configurations, or manipulate data within the database, leading to system malfunctions,\nunauthorized system access, or even complete system compromise. This can disrupt business operations, cause financial losses, and expose the\norganization to further security risks.</p>\n<h4>Unwanted Modifications or Deletions</h4>\n<p>The absence of a password for database access allows anyone to make modifications or deletions to the data stored within it. This poses a\nsignificant risk, as unauthorized changes can lead to data corruption, loss of critical information, or the introduction of malicious content. For\nexample, an attacker could modify financial records, tamper with customer orders, or delete important files, causing severe disruptions to business\nprocesses and potentially leading to financial and legal consequences.</p>\n<p>Overall, the lack of a password configured to access a database poses a serious security risk, enabling unauthorized access, data breaches, system\ncompromise, and unwanted modifications or deletions. It is essential to address this vulnerability promptly to safeguard sensitive data, maintain\nsystem integrity, and protect the organization from potential harm.</p>\n<h2>How to fix it in MySQL Connector/Python</h2>\n<h3>Code examples</h3>\n<p>The following code uses an empty password to connect to a MySQL database.</p>\n<p>The vulnerability can be fixed by using a strong password retrieved from an environment variable <code>DB_PASSWORD</code>. This environment\nvariable is set during deployment. It should be strong and different for each database.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"noncompliant\">\nfrom mysql.connector import connection\n\nconnection.MySQLConnection(host='localhost', user='sonarsource', password='')  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"compliant\">\nfrom mysql.connector import connection\nimport os\n\ndb_password = os.getenv('DB_PASSWORD')\nconnection.MySQLConnection(host='localhost', user='sonarsource', password=db_password)\n</pre>\n<h3>Pitfalls</h3>\n<h4>Hard-coded passwords</h4>\n<p>It could be tempting to replace the empty password with a hard-coded one. Hard-coding passwords in the code can pose significant security risks.\nHere are a few reasons why it is not recommended:</p>\n<ol>\n  <li> Security Vulnerability: Hard-coded passwords can be easily discovered by anyone who has access to the code, such as other developers or\n  attackers. This can lead to unauthorized access to the database and potential data breaches. </li>\n  <li> Lack of Flexibility: Hard-coded passwords make it difficult to change the password without modifying the code. If the password needs to be\n  updated, it would require recompiling and redeploying the code, which can be time-consuming and error-prone. </li>\n  <li> Version Control Issues: Storing passwords in code can lead to version control issues. If the code is shared or stored in a version control\n  system, the password will be visible to anyone with access to the repository, which is a security risk. </li>\n</ol>\n<p>To mitigate these risks, it is recommended to use secure methods for storing and retrieving passwords, such as using environment variables,\nconfiguration files, or secure key management systems. These methods allow for better security, flexibility, and separation of sensitive information\nfrom the codebase.</p>\n<h2>How to fix it in SQLAlchemy</h2>\n<h3>Code examples</h3>\n<p>The following code uses an empty password to connect to a Postgres database.</p>\n<p>The vulnerability can be fixed by using a strong password retrieved from an environment variable <code>DB_PASSWORD</code>. This environment\nvariable is set during deployment. It should be strong and different for each database.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"103\" data-diff-type=\"noncompliant\">\ndef configure_app(app):\n    app.config['SQLALCHEMY_DATABASE_URI'] = \"postgresql://user:@domain.com\" # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"103\" data-diff-type=\"compliant\">\ndef configure_app(app):\n    db_password = os.getenv('DB_PASSWORD')\n    app.config['SQLALCHEMY_DATABASE_URI'] = f\"postgresql://user:{db_password}@domain.com\"\n</pre>\n<h3>Pitfalls</h3>\n<h4>Hard-coded passwords</h4>\n<p>It could be tempting to replace the empty password with a hard-coded one. Hard-coding passwords in the code can pose significant security risks.\nHere are a few reasons why it is not recommended:</p>\n<ol>\n  <li> Security Vulnerability: Hard-coded passwords can be easily discovered by anyone who has access to the code, such as other developers or\n  attackers. This can lead to unauthorized access to the database and potential data breaches. </li>\n  <li> Lack of Flexibility: Hard-coded passwords make it difficult to change the password without modifying the code. If the password needs to be\n  updated, it would require recompiling and redeploying the code, which can be time-consuming and error-prone. </li>\n  <li> Version Control Issues: Storing passwords in code can lead to version control issues. If the code is shared or stored in a version control\n  system, the password will be visible to anyone with access to the repository, which is a security risk. </li>\n</ol>\n<p>To mitigate these risks, it is recommended to use secure methods for storing and retrieving passwords, such as using environment variables,\nconfiguration files, or secure key management systems. These methods allow for better security, flexibility, and separation of sensitive information\nfrom the codebase.</p>\n<h2>How to fix it in Django</h2>\n<h3>Code examples</h3>\n<p>The following code uses an empty password to connect to a Postgres database.</p>\n<p>The vulnerability can be fixed by using a strong password retrieved from an environment variable <code>DB_PASSWORD</code>. This environment\nvariable is set during deployment. It should be strong and different for each database.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"102\" data-diff-type=\"noncompliant\">\n# settings.py\n\nDATABASES = {\n    'postgresql_db': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'quickdb',\n        'USER': 'sonarsource',\n        'PASSWORD': '', # Noncompliant\n        'HOST': 'localhost',\n        'PORT': '5432'\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"102\" data-diff-type=\"compliant\">\n# settings.py\nimport os\n\nDATABASES = {\n    'postgresql_db': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'quickdb',\n        'USER': 'sonarsource',\n        'PASSWORD': os.getenv('DB_PASSWORD'),\n        'HOST': 'localhost',\n        'PORT': '5432'\n    }\n}\n</pre>\n<h3>Pitfalls</h3>\n<h4>Hard-coded passwords</h4>\n<p>It could be tempting to replace the empty password with a hard-coded one. Hard-coding passwords in the code can pose significant security risks.\nHere are a few reasons why it is not recommended:</p>\n<ol>\n  <li> Security Vulnerability: Hard-coded passwords can be easily discovered by anyone who has access to the code, such as other developers or\n  attackers. This can lead to unauthorized access to the database and potential data breaches. </li>\n  <li> Lack of Flexibility: Hard-coded passwords make it difficult to change the password without modifying the code. If the password needs to be\n  updated, it would require recompiling and redeploying the code, which can be time-consuming and error-prone. </li>\n  <li> Version Control Issues: Storing passwords in code can lead to version control issues. If the code is shared or stored in a version control\n  system, the password will be visible to anyone with access to the repository, which is a security risk. </li>\n</ol>\n<p>To mitigate these risks, it is recommended to use secure methods for storing and retrieving passwords, such as using environment variables,\nconfiguration files, or secure key management systems. These methods allow for better security, flexibility, and separation of sensitive information\nfrom the codebase.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/521\">CWE-521 - Weak Password Requirements</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>When accessing a database, an empty password should be avoided as it introduces a weakness.</p>\n<h2>Why is this an issue?</h2>\n<p>When a database does not require a password for authentication, it allows anyone to access and manipulate the data stored within it. Exploiting\nthis vulnerability typically involves identifying the target database and establishing a connection to it without the need for any authentication\ncredentials.</p>\n<h3>What is the potential impact?</h3>\n<p>Once connected, an attacker can perform various malicious actions, such as viewing, modifying, or deleting sensitive information, potentially\nleading to data breaches or unauthorized access to critical systems. It is crucial to address this vulnerability promptly to ensure the security and\nintegrity of the database and the data it contains.</p>\n<h4>Unauthorized Access to Sensitive Data</h4>\n<p>When a database lacks a password for authentication, it opens the door for unauthorized individuals to gain access to sensitive data. This can\ninclude personally identifiable information (PII), financial records, intellectual property, or any other confidential information stored in the\ndatabase. Without proper access controls in place, malicious actors can exploit this vulnerability to retrieve sensitive data, potentially leading to\nidentity theft, financial loss, or reputational damage.</p>\n<h4>Compromise of System Integrity</h4>\n<p>Without a password requirement, unauthorized individuals can gain unrestricted access to a database, potentially compromising the integrity of the\nentire system. Attackers can inject malicious code, alter configurations, or manipulate data within the database, leading to system malfunctions,\nunauthorized system access, or even complete system compromise. This can disrupt business operations, cause financial losses, and expose the\norganization to further security risks.</p>\n<h4>Unwanted Modifications or Deletions</h4>\n<p>The absence of a password for database access allows anyone to make modifications or deletions to the data stored within it. This poses a\nsignificant risk, as unauthorized changes can lead to data corruption, loss of critical information, or the introduction of malicious content. For\nexample, an attacker could modify financial records, tamper with customer orders, or delete important files, causing severe disruptions to business\nprocesses and potentially leading to financial and legal consequences.</p>\n<p>Overall, the lack of a password configured to access a database poses a serious security risk, enabling unauthorized access, data breaches, system\ncompromise, and unwanted modifications or deletions. It is essential to address this vulnerability promptly to safeguard sensitive data, maintain\nsystem integrity, and protect the organization from potential harm.</p>\n<h2>How to fix it in MySQL Connector/Python</h2>\n<h3>Code examples</h3>\n<p>The following code uses an empty password to connect to a MySQL database.</p>\n<p>The vulnerability can be fixed by using a strong password retrieved from an environment variable <code>DB_PASSWORD</code>. This environment\nvariable is set during deployment. It should be strong and different for each database.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"noncompliant\">\nfrom mysql.connector import connection\n\nconnection.MySQLConnection(host='localhost', user='sonarsource', password='')  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"compliant\">\nfrom mysql.connector import connection\nimport os\n\ndb_password = os.getenv('DB_PASSWORD')\nconnection.MySQLConnection(host='localhost', user='sonarsource', password=db_password)\n</pre>\n<h3>Pitfalls</h3>\n<h4>Hard-coded passwords</h4>\n<p>It could be tempting to replace the empty password with a hard-coded one. Hard-coding passwords in the code can pose significant security risks.\nHere are a few reasons why it is not recommended:</p>\n<ol>\n  <li> Security Vulnerability: Hard-coded passwords can be easily discovered by anyone who has access to the code, such as other developers or\n  attackers. This can lead to unauthorized access to the database and potential data breaches. </li>\n  <li> Lack of Flexibility: Hard-coded passwords make it difficult to change the password without modifying the code. If the password needs to be\n  updated, it would require recompiling and redeploying the code, which can be time-consuming and error-prone. </li>\n  <li> Version Control Issues: Storing passwords in code can lead to version control issues. If the code is shared or stored in a version control\n  system, the password will be visible to anyone with access to the repository, which is a security risk. </li>\n</ol>\n<p>To mitigate these risks, it is recommended to use secure methods for storing and retrieving passwords, such as using environment variables,\nconfiguration files, or secure key management systems. These methods allow for better security, flexibility, and separation of sensitive information\nfrom the codebase.</p>\n<h2>How to fix it in SQLAlchemy</h2>\n<h3>Code examples</h3>\n<p>The following code uses an empty password to connect to a Postgres database.</p>\n<p>The vulnerability can be fixed by using a strong password retrieved from an environment variable <code>DB_PASSWORD</code>. This environment\nvariable is set during deployment. It should be strong and different for each database.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"103\" data-diff-type=\"noncompliant\">\ndef configure_app(app):\n    app.config['SQLALCHEMY_DATABASE_URI'] = \"postgresql://user:@domain.com\" # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"103\" data-diff-type=\"compliant\">\ndef configure_app(app):\n    db_password = os.getenv('DB_PASSWORD')\n    app.config['SQLALCHEMY_DATABASE_URI'] = f\"postgresql://user:{db_password}@domain.com\"\n</pre>\n<h3>Pitfalls</h3>\n<h4>Hard-coded passwords</h4>\n<p>It could be tempting to replace the empty password with a hard-coded one. Hard-coding passwords in the code can pose significant security risks.\nHere are a few reasons why it is not recommended:</p>\n<ol>\n  <li> Security Vulnerability: Hard-coded passwords can be easily discovered by anyone who has access to the code, such as other developers or\n  attackers. This can lead to unauthorized access to the database and potential data breaches. </li>\n  <li> Lack of Flexibility: Hard-coded passwords make it difficult to change the password without modifying the code. If the password needs to be\n  updated, it would require recompiling and redeploying the code, which can be time-consuming and error-prone. </li>\n  <li> Version Control Issues: Storing passwords in code can lead to version control issues. If the code is shared or stored in a version control\n  system, the password will be visible to anyone with access to the repository, which is a security risk. </li>\n</ol>\n<p>To mitigate these risks, it is recommended to use secure methods for storing and retrieving passwords, such as using environment variables,\nconfiguration files, or secure key management systems. These methods allow for better security, flexibility, and separation of sensitive information\nfrom the codebase.</p>\n<h2>How to fix it in Django</h2>\n<h3>Code examples</h3>\n<p>The following code uses an empty password to connect to a Postgres database.</p>\n<p>The vulnerability can be fixed by using a strong password retrieved from an environment variable <code>DB_PASSWORD</code>. This environment\nvariable is set during deployment. It should be strong and different for each database.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"102\" data-diff-type=\"noncompliant\">\n# settings.py\n\nDATABASES = {\n    'postgresql_db': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'quickdb',\n        'USER': 'sonarsource',\n        'PASSWORD': '', # Noncompliant\n        'HOST': 'localhost',\n        'PORT': '5432'\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"102\" data-diff-type=\"compliant\">\n# settings.py\nimport os\n\nDATABASES = {\n    'postgresql_db': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'quickdb',\n        'USER': 'sonarsource',\n        'PASSWORD': os.getenv('DB_PASSWORD'),\n        'HOST': 'localhost',\n        'PORT': '5432'\n    }\n}\n</pre>\n<h3>Pitfalls</h3>\n<h4>Hard-coded passwords</h4>\n<p>It could be tempting to replace the empty password with a hard-coded one. Hard-coding passwords in the code can pose significant security risks.\nHere are a few reasons why it is not recommended:</p>\n<ol>\n  <li> Security Vulnerability: Hard-coded passwords can be easily discovered by anyone who has access to the code, such as other developers or\n  attackers. This can lead to unauthorized access to the database and potential data breaches. </li>\n  <li> Lack of Flexibility: Hard-coded passwords make it difficult to change the password without modifying the code. If the password needs to be\n  updated, it would require recompiling and redeploying the code, which can be time-consuming and error-prone. </li>\n  <li> Version Control Issues: Storing passwords in code can lead to version control issues. If the code is shared or stored in a version control\n  system, the password will be visible to anyone with access to the repository, which is a security risk. </li>\n</ol>\n<p>To mitigate these risks, it is recommended to use secure methods for storing and retrieving passwords, such as using environment variables,\nconfiguration files, or secure key management systems. These methods allow for better security, flexibility, and separation of sensitive information\nfrom the codebase.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/521\">CWE-521 - Weak Password Requirements</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S930",
          "name": "The number and name of arguments passed to a function should match its parameters",
          "description": "<h2>Why is this an issue?</h2>\n<p>Calling a function or a method with fewer or more arguments than expected will raise a <code>TypeError</code>. This is usually a bug and should be\nfixed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n######################\n# Positional Arguments\n######################\n\nparam_args = [1, 2, 3]\nparam_kwargs = {'x': 1, 'y': 2}\n\ndef func(a, b=1):\n    print(a, b)\n\ndef positional_unlimited(a, b=1, *args):\n    print(a, b, *args)\n\nfunc(1)\nfunc(1, 42)\nfunc(1, 2, 3)  # Noncompliant. Too many positional arguments\nfunc()  # Noncompliant. Missing positional argument for \"a\"\n\npositional_unlimited(1, 2, 3, 4, 5)\n\ndef positional_limited(a, *, b=2):\n    print(a, b)\n\npositional_limited(1, 2)  # Noncompliant. Too many positional arguments\n\n\n#############################\n# Unexpected Keyword argument\n#############################\n\ndef keywords(a=1, b=2, *, c=3):\n    print(a, b, c)\n\nkeywords(1)\nkeywords(1, z=42)  # Noncompliant. Unexpected keyword argument \"z\"\n\ndef keywords_unlimited(a=1, b=2, *, c=3, **kwargs):\n    print(a, b, kwargs)\n\nkeywords_unlimited(a=1, b=2, z=42)\n\n#################################\n# Mandatory Keyword argument only\n#################################\n\ndef mandatory_keyword(a, *, b):\n    print(a, b)\n\nmandatory_keyword(1, b=2)\nmandatory_keyword(1)  # Noncompliant. Missing keyword argument \"b\"\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/628\">CWE-628 - Function Call with Incorrectly Specified Arguments</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Calling a function or a method with fewer or more arguments than expected will raise a <code>TypeError</code>. This is usually a bug and should be\nfixed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n######################\n# Positional Arguments\n######################\n\nparam_args = [1, 2, 3]\nparam_kwargs = {'x': 1, 'y': 2}\n\ndef func(a, b=1):\n    print(a, b)\n\ndef positional_unlimited(a, b=1, *args):\n    print(a, b, *args)\n\nfunc(1)\nfunc(1, 42)\nfunc(1, 2, 3)  # Noncompliant. Too many positional arguments\nfunc()  # Noncompliant. Missing positional argument for \"a\"\n\npositional_unlimited(1, 2, 3, 4, 5)\n\ndef positional_limited(a, *, b=2):\n    print(a, b)\n\npositional_limited(1, 2)  # Noncompliant. Too many positional arguments\n\n\n#############################\n# Unexpected Keyword argument\n#############################\n\ndef keywords(a=1, b=2, *, c=3):\n    print(a, b, c)\n\nkeywords(1)\nkeywords(1, z=42)  # Noncompliant. Unexpected keyword argument \"z\"\n\ndef keywords_unlimited(a=1, b=2, *, c=3, **kwargs):\n    print(a, b, kwargs)\n\nkeywords_unlimited(a=1, b=2, z=42)\n\n#################################\n# Mandatory Keyword argument only\n#################################\n\ndef mandatory_keyword(a, *, b):\n    print(a, b)\n\nmandatory_keyword(1, b=2)\nmandatory_keyword(1)  # Noncompliant. Missing keyword argument \"b\"\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/628\">CWE-628 - Function Call with Incorrectly Specified Arguments</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5549",
          "name": "Function arguments should be passed only once",
          "description": "<p>This rule raises an issue when a function is called with multiple values for the same parameter.</p>\n<h2>Why is this an issue?</h2>\n<p>When a function is called, it accepts only one value per parameter. The Python interpreter will raise a <code>SyntaxError</code> when the same\nparameter is provided more than once, i.e. <code>myfunction(a=1, a=2)</code>.</p>\n<p>Other less obvious cases will also fail at runtime by raising a <code>TypeError</code>, when:</p>\n<ul>\n  <li> An argument is provided by value and position at the same time. </li>\n  <li> An argument is provided twice, once via unpacking and once by value or position. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef func(a, b, c):\n    return a * b * c\n\nfunc(6, 93, 31, c=62) # Noncompliant: argument \"c\" is duplicated\n\nparams = {'c':31}\nfunc(6, 93, 31, **params) # Noncompliant: argument \"c\" is duplicated\nfunc(6, 93, c=62, **params) # Noncompliant: argument \"c\" is duplicated\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef func(a, b, c):\n    return a * b * c\n\nfunc(c=31, b=93, a=6) # Compliant\n\nparams = {'c':31}\nfunc(6, 93, **params) # Compliant\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when a function is called with multiple values for the same parameter.</p>\n<h2>Why is this an issue?</h2>\n<p>When a function is called, it accepts only one value per parameter. The Python interpreter will raise a <code>SyntaxError</code> when the same\nparameter is provided more than once, i.e. <code>myfunction(a=1, a=2)</code>.</p>\n<p>Other less obvious cases will also fail at runtime by raising a <code>TypeError</code>, when:</p>\n<ul>\n  <li> An argument is provided by value and position at the same time. </li>\n  <li> An argument is provided twice, once via unpacking and once by value or position. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef func(a, b, c):\n    return a * b * c\n\nfunc(6, 93, 31, c=62) # Noncompliant: argument \"c\" is duplicated\n\nparams = {'c':31}\nfunc(6, 93, 31, **params) # Noncompliant: argument \"c\" is duplicated\nfunc(6, 93, c=62, **params) # Noncompliant: argument \"c\" is duplicated\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef func(a, b, c):\n    return a * b * c\n\nfunc(c=31, b=93, a=6) # Compliant\n\nparams = {'c':31}\nfunc(6, 93, **params) # Compliant\n</pre>\n\n"
        },
        {
          "id": "S2317",
          "name": "The \"exec\" statement should not be used",
          "description": "<p>This rule raises an issue when the exec statement is used.</p>\n<h2>Why is this an issue?</h2>\n<p>Use of the <code>exec</code> statement could be dangerous, and should be avoided. Moreover, the <code>exec</code> statement was removed in Python\n3.0. Instead, the built-in <code>exec()</code> function can be used.</p>\n<p>Use of the <code>exec</code> statement is strongly discouraged for several reasons such as:</p>\n<ul>\n  <li> <strong>Security Risks:</strong> Executing code from a string opens up the possibility of code injection attacks. </li>\n  <li> <strong>Readability and Maintainability:</strong> Code executed with <code>exec</code> statement is often harder to read and understand since\n  it is not explicitly written in the source code. </li>\n  <li> <strong>Performance Implications:</strong> The use of <code>exec</code> statement can have performance implications since the code is compiled\n  and executed at runtime. </li>\n  <li> <strong>Limited Static Analysis:</strong> Since the code executed with <code>exec</code> statement is only known at runtime, static code\n  analysis tools may not be able to catch certain errors or issues, leading to potential bugs. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nexec 'print 1' # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nexec('print 1')\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when the exec statement is used.</p>\n<h2>Why is this an issue?</h2>\n<p>Use of the <code>exec</code> statement could be dangerous, and should be avoided. Moreover, the <code>exec</code> statement was removed in Python\n3.0. Instead, the built-in <code>exec()</code> function can be used.</p>\n<p>Use of the <code>exec</code> statement is strongly discouraged for several reasons such as:</p>\n<ul>\n  <li> <strong>Security Risks:</strong> Executing code from a string opens up the possibility of code injection attacks. </li>\n  <li> <strong>Readability and Maintainability:</strong> Code executed with <code>exec</code> statement is often harder to read and understand since\n  it is not explicitly written in the source code. </li>\n  <li> <strong>Performance Implications:</strong> The use of <code>exec</code> statement can have performance implications since the code is compiled\n  and executed at runtime. </li>\n  <li> <strong>Limited Static Analysis:</strong> Since the code executed with <code>exec</code> statement is only known at runtime, static code\n  analysis tools may not be able to catch certain errors or issues, leading to potential bugs. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nexec 'print 1' # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nexec('print 1')\n</pre>\n\n"
        },
        {
          "id": "S2053",
          "name": "Password hashing functions should use an unpredictable salt",
          "description": "<p>This vulnerability increases the likelihood that attackers are able to compute the cleartext of password hashes.</p>\n<h2>Why is this an issue?</h2>\n<p>During the process of password hashing, an additional component, known as a \"salt,\" is often integrated to bolster the overall security. This salt,\nacting as a defensive measure, primarily wards off certain types of attacks that leverage pre-computed tables to crack passwords.</p>\n<p>However, potential risks emerge when the salt is deemed insecure. This can occur when the salt is consistently the same across all users or when it\nis too short or predictable. In scenarios where users share the same password and salt, their password hashes will inevitably mirror each other.\nSimilarly, a short salt heightens the probability of multiple users unintentionally having identical salts, which can potentially lead to identical\npassword hashes. These identical hashes streamline the process for potential attackers to recover clear-text passwords. Thus, the emphasis on\nimplementing secure, unique, and sufficiently lengthy salts in password-hashing functions is vital.</p>\n<h3>What is the potential impact?</h3>\n<p>Despite best efforts, even well-guarded systems might have vulnerabilities that could allow an attacker to gain access to the hashed passwords.\nThis could be due to software vulnerabilities, insider threats, or even successful phishing attempts that give attackers the access they need.</p>\n<p>Once the attacker has these hashes, they will likely attempt to crack them using a couple of methods. One is brute force, which entails trying\nevery possible combination until the correct password is found. While this can be time-consuming, having the same salt for all users or a short salt\ncan make the task significantly easier and faster.</p>\n<p>If multiple users have the same password and the same salt, their password hashes would be identical. This means that if an attacker successfully\ncracks one hash, they have effectively cracked all identical ones, granting them access to multiple accounts at once.</p>\n<p>A short salt, while less critical than a shared one, still increases the odds of different users having the same salt. This might create clusters\nof password hashes with identical salt that can then be attacked as explained before.</p>\n<p>With short salts, the probability of a collision between two users' passwords and salts couple might be low depending on the salt size. The shorter\nthe salt, the higher the collision probability. In any case, using longer, cryptographically secure salt should be preferred.</p>\n<h3>Exceptions</h3>\n<p>To securely store password hashes, it is a recommended to rely on key derivation functions that are computationally intensive. Examples of such\nfunctions are:</p>\n<ul>\n  <li> Argon2 </li>\n  <li> PBKDF2 </li>\n  <li> Scrypt </li>\n  <li> Bcrypt </li>\n</ul>\n<p>When they are used for password storage, using a secure, random salt is required.</p>\n<p>However, those functions can also be used for other purposes such as master key derivation or password-based pre-shared key generation. In those\ncases, the implemented cryptographic protocol might require using a fixed salt to derive keys in a deterministic way. In such cases, using a fixed\nsalt is safe and accepted.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of hard-coded salts.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport hashlib\n\nhash = hashlib.scrypt(password, salt=b\"F3MdWpeHeeSjlUxvKBnzzA\", n=2**17, r=8, p=1) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport hashlib\nimport secrets\n\nsalt = secrets.token_bytes(32)\nhash = hashlib.scrypt(password, salt=salt, n=2**17, r=8, p=1)\n</pre>\n<h3>How does this work?</h3>\n<p>This code ensures that each user\u00e2\u20ac\u2122s password has a unique salt value associated with it. It generates a salt randomly and with a length that\nprovides the required security level. It uses a salt length of at least 32 bytes (256 bits), as recommended by industry standards.</p>\n<p>Here, the compliant code example ensures the salt is random and has a sufficient length by calling the <code>secrets.token_bytes</code> function.\nThis one internally uses a cryptographically secure pseudo random number generator.</p>\n<h2>How to fix it in pyca</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of hard-coded salts.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives import hashes\n\ndigest = PBKDF2HMAC(hashes.SHA256(), length=32, salt=b\"F3MdWpeHeeSjlUxvKBnzzA\", iterations=100000).derive(password)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport secrets\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives import hashes\n\nsalt = secrets.token_bytes(32)\ndigest = PBKDF2HMAC(hashes.SHA256(), length=32, salt=salt, iterations=100000).derive(password)\n</pre>\n<h3>How does this work?</h3>\n<p>This code ensures that each user\u00e2\u20ac\u2122s password has a unique salt value associated with it. It generates a salt randomly and with a length that\nprovides the required security level. It uses a salt length of at least 32 bytes (256 bits), as recommended by industry standards.</p>\n<p>Here, the compliant code example ensures the salt is random and has a sufficient length by calling the <code>secrets.token_bytes</code> function.\nThis one internally uses a cryptographically secure pseudo random number generator.</p>\n<h2>How to fix it in Cryptodome</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of hard-coded salts.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfrom Crypto.Protocol.KDF import scrypt\n\ndigest = scrypt(password, salt=b\"F3MdWpeHeeSjlUxvKBnzzA\", key_len=32, N=2**17, r=8, p=1) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nimport secrets\nfrom Crypto.Protocol.KDF import scrypt\n\nsalt = secrets.token_bytes(32)\ndigest = scrypt(password, salt=salt, key_len=32, N=2**17, r=8, p=1)\n</pre>\n<h3>How does this work?</h3>\n<p>This code ensures that each user\u00e2\u20ac\u2122s password has a unique salt value associated with it. It generates a salt randomly and with a length that\nprovides the required security level. It uses a salt length of at least 32 bytes (256 bits), as recommended by industry standards.</p>\n<p>Here, the compliant code example ensures the salt is random and has a sufficient length by calling the <code>secrets.token_bytes</code> function.\nThis function internally uses a cryptographically secure pseudo-random number generator.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/759\">CWE-759 - Use of a One-Way Hash without a Salt</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/760\">CWE-760 - Use of a One-Way Hash with a Predictable Salt</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222542\">Application Security and\n  Development: V-222542</a> - The application must only store cryptographic representations of passwords. </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This vulnerability increases the likelihood that attackers are able to compute the cleartext of password hashes.</p>\n<h2>Why is this an issue?</h2>\n<p>During the process of password hashing, an additional component, known as a \"salt,\" is often integrated to bolster the overall security. This salt,\nacting as a defensive measure, primarily wards off certain types of attacks that leverage pre-computed tables to crack passwords.</p>\n<p>However, potential risks emerge when the salt is deemed insecure. This can occur when the salt is consistently the same across all users or when it\nis too short or predictable. In scenarios where users share the same password and salt, their password hashes will inevitably mirror each other.\nSimilarly, a short salt heightens the probability of multiple users unintentionally having identical salts, which can potentially lead to identical\npassword hashes. These identical hashes streamline the process for potential attackers to recover clear-text passwords. Thus, the emphasis on\nimplementing secure, unique, and sufficiently lengthy salts in password-hashing functions is vital.</p>\n<h3>What is the potential impact?</h3>\n<p>Despite best efforts, even well-guarded systems might have vulnerabilities that could allow an attacker to gain access to the hashed passwords.\nThis could be due to software vulnerabilities, insider threats, or even successful phishing attempts that give attackers the access they need.</p>\n<p>Once the attacker has these hashes, they will likely attempt to crack them using a couple of methods. One is brute force, which entails trying\nevery possible combination until the correct password is found. While this can be time-consuming, having the same salt for all users or a short salt\ncan make the task significantly easier and faster.</p>\n<p>If multiple users have the same password and the same salt, their password hashes would be identical. This means that if an attacker successfully\ncracks one hash, they have effectively cracked all identical ones, granting them access to multiple accounts at once.</p>\n<p>A short salt, while less critical than a shared one, still increases the odds of different users having the same salt. This might create clusters\nof password hashes with identical salt that can then be attacked as explained before.</p>\n<p>With short salts, the probability of a collision between two users' passwords and salts couple might be low depending on the salt size. The shorter\nthe salt, the higher the collision probability. In any case, using longer, cryptographically secure salt should be preferred.</p>\n<h3>Exceptions</h3>\n<p>To securely store password hashes, it is a recommended to rely on key derivation functions that are computationally intensive. Examples of such\nfunctions are:</p>\n<ul>\n  <li> Argon2 </li>\n  <li> PBKDF2 </li>\n  <li> Scrypt </li>\n  <li> Bcrypt </li>\n</ul>\n<p>When they are used for password storage, using a secure, random salt is required.</p>\n<p>However, those functions can also be used for other purposes such as master key derivation or password-based pre-shared key generation. In those\ncases, the implemented cryptographic protocol might require using a fixed salt to derive keys in a deterministic way. In such cases, using a fixed\nsalt is safe and accepted.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of hard-coded salts.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport hashlib\n\nhash = hashlib.scrypt(password, salt=b\"F3MdWpeHeeSjlUxvKBnzzA\", n=2**17, r=8, p=1) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport hashlib\nimport secrets\n\nsalt = secrets.token_bytes(32)\nhash = hashlib.scrypt(password, salt=salt, n=2**17, r=8, p=1)\n</pre>\n<h3>How does this work?</h3>\n<p>This code ensures that each user\u00e2\u20ac\u2122s password has a unique salt value associated with it. It generates a salt randomly and with a length that\nprovides the required security level. It uses a salt length of at least 32 bytes (256 bits), as recommended by industry standards.</p>\n<p>Here, the compliant code example ensures the salt is random and has a sufficient length by calling the <code>secrets.token_bytes</code> function.\nThis one internally uses a cryptographically secure pseudo random number generator.</p>\n<h2>How to fix it in pyca</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of hard-coded salts.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives import hashes\n\ndigest = PBKDF2HMAC(hashes.SHA256(), length=32, salt=b\"F3MdWpeHeeSjlUxvKBnzzA\", iterations=100000).derive(password)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport secrets\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives import hashes\n\nsalt = secrets.token_bytes(32)\ndigest = PBKDF2HMAC(hashes.SHA256(), length=32, salt=salt, iterations=100000).derive(password)\n</pre>\n<h3>How does this work?</h3>\n<p>This code ensures that each user\u00e2\u20ac\u2122s password has a unique salt value associated with it. It generates a salt randomly and with a length that\nprovides the required security level. It uses a salt length of at least 32 bytes (256 bits), as recommended by industry standards.</p>\n<p>Here, the compliant code example ensures the salt is random and has a sufficient length by calling the <code>secrets.token_bytes</code> function.\nThis one internally uses a cryptographically secure pseudo random number generator.</p>\n<h2>How to fix it in Cryptodome</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of hard-coded salts.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfrom Crypto.Protocol.KDF import scrypt\n\ndigest = scrypt(password, salt=b\"F3MdWpeHeeSjlUxvKBnzzA\", key_len=32, N=2**17, r=8, p=1) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nimport secrets\nfrom Crypto.Protocol.KDF import scrypt\n\nsalt = secrets.token_bytes(32)\ndigest = scrypt(password, salt=salt, key_len=32, N=2**17, r=8, p=1)\n</pre>\n<h3>How does this work?</h3>\n<p>This code ensures that each user\u00e2\u20ac\u2122s password has a unique salt value associated with it. It generates a salt randomly and with a length that\nprovides the required security level. It uses a salt length of at least 32 bytes (256 bits), as recommended by industry standards.</p>\n<p>Here, the compliant code example ensures the salt is random and has a sufficient length by calling the <code>secrets.token_bytes</code> function.\nThis function internally uses a cryptographically secure pseudo-random number generator.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/759\">CWE-759 - Use of a One-Way Hash without a Salt</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/760\">CWE-760 - Use of a One-Way Hash with a Predictable Salt</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222542\">Application Security and\n  Development: V-222542</a> - The application must only store cryptographic representations of passwords. </li>\n</ul>\n\n"
        },
        {
          "id": "S6001",
          "name": "Back references in regular expressions should only refer to capturing groups that are matched before the reference",
          "description": "<h2>Why is this an issue?</h2>\n<p>When a back reference in a regex refers to a capturing group that hasn\u00e2\u20ac\u2122t been defined yet (or at all), it can never be matched and will fail with\nan <code>re.error</code> exception</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport re\npattern1 = re.compile(r\"\\1(.)\") # Noncompliant, group 1 is defined after the back reference\npattern2 = re.compile(r\"(.)\\2\") # Noncompliant, group 2 isn't defined at all\npattern3 = re.compile(r\"(.)|\\1\") # Noncompliant, group 1 and the back reference are in different branches\npattern4 = re.compile(r\"(?P&lt;x&gt;.)|(?P=x)\") # Noncompliant, group x and the back reference are in different branches\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport re\npattern1 = re.compile(r\"(.)\\1\")\npattern2 = re.compile(r\"(?P&lt;x&gt;.)(?P=x)\")\n</pre>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>When a back reference in a regex refers to a capturing group that hasn\u00e2\u20ac\u2122t been defined yet (or at all), it can never be matched and will fail with\nan <code>re.error</code> exception</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport re\npattern1 = re.compile(r\"\\1(.)\") # Noncompliant, group 1 is defined after the back reference\npattern2 = re.compile(r\"(.)\\2\") # Noncompliant, group 2 isn't defined at all\npattern3 = re.compile(r\"(.)|\\1\") # Noncompliant, group 1 and the back reference are in different branches\npattern4 = re.compile(r\"(?P&lt;x&gt;.)|(?P=x)\") # Noncompliant, group x and the back reference are in different branches\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport re\npattern1 = re.compile(r\"(.)\\1\")\npattern2 = re.compile(r\"(?P&lt;x&gt;.)(?P=x)\")\n</pre>\n\n"
        },
        {
          "id": "S5915",
          "name": "Assertions should not be made at the end of blocks expecting an exception",
          "description": "<h2>Why is this an issue?</h2>\n<p>Using <code>pytest.raises</code> or <code>unittest.TestCase.assertRaises</code> will assert that an exception is raised in the following block.\nEnding such block in an assertion means that the test can succeed with that last assertion never being executed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport pytest\ndef foo(): return 1 / 0\ndef bar(): return 42\ndef test_something():\n  with pytest.raises(ZeroDivisionError):\n    foo()\n    assert bar() == 42  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport pytest\ndef foo(): return 1 / 0\ndef bar(): return 42\ndef test_something():\n  with pytest.raises(ZeroDivisionError):\n    foo()\n  assert bar() == 42\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises\">Unittest: assertRaises</a> </li>\n  <li> <a href=\"https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions\">Pytest: assertions about expected exceptions</a>\n  </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Using <code>pytest.raises</code> or <code>unittest.TestCase.assertRaises</code> will assert that an exception is raised in the following block.\nEnding such block in an assertion means that the test can succeed with that last assertion never being executed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport pytest\ndef foo(): return 1 / 0\ndef bar(): return 42\ndef test_something():\n  with pytest.raises(ZeroDivisionError):\n    foo()\n    assert bar() == 42  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport pytest\ndef foo(): return 1 / 0\ndef bar(): return 42\ndef test_something():\n  with pytest.raises(ZeroDivisionError):\n    foo()\n  assert bar() == 42\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises\">Unittest: assertRaises</a> </li>\n  <li> <a href=\"https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions\">Pytest: assertions about expected exceptions</a>\n  </li>\n</ul>\n\n"
        },
        {
          "id": "S1192",
          "name": "String literals should not be duplicated",
          "description": "<h2>Why is this an issue?</h2>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>No issue will be raised on:</p>\n<ul>\n  <li> duplicated string in decorators </li>\n  <li> strings with less than 5 characters </li>\n  <li> strings with only letters, numbers and underscores </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>No issue will be raised on:</p>\n<ul>\n  <li> duplicated string in decorators </li>\n  <li> strings with less than 5 characters </li>\n  <li> strings with only letters, numbers and underscores </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef run():\n    prepare(\"action1\")  # Noncompliant - \"action1\" is duplicated 3 times\n    execute(\"action1\")\n    release(\"action1\")\n\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant - strings inside decorators are ignored\ndef projects():\n    pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>\n\n"
        },
        {
          "id": "S5144",
          "name": "Server-side requests should not be vulnerable to forging attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>Server-Side Request Forgery (SSRF) occurs when attackers can coerce a server to perform arbitrary requests on their behalf.<br></p>\n<p>An SSRF vulnerability can either be basic or blind, depending on whether the server\u00e2\u20ac\u2122s fetched data is directly returned in the web application\u00e2\u20ac\u2122s\nresponse.<br> The absence of the corresponding response for the coerced request on the application is not a barrier to exploitation and thus must be\ntreated in the same way as basic SSRF.</p>\n<h3>What is the potential impact?</h3>\n<p>SSRF usually results in unauthorized actions or data disclosure in the vulnerable application or on a different system it can reach. Conditional to\nwhat is reachable, remote command execution can be achieved, although it often requires chaining with further exploitations.</p>\n<p>Information disclosure is SSRF\u00e2\u20ac\u2122s core outcome. Depending on the extracted data, an attacker can perform a variety of different actions that can\nrange from low to critical severity.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Local file read to host takeover</h4>\n<p>An attacker manipulates an application into performing a local request for a sensitive file, such as <code>~/.ssh/id_rsa</code>, by using the File\nURI scheme <code>file://</code>.<br> Once in possession of the SSH keys, the attacker establishes a remote connection to the system hosting the web\napplication.</p>\n<h4>Internal Network Reconnaissance</h4>\n<p>An attacker enumerates internal accessible ports from the affected server or others to which the server can communicate by iterating over the port\nfield in the URL <code>http://127.0.0.1:{port}</code>.<br> Taking advantage of other supported URL schemas (dependent on the affected system), for\nexample, <code>gopher://127.0.0.1:3306</code>, an attacker would be able to connect to a database service and perform queries on it.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to SSRF as it opens a URL defined by untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nfrom urllib.request import urlopen\n\n@app.route('/example')\ndef example():\n    url = request.args[\"url\"]\n    urlopen(url).read() # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nfrom urllib.parse import urlparse\nfrom urllib.request import urlopen\n\nSCHEMES_ALLOWLIST = ['https']\nDOMAINS_ALLOWLIST = ['trusted1.example.com', 'trusted2.example.com']\n\n@app.route('/example')\ndef example():\n    url = request.args[\"url\"]\n    if urlparse(url).hostname in DOMAINS_ALLOWLIST and urlparse(url).scheme in SCHEMES_ALLOWLIST:\n        urlopen(url).read()\n</pre>\n<h3>How does this work?</h3>\n<h4>Pre-Approved commands</h4>\n<p>Create a list of authorized and secure URLs that you want the application to be able to request.<br> If a user input does not match an entry in\nthis list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h3>Pitfalls</h3>\n<h4>The trap of 'StartsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the SSRF vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code>https://example.commit.malicious.io</code>.</p>\n<h2>How to fix it in Requests</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to SSRF as it performs an HTTP request to a URL defined by untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom flask import request\nimport requests\n\n@app.route('/example')\ndef example():\n    url = request.args[\"url\"]\n    requests.get(url).content # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom flask import request\nimport requests\nfrom urllib.parse import urlparse\n\nDOMAINS_ALLOWLIST = ['trusted1.example.com', 'trusted2.example.com']\n\n@app.route('/example')\ndef example():\n    url = request.args[\"url\"]\n    if urlparse(url).hostname in DOMAINS_ALLOWLIST:\n        requests.get(url).content\n</pre>\n<h3>How does this work?</h3>\n<h4>Pre-Approved commands</h4>\n<p>Create a list of authorized and secure URLs that you want the application to be able to request.<br> If a user input does not match an entry in\nthis list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<p>The compliant code example uses such an approach. The <code>requests</code> library implicitly validates the scheme as it only allows\n<code>http</code> and <code>https</code> by default.</p>\n<h3>Pitfalls</h3>\n<h4>The trap of 'StartsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the SSRF vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code>https://example.commit.malicious.io</code>.</p>\n<h2>How to fix it in HTTPX</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to SSRF as it performs an HTTP request to a URL defined by untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nfrom fastapi import FastAPI\nimport httpx\n\napp = FastAPI()\n\n@app.get('/example')\ndef example(url: str):\n    r = httpx.get(url)  # Noncompliant\n    return {\"response\": r.text}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nimport httpx\nfrom urllib.parse import urlparse\n\nDOMAINS_ALLOWLIST = ['trusted1.example.com', 'trusted2.example.com']\napp = FastAPI()\n\n@app.get('/example')\ndef example(url: str):\n    if not urlparse(url).hostname in DOMAINS_ALLOWLIST:\n        return JSONResponse({\"error\": f\"URL {url} is not whitelisted.\"}, 400)\n\n    r = httpx.get(url)\n    return {\"response\": r.text}\n</pre>\n<h3>How does this work?</h3>\n<h4>Pre-Approved commands</h4>\n<p>Create a list of authorized and secure URLs that you want the application to be able to request.<br> If a user input does not match an entry in\nthis list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<p>The compliant code example uses such an approach. HTTPX implicitly validates the scheme as it only allows <code>http</code> and <code>https</code>\nby default.</p>\n<h3>Pitfalls</h3>\n<h4>The trap of 'StartsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the SSRF vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code>https://example.commit.malicious.io</code>.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\">Top 10 2021 Category A10 - Server-Side Request\n  Forgery (SSRF)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/918\">CWE-918 - Server-Side Request Forgery (SSRF)</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Server-Side Request Forgery (SSRF) occurs when attackers can coerce a server to perform arbitrary requests on their behalf.<br></p>\n<p>An SSRF vulnerability can either be basic or blind, depending on whether the server\u00e2\u20ac\u2122s fetched data is directly returned in the web application\u00e2\u20ac\u2122s\nresponse.<br> The absence of the corresponding response for the coerced request on the application is not a barrier to exploitation and thus must be\ntreated in the same way as basic SSRF.</p>\n<h3>What is the potential impact?</h3>\n<p>SSRF usually results in unauthorized actions or data disclosure in the vulnerable application or on a different system it can reach. Conditional to\nwhat is reachable, remote command execution can be achieved, although it often requires chaining with further exploitations.</p>\n<p>Information disclosure is SSRF\u00e2\u20ac\u2122s core outcome. Depending on the extracted data, an attacker can perform a variety of different actions that can\nrange from low to critical severity.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Local file read to host takeover</h4>\n<p>An attacker manipulates an application into performing a local request for a sensitive file, such as <code>~/.ssh/id_rsa</code>, by using the File\nURI scheme <code>file://</code>.<br> Once in possession of the SSH keys, the attacker establishes a remote connection to the system hosting the web\napplication.</p>\n<h4>Internal Network Reconnaissance</h4>\n<p>An attacker enumerates internal accessible ports from the affected server or others to which the server can communicate by iterating over the port\nfield in the URL <code>http://127.0.0.1:{port}</code>.<br> Taking advantage of other supported URL schemas (dependent on the affected system), for\nexample, <code>gopher://127.0.0.1:3306</code>, an attacker would be able to connect to a database service and perform queries on it.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to SSRF as it opens a URL defined by untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nfrom urllib.request import urlopen\n\n@app.route('/example')\ndef example():\n    url = request.args[\"url\"]\n    urlopen(url).read() # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nfrom urllib.parse import urlparse\nfrom urllib.request import urlopen\n\nSCHEMES_ALLOWLIST = ['https']\nDOMAINS_ALLOWLIST = ['trusted1.example.com', 'trusted2.example.com']\n\n@app.route('/example')\ndef example():\n    url = request.args[\"url\"]\n    if urlparse(url).hostname in DOMAINS_ALLOWLIST and urlparse(url).scheme in SCHEMES_ALLOWLIST:\n        urlopen(url).read()\n</pre>\n<h3>How does this work?</h3>\n<h4>Pre-Approved commands</h4>\n<p>Create a list of authorized and secure URLs that you want the application to be able to request.<br> If a user input does not match an entry in\nthis list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h3>Pitfalls</h3>\n<h4>The trap of 'StartsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the SSRF vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code>https://example.commit.malicious.io</code>.</p>\n<h2>How to fix it in Requests</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to SSRF as it performs an HTTP request to a URL defined by untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom flask import request\nimport requests\n\n@app.route('/example')\ndef example():\n    url = request.args[\"url\"]\n    requests.get(url).content # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom flask import request\nimport requests\nfrom urllib.parse import urlparse\n\nDOMAINS_ALLOWLIST = ['trusted1.example.com', 'trusted2.example.com']\n\n@app.route('/example')\ndef example():\n    url = request.args[\"url\"]\n    if urlparse(url).hostname in DOMAINS_ALLOWLIST:\n        requests.get(url).content\n</pre>\n<h3>How does this work?</h3>\n<h4>Pre-Approved commands</h4>\n<p>Create a list of authorized and secure URLs that you want the application to be able to request.<br> If a user input does not match an entry in\nthis list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<p>The compliant code example uses such an approach. The <code>requests</code> library implicitly validates the scheme as it only allows\n<code>http</code> and <code>https</code> by default.</p>\n<h3>Pitfalls</h3>\n<h4>The trap of 'StartsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the SSRF vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code>https://example.commit.malicious.io</code>.</p>\n<h2>How to fix it in HTTPX</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to SSRF as it performs an HTTP request to a URL defined by untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nfrom fastapi import FastAPI\nimport httpx\n\napp = FastAPI()\n\n@app.get('/example')\ndef example(url: str):\n    r = httpx.get(url)  # Noncompliant\n    return {\"response\": r.text}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nimport httpx\nfrom urllib.parse import urlparse\n\nDOMAINS_ALLOWLIST = ['trusted1.example.com', 'trusted2.example.com']\napp = FastAPI()\n\n@app.get('/example')\ndef example(url: str):\n    if not urlparse(url).hostname in DOMAINS_ALLOWLIST:\n        return JSONResponse({\"error\": f\"URL {url} is not whitelisted.\"}, 400)\n\n    r = httpx.get(url)\n    return {\"response\": r.text}\n</pre>\n<h3>How does this work?</h3>\n<h4>Pre-Approved commands</h4>\n<p>Create a list of authorized and secure URLs that you want the application to be able to request.<br> If a user input does not match an entry in\nthis list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<p>The compliant code example uses such an approach. HTTPX implicitly validates the scheme as it only allows <code>http</code> and <code>https</code>\nby default.</p>\n<h3>Pitfalls</h3>\n<h4>The trap of 'StartsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the SSRF vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code>https://example.commit.malicious.io</code>.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\">Top 10 2021 Category A10 - Server-Side Request\n  Forgery (SSRF)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/918\">CWE-918 - Server-Side Request Forgery (SSRF)</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S6323",
          "name": "Alternation in regular expressions should not contain empty alternatives",
          "description": "<h2>Why is this an issue?</h2>\n<p>Alternation is used to match a single regular expression out of several possible regular expressions. If one of the alternatives is empty it would\nmatch any input, which is most probably a mistake.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nre.search(r\"Jack|Peter|\", \"John\") # Noncompliant - will match an empty string\nre.search(r\"Jack||Peter\", \"John\") # Noncompliant - will match an empty string\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nre.search(r\"Jack|Peter\", \"John\") # returns false\n</pre>\n<h3>Exceptions</h3>\n<p>One could use an empty alternation to make a regular expression group optional. Rule will not report on such cases.</p>\n<pre>\nre.search(r\"mandatory(-optional|)\", \"mandatory\")\nre.search(r\"mandatory(-optional|)\", \"mandatory-optional\")\n</pre>\n<p>However, if there is a quantifier after the group the issue will be reported as using both <code>|</code> and quantifier is redundant.</p>\n<pre>\nre.search(r\"mandatory(-optional|)?\", \"mandatory-optional\") # Noncompliant - using both `|` inside the group and `?` for the group.\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Alternation is used to match a single regular expression out of several possible regular expressions. If one of the alternatives is empty it would\nmatch any input, which is most probably a mistake.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nre.search(r\"Jack|Peter|\", \"John\") # Noncompliant - will match an empty string\nre.search(r\"Jack||Peter\", \"John\") # Noncompliant - will match an empty string\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nre.search(r\"Jack|Peter\", \"John\") # returns false\n</pre>\n<h3>Exceptions</h3>\n<p>One could use an empty alternation to make a regular expression group optional. Rule will not report on such cases.</p>\n<pre>\nre.search(r\"mandatory(-optional|)\", \"mandatory\")\nre.search(r\"mandatory(-optional|)\", \"mandatory-optional\")\n</pre>\n<p>However, if there is a quantifier after the group the issue will be reported as using both <code>|</code> and quantifier is redundant.</p>\n<pre>\nre.search(r\"mandatory(-optional|)?\", \"mandatory-optional\") # Noncompliant - using both `|` inside the group and `?` for the group.\n</pre>\n\n"
        },
        {
          "id": "S4143",
          "name": "Collection content should not be replaced unconditionally",
          "description": "<h2>Why is this an issue?</h2>\n<p>Storing a value inside a collection at a given key or index and then unconditionally overwriting it without reading the initial value is a case of\na \"dead store\".</p>\n<pre>\ndef swap(mylist, index1, index2):\n    tmp = mylist[index2]\n    mylist[index2] = mylist[index1]\n    mylist[index2] = tmp  # Noncompliant\n\nlist2 = [0,1,2,3,4,5,6,7,8,9]\nlist2[3:5] = [42,42]\nlist2[3:5] = [42,42]  # Noncompliant\n\nmymap = {'a': {}}\nmymap['a']['b'] = 42\nmymap['a']['b'] = 42  # Noncompliant\n</pre>\n<p>This practice is redundant and will cause confusion for the reader. More importantly, it is often an error and not what the developer intended to\ndo.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Storing a value inside a collection at a given key or index and then unconditionally overwriting it without reading the initial value is a case of\na \"dead store\".</p>\n<pre>\ndef swap(mylist, index1, index2):\n    tmp = mylist[index2]\n    mylist[index2] = mylist[index1]\n    mylist[index2] = tmp  # Noncompliant\n\nlist2 = [0,1,2,3,4,5,6,7,8,9]\nlist2[3:5] = [42,42]\nlist2[3:5] = [42,42]  # Noncompliant\n\nmymap = {'a': {}}\nmymap['a']['b'] = 42\nmymap['a']['b'] = 42  # Noncompliant\n</pre>\n<p>This practice is redundant and will cause confusion for the reader. More importantly, it is often an error and not what the developer intended to\ndo.</p>\n\n"
        },
        {
          "id": "S3923",
          "name": "All branches in a conditional structure should not have exactly the same implementation",
          "description": "<h2>Why is this an issue?</h2>\n<p>Having all branches of an <code>if</code> chain with the same implementation indicates a problem.</p>\n<p>In the following code:</p>\n<pre>\nif b == 0:  # Noncompliant\n    do_one_more_thing()\nelif b == 1:\n    do_one_more_thing()\nelse:\n    do_one_more_thing()\n\nb = 4 if a &gt; 12 else 4  # Noncompliant\n</pre>\n<p>Either there is a copy-paste error that needs fixing or the unnecessary <code>if</code> chain needs removing.</p>\n<h3>Exceptions</h3>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>.</p>\n<pre>\nif b == 0:  # no issue, this could have been done on purpose to make the code more readable\n    do_one_more_thing()\nelif b == 1:\n    do_one_more_thing()\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Having all branches of an <code>if</code> chain with the same implementation indicates a problem.</p>\n<p>In the following code:</p>\n<pre>\nif b == 0:  # Noncompliant\n    do_one_more_thing()\nelif b == 1:\n    do_one_more_thing()\nelse:\n    do_one_more_thing()\n\nb = 4 if a &gt; 12 else 4  # Noncompliant\n</pre>\n<p>Either there is a copy-paste error that needs fixing or the unnecessary <code>if</code> chain needs removing.</p>\n<h3>Exceptions</h3>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>.</p>\n<pre>\nif b == 0:  # no issue, this could have been done on purpose to make the code more readable\n    do_one_more_thing()\nelif b == 1:\n    do_one_more_thing()\n</pre>\n\n"
        },
        {
          "id": "S2583",
          "name": "Conditionally executed code should be reachable",
          "description": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to <a\nhref=\"https://en.wikipedia.org/wiki/Unreachable_code\">unreachable code</a>. To fix this issue, either update the condition or remove the unreachable\ncode.</p>\n<h2>Why is this an issue?</h2>\n<p>Unreachable code is never executed, so it has no effect on the behaviour of the program. If it is not executed because it no longer serves a\npurpose, then it adds unnecessary complexity. Otherwise, it indicates that there is a logical error in the condition.</p>\n<h3>What is the potential impact?</h3>\n<p>Unreachable code affects maintainability. It is harder for programmers to read, understand and modify the code when some parts are unreachable. If\nthe code should be reachable instead, then the program may not always behave as intended.</p>\n<h3>Exceptions</h3>\n<p>This rule will not raise an issue when</p>\n<ul>\n  <li> The condition to reach the dead code is a boolean literal. </li>\n  <li> The unreachable code is a simple statement, such as <code>pass</code>. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>You should first decide whether the unreachable code is useful. If it is, then you should understand why the condition that leads to it is always\nfalse, and correct logical errors. Otherwise, the code should be removed along with the condition.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo(a, b):\n    flag = True\n\n    if (a and not a):  # Noncompliant\n        doSomething()  # Never executed\n\n    if (flag): # Noncompliant\n        return \"Result 1\"\n    return \"Result 2\" # Never executed\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo(a, b):\n    if (a and not b):\n        doSomething()\n\n    return \"Result 1\"\n</pre>\n<h3>How does this work?</h3>\n<p>The first condition is always false. In this case, we decide that the call to <code>doSomething</code> is useful. The problem is then a bug in the\ncondition; for example, using <code>a</code> instead of <code>b</code>.</p>\n<p>The second condition is always true. Here, we decided that the second return statement is not useful anymore. There may have been code manipulating\nthe variable <code>flag</code> that was previously removed. We can remove the unreachable code, the condition and the variable.</p>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/570\">CWE-570 - Expression is Always False</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/571\">CWE-571 - Expression is Always True</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Unreachable_code\">Unreachable code</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to <a\nhref=\"https://en.wikipedia.org/wiki/Unreachable_code\">unreachable code</a>. To fix this issue, either update the condition or remove the unreachable\ncode.</p>\n<h2>Why is this an issue?</h2>\n<p>Unreachable code is never executed, so it has no effect on the behaviour of the program. If it is not executed because it no longer serves a\npurpose, then it adds unnecessary complexity. Otherwise, it indicates that there is a logical error in the condition.</p>\n<h3>What is the potential impact?</h3>\n<p>Unreachable code affects maintainability. It is harder for programmers to read, understand and modify the code when some parts are unreachable. If\nthe code should be reachable instead, then the program may not always behave as intended.</p>\n<h3>Exceptions</h3>\n<p>This rule will not raise an issue when</p>\n<ul>\n  <li> The condition to reach the dead code is a boolean literal. </li>\n  <li> The unreachable code is a simple statement, such as <code>pass</code>. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>You should first decide whether the unreachable code is useful. If it is, then you should understand why the condition that leads to it is always\nfalse, and correct logical errors. Otherwise, the code should be removed along with the condition.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef foo(a, b):\n    flag = True\n\n    if (a and not a):  # Noncompliant\n        doSomething()  # Never executed\n\n    if (flag): # Noncompliant\n        return \"Result 1\"\n    return \"Result 2\" # Never executed\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef foo(a, b):\n    if (a and not b):\n        doSomething()\n\n    return \"Result 1\"\n</pre>\n<h3>How does this work?</h3>\n<p>The first condition is always false. In this case, we decide that the call to <code>doSomething</code> is useful. The problem is then a bug in the\ncondition; for example, using <code>a</code> instead of <code>b</code>.</p>\n<p>The second condition is always true. Here, we decided that the second return statement is not useful anymore. There may have been code manipulating\nthe variable <code>flag</code> that was previously removed. We can remove the unreachable code, the condition and the variable.</p>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/570\">CWE-570 - Expression is Always False</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/571\">CWE-571 - Expression is Always True</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Unreachable_code\">Unreachable code</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1862",
          "name": "Related \"if/else if\" statements should not have the same condition",
          "description": "<h2>Why is this an issue?</h2>\n<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it\u00e2\u20ac\u2122s simply dead code and\nat worst, it\u00e2\u20ac\u2122s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 1:            # Noncompliant\n  moveWindowToTheBackground()\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 3:\n  moveWindowToTheBackground()\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it\u00e2\u20ac\u2122s simply dead code and\nat worst, it\u00e2\u20ac\u2122s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 1:            # Noncompliant\n  moveWindowToTheBackground()\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 3:\n  moveWindowToTheBackground()\n</pre>\n\n"
        },
        {
          "id": "S1764",
          "name": "Identical expressions should not be used on both sides of a binary operator",
          "description": "<h2>Why is this an issue?</h2>\n<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>Note that this rule will raise issues on <code>a == a</code> and <code>a != a</code> expressions which are sometime used to detect <code>NaN</code>\nvalues. It is recommended to use instead <a href=\"https://docs.python.org/3/library/math.html#math.isnan\"><code>math.isnan</code></a> or an equivalent\nfunction. This will improve code readability.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 / 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n</pre>\n<h3>Exceptions</h3>\n<p>The following are ignored:</p>\n<ul>\n  <li> The expression <code>1 &lt;&lt; 1</code> </li>\n</ul>\n<h2>Resources</h2>\n<ul>\n  <li> {rule:python:S1656} - Implements a check on <code>=</code>. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>Note that this rule will raise issues on <code>a == a</code> and <code>a != a</code> expressions which are sometime used to detect <code>NaN</code>\nvalues. It is recommended to use instead <a href=\"https://docs.python.org/3/library/math.html#math.isnan\"><code>math.isnan</code></a> or an equivalent\nfunction. This will improve code readability.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 / 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n</pre>\n<h3>Exceptions</h3>\n<p>The following are ignored:</p>\n<ul>\n  <li> The expression <code>1 &lt;&lt; 1</code> </li>\n</ul>\n<h2>Resources</h2>\n<ul>\n  <li> {rule:python:S1656} - Implements a check on <code>=</code>. </li>\n</ul>\n\n"
        },
        {
          "id": "S6537",
          "name": "Octal escape sequences should not be used in regular expressions",
          "description": "<p>Octal escape sequences, when used in regular expressions, can easily be mistaken for backreferences. When the use of such sequence is intentional,\nit is generally better to replace them with Unicode or hexadecimal sequence to avoid any ambiguity.</p>\n<h2>Why is this an issue?</h2>\n<p>Using octal escapes in regular expressions can create confusion with backreferences. Octal escapes are sequences of digits that represent a\ncharacter in the ASCII table, and they are sometimes used to represent special characters in regular expressions. However, they can be easily mistaken\nfor backreferences, which are also sequences of digits that represent previously captured groups. This confusion can lead to unexpected results or\nerrors in the regular expression.</p>\n<h2>How to fix it</h2>\n<p>Instead of using octal escapes, it is recommended to use other ways to represent special characters in regular expressions. For example, you can\nuse Unicode escape sequences, hexadecimal escape sequences or character classes. By using these alternatives, you can avoid the confusion with\nbackreferences and improve the readability of your regular expressions.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nimport re\n\nmatch = re.match(r\"\\101\", \"A\")\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nimport re\n\nmatch = re.match(r\"\\x41\", \"A\")\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<p>Octal escape sequences, when used in regular expressions, can easily be mistaken for backreferences. When the use of such sequence is intentional,\nit is generally better to replace them with Unicode or hexadecimal sequence to avoid any ambiguity.</p>\n<h2>Why is this an issue?</h2>\n<p>Using octal escapes in regular expressions can create confusion with backreferences. Octal escapes are sequences of digits that represent a\ncharacter in the ASCII table, and they are sometimes used to represent special characters in regular expressions. However, they can be easily mistaken\nfor backreferences, which are also sequences of digits that represent previously captured groups. This confusion can lead to unexpected results or\nerrors in the regular expression.</p>\n<h2>How to fix it</h2>\n<p>Instead of using octal escapes, it is recommended to use other ways to represent special characters in regular expressions. For example, you can\nuse Unicode escape sequences, hexadecimal escape sequences or character classes. By using these alternatives, you can avoid the confusion with\nbackreferences and improve the readability of your regular expressions.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nimport re\n\nmatch = re.match(r\"\\101\", \"A\")\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nimport re\n\nmatch = re.match(r\"\\x41\", \"A\")\n</pre>\n\n"
        },
        {
          "id": "S6397",
          "name": "Character classes in regular expressions should not contain only one character",
          "description": "<h2>Why is this an issue?</h2>\n<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If a character class contains only one character, the effect is the same as just writing the character without a character\nclass.</p>\n<p>Thus, having only one character in a character class is usually a simple oversight that remained after removing other characters of the class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"a[b]c\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"abc\"\n</pre>\n<h3>Exceptions</h3>\n<p>This rule does not raise when the character inside the class is a metacharacter. This notation is sometimes used to avoid escaping (e.g.,\n<code>[.]{3}</code> to match three dots).</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If a character class contains only one character, the effect is the same as just writing the character without a character\nclass.</p>\n<p>Thus, having only one character in a character class is usually a simple oversight that remained after removing other characters of the class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"a[b]c\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"abc\"\n</pre>\n<h3>Exceptions</h3>\n<p>This rule does not raise when the character inside the class is a metacharacter. This notation is sometimes used to avoid escaping (e.g.,\n<code>[.]{3}</code> to match three dots).</p>\n\n"
        },
        {
          "id": "S6395",
          "name": "Non-capturing groups without quantifier should not be used",
          "description": "<h2>Why is this an issue?</h2>\n<p>Sub-patterns can be wrapped by parentheses to build a group. This enables to restrict alternations, back reference the group or apply quantifier to\nthe sub-pattern.</p>\n<p>If this group should not be part of the match result or if no reference to this group is required, a non-capturing group can be created by adding\n<code>?:</code> behind the opening parenthesis.</p>\n<p>However, if this non-capturing group does not have a quantifier, or does not wrap an alternation, then imaging this group is redundant.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"(?:number)\\d{2}\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"number\\d{2}\"\nr\"(?:number)?\\d{2}\"\n</pre>\n<h3>Exceptions</h3>\n<p>This rule does not report an issue if the non-capturing group is an alternation.</p>\n<pre>\nr\"(?:number|string)\"\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Sub-patterns can be wrapped by parentheses to build a group. This enables to restrict alternations, back reference the group or apply quantifier to\nthe sub-pattern.</p>\n<p>If this group should not be part of the match result or if no reference to this group is required, a non-capturing group can be created by adding\n<code>?:</code> behind the opening parenthesis.</p>\n<p>However, if this non-capturing group does not have a quantifier, or does not wrap an alternation, then imaging this group is redundant.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"(?:number)\\d{2}\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"number\\d{2}\"\nr\"(?:number)?\\d{2}\"\n</pre>\n<h3>Exceptions</h3>\n<p>This rule does not report an issue if the non-capturing group is an alternation.</p>\n<pre>\nr\"(?:number|string)\"\n</pre>\n\n"
        },
        {
          "id": "S6326",
          "name": "Regular expressions should not contain multiple spaces",
          "description": "<h2>Why is this an issue?</h2>\n<p>Multiple spaces in a regular expression can make it hard to tell how many spaces should be matched. It\u00e2\u20ac\u2122s more readable to use only one space and\nthen indicate with a quantifier how many spaces are expected.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"Hello,   world!\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"Hello, {3}world!\"\n</pre>\n<h3>Exceptions</h3>\n<p>If the extended modifier <code>re.X</code> or <code>re.VERBOSE</code> is set, whitespaces are ignored. In this case no issue should be triggered,\nbecause the whitespaces may be intended to improve readability.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Multiple spaces in a regular expression can make it hard to tell how many spaces should be matched. It\u00e2\u20ac\u2122s more readable to use only one space and\nthen indicate with a quantifier how many spaces are expected.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"Hello,   world!\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"Hello, {3}world!\"\n</pre>\n<h3>Exceptions</h3>\n<p>If the extended modifier <code>re.X</code> or <code>re.VERBOSE</code> is set, whitespaces are ignored. In this case no issue should be triggered,\nbecause the whitespaces may be intended to improve readability.</p>\n\n"
        },
        {
          "id": "S5799",
          "name": "Implicit string and byte concatenations should not be confusing",
          "description": "<p>This rule raises an issue when strings or bytes are concatenated implicitly.</p>\n<h2>Why is this an issue?</h2>\n<p>Python concatenates adjacent string or byte literals at compile time. It means that <code>\"a\" \"b\"</code> is equivalent to <code>\"ab\"</code>. This\nis sometimes used to split a long string on multiple lines. However an implicit string concatenation can also be very confusing. In the following\ncontexts it might indicate that a comma was forgotten:</p>\n<ul>\n  <li> when the two strings are on the same line. This could be interpreted as an incorrectly formatted tuple (parentheses are not mandatory to create\n  a tuple, only the comma is). </li>\n  <li> when the strings are in a list, a set or a tuple. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef func():\n    return \"item1\" \"item2\"  # Noncompliant: a comma is missing to return a tuple.\n\n[\"1\"  # Noncompliant: a comma is missing.\n \"2\",\n \"a very\"  # Noncompliant: a \"+\" is missing.\n \"long string\"]\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef func():\n    return \"item1\", \"item2\"\n\n[\"1\",\n \"2\",\n \"a very\" +\n \"long string\"]\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will not raise any issues when there is a visible reason for the string concatenation:</p>\n<ul>\n  <li> when the quotes used for both strings are different. This can be used to avoid escaping quotes. </li>\n  <li> when the strings or bytes have different prefixes, i.e. \"f\" for f-strings, \"r\" for raw, \"u\" for unicode and no prefix for normal strings. </li>\n  <li> when strings are visibly split to avoid long lines of code, i.e. when the first string ends with a space, punctuation or <code>\\n</code>. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule raises an issue when strings or bytes are concatenated implicitly.</p>\n<h2>Why is this an issue?</h2>\n<p>Python concatenates adjacent string or byte literals at compile time. It means that <code>\"a\" \"b\"</code> is equivalent to <code>\"ab\"</code>. This\nis sometimes used to split a long string on multiple lines. However an implicit string concatenation can also be very confusing. In the following\ncontexts it might indicate that a comma was forgotten:</p>\n<ul>\n  <li> when the two strings are on the same line. This could be interpreted as an incorrectly formatted tuple (parentheses are not mandatory to create\n  a tuple, only the comma is). </li>\n  <li> when the strings are in a list, a set or a tuple. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef func():\n    return \"item1\" \"item2\"  # Noncompliant: a comma is missing to return a tuple.\n\n[\"1\"  # Noncompliant: a comma is missing.\n \"2\",\n \"a very\"  # Noncompliant: a \"+\" is missing.\n \"long string\"]\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef func():\n    return \"item1\", \"item2\"\n\n[\"1\",\n \"2\",\n \"a very\" +\n \"long string\"]\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will not raise any issues when there is a visible reason for the string concatenation:</p>\n<ul>\n  <li> when the quotes used for both strings are different. This can be used to avoid escaping quotes. </li>\n  <li> when the strings or bytes have different prefixes, i.e. \"f\" for f-strings, \"r\" for raw, \"u\" for unicode and no prefix for normal strings. </li>\n  <li> when strings are visibly split to avoid long lines of code, i.e. when the first string ends with a space, punctuation or <code>\\n</code>. </li>\n</ul>\n\n"
        },
        {
          "id": "S4144",
          "name": "Functions and methods should not have identical implementations",
          "description": "<h2>Why is this an issue?</h2>\n<p>Two functions having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    code = \"secret\"\n\n    def calculate_code(self):\n        self.do_the_thing()\n        return self.__class__.code\n\n    def get_name(self):  # Noncompliant: duplicates calculate_code\n        self.do_the_thing()\n        return self.__class__.code\n\n    def do_the_thing(self):\n        pass  # on purpose\n</pre>\n<p>If the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both functions call the same\nfunction or by having one implementation invoke the other.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    code = \"secret\"\n\n    def calculate_code(self):\n        self.do_the_thing()\n        return self.__class__.code\n\n    def get_name(self):  # Intent is clear\n        return self.calculate_code()\n\n    def do_the_thing(self):\n        pass  # on purpose\n</pre>\n<h3>Exceptions</h3>\n<p>No issue will be raised on empty methods/functions and methods/functions with only one line of code.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Two functions having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass:\n    code = \"secret\"\n\n    def calculate_code(self):\n        self.do_the_thing()\n        return self.__class__.code\n\n    def get_name(self):  # Noncompliant: duplicates calculate_code\n        self.do_the_thing()\n        return self.__class__.code\n\n    def do_the_thing(self):\n        pass  # on purpose\n</pre>\n<p>If the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both functions call the same\nfunction or by having one implementation invoke the other.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass:\n    code = \"secret\"\n\n    def calculate_code(self):\n        self.do_the_thing()\n        return self.__class__.code\n\n    def get_name(self):  # Intent is clear\n        return self.calculate_code()\n\n    def do_the_thing(self):\n        pass  # on purpose\n</pre>\n<h3>Exceptions</h3>\n<p>No issue will be raised on empty methods/functions and methods/functions with only one line of code.</p>\n\n"
        },
        {
          "id": "S3358",
          "name": "Conditional expressions should not be nested",
          "description": "<h2>Why is this an issue?</h2>\n<p>Nested conditionals are hard to read and can make the order of operations complex to understand.</p>\n<pre>\nclass Job:\n    @property\n    def readable_status(self):\n        return \"Running\" if job.is_running else \"Failed\" if job.errors else \"Succeeded\"  # Noncompliant\n</pre>\n<p>Instead, use another line to express the nested operation in a separate statement.</p>\n<pre>\nclass Job:\n    @property\n    def readable_status(self):\n        if job.is_running:\n            return \"Running\"\n        return \"Failed\" if job.errors else \"Succeeded\"\n</pre>\n<h3>Exceptions</h3>\n<p>No issue is raised on conditional expressions in comprehensions.</p>\n<pre>\njob_statuses = [\"Running\" if job.is_running else \"Failed\" if job.errors else \"Succeeded\" for job in jobs]  # Compliant by exception\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Nested conditionals are hard to read and can make the order of operations complex to understand.</p>\n<pre>\nclass Job:\n    @property\n    def readable_status(self):\n        return \"Running\" if job.is_running else \"Failed\" if job.errors else \"Succeeded\"  # Noncompliant\n</pre>\n<p>Instead, use another line to express the nested operation in a separate statement.</p>\n<pre>\nclass Job:\n    @property\n    def readable_status(self):\n        if job.is_running:\n            return \"Running\"\n        return \"Failed\" if job.errors else \"Succeeded\"\n</pre>\n<h3>Exceptions</h3>\n<p>No issue is raised on conditional expressions in comprehensions.</p>\n<pre>\njob_statuses = [\"Running\" if job.is_running else \"Failed\" if job.errors else \"Succeeded\" for job in jobs]  # Compliant by exception\n</pre>\n\n"
        },
        {
          "id": "S2761",
          "name": "Doubled prefix operators \"not\" and \"~\" should not be used",
          "description": "<h2>Why is this an issue?</h2>\n<p>The repetition of a prefix operator (<code>not</code> or <code>~</code>) is usually a typo. The second operator invalidates the first one:</p>\n<pre>\na = False\nb = ~~a # Noncompliant: equivalent to \"a\"\n</pre>\n<p>While calling <code>not</code> twice is equivalent to calling the <code>bool()</code> built-in function, the latter increases the code readability,\nso it should be preferred.</p>\n<pre>\na = 0\n\nb = not not a # Noncompliant: use bool()\n</pre>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue if the <code>~</code> function is overloaded in a customized class, as it is assumed to be the expected usage.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>The repetition of a prefix operator (<code>not</code> or <code>~</code>) is usually a typo. The second operator invalidates the first one:</p>\n<pre>\na = False\nb = ~~a # Noncompliant: equivalent to \"a\"\n</pre>\n<p>While calling <code>not</code> twice is equivalent to calling the <code>bool()</code> built-in function, the latter increases the code readability,\nso it should be preferred.</p>\n<pre>\na = 0\n\nb = not not a # Noncompliant: use bool()\n</pre>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue if the <code>~</code> function is overloaded in a customized class, as it is assumed to be the expected usage.</p>\n\n"
        },
        {
          "id": "S2589",
          "name": "Boolean expressions should not be gratuitous",
          "description": "<p>Gratuitous boolean expressions are conditions that do not change the evaluation of a program. This issue can indicate logical errors and affect the\ncorrectness of an application, as well as its maintainability.</p>\n<h2>Why is this an issue?</h2>\n<p>Control flow constructs like <code>if</code>-statements allow the programmer to direct the flow of a program depending on a boolean expression.\nHowever, if the condition is always true or always false, only one of the branches will ever be executed. In that case, the control flow construct and\nthe condition no longer serve a purpose; they become <em>gratuitous</em>.</p>\n<h3>What is the potential impact?</h3>\n<p>The presence of gratuitous conditions can indicate a logical error. For example, the programmer <em>intended</em> to have the program branch into\ndifferent paths but made a mistake when formulating the branching condition. In this case, this issue might result in a bug and thus affect the\nreliability of the application. For instance, it might lead to the computation of incorrect results.</p>\n<p>Additionally, gratuitous conditions and control flow constructs introduce unnecessary complexity. The source code becomes harder to understand, and\nthus, the application becomes more difficult to maintain.</p>\n<h2>How to fix it</h2>\n<p>Gratuitous boolean expressions are suspicious and should be carefully removed from the code.</p>\n<p>First, the boolean expression in question should be closely inspected for logical errors. If a mistake was made, it can be corrected so the\ncondition is no longer gratuitous.</p>\n<p>If it becomes apparent that the condition is actually unnecessary, it can be removed. The associated control flow construct (e.g., the\n<code>if</code>-statement containing the condition) will be adapted or even removed, leaving only the necessary branches.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef f(b):\n    a = True\n    if a:  # Noncompliant\n        do_something()\n\n    if a and b:  # Noncompliant; \"a\" is always \"True\"\n        do_something_else()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef f(b):\n    do_something()\n\n    if b:\n        do_something_else()\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\ndef f(a, b):\n    if a is None and b is None:\n        do_something()\n    elif a is not None or b is not None: # Noncompliant\n        do_something_else()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\ndef f(a, b):\n    if a is None and b is None:\n        do_something()\n    else:\n        do_something_else()\n</pre>\n<h3>How does this work?</h3>\n<p>In the first example, the gratuitous condition <code>a</code> is simply <code>True</code>. Hence, the first <code>if</code>-statement can be\nremoved, as <code>do_something()</code> is always executed. Additionally, the second <code>if</code>-statement can be simplified since the execution\nof <code>do_something_else()</code> actually only depends on <code>b</code>.</p>\n<p>In the second example, the condition on the <code>elif</code>-branch is gratuitous because it is a logical consequence of a condition that already\nhas been confirmed to hold: The condition of the <code>elif</code>-branch is only evaluated if the condition on the <code>if</code>-branch evaluates\nto <code>False</code>. If that condition is <code>False</code>, then as a consequence, at least one of <code>a</code> or <code>b</code> is not\n<code>None</code>. This is exactly the circumstance that is formalized by the second condition. Thus it always evaluates to <code>True</code> when\nchecked. Therefore, the <code>elif</code>-branch can be simplified to an <code>else</code>-branch without a condition.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/571\">CWE-571 - Expression is Always True</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/570\">CWE-570 - Expression is Always False</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Gratuitous boolean expressions are conditions that do not change the evaluation of a program. This issue can indicate logical errors and affect the\ncorrectness of an application, as well as its maintainability.</p>\n<h2>Why is this an issue?</h2>\n<p>Control flow constructs like <code>if</code>-statements allow the programmer to direct the flow of a program depending on a boolean expression.\nHowever, if the condition is always true or always false, only one of the branches will ever be executed. In that case, the control flow construct and\nthe condition no longer serve a purpose; they become <em>gratuitous</em>.</p>\n<h3>What is the potential impact?</h3>\n<p>The presence of gratuitous conditions can indicate a logical error. For example, the programmer <em>intended</em> to have the program branch into\ndifferent paths but made a mistake when formulating the branching condition. In this case, this issue might result in a bug and thus affect the\nreliability of the application. For instance, it might lead to the computation of incorrect results.</p>\n<p>Additionally, gratuitous conditions and control flow constructs introduce unnecessary complexity. The source code becomes harder to understand, and\nthus, the application becomes more difficult to maintain.</p>\n<h2>How to fix it</h2>\n<p>Gratuitous boolean expressions are suspicious and should be carefully removed from the code.</p>\n<p>First, the boolean expression in question should be closely inspected for logical errors. If a mistake was made, it can be corrected so the\ncondition is no longer gratuitous.</p>\n<p>If it becomes apparent that the condition is actually unnecessary, it can be removed. The associated control flow construct (e.g., the\n<code>if</code>-statement containing the condition) will be adapted or even removed, leaving only the necessary branches.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef f(b):\n    a = True\n    if a:  # Noncompliant\n        do_something()\n\n    if a and b:  # Noncompliant; \"a\" is always \"True\"\n        do_something_else()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef f(b):\n    do_something()\n\n    if b:\n        do_something_else()\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\ndef f(a, b):\n    if a is None and b is None:\n        do_something()\n    elif a is not None or b is not None: # Noncompliant\n        do_something_else()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\ndef f(a, b):\n    if a is None and b is None:\n        do_something()\n    else:\n        do_something_else()\n</pre>\n<h3>How does this work?</h3>\n<p>In the first example, the gratuitous condition <code>a</code> is simply <code>True</code>. Hence, the first <code>if</code>-statement can be\nremoved, as <code>do_something()</code> is always executed. Additionally, the second <code>if</code>-statement can be simplified since the execution\nof <code>do_something_else()</code> actually only depends on <code>b</code>.</p>\n<p>In the second example, the condition on the <code>elif</code>-branch is gratuitous because it is a logical consequence of a condition that already\nhas been confirmed to hold: The condition of the <code>elif</code>-branch is only evaluated if the condition on the <code>if</code>-branch evaluates\nto <code>False</code>. If that condition is <code>False</code>, then as a consequence, at least one of <code>a</code> or <code>b</code> is not\n<code>None</code>. This is exactly the circumstance that is formalized by the second condition. Thus it always evaluates to <code>True</code> when\nchecked. Therefore, the <code>elif</code>-branch can be simplified to an <code>else</code>-branch without a condition.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/571\">CWE-571 - Expression is Always True</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/570\">CWE-570 - Expression is Always False</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1871",
          "name": "Two branches in a conditional structure should not have exactly the same implementation",
          "description": "<h2>Why is this an issue?</h2>\n<p>When the same code is duplicated in two or more separate branches of a conditional, it can make the code harder to understand, maintain, and can\npotentially introduce bugs if one instance of the code is changed but others are not.</p>\n<p>Having two branches in the same <code>if</code> structure with the same implementation is at best duplicate code, and at worst a coding error.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif 0 &lt;= a &lt; 10:\n    do_first()\n    do_second()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_first()         # Noncompliant; duplicates first condition\n    do_second()\n</pre>\n<p>If the same logic is needed for both instances, then the conditions should be combined.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (0 &lt;= a &lt; 10) or (20 &lt;= a &lt; 50):\n    do_first()\n    do_second()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\n</pre>\n<h3>Exceptions</h3>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored.</p>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_first()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_first()         # no issue, usually this is done on purpose to increase the readability\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s when all branches have the same single line of code. In the\ncase of <code>if</code> chains with <code>else</code>-s rule {rule:python:S3923} raises a bug.</p>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_first()\nelif 20 &lt;= a &lt; 50:\n    do_first()         # Noncompliant, this might have been done on purpose but probably not\n</pre>\n<h2>Resources</h2>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S3923} - All branches in a conditional structure should not have exactly the same implementation </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>When the same code is duplicated in two or more separate branches of a conditional, it can make the code harder to understand, maintain, and can\npotentially introduce bugs if one instance of the code is changed but others are not.</p>\n<p>Having two branches in the same <code>if</code> structure with the same implementation is at best duplicate code, and at worst a coding error.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif 0 &lt;= a &lt; 10:\n    do_first()\n    do_second()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_first()         # Noncompliant; duplicates first condition\n    do_second()\n</pre>\n<p>If the same logic is needed for both instances, then the conditions should be combined.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (0 &lt;= a &lt; 10) or (20 &lt;= a &lt; 50):\n    do_first()\n    do_second()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\n</pre>\n<h3>Exceptions</h3>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored.</p>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_first()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_first()         # no issue, usually this is done on purpose to increase the readability\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s when all branches have the same single line of code. In the\ncase of <code>if</code> chains with <code>else</code>-s rule {rule:python:S3923} raises a bug.</p>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_first()\nelif 20 &lt;= a &lt; 50:\n    do_first()         # Noncompliant, this might have been done on purpose but probably not\n</pre>\n<h2>Resources</h2>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S3923} - All branches in a conditional structure should not have exactly the same implementation </li>\n</ul>\n\n"
        },
        {
          "id": "S1854",
          "name": "Unused assignments should be removed",
          "description": "<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don\u00e2\u20ac\u2122t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program\u00e2\u20ac\u2122s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>None</code>, <code>True</code>, <code>False</code> and\n<code>\"\"</code>. No issue will be raised on unpacked variables.</p>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef func(a, b, compute):\n    i = a + b  # Noncompliant; calculation result not used before value is overwritten\n    i = compute()\n    return i\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef func(a, b, compute):\n    i = a + b\n    i += compute()\n    return i\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S1763} - All code should be reachable </li>\n  <li> {rule:python:S3516} - Functions returns should not be invariant </li>\n  <li> {rule:python:S3626} - Jump statements should not be redundant </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don\u00e2\u20ac\u2122t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program\u00e2\u20ac\u2122s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>None</code>, <code>True</code>, <code>False</code> and\n<code>\"\"</code>. No issue will be raised on unpacked variables.</p>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef func(a, b, compute):\n    i = a + b  # Noncompliant; calculation result not used before value is overwritten\n    i = compute()\n    return i\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef func(a, b, compute):\n    i = a + b\n    i += compute()\n    return i\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:python:S1763} - All code should be reachable </li>\n  <li> {rule:python:S3516} - Functions returns should not be invariant </li>\n  <li> {rule:python:S3626} - Jump statements should not be redundant </li>\n</ul>\n\n"
        },
        {
          "id": "S107",
          "name": "Functions, methods and lambdas should not have too many parameters",
          "description": "<h2>Why is this an issue?</h2>\n<p>Functions, methods, or lambdas with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep\ntrack of their position.</p>\n<pre>\ndef set_coordinates(x1, y1, z1, x2, y2, z2): # Noncompliant\n    # ...\n</pre>\n<p>The solution can be to:</p>\n<ul>\n  <li> Split the function, method, or lambda into smaller ones </li>\n</ul>\n<pre>\n# Each function does a part of what the original set_coordinates function was doing, so confusion risks are lower\ndef set_origin(x, y, z):\n   # ...\n\ndef set_size(width, height, depth):\n   # ...\n</pre>\n<ul>\n  <li> Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain </li>\n</ul>\n<pre>\n@dataclass\nclass Point: # In geometry, Point is a logical structure to group data\n    x: int\n    y: int\n    z: int\n\ndef set_coordinates(p1: Point, p2: Point):\n    # ...\n</pre>\n<p>This rule raises an issue when a function, a method, or a lambda has more parameters than the provided threshold.</p>\n<h3>Exceptions</h3>\n<p>The first argument of non-static methods, i.e., <code>self</code> or <code>cls</code>, is not counted as it is mandatory and passed\nautomatically.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Functions, methods, or lambdas with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep\ntrack of their position.</p>\n<pre>\ndef set_coordinates(x1, y1, z1, x2, y2, z2): # Noncompliant\n    # ...\n</pre>\n<p>The solution can be to:</p>\n<ul>\n  <li> Split the function, method, or lambda into smaller ones </li>\n</ul>\n<pre>\n# Each function does a part of what the original set_coordinates function was doing, so confusion risks are lower\ndef set_origin(x, y, z):\n   # ...\n\ndef set_size(width, height, depth):\n   # ...\n</pre>\n<ul>\n  <li> Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain </li>\n</ul>\n<pre>\n@dataclass\nclass Point: # In geometry, Point is a logical structure to group data\n    x: int\n    y: int\n    z: int\n\ndef set_coordinates(p1: Point, p2: Point):\n    # ...\n</pre>\n<p>This rule raises an issue when a function, a method, or a lambda has more parameters than the provided threshold.</p>\n<h3>Exceptions</h3>\n<p>The first argument of non-static methods, i.e., <code>self</code> or <code>cls</code>, is not counted as it is mandatory and passed\nautomatically.</p>\n\n"
        },
        {
          "id": "S5122",
          "name": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
          "description": "<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269\">CVE-2018-0269</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460\">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don\u00e2\u20ac\u2122t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\"><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Django:</p>\n<pre>\nCORS_ORIGIN_ALLOW_ALL = True # Sensitive\n</pre>\n<p>Flask:</p>\n<pre>\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\", \"send_wildcard\": \"True\"}}) # Sensitive\n</pre>\n<p>User-controlled origin:</p>\n<pre>\norigin = request.headers['ORIGIN']\nresp = Response()\nresp.headers['Access-Control-Allow-Origin'] = origin # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Django:</p>\n<pre>\nCORS_ORIGIN_ALLOW_ALL = False # Compliant\n</pre>\n<p>Flask:</p>\n<pre>\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\", \"send_wildcard\": \"False\"}}) # Compliant\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\norigin = request.headers['ORIGIN']\nresp = Response()\nif origin in TRUSTED_ORIGINS:\n   resp.headers['Access-Control-Allow-Origin'] = origin\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">developer.mozilla.org</a> - Same origin policy </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/346\">CWE-346 - Origin Validation Error</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/942\">CWE-942 - Overly Permissive Cross-domain Whitelist</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269\">CVE-2018-0269</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460\">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don\u00e2\u20ac\u2122t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\"><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Django:</p>\n<pre>\nCORS_ORIGIN_ALLOW_ALL = True # Sensitive\n</pre>\n<p>Flask:</p>\n<pre>\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\", \"send_wildcard\": \"True\"}}) # Sensitive\n</pre>\n<p>User-controlled origin:</p>\n<pre>\norigin = request.headers['ORIGIN']\nresp = Response()\nresp.headers['Access-Control-Allow-Origin'] = origin # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Django:</p>\n<pre>\nCORS_ORIGIN_ALLOW_ALL = False # Compliant\n</pre>\n<p>Flask:</p>\n<pre>\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\", \"send_wildcard\": \"False\"}}) # Compliant\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\norigin = request.headers['ORIGIN']\nresp = Response()\nif origin in TRUSTED_ORIGINS:\n   resp.headers['Access-Control-Allow-Origin'] = origin\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">developer.mozilla.org</a> - Same origin policy </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/346\">CWE-346 - Origin Validation Error</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/942\">CWE-942 - Overly Permissive Cross-domain Whitelist</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S4507",
          "name": "Delivering code in production with debug features activated is security-sensitive",
          "description": "<p>Development tools and frameworks usually have options to make debugging easier for developers. Although these features are useful during\ndevelopment, they should never be enabled for applications deployed in production. Debug instructions or error messages can leak detailed information\nabout the system, like the application\u00e2\u20ac\u2122s path or file names.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The code or configuration enabling the application debug features is deployed on production servers or distributed to end users. </li>\n  <li> The application runs by default with debug features activated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Do not enable debugging features on production servers or applications distributed to end users.</p>\n<h2>Sensitive Code Example</h2>\n<p>Django application startup:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom django.conf import settings\n\nsettings.configure(DEBUG=True)  # Sensitive when set to True\nsettings.configure(DEBUG_PROPAGATE_EXCEPTIONS=True)  # Sensitive when set to True\n\ndef custom_config(config):\n    settings.configure(default_settings=config, DEBUG=True)  # Sensitive\n</pre>\n<p>Inside <code>settings.py</code> or <code>global_settings.py</code>, which are the default configuration files for a Django application:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nDEBUG = True  # Sensitive\nDEBUG_PROPAGATE_EXCEPTIONS = True  # Sensitive\n</pre>\n<p>Flask application startup:</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfrom flask import Flask\n\napp = Flask()\napp.debug = True  # Sensitive\napp.run(debug=True)  # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom django.conf import settings\n\nsettings.configure(DEBUG=False)\nsettings.configure(DEBUG_PROPAGATE_EXCEPTIONS=False)\n\ndef custom_config(config):\n    settings.configure(default_settings=config, DEBUG=False)\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nDEBUG = False\nDEBUG_PROPAGATE_EXCEPTIONS = False\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nfrom flask import Flask\n\napp = Flask()\napp.debug = False\napp.run(debug=False)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/489\">CWE-489 - Active Debug Code</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/215\">CWE-215 - Information Exposure Through Debug Information</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>Development tools and frameworks usually have options to make debugging easier for developers. Although these features are useful during\ndevelopment, they should never be enabled for applications deployed in production. Debug instructions or error messages can leak detailed information\nabout the system, like the application\u00e2\u20ac\u2122s path or file names.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The code or configuration enabling the application debug features is deployed on production servers or distributed to end users. </li>\n  <li> The application runs by default with debug features activated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Do not enable debugging features on production servers or applications distributed to end users.</p>\n<h2>Sensitive Code Example</h2>\n<p>Django application startup:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom django.conf import settings\n\nsettings.configure(DEBUG=True)  # Sensitive when set to True\nsettings.configure(DEBUG_PROPAGATE_EXCEPTIONS=True)  # Sensitive when set to True\n\ndef custom_config(config):\n    settings.configure(default_settings=config, DEBUG=True)  # Sensitive\n</pre>\n<p>Inside <code>settings.py</code> or <code>global_settings.py</code>, which are the default configuration files for a Django application:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nDEBUG = True  # Sensitive\nDEBUG_PROPAGATE_EXCEPTIONS = True  # Sensitive\n</pre>\n<p>Flask application startup:</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfrom flask import Flask\n\napp = Flask()\napp.debug = True  # Sensitive\napp.run(debug=True)  # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom django.conf import settings\n\nsettings.configure(DEBUG=False)\nsettings.configure(DEBUG_PROPAGATE_EXCEPTIONS=False)\n\ndef custom_config(config):\n    settings.configure(default_settings=config, DEBUG=False)\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nDEBUG = False\nDEBUG_PROPAGATE_EXCEPTIONS = False\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nfrom flask import Flask\n\napp = Flask()\napp.debug = False\napp.run(debug=False)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/489\">CWE-489 - Active Debug Code</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/215\">CWE-215 - Information Exposure Through Debug Information</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5857",
          "name": "Character classes should be preferred over reluctant quantifiers in regular expressions",
          "description": "<h2>Why is this an issue?</h2>\n<p>Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex\nneedlessly inefficient and potentially vulnerable to <a href=\"https://www.regular-expressions.info/catastrophic.html\">catastrophic backtracking</a>.\nParticularly when using <code>.*?</code> or <code>.+?</code> to match anything up to some terminating character, it is usually a better idea to\ninstead use a greedily or quantified negated character class containing the terminating character. For example <code>&lt;.+?&gt;</code> should be\nreplaced with <code>&lt;[^&gt;]*&gt;</code> or <code>&lt;[^&gt;]+&gt;</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr'&lt;.+?&gt;'\nr'\".*?\"'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr'&lt;[^&gt;]+&gt;'\nr'\"[^\"]*\"'\n</pre>\n<h3>Exceptions</h3>\n<p>This rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has\nto be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are\nmore complicated, are therefore not subject to this rule:</p>\n<pre>\n/&lt;!--.*?--&gt;/\n-/\\*.*?\\*/-\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex\nneedlessly inefficient and potentially vulnerable to <a href=\"https://www.regular-expressions.info/catastrophic.html\">catastrophic backtracking</a>.\nParticularly when using <code>.*?</code> or <code>.+?</code> to match anything up to some terminating character, it is usually a better idea to\ninstead use a greedily or quantified negated character class containing the terminating character. For example <code>&lt;.+?&gt;</code> should be\nreplaced with <code>&lt;[^&gt;]*&gt;</code> or <code>&lt;[^&gt;]+&gt;</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr'&lt;.+?&gt;'\nr'\".*?\"'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr'&lt;[^&gt;]+&gt;'\nr'\"[^\"]*\"'\n</pre>\n<h3>Exceptions</h3>\n<p>This rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has\nto be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are\nmore complicated, are therefore not subject to this rule:</p>\n<pre>\n/&lt;!--.*?--&gt;/\n-/\\*.*?\\*/-\n</pre>\n\n"
        },
        {
          "id": "S3626",
          "name": "Jump statements should not be redundant",
          "description": "<h2>Why is this an issue?</h2>\n<p>Jump statements, such as <code>return</code>, <code>break</code> and <code>continue</code> let you change the default flow of program execution,\nbut jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef redundant_jump(x):\n    if x == 1:\n        print(True)\n        return  # NonCompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef redundant_jump(x):\n    if x == 1:\n        print(True)\n</pre>\n<h3>Exceptions</h3>\n<ul>\n  <li> No issue is raised if the jump statement is the only statement of a statement suite: </li>\n</ul>\n<pre>\ndef my_function(x):\n    if x &gt; 5:\n        do_something()\n    elif x == 0:\n        return # ok even it could be changed to \"pass\"\n    else:\n        do_something_else()\n</pre>\n<ul>\n  <li> No issue is raised for <code>return None</code> because this was certainly done on purpose to be explicit that a function is really returning\n  <code>None</code>. </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Jump statements, such as <code>return</code>, <code>break</code> and <code>continue</code> let you change the default flow of program execution,\nbut jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef redundant_jump(x):\n    if x == 1:\n        print(True)\n        return  # NonCompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef redundant_jump(x):\n    if x == 1:\n        print(True)\n</pre>\n<h3>Exceptions</h3>\n<ul>\n  <li> No issue is raised if the jump statement is the only statement of a statement suite: </li>\n</ul>\n<pre>\ndef my_function(x):\n    if x &gt; 5:\n        do_something()\n    elif x == 0:\n        return # ok even it could be changed to \"pass\"\n    else:\n        do_something_else()\n</pre>\n<ul>\n  <li> No issue is raised for <code>return None</code> because this was certainly done on purpose to be explicit that a function is really returning\n  <code>None</code>. </li>\n</ul>\n\n"
        },
        {
          "id": "S2737",
          "name": "\"except\" clauses should do more than raise the same issue",
          "description": "<h2>Why is this an issue?</h2>\n<p>An <code>except</code> clause that only rethrows the caught exception has the same effect as omitting the <code>except</code> altogether and\nletting it bubble up automatically.</p>\n<pre>\na = {}\ntry:\n    a[5]\nexcept KeyError:\n    raise  # Noncompliant\n</pre>\n<p>Such clauses should either be removed or populated with the appropriate logic.</p>\n<pre>\na = {}\ntry:\n    a[5]\nexcept KeyError as e:\n    logging.exception('error while accessing the dict')\n    raise e\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>An <code>except</code> clause that only rethrows the caught exception has the same effect as omitting the <code>except</code> altogether and\nletting it bubble up automatically.</p>\n<pre>\na = {}\ntry:\n    a[5]\nexcept KeyError:\n    raise  # Noncompliant\n</pre>\n<p>Such clauses should either be removed or populated with the appropriate logic.</p>\n<pre>\na = {}\ntry:\n    a[5]\nexcept KeyError as e:\n    logging.exception('error while accessing the dict')\n    raise e\n</pre>\n\n"
        },
        {
          "id": "S1481",
          "name": "Unused local variables should be removed",
          "description": "<h2>Why is this an issue?</h2>\n<p>An unused local variable is a variable that has been declared but is not used anywhere in the block of code where it is defined. It is dead code,\ncontributing to unnecessary complexity and leading to confusion when reading the code. Therefore, it should be removed from your code to maintain\nclarity and efficiency.</p>\n<h3>What is the potential impact?</h3>\n<p>Having unused local variables in your code can lead to several issues:</p>\n<ul>\n  <li> <strong>Decreased Readability</strong>: Unused variables can make your code more difficult to read. They add extra lines and complexity, which\n  can distract from the main logic of the code. </li>\n  <li> <strong>Misunderstanding</strong>: When other developers read your code, they may wonder why a variable is declared but not used. This can lead\n  to confusion and misinterpretation of the code\u00e2\u20ac\u2122s intent. </li>\n  <li> <strong>Potential for Bugs</strong>: If a variable is declared but not used, it might indicate a bug or incomplete code. For example, if you\n  declared a variable intending to use it in a calculation, but then forgot to do so, your program might not work as expected. </li>\n  <li> <strong>Maintenance Issues</strong>: Unused variables can make code maintenance more difficult. If a programmer sees an unused variable, they\n  might think it is a mistake and try to 'fix' the code, potentially introducing new bugs. </li>\n  <li> <strong>Memory Usage</strong>: Although modern compilers are smart enough to ignore unused variables, not all compilers do this. In such cases,\n  unused variables take up memory space, leading to inefficient use of resources. </li>\n</ul>\n<p>In summary, unused local variables can make your code less readable, more confusing, and harder to maintain, and they can potentially lead to bugs\nor inefficient memory use. Therefore, it is best to remove them.</p>\n<h3>Exceptions</h3>\n<p><code>_</code> will not raise an issue for this rule. The following examples are compliant:</p>\n<pre>\nfor _ in range(10):\n    do_something()\nusername, login, _ = auth\ndo_something_else(username, login)\n</pre>\n<h2>How to fix it</h2>\n<p>The fix for this issue is straightforward. Once you ensure the unused variable is not part of an incomplete implementation leading to bugs, you\njust need to remove it.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef hello(name):\n    message = \"Hello \" + name # Noncompliant - message is unused\n    print(name)\nfor i in range(10): # Noncompliant - i is unused\n    foo()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef hello(name):\n    message = \"Hello \" + name\n    print(message)\nfor _ in range(10):\n    foo()\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>An unused local variable is a variable that has been declared but is not used anywhere in the block of code where it is defined. It is dead code,\ncontributing to unnecessary complexity and leading to confusion when reading the code. Therefore, it should be removed from your code to maintain\nclarity and efficiency.</p>\n<h3>What is the potential impact?</h3>\n<p>Having unused local variables in your code can lead to several issues:</p>\n<ul>\n  <li> <strong>Decreased Readability</strong>: Unused variables can make your code more difficult to read. They add extra lines and complexity, which\n  can distract from the main logic of the code. </li>\n  <li> <strong>Misunderstanding</strong>: When other developers read your code, they may wonder why a variable is declared but not used. This can lead\n  to confusion and misinterpretation of the code\u00e2\u20ac\u2122s intent. </li>\n  <li> <strong>Potential for Bugs</strong>: If a variable is declared but not used, it might indicate a bug or incomplete code. For example, if you\n  declared a variable intending to use it in a calculation, but then forgot to do so, your program might not work as expected. </li>\n  <li> <strong>Maintenance Issues</strong>: Unused variables can make code maintenance more difficult. If a programmer sees an unused variable, they\n  might think it is a mistake and try to 'fix' the code, potentially introducing new bugs. </li>\n  <li> <strong>Memory Usage</strong>: Although modern compilers are smart enough to ignore unused variables, not all compilers do this. In such cases,\n  unused variables take up memory space, leading to inefficient use of resources. </li>\n</ul>\n<p>In summary, unused local variables can make your code less readable, more confusing, and harder to maintain, and they can potentially lead to bugs\nor inefficient memory use. Therefore, it is best to remove them.</p>\n<h3>Exceptions</h3>\n<p><code>_</code> will not raise an issue for this rule. The following examples are compliant:</p>\n<pre>\nfor _ in range(10):\n    do_something()\nusername, login, _ = auth\ndo_something_else(username, login)\n</pre>\n<h2>How to fix it</h2>\n<p>The fix for this issue is straightforward. Once you ensure the unused variable is not part of an incomplete implementation leading to bugs, you\njust need to remove it.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndef hello(name):\n    message = \"Hello \" + name # Noncompliant - message is unused\n    print(name)\nfor i in range(10): # Noncompliant - i is unused\n    foo()\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndef hello(name):\n    message = \"Hello \" + name\n    print(message)\nfor _ in range(10):\n    foo()\n</pre>\n\n"
        },
        {
          "id": "S5439",
          "name": "HTML autoescape mechanism should not be globally disabled",
          "description": "<p>This rule is deprecated; use {rule:python:S5247} instead.</p>\n<h2>Why is this an issue?</h2>\n<p>Template engines have an HTML autoescape mechanism that protects web applications against most common cross-site-scripting (XSS)\nvulnerabilities.</p>\n<p>By default, it automatically replaces HTML special characters in any template variables. This secure by design configuration should not be globally\ndisabled.</p>\n<p>Escaping HTML from template variables prevents switching into any execution context, like <code>&lt;script&gt;</code>. Disabling autoescaping\nforces developers to manually escape each template variable for the application to be safe. A more pragmatic approach is to escape by default and to\nmanually disable escaping when needed.</p>\n<p>A successful exploitation of a cross-site-scripting vulnerability by an attacker allow him to execute malicious JavaScript code in a user\u00e2\u20ac\u2122s web\nbrowser. The most severe XSS attacks involve:</p>\n<ul>\n  <li> Forced redirection </li>\n  <li> Modify presentation of content </li>\n  <li> User accounts takeover after disclosure of sensitive information like session cookies or passwords </li>\n</ul>\n<p>This rule supports the following libraries:</p>\n<ul>\n  <li> <a href=\"https://github.com/django/django\">Django Templates</a> </li>\n  <li> <a href=\"https://github.com/pallets/jinja\">Jinja2</a> </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nfrom jinja2 import Environment\n\nenv = Environment() # Noncompliant; New Jinja2 Environment has autoescape set to false\nenv = Environment(autoescape=False) # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfrom jinja2 import Environment\nenv = Environment(autoescape=True) # Compliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\">OWASP Cheat\n  Sheet</a> - XSS Prevention Cheat Sheet </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/80\">CWE-80 - Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic\n  XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/81\">CWE-81 - Improper Neutralization of Script in an Error Message Web Page</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/82\">CWE-82 - Improper Neutralization of Script in Attributes of IMG Tags in a Web\n  Page</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/83\">CWE-83 - Improper Neutralization of Script in Attributes in a Web Page</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/84\">CWE-84 - Improper Neutralization of Encoded URI Schemes in a Web Page</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/85\">CWE-85 - Doubled Character XSS Manipulations</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/86\">CWE-86 - Improper Neutralization of Invalid Characters in Identifiers in Web\n  Pages</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/87\">CWE-87 - Improper Neutralization of Alternate XSS Syntax</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule is deprecated; use {rule:python:S5247} instead.</p>\n<h2>Why is this an issue?</h2>\n<p>Template engines have an HTML autoescape mechanism that protects web applications against most common cross-site-scripting (XSS)\nvulnerabilities.</p>\n<p>By default, it automatically replaces HTML special characters in any template variables. This secure by design configuration should not be globally\ndisabled.</p>\n<p>Escaping HTML from template variables prevents switching into any execution context, like <code>&lt;script&gt;</code>. Disabling autoescaping\nforces developers to manually escape each template variable for the application to be safe. A more pragmatic approach is to escape by default and to\nmanually disable escaping when needed.</p>\n<p>A successful exploitation of a cross-site-scripting vulnerability by an attacker allow him to execute malicious JavaScript code in a user\u00e2\u20ac\u2122s web\nbrowser. The most severe XSS attacks involve:</p>\n<ul>\n  <li> Forced redirection </li>\n  <li> Modify presentation of content </li>\n  <li> User accounts takeover after disclosure of sensitive information like session cookies or passwords </li>\n</ul>\n<p>This rule supports the following libraries:</p>\n<ul>\n  <li> <a href=\"https://github.com/django/django\">Django Templates</a> </li>\n  <li> <a href=\"https://github.com/pallets/jinja\">Jinja2</a> </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nfrom jinja2 import Environment\n\nenv = Environment() # Noncompliant; New Jinja2 Environment has autoescape set to false\nenv = Environment(autoescape=False) # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfrom jinja2 import Environment\nenv = Environment(autoescape=True) # Compliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\">OWASP Cheat\n  Sheet</a> - XSS Prevention Cheat Sheet </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/80\">CWE-80 - Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic\n  XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/81\">CWE-81 - Improper Neutralization of Script in an Error Message Web Page</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/82\">CWE-82 - Improper Neutralization of Script in Attributes of IMG Tags in a Web\n  Page</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/83\">CWE-83 - Improper Neutralization of Script in Attributes in a Web Page</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/84\">CWE-84 - Improper Neutralization of Encoded URI Schemes in a Web Page</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/85\">CWE-85 - Doubled Character XSS Manipulations</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/86\">CWE-86 - Improper Neutralization of Invalid Characters in Identifiers in Web\n  Pages</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/87\">CWE-87 - Improper Neutralization of Alternate XSS Syntax</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5953",
          "name": "Variables, classes and functions should be either defined or imported",
          "description": "<h2>Why is this an issue?</h2>\n<p>Variables, Classes and functions should not be undefined, otherwise the code will fail with a NameError.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nmy_var # Noncompliant (variable is never defined)\n\ndef noncompliant():\n    foo()  # Noncompliant\n    MyClass()  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfrom mod import my_var\n\nmy_var\n\ndef compliant():\n    foo = sum\n    foo()\n\n    class MyClass:\n        pass\n    MyClass()\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Variables, Classes and functions should not be undefined, otherwise the code will fail with a NameError.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nmy_var # Noncompliant (variable is never defined)\n\ndef noncompliant():\n    foo()  # Noncompliant\n    MyClass()  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfrom mod import my_var\n\nmy_var\n\ndef compliant():\n    foo = sum\n    foo()\n\n    class MyClass:\n        pass\n    MyClass()\n</pre>\n\n"
        },
        {
          "id": "S2733",
          "name": "\"__exit__\" should accept type, value, and traceback arguments",
          "description": "<p>This rule is deprecated; use {rule:python:S5722} instead.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>__exit__</code> method is invoked with four arguments: self, type, value and traceback. Leave one of these out of the method declaration\nand the result will be a <code>TypeError</code> at runtime.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyClass:\n   def __enter__(self):\n       pass\n   def __exit__(self, exc_type, exc_val):  # Noncompliant\n       pass\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule is deprecated; use {rule:python:S5722} instead.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>__exit__</code> method is invoked with four arguments: self, type, value and traceback. Leave one of these out of the method declaration\nand the result will be a <code>TypeError</code> at runtime.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyClass:\n   def __enter__(self):\n       pass\n   def __exit__(self, exc_type, exc_val):  # Noncompliant\n       pass\n</pre>\n\n"
        },
        {
          "id": "S2712",
          "name": "\"return\" and \"yield\" should not be used in the same function",
          "description": "<h2>Why is this an issue?</h2>\n<p>Functions that use <code>yield</code> are known as \"generators\". Before Python 3.3, generators cannot <code>return</code> values. Similarly,\nfunctions that use <code>return</code> cannot use <code>yield</code>. Doing so will cause a <code>SyntaxError</code>.</p>\n<p>Either upgrade your version of Python to a version &gt;= 3.3, or don\u00e2\u20ac\u2122t use both return and yield in a function.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef adder(n):\n     num = 0\n     while num &lt; n:\n         yield num\n         num += 1\n     return num  #Noncompliant\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Functions that use <code>yield</code> are known as \"generators\". Before Python 3.3, generators cannot <code>return</code> values. Similarly,\nfunctions that use <code>return</code> cannot use <code>yield</code>. Doing so will cause a <code>SyntaxError</code>.</p>\n<p>Either upgrade your version of Python to a version &gt;= 3.3, or don\u00e2\u20ac\u2122t use both return and yield in a function.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef adder(n):\n     num = 0\n     while num &lt; n:\n         yield num\n         num += 1\n     return num  #Noncompliant\n</pre>\n\n"
        },
        {
          "id": "S5856",
          "name": "Regular expressions should be syntactically valid",
          "description": "<h2>Why is this an issue?</h2>\n<p>Regular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if\nthey are given a regular expression that does not conform to that syntax.</p>\n<p>To avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to\ncapturing groups should use the correctly spelled name or number of the group.</p>\n<p>To match a literal string, rather than a regular expression, either all special characters should be escaped or methods that don\u00e2\u20ac\u2122t use regular\nexpressions should be used.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nre.compile(r\"([\")\nre.sub(r\"([\", input, \"{\")\nre.compile(r\"(\\w+-(\\d+)\")\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nre.compile(r\"\\(\\[\")\ninput.replace(\"([\", \"{\")\nre.compile(r\"(\\w+)-(\\d+)\")\n</pre>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Regular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if\nthey are given a regular expression that does not conform to that syntax.</p>\n<p>To avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to\ncapturing groups should use the correctly spelled name or number of the group.</p>\n<p>To match a literal string, rather than a regular expression, either all special characters should be escaped or methods that don\u00e2\u20ac\u2122t use regular\nexpressions should be used.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nre.compile(r\"([\")\nre.sub(r\"([\", input, \"{\")\nre.compile(r\"(\\w+-(\\d+)\")\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nre.compile(r\"\\(\\[\")\ninput.replace(\"([\", \"{\")\nre.compile(r\"(\\w+)-(\\d+)\")\n</pre>\n\n"
        },
        {
          "id": "S4792",
          "name": "Configuring loggers is security-sensitive",
          "description": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285\">CVE-2018-0285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127\">CVE-2000-1127</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113\">CVE-2017-15113</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742\">CVE-2015-5742</a> </li>\n</ul>\n<p>Logs are useful before, during and after a security incident.</p>\n<ul>\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>\n</ul>\n<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.</p>\n<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>\n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  <li> the logs are only stored locally instead of being backuped or replicated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Check that your production deployment doesn\u00e2\u20ac\u2122t have its loggers in \"debug\" mode as it might write sensitive information in logs. </li>\n  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>\n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n</ul>\n<p>Remember that configuring loggers properly doesn\u00e2\u20ac\u2122t make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:</p>\n<ul>\n  <li> Don\u00e2\u20ac\u2122t log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039 Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039 As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  <li> Monitor the logs for any suspicious activity. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport logging\nfrom logging import Logger, Handler, Filter\nfrom logging.config import fileConfig, dictConfig\n\nlogging.basicConfig()  # Sensitive\n\nlogging.disable()  # Sensitive\n\n\ndef update_logging(logger_class):\n    logging.setLoggerClass(logger_class)  # Sensitive\n\n\ndef set_last_resort(last_resort):\n    logging.lastResort = last_resort  # Sensitive\n\n\nclass CustomLogger(Logger):  # Sensitive\n    pass\n\n\nclass CustomHandler(Handler):  # Sensitive\n    pass\n\n\nclass CustomFilter(Filter):  # Sensitive\n    pass\n\n\ndef update_config(path, config):\n    fileConfig(path)  # Sensitive\n    dictConfig(config)  # Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/117\">CWE-117 - Improper Output Neutralization for Logs</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/532\">CWE-532 - Information Exposure Through Log Files</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285\">CVE-2018-0285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127\">CVE-2000-1127</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113\">CVE-2017-15113</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742\">CVE-2015-5742</a> </li>\n</ul>\n<p>Logs are useful before, during and after a security incident.</p>\n<ul>\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>\n</ul>\n<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.</p>\n<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>\n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  <li> the logs are only stored locally instead of being backuped or replicated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Check that your production deployment doesn\u00e2\u20ac\u2122t have its loggers in \"debug\" mode as it might write sensitive information in logs. </li>\n  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>\n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n</ul>\n<p>Remember that configuring loggers properly doesn\u00e2\u20ac\u2122t make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:</p>\n<ul>\n  <li> Don\u00e2\u20ac\u2122t log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039 Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc\u00e2\u20ac\u00a6\u00e2\u20ac\u2039 As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  <li> Monitor the logs for any suspicious activity. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport logging\nfrom logging import Logger, Handler, Filter\nfrom logging.config import fileConfig, dictConfig\n\nlogging.basicConfig()  # Sensitive\n\nlogging.disable()  # Sensitive\n\n\ndef update_logging(logger_class):\n    logging.setLoggerClass(logger_class)  # Sensitive\n\n\ndef set_last_resort(last_resort):\n    logging.lastResort = last_resort  # Sensitive\n\n\nclass CustomLogger(Logger):  # Sensitive\n    pass\n\n\nclass CustomHandler(Handler):  # Sensitive\n    pass\n\n\nclass CustomFilter(Filter):  # Sensitive\n    pass\n\n\ndef update_config(path, config):\n    fileConfig(path)  # Sensitive\n    dictConfig(config)  # Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/117\">CWE-117 - Improper Output Neutralization for Logs</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/532\">CWE-532 - Information Exposure Through Log Files</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2325",
          "name": "Methods and properties that don't access instance data should be static",
          "description": "<h2>Why is this an issue?</h2>\n<p>Class methods that don\u00e2\u20ac\u2122t access instance data can and should be static because they yield more performant code.</p>\n<p>To implement a static method in Python one should use either <code>@classmethod</code> or <code>@staticmethod</code>. A class method receives the\nclass as implicit first argument, just like an instance method receives the instance. A static method does not receive an implicit first argument.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Utilities:\n    def do_the_thing(self, arg1, arg2, ...):  # Noncompliant\n        #...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass Utilities:\n    @classmethod\n    def do_the_thing(cls, arg1, arg2, ...):\n        #...\n</pre>\n<p>or</p>\n<pre>\nclass Utilities:\n    @staticmethod\n    def do_the_thing(arg1, arg2, ...):\n        #...\n</pre>\n<h3>Exceptions</h3>\n<p>Methods which raise or may raise a <code>NotImplementedError</code> are ignored.</p>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Class methods that don\u00e2\u20ac\u2122t access instance data can and should be static because they yield more performant code.</p>\n<p>To implement a static method in Python one should use either <code>@classmethod</code> or <code>@staticmethod</code>. A class method receives the\nclass as implicit first argument, just like an instance method receives the instance. A static method does not receive an implicit first argument.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Utilities:\n    def do_the_thing(self, arg1, arg2, ...):  # Noncompliant\n        #...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass Utilities:\n    @classmethod\n    def do_the_thing(cls, arg1, arg2, ...):\n        #...\n</pre>\n<p>or</p>\n<pre>\nclass Utilities:\n    @staticmethod\n    def do_the_thing(arg1, arg2, ...):\n        #...\n</pre>\n<h3>Exceptions</h3>\n<p>Methods which raise or may raise a <code>NotImplementedError</code> are ignored.</p>\n\n"
        }
      ]
    },
    {
      "category": "Testing",
      "rules": [
        {
          "id": "S5147",
          "name": "NoSQL operations should not be vulnerable to injection attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>NoSQL injections occur when an application retrieves untrusted data and inserts it into a database query without sanitizing it first.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application that is vulnerable to NoSQL injection:<br> After discovering the injection point, attackers insert data into\nthe vulnerable field to execute malicious commands in the affected databases.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Identity spoofing and data leakage</h4>\n<p>In the context of simple query logic breakouts, a malicious database query enables privilege escalation or direct data leakage from one or more\ndatabases.<br> This threat is the most widespread impact.</p>\n<h4>Data deletion and denial of service</h4>\n<p>The malicious query makes it possible for the attacker to delete data in the affected databases.<br> This threat is particularly insidious if the\nattacked organization does not maintain a disaster recovery plan (DRP) as missing data can disrupt the regular operations of an organization.</p>\n<h4>Chaining NoSQL injections with other vulnerabilities</h4>\n<p>Attackers who exploit NoSQL injections rely on other vulnerabilities to maximize their profits.<br> Most of the time, organizations overlook some\ndefense in depth measures because they assume attackers cannot reach certain points in the infrastructure. This misbehavior can lead to multiple\nattacks with great impact:</p>\n<ul>\n  <li> When secrets are stored unencrypted in databases: Secrets can be exfiltrated and lead to compromise of other components. </li>\n  <li> If server-side OS and/or database permissions are misconfigured, injection can lead to remote code execution (RCE). </li>\n</ul>\n<h2>How to fix it in Amazon DynamoDB</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to NoSQL injection because untrusted data is concatenated to the <code>FilterExpression</code> value. This\nexpression determines which items within the results should be returned.</p>\n<p>A malicious HTTP request containing the following query parameter values would allow an attacker to manipulate the returned data and bypass\nauthentication:</p>\n<pre>\nusername=admin&amp;password=size(password) or size(password)=size(password)\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@app.route('/login')\ndef login():\n    dynamodb = AWS_SESSION.client('dynamodb')\n\n    username = request.args[\"username\"]\n    password = request.args[\"password\"]\n\n    dynamodb.scan(\n        FilterExpression= \"username = \" + username + \" and password = \" + password, # Noncompliant\n        TableName=\"users\",\n        ProjectionExpression=\"username\"\n    )\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@app.route('/login')\ndef login():\n    dynamodb = AWS_SESSION.client('dynamodb')\n\n    username = request.args[\"username\"]\n    password = request.args[\"password\"]\n\n    dynamodb.query(\n        KeyConditionExpression= \"username = :u\",\n        FilterExpression= \"password = :p\",\n        ExpressionAttributeValues={\n            \":u\": { 'S': username },\n            \":p\": { 'S': password }\n        },\n        TableName=\"users\",\n        ProjectionExpression=\"username\"\n    )\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, the approach to protect against injection vulnerabilities is to ensure that untrusted data cannot break out of the initially\nintended logic.</p>\n<p>When using DynamoDB with Boto3, the best way to do so is by using expression attributes as placeholders (<code>:placeholder</code>). It will end up\nreplacing the attribute with the value defined in <code>ExpressionAttributeValues</code> and prevent any alteration of the original query logic. The\ncompliant code example uses such an approach.</p>\n<p>When possible, use the method <code>query</code> over <code>scan</code> as it disallows the <code>OR</code> operator on the\n<code>KeyConditionExpression</code> attribute and therefore reduces the attack surface. It also optimizes speed and costs.</p>\n<p>This logic applies both when using the <code>DynamoDB.Client</code> and the <code>DynamoDB.Table</code> class, though the syntax differs for the\nlatter, and the <code>ExpressionAttributeValues</code> would look like the following:</p>\n<pre>\nExpressionAttributeValues={\n    \":u\": username,\n    \":p\": password\n}\n</pre>\n<p>Although injection can occur on all the query or scan <code>Expression</code> attributes, its most severe impact occurs in the\n<code>FilterExpression</code>.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://blog.sonarsource.com/nosql-injections-in-rocket-chat/\">SonarSource, NoSQL Injections in Rocket.Chat 3.12.1</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/943\">CWE-943 - Improper Neutralization of Special Elements in Data Query Logic</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>NoSQL injections occur when an application retrieves untrusted data and inserts it into a database query without sanitizing it first.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application that is vulnerable to NoSQL injection:<br> After discovering the injection point, attackers insert data into\nthe vulnerable field to execute malicious commands in the affected databases.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Identity spoofing and data leakage</h4>\n<p>In the context of simple query logic breakouts, a malicious database query enables privilege escalation or direct data leakage from one or more\ndatabases.<br> This threat is the most widespread impact.</p>\n<h4>Data deletion and denial of service</h4>\n<p>The malicious query makes it possible for the attacker to delete data in the affected databases.<br> This threat is particularly insidious if the\nattacked organization does not maintain a disaster recovery plan (DRP) as missing data can disrupt the regular operations of an organization.</p>\n<h4>Chaining NoSQL injections with other vulnerabilities</h4>\n<p>Attackers who exploit NoSQL injections rely on other vulnerabilities to maximize their profits.<br> Most of the time, organizations overlook some\ndefense in depth measures because they assume attackers cannot reach certain points in the infrastructure. This misbehavior can lead to multiple\nattacks with great impact:</p>\n<ul>\n  <li> When secrets are stored unencrypted in databases: Secrets can be exfiltrated and lead to compromise of other components. </li>\n  <li> If server-side OS and/or database permissions are misconfigured, injection can lead to remote code execution (RCE). </li>\n</ul>\n<h2>How to fix it in Amazon DynamoDB</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to NoSQL injection because untrusted data is concatenated to the <code>FilterExpression</code> value. This\nexpression determines which items within the results should be returned.</p>\n<p>A malicious HTTP request containing the following query parameter values would allow an attacker to manipulate the returned data and bypass\nauthentication:</p>\n<pre>\nusername=admin&amp;password=size(password) or size(password)=size(password)\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@app.route('/login')\ndef login():\n    dynamodb = AWS_SESSION.client('dynamodb')\n\n    username = request.args[\"username\"]\n    password = request.args[\"password\"]\n\n    dynamodb.scan(\n        FilterExpression= \"username = \" + username + \" and password = \" + password, # Noncompliant\n        TableName=\"users\",\n        ProjectionExpression=\"username\"\n    )\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@app.route('/login')\ndef login():\n    dynamodb = AWS_SESSION.client('dynamodb')\n\n    username = request.args[\"username\"]\n    password = request.args[\"password\"]\n\n    dynamodb.query(\n        KeyConditionExpression= \"username = :u\",\n        FilterExpression= \"password = :p\",\n        ExpressionAttributeValues={\n            \":u\": { 'S': username },\n            \":p\": { 'S': password }\n        },\n        TableName=\"users\",\n        ProjectionExpression=\"username\"\n    )\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, the approach to protect against injection vulnerabilities is to ensure that untrusted data cannot break out of the initially\nintended logic.</p>\n<p>When using DynamoDB with Boto3, the best way to do so is by using expression attributes as placeholders (<code>:placeholder</code>). It will end up\nreplacing the attribute with the value defined in <code>ExpressionAttributeValues</code> and prevent any alteration of the original query logic. The\ncompliant code example uses such an approach.</p>\n<p>When possible, use the method <code>query</code> over <code>scan</code> as it disallows the <code>OR</code> operator on the\n<code>KeyConditionExpression</code> attribute and therefore reduces the attack surface. It also optimizes speed and costs.</p>\n<p>This logic applies both when using the <code>DynamoDB.Client</code> and the <code>DynamoDB.Table</code> class, though the syntax differs for the\nlatter, and the <code>ExpressionAttributeValues</code> would look like the following:</p>\n<pre>\nExpressionAttributeValues={\n    \":u\": username,\n    \":p\": password\n}\n</pre>\n<p>Although injection can occur on all the query or scan <code>Expression</code> attributes, its most severe impact occurs in the\n<code>FilterExpression</code>.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://blog.sonarsource.com/nosql-injections-in-rocket-chat/\">SonarSource, NoSQL Injections in Rocket.Chat 3.12.1</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/943\">CWE-943 - Improper Neutralization of Special Elements in Data Query Logic</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S5146",
          "name": "HTTP request redirections should not be open to forging attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>Open redirection occurs when an application uses user-controllable data to redirect users to a URL.</p>\n<p>An attacker with malicious intent could manipulate a user to browse into a specially crafted URL, such as\n<code>https://trusted.example.com?url=evil.example.com</code>, to redirect the victim to his evil domain.</p>\n<p>Tricking users into sending the malicious HTTP request is usually the main task of exploiting an open redirection. Often, it requires an attacker\nto build a credible pretext to prevent suspicions from the victim.<br></p>\n<p>Attackers commonly use open redirect exploits in mass phishing campaigns.</p>\n<h3>What is the potential impact?</h3>\n<p>If an attacker tricks a user into opening a link of his choice, the user is redirected to a domain controlled by the attacker.</p>\n<p>From then on, the attacker can perform various malicious actions, some more impactful than others.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Domain Mirroring</h4>\n<p>A malicious link redirects to an attacker\u00e2\u20ac\u2122s controlled website mirroring the interface of a web application trusted by the user. Due to the\nsimilarity in the application appearance and the apparently trustable clicked hyperlink, the user struggles to identify that they are browsing on a\nmalicious domain.<br></p>\n<p>Depending on the attacker\u00e2\u20ac\u2122s purpose, the malicious website can leak credentials, bypass Multi-Factor Authentication (MFA), and reach any\nauthenticated data or action.</p>\n<h4>Malware Distribution</h4>\n<p>A malicious link redirects to an attacker\u00e2\u20ac\u2122s controlled website that serves malware. On the same basis as the domain mirroring exploitation, the\nattacker develops a spearphishing or phishing campaign with a carefully crafted pretext that would result in the download and potential execution of a\nhosted malicious file.<br> The worst-case scenario could result in complete system compromise.</p>\n<h2>How to fix it in Flask</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code example is vulnerable to open redirection as it constructs a URL with user-controllable data. This URL is then used\nto redirect the user without being first validated. An attacker can leverage this to manipulate users into performing unwanted redirects.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, redirect\n\napp = Flask(\"example\")\n\n@app.route(\"/redirecting\")\ndef redirecting():\n    url = request.args[\"url\"]\n    return redirect(url) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom flask import Flask, redirect, url_for\n\napp = Flask(\"example\")\n\n@app.route(\"/redirecting\")\ndef redirecting():\n    url = request.args[\"url\"]\n    return redirect(url_for(url))\n</pre>\n<h3>How does this work?</h3>\n<p>Built-in framework methods should be preferred as, more often than not, these provide additional security mechanisms. Usually, these built-in\nmethods are engineered for internal page redirections. Thus, they might not be the solution for the reader\u00e2\u20ac\u2122s use case.</p>\n<p>In case the application strictly requires external redirections based on user-controllable data, this could be done using the following\nalternatives:</p>\n<ol>\n  <li> Validating the <code>authority</code> part of the URL against a statically defined value (see Pitfalls). </li>\n  <li> Using an allow-list approach in case the destination URLs are multiple but limited. </li>\n  <li> Adding a customized page to which users are redirected, warning about the imminent action and requiring manual authorization to proceed. </li>\n</ol>\n<h3>Pitfalls</h3>\n<h4>The trap of 'StartsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the Open Redirect vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code>https://example.com.malicious.io</code>. The practice of taking over domains that maliciously look like\nexisting domains is widespread and is called <a href=\"https://en.wikipedia.org/wiki/Cybersquatting\">Cybersquatting</a>.</p>\n<h2>How to fix it in Django</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code example is vulnerable to open redirection as it constructs a URL with user-controllable data. This URL is then used\nto redirect the user without being first validated. An attacker can leverage this to manipulate users into performing unwanted redirects.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom django.http import HttpResponseRedirect\n\ndef redirect():\n    url = request.GET.get(\"url\", \"/\")\n    return HttpResponseRedirect(url)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom django.http import HttpResponseRedirect\nfrom urllib.parse import urlparse\n\nallow_list = ['www.example.com', 'example.com']\n\ndef redirect():\n    url = request.GET.get(\"url\", \"/\")\n    parsed_url = urlparse(url)\n    if parsed_url.netloc in allow_list:\n        return HttpResponseRedirect(\"https://\" + parsed_url.netloc)\n    return HttpResponseRedirect(\"/\")\n</pre>\n<h3>How does this work?</h3>\n<p>Built-in framework methods should be preferred as, more often than not, these provide additional security mechanisms. Usually, these built-in\nmethods are engineered for internal page redirections. Thus, they might not be the solution for the reader\u00e2\u20ac\u2122s use case.</p>\n<p>In case the application strictly requires external redirections based on user-controllable data, this could be done using the following\nalternatives:</p>\n<ol>\n  <li> Validating the <code>authority</code> part of the URL against a statically defined value (see Pitfalls). </li>\n  <li> Using an allow-list approach in case the destination URLs are multiple but limited. </li>\n  <li> Adding a customized page to which users are redirected, warning about the imminent action and requiring manual authorization to proceed. </li>\n</ol>\n<h3>Pitfalls</h3>\n<h4>The trap of 'StartsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the Open Redirect vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code>https://example.com.malicious.io</code>. The practice of taking over domains that maliciously look like\nexisting domains is widespread and is called <a href=\"https://en.wikipedia.org/wiki/Cybersquatting\">Cybersquatting</a>.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/601\">CWE-601 - URL Redirection to Untrusted Site ('Open Redirect')</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Open redirection occurs when an application uses user-controllable data to redirect users to a URL.</p>\n<p>An attacker with malicious intent could manipulate a user to browse into a specially crafted URL, such as\n<code>https://trusted.example.com?url=evil.example.com</code>, to redirect the victim to his evil domain.</p>\n<p>Tricking users into sending the malicious HTTP request is usually the main task of exploiting an open redirection. Often, it requires an attacker\nto build a credible pretext to prevent suspicions from the victim.<br></p>\n<p>Attackers commonly use open redirect exploits in mass phishing campaigns.</p>\n<h3>What is the potential impact?</h3>\n<p>If an attacker tricks a user into opening a link of his choice, the user is redirected to a domain controlled by the attacker.</p>\n<p>From then on, the attacker can perform various malicious actions, some more impactful than others.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Domain Mirroring</h4>\n<p>A malicious link redirects to an attacker\u00e2\u20ac\u2122s controlled website mirroring the interface of a web application trusted by the user. Due to the\nsimilarity in the application appearance and the apparently trustable clicked hyperlink, the user struggles to identify that they are browsing on a\nmalicious domain.<br></p>\n<p>Depending on the attacker\u00e2\u20ac\u2122s purpose, the malicious website can leak credentials, bypass Multi-Factor Authentication (MFA), and reach any\nauthenticated data or action.</p>\n<h4>Malware Distribution</h4>\n<p>A malicious link redirects to an attacker\u00e2\u20ac\u2122s controlled website that serves malware. On the same basis as the domain mirroring exploitation, the\nattacker develops a spearphishing or phishing campaign with a carefully crafted pretext that would result in the download and potential execution of a\nhosted malicious file.<br> The worst-case scenario could result in complete system compromise.</p>\n<h2>How to fix it in Flask</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code example is vulnerable to open redirection as it constructs a URL with user-controllable data. This URL is then used\nto redirect the user without being first validated. An attacker can leverage this to manipulate users into performing unwanted redirects.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, redirect\n\napp = Flask(\"example\")\n\n@app.route(\"/redirecting\")\ndef redirecting():\n    url = request.args[\"url\"]\n    return redirect(url) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom flask import Flask, redirect, url_for\n\napp = Flask(\"example\")\n\n@app.route(\"/redirecting\")\ndef redirecting():\n    url = request.args[\"url\"]\n    return redirect(url_for(url))\n</pre>\n<h3>How does this work?</h3>\n<p>Built-in framework methods should be preferred as, more often than not, these provide additional security mechanisms. Usually, these built-in\nmethods are engineered for internal page redirections. Thus, they might not be the solution for the reader\u00e2\u20ac\u2122s use case.</p>\n<p>In case the application strictly requires external redirections based on user-controllable data, this could be done using the following\nalternatives:</p>\n<ol>\n  <li> Validating the <code>authority</code> part of the URL against a statically defined value (see Pitfalls). </li>\n  <li> Using an allow-list approach in case the destination URLs are multiple but limited. </li>\n  <li> Adding a customized page to which users are redirected, warning about the imminent action and requiring manual authorization to proceed. </li>\n</ol>\n<h3>Pitfalls</h3>\n<h4>The trap of 'StartsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the Open Redirect vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code>https://example.com.malicious.io</code>. The practice of taking over domains that maliciously look like\nexisting domains is widespread and is called <a href=\"https://en.wikipedia.org/wiki/Cybersquatting\">Cybersquatting</a>.</p>\n<h2>How to fix it in Django</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code example is vulnerable to open redirection as it constructs a URL with user-controllable data. This URL is then used\nto redirect the user without being first validated. An attacker can leverage this to manipulate users into performing unwanted redirects.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom django.http import HttpResponseRedirect\n\ndef redirect():\n    url = request.GET.get(\"url\", \"/\")\n    return HttpResponseRedirect(url)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom django.http import HttpResponseRedirect\nfrom urllib.parse import urlparse\n\nallow_list = ['www.example.com', 'example.com']\n\ndef redirect():\n    url = request.GET.get(\"url\", \"/\")\n    parsed_url = urlparse(url)\n    if parsed_url.netloc in allow_list:\n        return HttpResponseRedirect(\"https://\" + parsed_url.netloc)\n    return HttpResponseRedirect(\"/\")\n</pre>\n<h3>How does this work?</h3>\n<p>Built-in framework methods should be preferred as, more often than not, these provide additional security mechanisms. Usually, these built-in\nmethods are engineered for internal page redirections. Thus, they might not be the solution for the reader\u00e2\u20ac\u2122s use case.</p>\n<p>In case the application strictly requires external redirections based on user-controllable data, this could be done using the following\nalternatives:</p>\n<ol>\n  <li> Validating the <code>authority</code> part of the URL against a statically defined value (see Pitfalls). </li>\n  <li> Using an allow-list approach in case the destination URLs are multiple but limited. </li>\n  <li> Adding a customized page to which users are redirected, warning about the imminent action and requiring manual authorization to proceed. </li>\n</ol>\n<h3>Pitfalls</h3>\n<h4>The trap of 'StartsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the Open Redirect vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code>https://example.com.malicious.io</code>. The practice of taking over domains that maliciously look like\nexisting domains is widespread and is called <a href=\"https://en.wikipedia.org/wiki/Cybersquatting\">Cybersquatting</a>.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/601\">CWE-601 - URL Redirection to Untrusted Site ('Open Redirect')</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5135",
          "name": "Deserialization should not be vulnerable to injection attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>Deserialization injections occur when applications deserialize wholly or partially untrusted data without verification.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application performing unsafe deserialization:<br> After detecting the injection vector, attackers inject a\ncarefully-crafted payload into the application.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Application-specific attacks</h4>\n<p>In this scenario, the attackers succeed in injecting an object of the expected class, but with malicious properties that affect the object\u00e2\u20ac\u2122s\nbehavior.</p>\n<p>If the application relies on the properties of the deserialized object, attackers can modify the data structure or content to escalate privileges\nor perform unwanted actions.<br> In the context of an e-commerce application, this could be changing the number of products or prices.</p>\n<h4>Full application compromise</h4>\n<p>In the worst-case scenario, the attackers succeed in injecting an object of a completely different class than expected, triggering code\nexecution.</p>\n<p>Depending on the attacker, code execution can be used with different intentions:</p>\n<ul>\n  <li> Download the internal server\u00e2\u20ac\u2122s data, most likely to sell it. </li>\n  <li> Modify data, install malware, for instance, malware that mines cryptocurrencies. </li>\n  <li> Stop services or exhaust resources, for instance, with fork bombs. </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a Disaster Recovery Plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker additionally manages to\nelevate his privileges as an administrator and attack other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nthrough a combination of unsafe deserialization and misconfiguration:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to deserialization attacks because it deserializes HTTP data without validating it first.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, request\nfrom base64 import b64decode\nimport pickle\n\napp = Flask(__name__)\n\n@app.route(\"/example\")\ndef example():\n    objstr = b64decode(request.args.get(\"object\"))\n    obj = pickle.loads(objstr)\n    return str(obj.status == \"OK\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import Flask, request\nimport json\n\napp = Flask(__name__)\n\n@app.route(\"/example\")\ndef example():\n    obj = json.loads(request.args.get(\"object\"))\n    return str(obj[\"status\"] == \"OK\")\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to provide data for deserialization generally creates more problems than it solves.</p>\n<p>Anything that can be done through deserialization can generally be done with more secure data structures.<br> Therefore, our first suggestion is to\navoid deserialization in the first place.</p>\n<p>However, if deserialization mechanisms are valid in your context, here are some security suggestions.</p>\n<h4>More secure serialization methods</h4>\n<p>Some more secure serialization methods reduce the risk of security breaches, although not definitively.</p>\n<p>A complete object serializer is probably unnecessary if you only need to receive primitive data (for example integers, strings, bools, etc.).<br>\nIn this case, formats such as JSON and XML protect the application from deserialization attacks by default.</p>\n<p>For more complex objects, the next step is to control which class fields are exposed by creating class-specific serialization methods.<br> The most\ncommon method is to use Data Transfer Objects (DTO) patterns or Google Protocol Buffers (protobufs). After creating the Protobuf data structure, the\nProtobuf compiler creates class files that handle operations such as serializing and deserializing data.</p>\n<h4>Integrity check</h4>\n<p>Message authentication codes (MAC) can be used to prevent tampering with serialized data that is meant to be stored outside the application\nserver:</p>\n<ul>\n  <li> On the server-side, when serializing an object, compute a MAC of the result and append it to the serialized object string. </li>\n  <li> When the serialized value is submitted back, verify the serialization string MAC on the server side before deserialization. </li>\n</ul>\n<p>Depending on the situation, two MAC computation modes can be used.</p>\n<p>If the same application will be responsible for the MAC computing and validation, a symmetric signature algorithm can be used. In that case, HMAC\nshould be preferred, with a strong underlying hash algorithm such as SHA-256.</p>\n<p>If multiple parties have to validate the serialized data, an asymetric signature algorithm should be used. This will reduce the chances for a\nsigning secret to be leaked. In that case, the <code>RSASSA-PSS</code> algorithm can be used.</p>\n<p><strong>Note</strong>: Be sure to store the signing secret securely.</p>\n<h2>How to fix it in PyYAML</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to deserialization attacks because it deserializes untrusted data without validating it first.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route(\"/example\")\ndef example():\n    obj = yaml.load(request.args.get(\"object\"), Loader=yaml.Loader)\n    return str(obj[\"status\"] == \"OK\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route(\"/example\")\ndef example():\n    obj = yaml.safe_load(request.args.get(\"object\"))\n    return str(obj[\"status\"] == \"OK\")\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to provide data for deserialization generally creates more problems than it solves.</p>\n<p>Anything that can be done through deserialization can generally be done with more secure data structures.<br> Therefore, our first suggestion is to\navoid deserialization in the first place.</p>\n<p>However, if deserialization mechanisms are valid in your context, here are some security suggestions.</p>\n<h4>More secure serialization methods</h4>\n<p>Some more secure serialization methods reduce the risk of security breaches, although not definitively.</p>\n<p>A complete object serializer is probably unnecessary if you only need to receive primitive data (for example integers, strings, bools, etc.).<br>\nIn this case, formats such as JSON and XML protect the application from deserialization attacks by default.</p>\n<p>For more complex objects, the next step is to control which class fields are exposed by creating class-specific serialization methods.<br> The most\ncommon method is to use Data Transfer Objects (DTO) patterns or Google Protocol Buffers (protobufs). After creating the Protobuf data structure, the\nProtobuf compiler creates class files that handle operations such as serializing and deserializing data.</p>\n<p>The example compliant solution uses the <code>safe_load</code> method in place of the less secure <code>load</code> one. It disables loading\narbitrary Python object and thus prevents the execution of arbitrary or dangerous functions.</p>\n<p>Note that the same level of security can be reached with the <code>load</code> method as soon as a safe <code>Loader</code> component is passed to\nit.</p>\n<pre>\nyaml.load(untrusted, Loader=yaml.SafeLoader)\n</pre>\n<h4>Integrity check</h4>\n<p>Message authentication codes (MAC) can be used to prevent tampering with serialized data that is meant to be stored outside the application\nserver:</p>\n<ul>\n  <li> On the server-side, when serializing an object, compute a MAC of the result and append it to the serialized object string. </li>\n  <li> When the serialized value is submitted back, verify the serialization string MAC on the server side before deserialization. </li>\n</ul>\n<p>Depending on the situation, two MAC computation modes can be used.</p>\n<p>If the same application will be responsible for the MAC computing and validation, a symmetric signature algorithm can be used. In that case, HMAC\nshould be preferred, with a strong underlying hash algorithm such as SHA-256.</p>\n<p>If multiple parties have to validate the serialized data, an asymetric signature algorithm should be used. This will reduce the chances for a\nsigning secret to be leaked. In that case, the <code>RSASSA-PSS</code> algorithm can be used.</p>\n<p><strong>Note</strong>: Be sure to store the signing secret securely.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\">Top 10 2017 Category A8 - Insecure\n  Deserialization</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/502\">CWE-502 - Deserialization of Untrusted Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Deserialization injections occur when applications deserialize wholly or partially untrusted data without verification.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application performing unsafe deserialization:<br> After detecting the injection vector, attackers inject a\ncarefully-crafted payload into the application.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Application-specific attacks</h4>\n<p>In this scenario, the attackers succeed in injecting an object of the expected class, but with malicious properties that affect the object\u00e2\u20ac\u2122s\nbehavior.</p>\n<p>If the application relies on the properties of the deserialized object, attackers can modify the data structure or content to escalate privileges\nor perform unwanted actions.<br> In the context of an e-commerce application, this could be changing the number of products or prices.</p>\n<h4>Full application compromise</h4>\n<p>In the worst-case scenario, the attackers succeed in injecting an object of a completely different class than expected, triggering code\nexecution.</p>\n<p>Depending on the attacker, code execution can be used with different intentions:</p>\n<ul>\n  <li> Download the internal server\u00e2\u20ac\u2122s data, most likely to sell it. </li>\n  <li> Modify data, install malware, for instance, malware that mines cryptocurrencies. </li>\n  <li> Stop services or exhaust resources, for instance, with fork bombs. </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a Disaster Recovery Plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker additionally manages to\nelevate his privileges as an administrator and attack other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nthrough a combination of unsafe deserialization and misconfiguration:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to deserialization attacks because it deserializes HTTP data without validating it first.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, request\nfrom base64 import b64decode\nimport pickle\n\napp = Flask(__name__)\n\n@app.route(\"/example\")\ndef example():\n    objstr = b64decode(request.args.get(\"object\"))\n    obj = pickle.loads(objstr)\n    return str(obj.status == \"OK\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import Flask, request\nimport json\n\napp = Flask(__name__)\n\n@app.route(\"/example\")\ndef example():\n    obj = json.loads(request.args.get(\"object\"))\n    return str(obj[\"status\"] == \"OK\")\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to provide data for deserialization generally creates more problems than it solves.</p>\n<p>Anything that can be done through deserialization can generally be done with more secure data structures.<br> Therefore, our first suggestion is to\navoid deserialization in the first place.</p>\n<p>However, if deserialization mechanisms are valid in your context, here are some security suggestions.</p>\n<h4>More secure serialization methods</h4>\n<p>Some more secure serialization methods reduce the risk of security breaches, although not definitively.</p>\n<p>A complete object serializer is probably unnecessary if you only need to receive primitive data (for example integers, strings, bools, etc.).<br>\nIn this case, formats such as JSON and XML protect the application from deserialization attacks by default.</p>\n<p>For more complex objects, the next step is to control which class fields are exposed by creating class-specific serialization methods.<br> The most\ncommon method is to use Data Transfer Objects (DTO) patterns or Google Protocol Buffers (protobufs). After creating the Protobuf data structure, the\nProtobuf compiler creates class files that handle operations such as serializing and deserializing data.</p>\n<h4>Integrity check</h4>\n<p>Message authentication codes (MAC) can be used to prevent tampering with serialized data that is meant to be stored outside the application\nserver:</p>\n<ul>\n  <li> On the server-side, when serializing an object, compute a MAC of the result and append it to the serialized object string. </li>\n  <li> When the serialized value is submitted back, verify the serialization string MAC on the server side before deserialization. </li>\n</ul>\n<p>Depending on the situation, two MAC computation modes can be used.</p>\n<p>If the same application will be responsible for the MAC computing and validation, a symmetric signature algorithm can be used. In that case, HMAC\nshould be preferred, with a strong underlying hash algorithm such as SHA-256.</p>\n<p>If multiple parties have to validate the serialized data, an asymetric signature algorithm should be used. This will reduce the chances for a\nsigning secret to be leaked. In that case, the <code>RSASSA-PSS</code> algorithm can be used.</p>\n<p><strong>Note</strong>: Be sure to store the signing secret securely.</p>\n<h2>How to fix it in PyYAML</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to deserialization attacks because it deserializes untrusted data without validating it first.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route(\"/example\")\ndef example():\n    obj = yaml.load(request.args.get(\"object\"), Loader=yaml.Loader)\n    return str(obj[\"status\"] == \"OK\")\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom flask import Flask, request\nimport yaml\n\napp = Flask(__name__)\n\n@app.route(\"/example\")\ndef example():\n    obj = yaml.safe_load(request.args.get(\"object\"))\n    return str(obj[\"status\"] == \"OK\")\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to provide data for deserialization generally creates more problems than it solves.</p>\n<p>Anything that can be done through deserialization can generally be done with more secure data structures.<br> Therefore, our first suggestion is to\navoid deserialization in the first place.</p>\n<p>However, if deserialization mechanisms are valid in your context, here are some security suggestions.</p>\n<h4>More secure serialization methods</h4>\n<p>Some more secure serialization methods reduce the risk of security breaches, although not definitively.</p>\n<p>A complete object serializer is probably unnecessary if you only need to receive primitive data (for example integers, strings, bools, etc.).<br>\nIn this case, formats such as JSON and XML protect the application from deserialization attacks by default.</p>\n<p>For more complex objects, the next step is to control which class fields are exposed by creating class-specific serialization methods.<br> The most\ncommon method is to use Data Transfer Objects (DTO) patterns or Google Protocol Buffers (protobufs). After creating the Protobuf data structure, the\nProtobuf compiler creates class files that handle operations such as serializing and deserializing data.</p>\n<p>The example compliant solution uses the <code>safe_load</code> method in place of the less secure <code>load</code> one. It disables loading\narbitrary Python object and thus prevents the execution of arbitrary or dangerous functions.</p>\n<p>Note that the same level of security can be reached with the <code>load</code> method as soon as a safe <code>Loader</code> component is passed to\nit.</p>\n<pre>\nyaml.load(untrusted, Loader=yaml.SafeLoader)\n</pre>\n<h4>Integrity check</h4>\n<p>Message authentication codes (MAC) can be used to prevent tampering with serialized data that is meant to be stored outside the application\nserver:</p>\n<ul>\n  <li> On the server-side, when serializing an object, compute a MAC of the result and append it to the serialized object string. </li>\n  <li> When the serialized value is submitted back, verify the serialization string MAC on the server side before deserialization. </li>\n</ul>\n<p>Depending on the situation, two MAC computation modes can be used.</p>\n<p>If the same application will be responsible for the MAC computing and validation, a symmetric signature algorithm can be used. In that case, HMAC\nshould be preferred, with a strong underlying hash algorithm such as SHA-256.</p>\n<p>If multiple parties have to validate the serialized data, an asymetric signature algorithm should be used. This will reduce the chances for a\nsigning secret to be leaked. In that case, the <code>RSASSA-PSS</code> algorithm can be used.</p>\n<p><strong>Note</strong>: Be sure to store the signing secret securely.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\">Top 10 2017 Category A8 - Insecure\n  Deserialization</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/502\">CWE-502 - Deserialization of Untrusted Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S3649",
          "name": "Database queries should not be vulnerable to injection attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>Database injections (such as SQL injections) occur in an application when the application retrieves data from a user or a third-party service and\ninserts it into a database query without sanitizing it first.</p>\n<p>If an application contains a database query that is vulnerable to injections, it is exposed to attacks that target any database where that query is\nused.</p>\n<p>A user with malicious intent carefully performs actions whose goal is to modify the existing query to change its logic to a malicious one.</p>\n<p>After creating the malicious request, the attacker can attack the databases affected by this vulnerability without relying on any\npre-requisites.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application that is vulnerable to SQL injection:<br> After discovering the injection, attackers inject data into the\nvulnerable field to execute malicious commands in the affected databases.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Identity spoofing and data manipulation</h4>\n<p>A malicious database query enables privilege escalation or direct data leakage from one or more databases. This threat is the most widespread\nimpact.</p>\n<h4>Data deletion and denial of service</h4>\n<p>The malicious query makes it possible for the attacker to delete data in the affected databases.<br> This threat is particularly insidious if the\nattacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Chaining DB injections with other vulnerabilities</h4>\n<p>Attackers who exploit SQL injections rely on other vulnerabilities to maximize their profits.<br> Most of the time, organizations overlook some\ndefense in depth measures because they assume attackers cannot reach certain points in the infrastructure. This misbehavior can lead to multiple\nattacks with great impact:</p>\n<ul>\n  <li> When secrets are stored unencrypted in databases: Secrets can be exfiltrated and lead to compromise of other components. </li>\n  <li> If server-side OS and/or database permissions are misconfigured, injection can lead to remote code execution (RCE).\n    <ul>\n      <li> See <a href=\"https://blog.sonarsource.com/exploiting-hibernate-injections/\">our article on this topic</a> </li>\n    </ul>  </li>\n</ul>\n<h2>How to fix it in SQLAlchemy</h2>\n<h3>Code examples</h3>\n<p>The following code is an example of an overly simple data retrieval function. It is vulnerable to SQL injection because user-controlled data is\ninserted directly into a query string: The application assumes that incoming data always has a specific range of characters and ignores that some\ncharacters may change the query logic to a malicious one.</p>\n<p>In this particular case, the query can be exploited with the following string:</p>\n<pre>\n' OR '1'='1\n</pre>\n<p>Using the UNION clause, an attacker would also be able to perform queries against other tables and combine the returned data within the same query\nresult.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nimport sqlalchemy\n\n@app.route('/example')\ndef get_users():\n    user = request.args[\"user\"]\n    conn = sqlalchemy.create_engine(connection_string)\n    conn = engine.connect()\n\n    conn.execute(\"SELECT user FROM users WHERE user = '\" + user + \"'\") # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nimport sqlalchemy\n\n@app.route('/example')\ndef get_users():\n    user = request.args[\"user\"]\n    conn = sqlalchemy.create_engine(connection_string)\n    metadata = sqlalchemy.MetaData(bind=conn, reflect=True)\n    users = metadata.tables['users']\n    conn = engine.connect()\n\n    sql = users.select().where(users.c.user == user)\n    conn.execute(sql)\n</pre>\n<h3>How does this work?</h3>\n<h4>Use secure APIs</h4>\n<p>Some frameworks provide a database abstraction layer that frees the developers from sanitizing or writing prepared statements.</p>\n<p>These provided APIs can be described as \"secure by design\".<br> By providing a builder pattern with parameter binding behind the scenes,\n<code>SQLAlchemy</code> can be called \"secure by design\" as it adds multiple layers of security to the code while keeping the codebase shorter.</p>\n<p><strong>Note</strong>: These types of APIs can also provide \"raw\" functions or equivalents. These functions allow developers to create complex\nqueries using the user-friendly builder pattern.<br> These methods should be considered unsafe and should not be used with untrusted data. For\nexample, <code>SQLAlchemy</code> exposes <code>sqlalchemy.text()</code> that is prone to injections.</p>\n<h2>How to fix it in Python SQLite</h2>\n<h3>Code examples</h3>\n<p>The following code is an example of an overly simple data retrieval function. It is vulnerable to SQL injection because user-controlled data is\ninserted directly into a query string: The application assumes that incoming data always has a specific range of characters and ignores that some\ncharacters may change the query logic to a malicious one.</p>\n<p>In this particular case, the query can be exploited with the following string:</p>\n<pre>\n' OR '1'='1\n</pre>\n<p>Using the UNION clause, an attacker would also be able to perform queries against other tables and combine the returned data within the same query\nresult.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom flask import request\n\n@app.route('/example')\ndef get_users():\n    user = request.args[\"user\"]\n    sql = \"\"\"SELECT user FROM users WHERE user = \\'%s\\'\"\"\"\n\n    conn = sqlite3.connect('example')\n    conn.cursor().execute(sql % (user)) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom flask import request\n\n@app.route('/example')\ndef get_users():\n    user = request.args[\"user\"]\n    sql = \"\"\"SELECT user FROM users WHERE user = (?)\"\"\"\n    value = (user,)\n\n    conn = sqlite3.connect('example')\n    conn.cursor().execute(sql, value)\n</pre>\n<h3>How does this work?</h3>\n<h4>Use prepared statements</h4>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of an\ninterpreted context.</p>\n<p>For database queries, prepared statements are a natural mechanism to achieve this due to their internal workings.<br> Here is an example with the\nfollowing query string (Java SE syntax):</p>\n<pre>\nSELECT * FROM users WHERE user = ? AND pass = ?\n</pre>\n<p><strong>Note: Placeholders may take different forms, depending on the library used. For the above example, the question mark symbol '?' was used as\na placeholder.</strong></p>\n<p>When a prepared statement is used by an application, the database server compiles the query logic even before the application passes the literals\ncorresponding to the placeholders to the database.<br> Some libraries expose a <code>prepareStatement</code> function that explicitly does so, and\nsome do not - because they do it transparently.</p>\n<p>The compiled code that contains the query logic also includes the placeholders: they serve as parameters.</p>\n<p>After compilation, the query logic is frozen and cannot be changed.<br> So when the application passes the literals that replace the placeholders,\nthey are not considered application logic by the database.</p>\n<p>Consequently, the database server prevents the dynamic literals of a prepared statement from affecting the underlying query, and thus sanitizes\nthem.</p>\n<p>On the other hand, the application does not automatically sanitize third-party data (for example, user-controlled data) inserted directly into a\nquery. An attacker who controls this third-party data can cause the database to execute malicious code.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://blog.sonarsource.com/exploiting-hibernate-injections/\">SonarSource, Exploiting Hibernate Injections</a> </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP, SQL Injection Prevention Cheat\n  Sheet</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/89\">CWE-89 - Improper Neutralization of Special Elements used in an SQL Command</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ITdGBQ\">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222607\">Application Security and\n  Development: V-222607</a> - The application must not be vulnerable to SQL Injection. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Database injections (such as SQL injections) occur in an application when the application retrieves data from a user or a third-party service and\ninserts it into a database query without sanitizing it first.</p>\n<p>If an application contains a database query that is vulnerable to injections, it is exposed to attacks that target any database where that query is\nused.</p>\n<p>A user with malicious intent carefully performs actions whose goal is to modify the existing query to change its logic to a malicious one.</p>\n<p>After creating the malicious request, the attacker can attack the databases affected by this vulnerability without relying on any\npre-requisites.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application that is vulnerable to SQL injection:<br> After discovering the injection, attackers inject data into the\nvulnerable field to execute malicious commands in the affected databases.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Identity spoofing and data manipulation</h4>\n<p>A malicious database query enables privilege escalation or direct data leakage from one or more databases. This threat is the most widespread\nimpact.</p>\n<h4>Data deletion and denial of service</h4>\n<p>The malicious query makes it possible for the attacker to delete data in the affected databases.<br> This threat is particularly insidious if the\nattacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Chaining DB injections with other vulnerabilities</h4>\n<p>Attackers who exploit SQL injections rely on other vulnerabilities to maximize their profits.<br> Most of the time, organizations overlook some\ndefense in depth measures because they assume attackers cannot reach certain points in the infrastructure. This misbehavior can lead to multiple\nattacks with great impact:</p>\n<ul>\n  <li> When secrets are stored unencrypted in databases: Secrets can be exfiltrated and lead to compromise of other components. </li>\n  <li> If server-side OS and/or database permissions are misconfigured, injection can lead to remote code execution (RCE).\n    <ul>\n      <li> See <a href=\"https://blog.sonarsource.com/exploiting-hibernate-injections/\">our article on this topic</a> </li>\n    </ul>  </li>\n</ul>\n<h2>How to fix it in SQLAlchemy</h2>\n<h3>Code examples</h3>\n<p>The following code is an example of an overly simple data retrieval function. It is vulnerable to SQL injection because user-controlled data is\ninserted directly into a query string: The application assumes that incoming data always has a specific range of characters and ignores that some\ncharacters may change the query logic to a malicious one.</p>\n<p>In this particular case, the query can be exploited with the following string:</p>\n<pre>\n' OR '1'='1\n</pre>\n<p>Using the UNION clause, an attacker would also be able to perform queries against other tables and combine the returned data within the same query\nresult.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nimport sqlalchemy\n\n@app.route('/example')\ndef get_users():\n    user = request.args[\"user\"]\n    conn = sqlalchemy.create_engine(connection_string)\n    conn = engine.connect()\n\n    conn.execute(\"SELECT user FROM users WHERE user = '\" + user + \"'\") # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nimport sqlalchemy\n\n@app.route('/example')\ndef get_users():\n    user = request.args[\"user\"]\n    conn = sqlalchemy.create_engine(connection_string)\n    metadata = sqlalchemy.MetaData(bind=conn, reflect=True)\n    users = metadata.tables['users']\n    conn = engine.connect()\n\n    sql = users.select().where(users.c.user == user)\n    conn.execute(sql)\n</pre>\n<h3>How does this work?</h3>\n<h4>Use secure APIs</h4>\n<p>Some frameworks provide a database abstraction layer that frees the developers from sanitizing or writing prepared statements.</p>\n<p>These provided APIs can be described as \"secure by design\".<br> By providing a builder pattern with parameter binding behind the scenes,\n<code>SQLAlchemy</code> can be called \"secure by design\" as it adds multiple layers of security to the code while keeping the codebase shorter.</p>\n<p><strong>Note</strong>: These types of APIs can also provide \"raw\" functions or equivalents. These functions allow developers to create complex\nqueries using the user-friendly builder pattern.<br> These methods should be considered unsafe and should not be used with untrusted data. For\nexample, <code>SQLAlchemy</code> exposes <code>sqlalchemy.text()</code> that is prone to injections.</p>\n<h2>How to fix it in Python SQLite</h2>\n<h3>Code examples</h3>\n<p>The following code is an example of an overly simple data retrieval function. It is vulnerable to SQL injection because user-controlled data is\ninserted directly into a query string: The application assumes that incoming data always has a specific range of characters and ignores that some\ncharacters may change the query logic to a malicious one.</p>\n<p>In this particular case, the query can be exploited with the following string:</p>\n<pre>\n' OR '1'='1\n</pre>\n<p>Using the UNION clause, an attacker would also be able to perform queries against other tables and combine the returned data within the same query\nresult.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom flask import request\n\n@app.route('/example')\ndef get_users():\n    user = request.args[\"user\"]\n    sql = \"\"\"SELECT user FROM users WHERE user = \\'%s\\'\"\"\"\n\n    conn = sqlite3.connect('example')\n    conn.cursor().execute(sql % (user)) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom flask import request\n\n@app.route('/example')\ndef get_users():\n    user = request.args[\"user\"]\n    sql = \"\"\"SELECT user FROM users WHERE user = (?)\"\"\"\n    value = (user,)\n\n    conn = sqlite3.connect('example')\n    conn.cursor().execute(sql, value)\n</pre>\n<h3>How does this work?</h3>\n<h4>Use prepared statements</h4>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of an\ninterpreted context.</p>\n<p>For database queries, prepared statements are a natural mechanism to achieve this due to their internal workings.<br> Here is an example with the\nfollowing query string (Java SE syntax):</p>\n<pre>\nSELECT * FROM users WHERE user = ? AND pass = ?\n</pre>\n<p><strong>Note: Placeholders may take different forms, depending on the library used. For the above example, the question mark symbol '?' was used as\na placeholder.</strong></p>\n<p>When a prepared statement is used by an application, the database server compiles the query logic even before the application passes the literals\ncorresponding to the placeholders to the database.<br> Some libraries expose a <code>prepareStatement</code> function that explicitly does so, and\nsome do not - because they do it transparently.</p>\n<p>The compiled code that contains the query logic also includes the placeholders: they serve as parameters.</p>\n<p>After compilation, the query logic is frozen and cannot be changed.<br> So when the application passes the literals that replace the placeholders,\nthey are not considered application logic by the database.</p>\n<p>Consequently, the database server prevents the dynamic literals of a prepared statement from affecting the underlying query, and thus sanitizes\nthem.</p>\n<p>On the other hand, the application does not automatically sanitize third-party data (for example, user-controlled data) inserted directly into a\nquery. An attacker who controls this third-party data can cause the database to execute malicious code.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://blog.sonarsource.com/exploiting-hibernate-injections/\">SonarSource, Exploiting Hibernate Injections</a> </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP, SQL Injection Prevention Cheat\n  Sheet</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/89\">CWE-89 - Improper Neutralization of Special Elements used in an SQL Command</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ITdGBQ\">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222607\">Application Security and\n  Development: V-222607</a> - The application must not be vulnerable to SQL Injection. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S2091",
          "name": "XPath expressions should not be vulnerable to injection attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>XPath injections occur in an application when the application retrieves untrusted data and inserts it into an XML Path (XPath) query without\nsanitizing it first.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application vulnerable to XPath injection:<br> After discovering the injection point, attackers insert data into the\nvulnerable field to execute malicious commands in the affected XML documents.</p>\n<p>The impact of this vulnerability depends on the importance of XML structures in the enterprise.<br> In cases where organizations rely on XML\nstructures for business-critical operations or where XML is used only for innocuous data transport, the severity of an attack ranges from critical to\nharmless.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Data Leaks</h4>\n<p>A malicious XPath query allows direct data leakage from one or more databases. Although XML is not as widely used as it once was, this possibility\nstill exists with configuration files, for example.</p>\n<h4>Data deletion and denial of service</h4>\n<p>The malicious query allows the attacker to delete data in the affected XML documents.<br> This threat is particularly insidious if the attacked\norganization does not maintain a disaster recovery plan (DRP) and if XML structures are considered important, as missing critical data can disrupt the\nregular operations of an organization.</p>\n<h2>How to fix it in lxml</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code is vulnerable to XPath injection because untrusted data is concatenated to an XPath query without prior\nvalidation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nfrom lxml import etree\n\n@app.route('/authenticate')\ndef authenticate():\n    username = request.args['username']\n    password = request.args['password']\n    expression = \"./users/user[@name='\" + username + \"' and @pass='\" + password + \"']\"\n    tree = etree.parse('resources/users.xml')\n\n    if tree.find(expression) is None:\n        return \"Invalid credentials\", 401\n    else:\n        return \"Success\", 200\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nfrom lxml import etree\n\n@app.route('/authenticate')\ndef authenticate():\n    username = request.args['username']\n    password = request.args['password']\n    expression = \"./users/user[@name=$username and @pass=$password]\"\n    tree = etree.parse('resources/users.xml')\n\n    if tree.xpath(expression, username=username, password=password) is None:\n        return \"Invalid credentials\", 401\n    else:\n        return \"Success\", 200\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of the\ninitially intended logic.</p>\n<h4>Parameterized Queries</h4>\n<p>For XPath injections, the cleanest way to do so is to use parameterized queries.</p>\n<p>XPath allows for the usage of variables inside expressions in the form of <code>$variable</code>. XPath variables can be used to construct an XPath\nquery without needing to concatenate user arguments to the query at runtime. Here is an example of an XPath query with variables:</p>\n<pre>\n/users/user[@user=$user and @pass=$pass]\n</pre>\n<p>When the XPath query is executed, the user input is passed alongside it. During execution, when the values of the variables need to be known, a\nresolver will return the correct user input for each variable. The contents of the variables are not considered application logic by the XPath\nexecutor, and thus injection is not possible.</p>\n<p>In the example, the username and password are passed as <a\nhref=\"https://lxml.de/xpathxslt.html#:~:text=The%20xpath()%20method%20has%20support%20for%20XPath%20variables%3A\">XPath variables</a> rather than\nconcatenated to the XPath query. By using a parameterized query, injection is successfully prevented.</p>\n<h2>How to fix it in the Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code is vulnerable to XPath injection because untrusted data is concatenated to an XPath query without prior validation.\nAlthough <code>xml.etree.ElementTree</code> only supports a subset of XPath syntax, exploitation can still be possible.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom xml.etree import ElementTree\nfrom flask import request\n\n@app.route('/authenticate')\ndef authenticate():\n    username = request.args['username']\n    password = request.args['password']\n    expression = \"./users/user[@name='\" + username + \"'][@pass='\" + password + \"']\"\n    tree = ElementTree.parse('resources/users.xml')\n\n    if tree.find(expression) is None:\n        return \"Invalid credentials\", 401\n    else:\n        return \"Success\", 200\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport re\nfrom xml.etree import ElementTree\nfrom flask import request\n\ntree = ElementTree.parse('resources/users.xml')\n\n@app.route('/authenticate')\ndef authenticate():\n    username = request.args['username']\n    password = request.args['password']\n\n    if re.match(\"^[a-zA-Z0-9]*$\", username) is None or re.match(\"^[a-zA-Z0-9]*$\", password) is None:\n        return \"Username or password contains invalid characters\", 400\n\n    expression = \"./users/user[@name='\" + username + \"'][@pass='\" + password + \"']\"\n    tree = ElementTree.parse('resources/users.xml')\n\n    if tree.find(expression) is None:\n        return \"Invalid credentials\", 401\n    else:\n        return \"Success\", 200\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of the\ninitially intended logic.</p>\n<h4>Parameterized Queries</h4>\n<p>For XPath injections, the cleanest way to do so is to use parameterized queries.</p>\n<p>XPath allows for the usage of variables inside expressions in the form of <code>$variable</code>. XPath variables can be used to construct an XPath\nquery without needing to concatenate user arguments to the query at runtime. Here is an example of an XPath query with variables:</p>\n<pre>\n/users/user[@user=$user and @pass=$pass]\n</pre>\n<p>When the XPath query is executed, the user input is passed alongside it. During execution, when the values of the variables need to be known, a\nresolver will return the correct user input for each variable. The contents of the variables are not considered application logic by the XPath\nexecutor, and thus injection is not possible.</p>\n<p>It is not possible to construct parameterized queries using only the Python Standard Library.<br> Please use <a\nhref=\"https://pypi.org/project/lxml/\">lxml</a> instead, which allows for parameterized queries using the <code>ElementTree.xpath()</code> method.</p>\n<h4>Validation</h4>\n<p>In case XPath parameterized queries are not available, the most secure way to protect against injections is to validate the input before using it\nin an XPath query.</p>\n<p><strong>Important</strong>: The application must do this validation server-side. Validating this client-side is insecure.</p>\n<p>Input can be validated in multiple ways:</p>\n<ul>\n  <li> By checking against a list of authorized and secure strings that the application is allowed to use in a query. </li>\n  <li> By ensuring user input is restricted to a specific range of characters (e.g., the regex <code>/^[a-zA-Z0-9]*$/</code> only allows alphanumeric\n  characters.) </li>\n  <li> By ensuring user input does not include any XPath metacharacters, such as <code>\"</code>, <code>'</code>, <code>/</code>, <code>@</code>,\n  <code>=</code>, <code>*</code>, <code>[</code>, <code>]</code>, <code>(</code> and <code>)</code>. </li>\n</ul>\n<p>If user input is not considered valid, it should be rejected as it is unsafe.</p>\n<p>In the example, we ensure that the username and password only contain alphanumeric characters by doing a regex match before executing the XPath\nquery.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/643\">CWE-643 - Improper Neutralization of Data within XPath Expressions</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>XPath injections occur in an application when the application retrieves untrusted data and inserts it into an XML Path (XPath) query without\nsanitizing it first.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application vulnerable to XPath injection:<br> After discovering the injection point, attackers insert data into the\nvulnerable field to execute malicious commands in the affected XML documents.</p>\n<p>The impact of this vulnerability depends on the importance of XML structures in the enterprise.<br> In cases where organizations rely on XML\nstructures for business-critical operations or where XML is used only for innocuous data transport, the severity of an attack ranges from critical to\nharmless.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Data Leaks</h4>\n<p>A malicious XPath query allows direct data leakage from one or more databases. Although XML is not as widely used as it once was, this possibility\nstill exists with configuration files, for example.</p>\n<h4>Data deletion and denial of service</h4>\n<p>The malicious query allows the attacker to delete data in the affected XML documents.<br> This threat is particularly insidious if the attacked\norganization does not maintain a disaster recovery plan (DRP) and if XML structures are considered important, as missing critical data can disrupt the\nregular operations of an organization.</p>\n<h2>How to fix it in lxml</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code is vulnerable to XPath injection because untrusted data is concatenated to an XPath query without prior\nvalidation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nfrom lxml import etree\n\n@app.route('/authenticate')\ndef authenticate():\n    username = request.args['username']\n    password = request.args['password']\n    expression = \"./users/user[@name='\" + username + \"' and @pass='\" + password + \"']\"\n    tree = etree.parse('resources/users.xml')\n\n    if tree.find(expression) is None:\n        return \"Invalid credentials\", 401\n    else:\n        return \"Success\", 200\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nfrom lxml import etree\n\n@app.route('/authenticate')\ndef authenticate():\n    username = request.args['username']\n    password = request.args['password']\n    expression = \"./users/user[@name=$username and @pass=$password]\"\n    tree = etree.parse('resources/users.xml')\n\n    if tree.xpath(expression, username=username, password=password) is None:\n        return \"Invalid credentials\", 401\n    else:\n        return \"Success\", 200\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of the\ninitially intended logic.</p>\n<h4>Parameterized Queries</h4>\n<p>For XPath injections, the cleanest way to do so is to use parameterized queries.</p>\n<p>XPath allows for the usage of variables inside expressions in the form of <code>$variable</code>. XPath variables can be used to construct an XPath\nquery without needing to concatenate user arguments to the query at runtime. Here is an example of an XPath query with variables:</p>\n<pre>\n/users/user[@user=$user and @pass=$pass]\n</pre>\n<p>When the XPath query is executed, the user input is passed alongside it. During execution, when the values of the variables need to be known, a\nresolver will return the correct user input for each variable. The contents of the variables are not considered application logic by the XPath\nexecutor, and thus injection is not possible.</p>\n<p>In the example, the username and password are passed as <a\nhref=\"https://lxml.de/xpathxslt.html#:~:text=The%20xpath()%20method%20has%20support%20for%20XPath%20variables%3A\">XPath variables</a> rather than\nconcatenated to the XPath query. By using a parameterized query, injection is successfully prevented.</p>\n<h2>How to fix it in the Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code is vulnerable to XPath injection because untrusted data is concatenated to an XPath query without prior validation.\nAlthough <code>xml.etree.ElementTree</code> only supports a subset of XPath syntax, exploitation can still be possible.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom xml.etree import ElementTree\nfrom flask import request\n\n@app.route('/authenticate')\ndef authenticate():\n    username = request.args['username']\n    password = request.args['password']\n    expression = \"./users/user[@name='\" + username + \"'][@pass='\" + password + \"']\"\n    tree = ElementTree.parse('resources/users.xml')\n\n    if tree.find(expression) is None:\n        return \"Invalid credentials\", 401\n    else:\n        return \"Success\", 200\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport re\nfrom xml.etree import ElementTree\nfrom flask import request\n\ntree = ElementTree.parse('resources/users.xml')\n\n@app.route('/authenticate')\ndef authenticate():\n    username = request.args['username']\n    password = request.args['password']\n\n    if re.match(\"^[a-zA-Z0-9]*$\", username) is None or re.match(\"^[a-zA-Z0-9]*$\", password) is None:\n        return \"Username or password contains invalid characters\", 400\n\n    expression = \"./users/user[@name='\" + username + \"'][@pass='\" + password + \"']\"\n    tree = ElementTree.parse('resources/users.xml')\n\n    if tree.find(expression) is None:\n        return \"Invalid credentials\", 401\n    else:\n        return \"Success\", 200\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of the\ninitially intended logic.</p>\n<h4>Parameterized Queries</h4>\n<p>For XPath injections, the cleanest way to do so is to use parameterized queries.</p>\n<p>XPath allows for the usage of variables inside expressions in the form of <code>$variable</code>. XPath variables can be used to construct an XPath\nquery without needing to concatenate user arguments to the query at runtime. Here is an example of an XPath query with variables:</p>\n<pre>\n/users/user[@user=$user and @pass=$pass]\n</pre>\n<p>When the XPath query is executed, the user input is passed alongside it. During execution, when the values of the variables need to be known, a\nresolver will return the correct user input for each variable. The contents of the variables are not considered application logic by the XPath\nexecutor, and thus injection is not possible.</p>\n<p>It is not possible to construct parameterized queries using only the Python Standard Library.<br> Please use <a\nhref=\"https://pypi.org/project/lxml/\">lxml</a> instead, which allows for parameterized queries using the <code>ElementTree.xpath()</code> method.</p>\n<h4>Validation</h4>\n<p>In case XPath parameterized queries are not available, the most secure way to protect against injections is to validate the input before using it\nin an XPath query.</p>\n<p><strong>Important</strong>: The application must do this validation server-side. Validating this client-side is insecure.</p>\n<p>Input can be validated in multiple ways:</p>\n<ul>\n  <li> By checking against a list of authorized and secure strings that the application is allowed to use in a query. </li>\n  <li> By ensuring user input is restricted to a specific range of characters (e.g., the regex <code>/^[a-zA-Z0-9]*$/</code> only allows alphanumeric\n  characters.) </li>\n  <li> By ensuring user input does not include any XPath metacharacters, such as <code>\"</code>, <code>'</code>, <code>/</code>, <code>@</code>,\n  <code>=</code>, <code>*</code>, <code>[</code>, <code>]</code>, <code>(</code> and <code>)</code>. </li>\n</ul>\n<p>If user input is not considered valid, it should be rejected as it is unsafe.</p>\n<p>In the example, we ensure that the username and password only contain alphanumeric characters by doing a regex match before executing the XPath\nquery.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/643\">CWE-643 - Improper Neutralization of Data within XPath Expressions</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S2078",
          "name": "LDAP queries should not be vulnerable to injection attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>LDAP injections occur in an application when the application retrieves untrusted data and inserts it into an LDAP query without sanitizing it\nfirst.</p>\n<p>An LDAP injection can either be basic or blind, depending on whether the server\u00e2\u20ac\u2122s fetched data is directly returned in the web application\u00e2\u20ac\u2122s\nresponse.<br> The absence of the corresponding response for the malicious request on the application is not a barrier to exploitation. Thus, it must\nbe treated the same way as basic LDAP injections.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application vulnerable to LDAP injection: after discovering the injection point, attackers insert data into the vulnerable\nfield to execute malicious LDAP commands.</p>\n<p>The impact of this vulnerability depends on how vital LDAP servers are to the organization.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Data leakage or corruption</h4>\n<p>In typical scenarios where systems perform innocuous LDAP operations to find users or create inventories, an LDAP injection could result in data\nleakage or corruption.</p>\n<h4>Privilege escalation</h4>\n<p>A malicious LDAP query could allow an attacker to impersonate a low-privileged user or an administrator in scenarios where systems perform\nauthorization checks or authentication.</p>\n<p>Attackers use this vulnerability to find multiple footholds on target organizations by gathering authentication bypasses.</p>\n<h2>How to fix it in python-ldap</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code is vulnerable to LDAP injection because untrusted data is concatenated to an LDAP query without prior sanitization\nor validation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nimport ldap\n\n@app.route(\"/user\")\ndef user():\n    username =  request.args['username']\n\n    search_filter = \"(&amp;(objectClass=user)(uid=\"+username+\"))\"\n\n    ldap_connection = ldap.initialize(\"ldap://localhost:389\")\n    user = ldap_connection.search_s(\"dc=example,dc=org\", ldap.SCOPE_SUBTREE, search_filter) # Noncompliant\n\n    return user[0]\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nimport ldap\n\n@app.route(\"/user\")\ndef user():\n    username = ldap.filter.escape_filter_chars(request.args['username'])\n\n    search_filter = \"(&amp;(objectClass=user)(uid=\"+username+\"))\"\n\n    ldap_connection = ldap.initialize(\"ldap://localhost:389\")\n    user = ldap_connection.search_s(\"dc=example,dc=org\", ldap.SCOPE_SUBTREE, search_filter)\n\n    return user[0]\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of the\ninitially intended logic.</p>\n<p>For LDAP injection, the cleanest way to do so is to use parameterized queries if it is available for your use case.</p>\n<p>Another approach is to sanitize the input before using it in an LDAP query. Input sanitization should be primarily done using native libraries.</p>\n<p>Alternatively, validation can be implemented using an allowlist approach by creating a list of authorized and secure strings you want the\napplication to use in a query. If a user input does not match an entry in this list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must sanitize and validate on the server-side. Not on client-side front-ends.</p>\n<p>The most fundamental security mechanism is the restriction of LDAP metacharacters.</p>\n<p>For <strong>Distinguished Names</strong> (DN), special characters that need to be escaped include:</p>\n<ul>\n  <li> <code>\\</code> </li>\n  <li> <code>#</code> </li>\n  <li> <code>+</code> </li>\n  <li> <code>&lt;</code> </li>\n  <li> <code>&gt;</code> </li>\n  <li> <code>,</code> </li>\n  <li> <code>;</code> </li>\n  <li> <code>\"</code> </li>\n  <li> <code>=</code> </li>\n</ul>\n<p>For <strong>Search Filters</strong>, special characters that need to be escaped include:</p>\n<ul>\n  <li> <code>*</code> </li>\n  <li> <code>(</code> </li>\n  <li> <code>)</code> </li>\n  <li> <code>\\</code> </li>\n  <li> <code>null</code> </li>\n</ul>\n<p>For Python, the python-ldap library functions <a\nhref=\"https://www.python-ldap.org/en/python-ldap-3.3.0/reference/ldap-filter.html\"><code>escape_filter_chars</code></a> and <a\nhref=\"https://www.python-ldap.org/en/python-ldap-3.3.0/reference/ldap-dn.html?highlight=escape_dn#ldap.dn.escape_dn_chars\"><code>escape_dn_chars</code></a>\nallow sanitizing these characters.</p>\n<p>In the compliant solution example, the <code>escape_filter_chars</code> is used to sanitize the search filter concatenated input.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> <a href=\"https://www.ietf.org/rfc/rfc4514.txt\">RFC 4514</a> - LDAP: String Representation of Distinguished Names </li>\n  <li> <a href=\"https://www.ietf.org/rfc/rfc4515.txt\">RFC 4515</a> - LDAP: String Representation of Search Filters </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/90\">CWE-90 - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP\n  Injection')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>LDAP injections occur in an application when the application retrieves untrusted data and inserts it into an LDAP query without sanitizing it\nfirst.</p>\n<p>An LDAP injection can either be basic or blind, depending on whether the server\u00e2\u20ac\u2122s fetched data is directly returned in the web application\u00e2\u20ac\u2122s\nresponse.<br> The absence of the corresponding response for the malicious request on the application is not a barrier to exploitation. Thus, it must\nbe treated the same way as basic LDAP injections.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application vulnerable to LDAP injection: after discovering the injection point, attackers insert data into the vulnerable\nfield to execute malicious LDAP commands.</p>\n<p>The impact of this vulnerability depends on how vital LDAP servers are to the organization.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Data leakage or corruption</h4>\n<p>In typical scenarios where systems perform innocuous LDAP operations to find users or create inventories, an LDAP injection could result in data\nleakage or corruption.</p>\n<h4>Privilege escalation</h4>\n<p>A malicious LDAP query could allow an attacker to impersonate a low-privileged user or an administrator in scenarios where systems perform\nauthorization checks or authentication.</p>\n<p>Attackers use this vulnerability to find multiple footholds on target organizations by gathering authentication bypasses.</p>\n<h2>How to fix it in python-ldap</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code is vulnerable to LDAP injection because untrusted data is concatenated to an LDAP query without prior sanitization\nor validation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nimport ldap\n\n@app.route(\"/user\")\ndef user():\n    username =  request.args['username']\n\n    search_filter = \"(&amp;(objectClass=user)(uid=\"+username+\"))\"\n\n    ldap_connection = ldap.initialize(\"ldap://localhost:389\")\n    user = ldap_connection.search_s(\"dc=example,dc=org\", ldap.SCOPE_SUBTREE, search_filter) # Noncompliant\n\n    return user[0]\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nimport ldap\n\n@app.route(\"/user\")\ndef user():\n    username = ldap.filter.escape_filter_chars(request.args['username'])\n\n    search_filter = \"(&amp;(objectClass=user)(uid=\"+username+\"))\"\n\n    ldap_connection = ldap.initialize(\"ldap://localhost:389\")\n    user = ldap_connection.search_s(\"dc=example,dc=org\", ldap.SCOPE_SUBTREE, search_filter)\n\n    return user[0]\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of the\ninitially intended logic.</p>\n<p>For LDAP injection, the cleanest way to do so is to use parameterized queries if it is available for your use case.</p>\n<p>Another approach is to sanitize the input before using it in an LDAP query. Input sanitization should be primarily done using native libraries.</p>\n<p>Alternatively, validation can be implemented using an allowlist approach by creating a list of authorized and secure strings you want the\napplication to use in a query. If a user input does not match an entry in this list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must sanitize and validate on the server-side. Not on client-side front-ends.</p>\n<p>The most fundamental security mechanism is the restriction of LDAP metacharacters.</p>\n<p>For <strong>Distinguished Names</strong> (DN), special characters that need to be escaped include:</p>\n<ul>\n  <li> <code>\\</code> </li>\n  <li> <code>#</code> </li>\n  <li> <code>+</code> </li>\n  <li> <code>&lt;</code> </li>\n  <li> <code>&gt;</code> </li>\n  <li> <code>,</code> </li>\n  <li> <code>;</code> </li>\n  <li> <code>\"</code> </li>\n  <li> <code>=</code> </li>\n</ul>\n<p>For <strong>Search Filters</strong>, special characters that need to be escaped include:</p>\n<ul>\n  <li> <code>*</code> </li>\n  <li> <code>(</code> </li>\n  <li> <code>)</code> </li>\n  <li> <code>\\</code> </li>\n  <li> <code>null</code> </li>\n</ul>\n<p>For Python, the python-ldap library functions <a\nhref=\"https://www.python-ldap.org/en/python-ldap-3.3.0/reference/ldap-filter.html\"><code>escape_filter_chars</code></a> and <a\nhref=\"https://www.python-ldap.org/en/python-ldap-3.3.0/reference/ldap-dn.html?highlight=escape_dn#ldap.dn.escape_dn_chars\"><code>escape_dn_chars</code></a>\nallow sanitizing these characters.</p>\n<p>In the compliant solution example, the <code>escape_filter_chars</code> is used to sanitize the search filter concatenated input.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> <a href=\"https://www.ietf.org/rfc/rfc4514.txt\">RFC 4514</a> - LDAP: String Representation of Distinguished Names </li>\n  <li> <a href=\"https://www.ietf.org/rfc/rfc4515.txt\">RFC 4515</a> - LDAP: String Representation of Search Filters </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/90\">CWE-90 - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP\n  Injection')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S6785",
          "name": "GraphQL queries should not be vulnerable to Denial of Service attacks",
          "description": "<p>GraphQL servers are vulnerable to Denial of Service attacks when they fail to limit the depth of queries. In such a case, an attacker is able to\ncraft complex, deeply nested queries to make the application unwillingly consume an important amount of resources.</p>\n<h2>Why is this an issue?</h2>\n<p>When a server receives a deeply nested query, it attempts to resolve all the requested data. This process can consume a substantial amount of\ncomputational resources, leading to a slowdown in server response times.</p>\n<h3>What is the potential impact?</h3>\n<p>A server that faces a resource exhaustion situation can become unstable. The exact impact will depend on how the affected application is deployed\nand how well the hosting server configuration is hardened.</p>\n<p>In the worst case, when the application is deployed in an uncontained environment, directly on its host system, the memory exhaustion will affect\nthe whole hosting server. The server\u00e2\u20ac\u2122s operating system might start killing arbitrary memory-intensive processes, including the main application or\nother sensitive ones. This will result in a general operating failure, also known as a Denial of Service (DoS).</p>\n<p>In cases where the application is deployed in a virtualized or otherwise contained environment, or where resource usage limits are in place, the\nconsequences are limited to the vulnerable application only. In that case, other processes and applications hosted on the same server may keep on\nrunning without perturbation. The vulnerable application will still stop working properly.</p>\n<p>In general, that kind of DoS attack can have severe financial consequences. They are particularly important when the affected systems are\nbusiness-critical.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom graphql_server.flask import GraphQLView\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(  # Noncompliant\n        name=\"api\",\n        schema=schema,\n    )\n)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom graphql_server.flask import GraphQLView\nfrom graphene.validation import depth_limit_validator\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(\n        name=\"api\",\n        schema=schema,\n        validation_rules=[\n           depth_limit_validator(10) # Choose a value that fits your application's requirements\n        ]\n    )\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Avoid circular references</h4>\n<p>A prerequisite for deeply nested query to be executed is the presence of circular references in the database schema. Avoid or minimize circular\nreferences when designing the application\u00e2\u20ac\u2122s database schema.</p>\n<h4>Set limits</h4>\n<p>Limit the depth of the queries your server will accept. By setting a maximum depth, you can ensure that excessively nested queries are rejected.\nRemember, the values for maximum depth and complexity should be set according to your application\u00e2\u20ac\u2122s specific needs. Setting these limits too low could\nrestrict legitimate queries, while setting them too high could leave your server vulnerable to attacks.</p>\n<p>The easiest way to set such a limit is to use the query validation API available from Graphene 3. Applications running Graphene 2 should consider\nupgrading to Graphene 3 to benefit from this API.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/770\">CWE-707 - Allocation of Resources Without Limits or Throttling</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222667\">Application Security and\n  Development: V-222667</a> - Protections against DoS attacks must be implemented. </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>GraphQL servers are vulnerable to Denial of Service attacks when they fail to limit the depth of queries. In such a case, an attacker is able to\ncraft complex, deeply nested queries to make the application unwillingly consume an important amount of resources.</p>\n<h2>Why is this an issue?</h2>\n<p>When a server receives a deeply nested query, it attempts to resolve all the requested data. This process can consume a substantial amount of\ncomputational resources, leading to a slowdown in server response times.</p>\n<h3>What is the potential impact?</h3>\n<p>A server that faces a resource exhaustion situation can become unstable. The exact impact will depend on how the affected application is deployed\nand how well the hosting server configuration is hardened.</p>\n<p>In the worst case, when the application is deployed in an uncontained environment, directly on its host system, the memory exhaustion will affect\nthe whole hosting server. The server\u00e2\u20ac\u2122s operating system might start killing arbitrary memory-intensive processes, including the main application or\nother sensitive ones. This will result in a general operating failure, also known as a Denial of Service (DoS).</p>\n<p>In cases where the application is deployed in a virtualized or otherwise contained environment, or where resource usage limits are in place, the\nconsequences are limited to the vulnerable application only. In that case, other processes and applications hosted on the same server may keep on\nrunning without perturbation. The vulnerable application will still stop working properly.</p>\n<p>In general, that kind of DoS attack can have severe financial consequences. They are particularly important when the affected systems are\nbusiness-critical.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom graphql_server.flask import GraphQLView\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(  # Noncompliant\n        name=\"api\",\n        schema=schema,\n    )\n)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom graphql_server.flask import GraphQLView\nfrom graphene.validation import depth_limit_validator\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(\n        name=\"api\",\n        schema=schema,\n        validation_rules=[\n           depth_limit_validator(10) # Choose a value that fits your application's requirements\n        ]\n    )\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Avoid circular references</h4>\n<p>A prerequisite for deeply nested query to be executed is the presence of circular references in the database schema. Avoid or minimize circular\nreferences when designing the application\u00e2\u20ac\u2122s database schema.</p>\n<h4>Set limits</h4>\n<p>Limit the depth of the queries your server will accept. By setting a maximum depth, you can ensure that excessively nested queries are rejected.\nRemember, the values for maximum depth and complexity should be set according to your application\u00e2\u20ac\u2122s specific needs. Setting these limits too low could\nrestrict legitimate queries, while setting them too high could leave your server vulnerable to attacks.</p>\n<p>The easiest way to set such a limit is to use the query validation API available from Graphene 3. Applications running Graphene 2 should consider\nupgrading to Graphene 3 to benefit from this API.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/770\">CWE-707 - Allocation of Resources Without Limits or Throttling</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222667\">Application Security and\n  Development: V-222667</a> - Protections against DoS attacks must be implemented. </li>\n</ul>\n\n"
        },
        {
          "id": "S5659",
          "name": "JWT should be signed and verified",
          "description": "<p>This vulnerability allows forging of JSON Web Tokens to impersonate other users.</p>\n<h2>Why is this an issue?</h2>\n<p>JSON Web Tokens (JWTs), a popular method of securely transmitting information between parties as a JSON object, can become a significant security\nrisk when they are not properly signed with a robust cipher algorithm, left unsigned altogether, or if the signature is not verified. This\nvulnerability class allows malicious actors to craft fraudulent tokens, effectively impersonating user identities. In essence, the integrity of a JWT\nhinges on the strength and presence of its signature.</p>\n<h3>What is the potential impact?</h3>\n<p>When a JSON Web Token is not appropriately signed with a strong cipher algorithm or if the signature is not verified, it becomes a significant\nthreat to data security and the privacy of user identities.</p>\n<h4>Impersonation of users</h4>\n<p>JWTs are commonly used to represent user authorization claims. They contain information about the user\u00e2\u20ac\u2122s identity, user roles, and access rights.\nWhen these tokens are not securely signed, it allows an attacker to forge them. In essence, a weak or missing signature gives an attacker the power to\ncraft a token that could impersonate any user. For instance, they could create a token for an administrator account, gaining access to high-level\npermissions and sensitive data.</p>\n<h4>Unauthorized data access</h4>\n<p>When a JWT is not securely signed, it can be tampered with by an attacker, and the integrity of the data it carries cannot be trusted. An attacker\ncan manipulate the content of the token and grant themselves permissions they should not have, leading to unauthorized data access.</p>\n<h2>How to fix it in PyJWT</h2>\n<h3>Code examples</h3>\n<p>The following code contains an example of JWT decoding without verification of the signature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport jwt\n\njwt.decode(token, options={\"verify_signature\":False}) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>By default, verification is enabled for the method <code>decode</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport jwt\n\njwt.decode(token, key, algorithms=\"HS256\")\n</pre>\n<h3>How does this work?</h3>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT\u00e2\u20ac\u2122s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application\u00e2\u20ac\u2122s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>\n<h2>How to fix it in python-jwt</h2>\n<h3>Code examples</h3>\n<p>The following code contains an example of JWT decoding without verification of the signature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport python_jwt as jwt\n\njwt.process_jwt(token) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport python_jwt as jwt\n\njwt.process_jwt(token)\njwt.verify_jwt(token, key, ['HS256'])\n</pre>\n<h3>How does this work?</h3>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT\u00e2\u20ac\u2122s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application\u00e2\u20ac\u2122s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>\n<h2>How to fix it in python-jose</h2>\n<h3>Code examples</h3>\n<p>The following code contains an example of JWT decoding without verification of the signature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"111\" data-diff-type=\"noncompliant\">\nfrom jose import jwt\n\njwt.decode(token, None, options={\"verify_signature\": False}) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>By default, verification is enabled for the methods <code>decode</code> and <code>verify</code>.</p>\n<pre data-diff-id=\"111\" data-diff-type=\"compliant\">\nfrom jose import jwt\n\njwt.decode(token, key, algorithms=[\"HS256\"])\n</pre>\n<h3>How does this work?</h3>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT\u00e2\u20ac\u2122s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application\u00e2\u20ac\u2122s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/347\">CWE-347 - Improper Verification of Cryptographic Signature</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This vulnerability allows forging of JSON Web Tokens to impersonate other users.</p>\n<h2>Why is this an issue?</h2>\n<p>JSON Web Tokens (JWTs), a popular method of securely transmitting information between parties as a JSON object, can become a significant security\nrisk when they are not properly signed with a robust cipher algorithm, left unsigned altogether, or if the signature is not verified. This\nvulnerability class allows malicious actors to craft fraudulent tokens, effectively impersonating user identities. In essence, the integrity of a JWT\nhinges on the strength and presence of its signature.</p>\n<h3>What is the potential impact?</h3>\n<p>When a JSON Web Token is not appropriately signed with a strong cipher algorithm or if the signature is not verified, it becomes a significant\nthreat to data security and the privacy of user identities.</p>\n<h4>Impersonation of users</h4>\n<p>JWTs are commonly used to represent user authorization claims. They contain information about the user\u00e2\u20ac\u2122s identity, user roles, and access rights.\nWhen these tokens are not securely signed, it allows an attacker to forge them. In essence, a weak or missing signature gives an attacker the power to\ncraft a token that could impersonate any user. For instance, they could create a token for an administrator account, gaining access to high-level\npermissions and sensitive data.</p>\n<h4>Unauthorized data access</h4>\n<p>When a JWT is not securely signed, it can be tampered with by an attacker, and the integrity of the data it carries cannot be trusted. An attacker\ncan manipulate the content of the token and grant themselves permissions they should not have, leading to unauthorized data access.</p>\n<h2>How to fix it in PyJWT</h2>\n<h3>Code examples</h3>\n<p>The following code contains an example of JWT decoding without verification of the signature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport jwt\n\njwt.decode(token, options={\"verify_signature\":False}) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>By default, verification is enabled for the method <code>decode</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport jwt\n\njwt.decode(token, key, algorithms=\"HS256\")\n</pre>\n<h3>How does this work?</h3>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT\u00e2\u20ac\u2122s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application\u00e2\u20ac\u2122s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>\n<h2>How to fix it in python-jwt</h2>\n<h3>Code examples</h3>\n<p>The following code contains an example of JWT decoding without verification of the signature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport python_jwt as jwt\n\njwt.process_jwt(token) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport python_jwt as jwt\n\njwt.process_jwt(token)\njwt.verify_jwt(token, key, ['HS256'])\n</pre>\n<h3>How does this work?</h3>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT\u00e2\u20ac\u2122s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application\u00e2\u20ac\u2122s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>\n<h2>How to fix it in python-jose</h2>\n<h3>Code examples</h3>\n<p>The following code contains an example of JWT decoding without verification of the signature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"111\" data-diff-type=\"noncompliant\">\nfrom jose import jwt\n\njwt.decode(token, None, options={\"verify_signature\": False}) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<p>By default, verification is enabled for the methods <code>decode</code> and <code>verify</code>.</p>\n<pre data-diff-id=\"111\" data-diff-type=\"compliant\">\nfrom jose import jwt\n\njwt.decode(token, key, algorithms=[\"HS256\"])\n</pre>\n<h3>How does this work?</h3>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWT\u00e2\u20ac\u2122s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your application\u00e2\u20ac\u2122s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/347\">CWE-347 - Improper Verification of Cryptographic Signature</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5527",
          "name": "Server hostnames should be verified during SSL/TLS connections",
          "description": "<p>This vulnerability allows attackers to impersonate a trusted host.</p>\n<h2>Why is this an issue?</h2>\n<p>Transport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. In this\nprocess, the role of hostname validation, combined with certificate validation, is to ensure that a system is indeed the one it claims to be, adding\nan extra layer of trust and security.</p>\n<p>When hostname validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted entity\nand intercept, manipulate, or steal the data being transmitted.</p>\n<p>To do so, an attacker would obtain a valid certificate authenticating <code>example.com</code>, serve it using a different hostname, and the\napplication code would still accept it.</p>\n<h3>What is the potential impact?</h3>\n<p>Establishing trust in a secure way is a non-trivial task. When you disable hostname validation, you are removing a key mechanism designed to build\nthis trust in internet communication, opening your system up to a number of potential threats.</p>\n<h4>Identity spoofing</h4>\n<p>If a system does not validate hostnames, it cannot confirm the identity of the other party involved in the communication. An attacker can exploit\nthis by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bank\u00e2\u20ac\u2122s server,\ntricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect any data\nyour system sends to them, potentially leading to significant data breaches.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled hostname validation.</p>\n<p>Certificate validation is not enabled by default when <code>_create_unverified_context</code> or <code>_create_stdlib_context</code> is used. It is\nrecommended to use <code>create_default_context</code>, without explicitly setting <code>check_hostname</code> to <code>False</code>.<br> Doing so\ncreates a secure context that validates both hostnames and certificates.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport ssl\n\nexample = ssl._create_stdlib_context() # Noncompliant\n\nexample = ssl._create_default_https_context()\nexample.check_hostname = False # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport ssl\n\nexample = ssl.create_default_context()\n\nexample = ssl._create_default_https_context()\n</pre>\n<h3>How does this work?</h3>\n<p>To fix the vulnerability of disabled hostname validation, it is strongly recommended to first re-enable the default validation and fix the root\ncause: the validity of the certificate.</p>\n<h4>Use valid certificates</h4>\n<p>If a hostname validation failure prevents connecting to the target server, keep in mind that <strong>one system\u00e2\u20ac\u2122s code should not work around\nanother system\u00e2\u20ac\u2122s problems</strong>, as this creates unnecessary dependencies and can lead to reliability issues.</p>\n<p>Therefore, the first solution is to change the remote host\u00e2\u20ac\u2122s certificate to match its identity. If the remote host is not under your control,\nconsider replicating its service to a server whose certificate you can change yourself.</p>\n<p>In case the contacted host is located on a development machine, and if there is no other choice, try following this solution:</p>\n<ul>\n  <li> Create a self-signed certificate for that machine. </li>\n  <li> Add this self-signed certificate to the system\u00e2\u20ac\u2122s trust store. </li>\n  <li> If the hostname is not <code>localhost</code>, add the hostname in the <code>/etc/hosts</code> file. </li>\n</ul>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-NETWORK/\">Mobile AppSec Verification Standard - Network Communication Requirements</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">Mobile Top 10 2016 Category M3 - Insecure\n  Communication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/297\">CWE-297 - Improper Validation of Certificate with Host Mismatch</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222550\">Application Security and\n  Development: V-222550</a> - The application must validate certificates by constructing a certification path to an accepted trust anchor. </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This vulnerability allows attackers to impersonate a trusted host.</p>\n<h2>Why is this an issue?</h2>\n<p>Transport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. In this\nprocess, the role of hostname validation, combined with certificate validation, is to ensure that a system is indeed the one it claims to be, adding\nan extra layer of trust and security.</p>\n<p>When hostname validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted entity\nand intercept, manipulate, or steal the data being transmitted.</p>\n<p>To do so, an attacker would obtain a valid certificate authenticating <code>example.com</code>, serve it using a different hostname, and the\napplication code would still accept it.</p>\n<h3>What is the potential impact?</h3>\n<p>Establishing trust in a secure way is a non-trivial task. When you disable hostname validation, you are removing a key mechanism designed to build\nthis trust in internet communication, opening your system up to a number of potential threats.</p>\n<h4>Identity spoofing</h4>\n<p>If a system does not validate hostnames, it cannot confirm the identity of the other party involved in the communication. An attacker can exploit\nthis by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bank\u00e2\u20ac\u2122s server,\ntricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect any data\nyour system sends to them, potentially leading to significant data breaches.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled hostname validation.</p>\n<p>Certificate validation is not enabled by default when <code>_create_unverified_context</code> or <code>_create_stdlib_context</code> is used. It is\nrecommended to use <code>create_default_context</code>, without explicitly setting <code>check_hostname</code> to <code>False</code>.<br> Doing so\ncreates a secure context that validates both hostnames and certificates.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport ssl\n\nexample = ssl._create_stdlib_context() # Noncompliant\n\nexample = ssl._create_default_https_context()\nexample.check_hostname = False # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport ssl\n\nexample = ssl.create_default_context()\n\nexample = ssl._create_default_https_context()\n</pre>\n<h3>How does this work?</h3>\n<p>To fix the vulnerability of disabled hostname validation, it is strongly recommended to first re-enable the default validation and fix the root\ncause: the validity of the certificate.</p>\n<h4>Use valid certificates</h4>\n<p>If a hostname validation failure prevents connecting to the target server, keep in mind that <strong>one system\u00e2\u20ac\u2122s code should not work around\nanother system\u00e2\u20ac\u2122s problems</strong>, as this creates unnecessary dependencies and can lead to reliability issues.</p>\n<p>Therefore, the first solution is to change the remote host\u00e2\u20ac\u2122s certificate to match its identity. If the remote host is not under your control,\nconsider replicating its service to a server whose certificate you can change yourself.</p>\n<p>In case the contacted host is located on a development machine, and if there is no other choice, try following this solution:</p>\n<ul>\n  <li> Create a self-signed certificate for that machine. </li>\n  <li> Add this self-signed certificate to the system\u00e2\u20ac\u2122s trust store. </li>\n  <li> If the hostname is not <code>localhost</code>, add the hostname in the <code>/etc/hosts</code> file. </li>\n</ul>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-NETWORK/\">Mobile AppSec Verification Standard - Network Communication Requirements</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">Mobile Top 10 2016 Category M3 - Insecure\n  Communication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/297\">CWE-297 - Improper Validation of Certificate with Host Mismatch</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222550\">Application Security and\n  Development: V-222550</a> - The application must validate certificates by constructing a certification path to an accepted trust anchor. </li>\n</ul>\n\n"
        },
        {
          "id": "S4830",
          "name": "Server certificates should be verified during SSL/TLS connections",
          "description": "<p>This vulnerability makes it possible that an encrypted communication is intercepted.</p>\n<h2>Why is this an issue?</h2>\n<p>Transport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them.\nCertificate validation adds an extra layer of trust and security to this process to ensure that a system is indeed the one it claims to be.</p>\n<p>When certificate validation is disabled, the client skips a critical security check. This creates an opportunity for attackers to pose as a trusted\nentity and intercept, manipulate, or steal the data being transmitted.</p>\n<h3>What is the potential impact?</h3>\n<p>Establishing trust in a secure way is a non-trivial task. When you disable certificate validation, you are removing a key mechanism designed to\nbuild this trust in internet communication, opening your system up to a number of potential threats.</p>\n<h4>Identity spoofing</h4>\n<p>If a system does not validate certificates, it cannot confirm the identity of the other party involved in the communication. An attacker can\nexploit this by creating a fake server and masquerading as a legitimate one. For example, they might set up a server that looks like your bank\u00e2\u20ac\u2122s\nserver, tricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect\nany data your system sends to them, potentially leading to significant data breaches.</p>\n<h4>Loss of data integrity</h4>\n<p>When TLS certificate validation is disabled, the integrity of the data you send and receive cannot be guaranteed. An attacker could modify the data\nin transit, and you would have no way of knowing. This could range from subtle manipulations of the data you receive to the injection of malicious\ncode or malware into your system. The consequences of such breaches of data integrity can be severe, depending on the nature of the data and the\nsystem.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled certificate validation.</p>\n<p>Certificate validation is not enabled by default when <code>_create_unverified_context</code> is used. It is recommended to use\n<code>_create_default_https_context</code> instead to create a secure context that validates certificates.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport ssl\n\nctx1 = ssl._create_unverified_context() # Noncompliant\nctx2 = ssl._create_stdlib_context() # Noncompliant\n\nctx3 = ssl.create_default_context()\nctx3.verify_mode = ssl.CERT_NONE # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport ssl\n\nctx = ssl.create_default_context()\nctx.verify_mode = ssl.CERT_REQUIRED\n\n# By default, certificate validation is enabled\nctx = ssl._create_default_https_context()\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<h2>How to fix it in OpenSSL</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled certificate validation.</p>\n<p>Certificate validation is not enabled by default and has to be explicitly enabled through <code>set_verify</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom OpenSSL import SSL\n\nctx1 = SSL.Context(SSL.TLSv1_2_METHOD) # Noncompliant\n\nctx2 = SSL.Context(SSL.TLSv1_2_METHOD)\nctx2.set_verify(SSL.VERIFY_NONE, verify_callback) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom OpenSSL import SSL\n\nctx = SSL.Context(SSL.TLSv1_2_METHOD)\nctx.set_verify(SSL.VERIFY_PEER, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT | SSL.VERIFY_CLIENT_ONCE, verify_callback)\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<h2>How to fix it in Requests</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport requests\n\nrequests.request('GET', 'https://example.com', verify=False) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport requests\n\n# By default, certificate validation is enabled\nrequests.request('GET', 'https://example.com')\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<h2>How to fix it in aiohttp</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify_ssl</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify_ssl</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"noncompliant\">\nimport aiohttp\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\", verify_ssl=False) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"compliant\">\nimport aiohttp\n\n# By default, certificate validation is enabled\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\")\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<h2>How to fix it in HTTPX</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport httpx\n\nhttpx.get('https://example.com', verify=False)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nimport httpx\n\n# By default, certificate validation is enabled\nhttpx.get('https://example.com')\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">Mobile Top 10 2016 Category M3 - Insecure\n  Communication</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-NETWORK/\">Mobile AppSec Verification Standard - Network Communication Requirements</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/295\">CWE-295 - Improper Certificate Validation</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222550\">Application Security and\n  Development: V-222550</a> - The application must validate certificates by constructing a certification path to an accepted trust anchor. </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This vulnerability makes it possible that an encrypted communication is intercepted.</p>\n<h2>Why is this an issue?</h2>\n<p>Transport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them.\nCertificate validation adds an extra layer of trust and security to this process to ensure that a system is indeed the one it claims to be.</p>\n<p>When certificate validation is disabled, the client skips a critical security check. This creates an opportunity for attackers to pose as a trusted\nentity and intercept, manipulate, or steal the data being transmitted.</p>\n<h3>What is the potential impact?</h3>\n<p>Establishing trust in a secure way is a non-trivial task. When you disable certificate validation, you are removing a key mechanism designed to\nbuild this trust in internet communication, opening your system up to a number of potential threats.</p>\n<h4>Identity spoofing</h4>\n<p>If a system does not validate certificates, it cannot confirm the identity of the other party involved in the communication. An attacker can\nexploit this by creating a fake server and masquerading as a legitimate one. For example, they might set up a server that looks like your bank\u00e2\u20ac\u2122s\nserver, tricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect\nany data your system sends to them, potentially leading to significant data breaches.</p>\n<h4>Loss of data integrity</h4>\n<p>When TLS certificate validation is disabled, the integrity of the data you send and receive cannot be guaranteed. An attacker could modify the data\nin transit, and you would have no way of knowing. This could range from subtle manipulations of the data you receive to the injection of malicious\ncode or malware into your system. The consequences of such breaches of data integrity can be severe, depending on the nature of the data and the\nsystem.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled certificate validation.</p>\n<p>Certificate validation is not enabled by default when <code>_create_unverified_context</code> is used. It is recommended to use\n<code>_create_default_https_context</code> instead to create a secure context that validates certificates.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport ssl\n\nctx1 = ssl._create_unverified_context() # Noncompliant\nctx2 = ssl._create_stdlib_context() # Noncompliant\n\nctx3 = ssl.create_default_context()\nctx3.verify_mode = ssl.CERT_NONE # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport ssl\n\nctx = ssl.create_default_context()\nctx.verify_mode = ssl.CERT_REQUIRED\n\n# By default, certificate validation is enabled\nctx = ssl._create_default_https_context()\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<h2>How to fix it in OpenSSL</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled certificate validation.</p>\n<p>Certificate validation is not enabled by default and has to be explicitly enabled through <code>set_verify</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom OpenSSL import SSL\n\nctx1 = SSL.Context(SSL.TLSv1_2_METHOD) # Noncompliant\n\nctx2 = SSL.Context(SSL.TLSv1_2_METHOD)\nctx2.set_verify(SSL.VERIFY_NONE, verify_callback) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom OpenSSL import SSL\n\nctx = SSL.Context(SSL.TLSv1_2_METHOD)\nctx.set_verify(SSL.VERIFY_PEER, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT, verify_callback)\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT | SSL.VERIFY_CLIENT_ONCE, verify_callback)\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<h2>How to fix it in Requests</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport requests\n\nrequests.request('GET', 'https://example.com', verify=False) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport requests\n\n# By default, certificate validation is enabled\nrequests.request('GET', 'https://example.com')\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<h2>How to fix it in aiohttp</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify_ssl</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify_ssl</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"noncompliant\">\nimport aiohttp\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\", verify_ssl=False) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"compliant\">\nimport aiohttp\n\n# By default, certificate validation is enabled\n\nasync def example():\n  async with aiohttp.ClientSession() as session:\n    session.get(\"https://example.com\")\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<h2>How to fix it in HTTPX</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by setting <code>verify</code> to <code>False</code>. To enable validation set the value to\n<code>True</code> or do not set <code>verify</code> at all to use the secure default value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport httpx\n\nhttpx.get('https://example.com', verify=False)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nimport httpx\n\n# By default, certificate validation is enabled\nhttpx.get('https://example.com')\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">Mobile Top 10 2016 Category M3 - Insecure\n  Communication</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-NETWORK/\">Mobile AppSec Verification Standard - Network Communication Requirements</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/295\">CWE-295 - Improper Certificate Validation</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222550\">Application Security and\n  Development: V-222550</a> - The application must validate certificates by constructing a certification path to an accepted trust anchor. </li>\n</ul>\n\n"
        },
        {
          "id": "S2631",
          "name": "Regular expressions should not be vulnerable to Denial of Service attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>Regular expression injections occur when the application retrieves untrusted data and uses it as a regex to pattern match a string with it.</p>\n<p>Most regular expression search engines use <em>backtracking</em> to try all possible regex execution paths when evaluating an input. Sometimes this\ncan lead to performance problems also referred to as <em>catastrophic backtracking</em> situations.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application vulnerable to regex injection:<br> After discovering the injection point, attackers insert data into the\nvulnerable field to make the affected component inaccessible.</p>\n<p>Depending on the application\u00e2\u20ac\u2122s software architecture and the injection point\u00e2\u20ac\u2122s location, the impact may or may not be visible.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Self Denial of Service</h4>\n<p>In cases where the complexity of the regular expression is exponential to the input size, a small, carefully-crafted input (for example, 20 chars)\ncan trigger <em>catastrophic backtracking</em> and cause a denial of service of the application.</p>\n<p>Super-linear regex complexity can produce the same effects for a large, carefully crafted input (thousands of chars).</p>\n<p>If the component jeopardized by this vulnerability is not a bottleneck that acts as a single point of failure (SPOF) within the application, the\ndenial of service might only affect the attacker who initiated it.</p>\n<p>Such benign denial of service can also occur in architectures that rely heavily on containers and container orchestrators. Replication systems\nwould detect the failure of a container and automatically replace it.</p>\n<h4>Infrastructure SPOFs</h4>\n<p>However, a denial of service attack can be critical to the enterprise if it targets a SPOF component. Sometimes the SPOF is a software architecture\nvulnerability (such as a single component on which multiple critical components depend) or an operational vulnerability (for example, insufficient\ncontainer creation capabilities or failures from containers to terminate).</p>\n<p>In either case, attackers aim to exploit the infrastructure weakness by sending as many malicious payloads as possible, using potentially huge\noffensive infrastructures.</p>\n<p>These threats are particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code is vulnerable to Regex Denial of Service (ReDoS) because untrusted data is used as a regex to scan a string without\nprior sanitization or validation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nimport re\n\n@app.route('/lookup')\ndef lookup():\n  regex = request.args['regex']\n  data = request.args['data']\n\n  re.search(regex, data) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nimport re\n\n@app.route('/lookup')\ndef lookup():\n  regex = request.args['regex']\n  data = request.args['data']\n\n  re.search(re.escape(regex), data)\n</pre>\n<h3>How does this work?</h3>\n<h4>Sanitization and Validation</h4>\n<p>Metacharacters escape using native functions is a solution against regex injection.<br> The escape function sanitizes the input so that the regular\nexpression engine interprets these characters literally.</p>\n<p>An allowlist approach can also be used by creating a list containing authorized and secure strings you want the application to use in a query.<br>\nIf a user input does not match an entry in this list, it should be considered unsafe and rejected.</p>\n<p><strong>Important Note</strong>: The application must sanitize and validate on the server side. Not on client-side front end.</p>\n<p>Where possible, use <em>non-backtracking</em> regex engines, for example, Google\u00e2\u20ac\u2122s <a href=\"https://github.com/google/re2\">re2</a>.</p>\n<p>In the compliant solution, <code>re.escape</code> escapes metacharacters and escape sequences that could have broken the initially intended\nlogic.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">OWASP Regular expression Denial of Service - ReDoS</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/400\">CWE-400 - Uncontrolled Resource Consumption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1333\">CWE-1333 - Inefficient Regular Expression Complexity</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222594\">Application Security and\n  Development: V-222594</a> - The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information\n  systems. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222667\">Application Security and\n  Development: V-222667</a> - Protections against DoS attacks must be implemented. </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Regular expression injections occur when the application retrieves untrusted data and uses it as a regex to pattern match a string with it.</p>\n<p>Most regular expression search engines use <em>backtracking</em> to try all possible regex execution paths when evaluating an input. Sometimes this\ncan lead to performance problems also referred to as <em>catastrophic backtracking</em> situations.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application vulnerable to regex injection:<br> After discovering the injection point, attackers insert data into the\nvulnerable field to make the affected component inaccessible.</p>\n<p>Depending on the application\u00e2\u20ac\u2122s software architecture and the injection point\u00e2\u20ac\u2122s location, the impact may or may not be visible.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Self Denial of Service</h4>\n<p>In cases where the complexity of the regular expression is exponential to the input size, a small, carefully-crafted input (for example, 20 chars)\ncan trigger <em>catastrophic backtracking</em> and cause a denial of service of the application.</p>\n<p>Super-linear regex complexity can produce the same effects for a large, carefully crafted input (thousands of chars).</p>\n<p>If the component jeopardized by this vulnerability is not a bottleneck that acts as a single point of failure (SPOF) within the application, the\ndenial of service might only affect the attacker who initiated it.</p>\n<p>Such benign denial of service can also occur in architectures that rely heavily on containers and container orchestrators. Replication systems\nwould detect the failure of a container and automatically replace it.</p>\n<h4>Infrastructure SPOFs</h4>\n<p>However, a denial of service attack can be critical to the enterprise if it targets a SPOF component. Sometimes the SPOF is a software architecture\nvulnerability (such as a single component on which multiple critical components depend) or an operational vulnerability (for example, insufficient\ncontainer creation capabilities or failures from containers to terminate).</p>\n<p>In either case, attackers aim to exploit the infrastructure weakness by sending as many malicious payloads as possible, using potentially huge\noffensive infrastructures.</p>\n<p>These threats are particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code is vulnerable to Regex Denial of Service (ReDoS) because untrusted data is used as a regex to scan a string without\nprior sanitization or validation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nimport re\n\n@app.route('/lookup')\ndef lookup():\n  regex = request.args['regex']\n  data = request.args['data']\n\n  re.search(regex, data) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nimport re\n\n@app.route('/lookup')\ndef lookup():\n  regex = request.args['regex']\n  data = request.args['data']\n\n  re.search(re.escape(regex), data)\n</pre>\n<h3>How does this work?</h3>\n<h4>Sanitization and Validation</h4>\n<p>Metacharacters escape using native functions is a solution against regex injection.<br> The escape function sanitizes the input so that the regular\nexpression engine interprets these characters literally.</p>\n<p>An allowlist approach can also be used by creating a list containing authorized and secure strings you want the application to use in a query.<br>\nIf a user input does not match an entry in this list, it should be considered unsafe and rejected.</p>\n<p><strong>Important Note</strong>: The application must sanitize and validate on the server side. Not on client-side front end.</p>\n<p>Where possible, use <em>non-backtracking</em> regex engines, for example, Google\u00e2\u20ac\u2122s <a href=\"https://github.com/google/re2\">re2</a>.</p>\n<p>In the compliant solution, <code>re.escape</code> escapes metacharacters and escape sequences that could have broken the initially intended\nlogic.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">OWASP Regular expression Denial of Service - ReDoS</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/400\">CWE-400 - Uncontrolled Resource Consumption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1333\">CWE-1333 - Inefficient Regular Expression Complexity</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222594\">Application Security and\n  Development: V-222594</a> - The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information\n  systems. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222667\">Application Security and\n  Development: V-222667</a> - Protections against DoS attacks must be implemented. </li>\n</ul>\n\n"
        },
        {
          "id": "S5845",
          "name": "Assertions comparing incompatible types should not be made",
          "description": "<h2>Why is this an issue?</h2>\n<p>Calling <code>unittest</code> methods <code>assertEqual</code>, <code>assertNotEqual</code>, <code>assertIs</code> or <code>assertIsNot</code> on\nobjects of incompatible types will always fail or always succeed.</p>\n<p>For methods <code>assertEqual</code> and <code>assertNotEqual</code>, arguments' types are incompatible if:</p>\n<pre>\nthey are unrelated builtin types such as string and integer.\n</pre>\n<pre>\nthey are instances of unrelated classes which do not implement ``++__eq__++`` or ``++__ne__++`` (if a class implements one of these methods it could compare to any other type it wants).\n</pre>\n<p>As for methods <code>assertIs</code> and <code>assertIsNot</code>, if arguments' types are different it is not possible for them to point to the\nsame object, thus <code>assertIs</code> will always fail and <code>assertIsNot</code> will always succeed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport unittest\nclass A(): ...\nclass MyTest(unittest.TestCase):\n  def test_something(self):\n    a = A()\n    mydict = {\"x\": a}\n    self.assertEqual(a, \"x\")  # Noncompliant\n    self.assertIs(a, \"x\")  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport unittest\nclass A(): ...\nclass MyTest(unittest.TestCase):\n  def test_something(self):\n    a = A()\n    mydict = {\"x\": a}\n    self.assertEqual(a, mydict[\"x\"])  # OK\n    self.assertIs(a, mydict[\"x\"])  # OK\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> {rule:python:S2159} Silly equality checks should not be made </li>\n  <li> {rule:python:S3403} Identity operators should not be used with dissimilar types </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Calling <code>unittest</code> methods <code>assertEqual</code>, <code>assertNotEqual</code>, <code>assertIs</code> or <code>assertIsNot</code> on\nobjects of incompatible types will always fail or always succeed.</p>\n<p>For methods <code>assertEqual</code> and <code>assertNotEqual</code>, arguments' types are incompatible if:</p>\n<pre>\nthey are unrelated builtin types such as string and integer.\n</pre>\n<pre>\nthey are instances of unrelated classes which do not implement ``++__eq__++`` or ``++__ne__++`` (if a class implements one of these methods it could compare to any other type it wants).\n</pre>\n<p>As for methods <code>assertIs</code> and <code>assertIsNot</code>, if arguments' types are different it is not possible for them to point to the\nsame object, thus <code>assertIs</code> will always fail and <code>assertIsNot</code> will always succeed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport unittest\nclass A(): ...\nclass MyTest(unittest.TestCase):\n  def test_something(self):\n    a = A()\n    mydict = {\"x\": a}\n    self.assertEqual(a, \"x\")  # Noncompliant\n    self.assertIs(a, \"x\")  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport unittest\nclass A(): ...\nclass MyTest(unittest.TestCase):\n  def test_something(self):\n    a = A()\n    mydict = {\"x\": a}\n    self.assertEqual(a, mydict[\"x\"])  # OK\n    self.assertIs(a, mydict[\"x\"])  # OK\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> {rule:python:S2159} Silly equality checks should not be made </li>\n  <li> {rule:python:S3403} Identity operators should not be used with dissimilar types </li>\n</ul>\n\n"
        },
        {
          "id": "S7044",
          "name": "Server-side requests should not be vulnerable to traversing attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>Path Traversal Server-Side Request Forgery is a sub-class of Server-Side Request Forgery (SSRF). In this type of attack, the attacker manipulates\nthe path of the URL in the server-side request, rather than controlling the entire URL. This can lead to unauthorized access to endpoints or data by\naltering the request path.</p>\n<p>Path Traversal SSRF attacks are dangerous because they can exploit the server-side application\u00e2\u20ac\u2122s ability to send requests to internal resources\nthat are typically inaccessible to external attackers. By manipulating the path, attackers can potentially gain access to sensitive information or\nfunctionalities that should be protected.</p>\n<h3>What is the potential impact?</h3>\n<p>The impact of SSRF vulnerabilities can vary greatly depending on the context in which the user input is used.</p>\n<h4>API Traversal</h4>\n<p>In a path traversal SSRF attack, the attacker can manipulate the path of the server-side request to traverse through different endpoints of an API.\nThis can lead to several potential impacts:</p>\n<h5>Unauthorized access to API endpoints</h5>\n<p>By manipulating the path of the server-side request, an attacker can potentially access API endpoints that are not intended to be publicly\naccessible. This could include endpoints that provide access to sensitive data or functionality. Unauthorized access to these endpoints could lead to\ndata breaches or unauthorized actions being performed on the server.</p>\n<h5>Manipulation of API responses</h5>\n<p>If an attacker can manipulate the path of a server-side request to traverse to different API endpoints, they could potentially influence the\nresponses that the server sends back. This could lead to incorrect or misleading data being returned, which could have a variety of impacts depending\non the nature of the application and the data involved.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to SSRF as it performs an HTTP request to a URL partially defined by untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nfrom urllib.request import urlopen\n\n@app.route('/example')\ndef example():\n    id = request.args[\"user\"]\n    urlopen(\"http://example.com/api/user/\" + id).read() # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nfrom urllib.request import urlopen\nfrom urllib.parse import quote\n\n@app.route('/example')\ndef example():\n    id = request.args[\"user\"]\n    urlopen(\"http://example.com/api/user/?u=\" + quote(id)).read()\n</pre>\n<h3>How does this work?</h3>\n<h4>URL-encoding</h4>\n<p>A common method to mitigate path traversal SSRF attacks involves URL-encoding user input prior to its incorporation into a URL. URL-encoding, or\npercent-encoding, is a technique used to encode certain information within a Uniform Resource Identifier (URI). This is achieved by transforming\npotentially malicious characters, such as <code>../</code>, into a safe encoded format that can be safely included in a URL without modifying the\nintended path.</p>\n<p>However, it is crucial to note that simply encoding the user input might not be sufficient in all cases due to varying behaviors of different\nservers. Therefore, it is recommended to move the dynamic, user-controlled input from the actual path of the URL to the query string, if possible.\nThis further reduces the risk of path traversal, as the query string is less likely to be misinterpreted by the server as a directory traversal\ncommand.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\">Top 10 2021 Category A10 - Server-Side Request\n  Forgery (SSRF)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/918\">CWE-918 - Server-Side Request Forgery (SSRF)</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Path Traversal Server-Side Request Forgery is a sub-class of Server-Side Request Forgery (SSRF). In this type of attack, the attacker manipulates\nthe path of the URL in the server-side request, rather than controlling the entire URL. This can lead to unauthorized access to endpoints or data by\naltering the request path.</p>\n<p>Path Traversal SSRF attacks are dangerous because they can exploit the server-side application\u00e2\u20ac\u2122s ability to send requests to internal resources\nthat are typically inaccessible to external attackers. By manipulating the path, attackers can potentially gain access to sensitive information or\nfunctionalities that should be protected.</p>\n<h3>What is the potential impact?</h3>\n<p>The impact of SSRF vulnerabilities can vary greatly depending on the context in which the user input is used.</p>\n<h4>API Traversal</h4>\n<p>In a path traversal SSRF attack, the attacker can manipulate the path of the server-side request to traverse through different endpoints of an API.\nThis can lead to several potential impacts:</p>\n<h5>Unauthorized access to API endpoints</h5>\n<p>By manipulating the path of the server-side request, an attacker can potentially access API endpoints that are not intended to be publicly\naccessible. This could include endpoints that provide access to sensitive data or functionality. Unauthorized access to these endpoints could lead to\ndata breaches or unauthorized actions being performed on the server.</p>\n<h5>Manipulation of API responses</h5>\n<p>If an attacker can manipulate the path of a server-side request to traverse to different API endpoints, they could potentially influence the\nresponses that the server sends back. This could lead to incorrect or misleading data being returned, which could have a variety of impacts depending\non the nature of the application and the data involved.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to SSRF as it performs an HTTP request to a URL partially defined by untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom flask import request\nfrom urllib.request import urlopen\n\n@app.route('/example')\ndef example():\n    id = request.args[\"user\"]\n    urlopen(\"http://example.com/api/user/\" + id).read() # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom flask import request\nfrom urllib.request import urlopen\nfrom urllib.parse import quote\n\n@app.route('/example')\ndef example():\n    id = request.args[\"user\"]\n    urlopen(\"http://example.com/api/user/?u=\" + quote(id)).read()\n</pre>\n<h3>How does this work?</h3>\n<h4>URL-encoding</h4>\n<p>A common method to mitigate path traversal SSRF attacks involves URL-encoding user input prior to its incorporation into a URL. URL-encoding, or\npercent-encoding, is a technique used to encode certain information within a Uniform Resource Identifier (URI). This is achieved by transforming\npotentially malicious characters, such as <code>../</code>, into a safe encoded format that can be safely included in a URL without modifying the\nintended path.</p>\n<p>However, it is crucial to note that simply encoding the user input might not be sufficient in all cases due to varying behaviors of different\nservers. Therefore, it is recommended to move the dynamic, user-controlled input from the actual path of the URL to the query string, if possible.\nThis further reduces the risk of path traversal, as the query string is less likely to be misinterpreted by the server as a directory traversal\ncommand.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\">Top 10 2021 Category A10 - Server-Side Request\n  Forgery (SSRF)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/918\">CWE-918 - Server-Side Request Forgery (SSRF)</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S6287",
          "name": "Applications should not create session cookies from untrusted input",
          "description": "<h2>Why is this an issue?</h2>\n<p>Session Cookie Injection occurs when a web application assigns session cookies to users using untrusted data.</p>\n<p>Session cookies are used by web applications to identify users. Thus, controlling these enable control over the identity of the users within the\napplication.</p>\n<p>The injection might occur via a GET parameter, and the payload, for example, <code><a\nhref=\"https://example.com?cookie=injectedcookie\">https://example.com?cookie=injectedcookie</a></code>, delivered using phishing techniques.</p>\n<h3>What is the potential impact?</h3>\n<p>A well-intentioned user opens a malicious link that injects a session cookie in their web browser. This forces the user into unknowingly browsing a\nsession that isn\u00e2\u20ac\u2122t theirs.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Sensitive data disclosure</h4>\n<p>A victim introduces sensitive data within the attacker\u00e2\u20ac\u2122s application session that can later be retrieved by them. This can lead to a variety of\nimplications depending on what type of data is disclosed. Strictly confidential user data or organizational data leakage have different impacts.</p>\n<h4>Vulnerability chaining</h4>\n<p>An attacker not only manipulates a user into browsing an application using a session cookie of their control but also successfully detects and\nexploits a self-XSS on the target application.<br> The victim browses the vulnerable page using the attacker\u00e2\u20ac\u2122s session and is affected by the XSS,\nwhich can then be used for a wide range of attacks including credential stealing using mirrored login pages.</p>\n<h2>How to fix it in Django</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to Session Cookie Injection as it assigns a session cookie using untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom django.shortcuts import render\n\ndef check_cookie(request):\n    response = render(request, \"welcome.html\")\n\n    if not \"sessionid\" in request.COOKIE:\n        cookie = request.GET.get(\"cookie\")\n        response.set_cookie(\"sessionid\", cookie)  # Noncompliant\n\n    return response\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render\n\ndef check_cookie(request):\n    response = render(request, \"welcome.html\")\n\n    if not \"sessionid\" in request.COOKIE:\n        return HttpResponseRedirect(\"/getcookie\")\n\n    return response\n</pre>\n<h3>How does this work?</h3>\n<p>Untrusted data, such as GET or POST request content, should always be considered tainted. Therefore, an application should not blindly assign the\nvalue of a session cookie to untrusted data.</p>\n<p>Session cookies should be generated using the built-in APIs of secure libraries that include session management instead of developing homemade\ntools.<br> Often, these existing solutions benefit from quality maintenance in terms of features, security, or hardening, and it is usually better to\nuse these solutions than to develop your own.</p>\n<h2>How to fix it in FastAPI</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to Session Cookie Injection as it assigns a session cookie using untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom fastapi import APIRouter\nfrom fastapi.responses import Response, RedirectResponse\nfrom fastapi.requests import Request\n\nrouter = APIRouter()\n\n@router.get('/check-cookie')\nasync def check_cookie(request: Request, response: Response, cookie: str | None = None):\n    if \"session\" not in request.cookies.keys():\n        response.set_cookie(\"session\", cookie)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom fastapi import APIRouter\nfrom fastapi.responses import Response, RedirectResponse\nfrom fastapi.requests import Request\n\nrouter = APIRouter()\n\n@router.get('/check-cookie')\nasync def check_cookie(request: Request):\n    if \"session\" not in request.cookies.keys():\n        return RedirectResponse(\"/getcookie\")\n</pre>\n<h3>How does this work?</h3>\n<p>Untrusted data, such as GET or POST request content, should always be considered tainted. Therefore, an application should not blindly assign the\nvalue of a session cookie to untrusted data.</p>\n<p>Session cookies should be generated using the built-in APIs of secure libraries that include session management instead of developing homemade\ntools.<br> Often, these existing solutions benefit from quality maintenance in terms of features, security, or hardening, and it is usually better to\nuse these solutions than to develop your own.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/384\">CWE-384 - Session Fixation</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222582\">Application Security and\n  Development: V-222582</a> - The application must not re-use or recycle session IDs. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Session Cookie Injection occurs when a web application assigns session cookies to users using untrusted data.</p>\n<p>Session cookies are used by web applications to identify users. Thus, controlling these enable control over the identity of the users within the\napplication.</p>\n<p>The injection might occur via a GET parameter, and the payload, for example, <code><a\nhref=\"https://example.com?cookie=injectedcookie\">https://example.com?cookie=injectedcookie</a></code>, delivered using phishing techniques.</p>\n<h3>What is the potential impact?</h3>\n<p>A well-intentioned user opens a malicious link that injects a session cookie in their web browser. This forces the user into unknowingly browsing a\nsession that isn\u00e2\u20ac\u2122t theirs.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Sensitive data disclosure</h4>\n<p>A victim introduces sensitive data within the attacker\u00e2\u20ac\u2122s application session that can later be retrieved by them. This can lead to a variety of\nimplications depending on what type of data is disclosed. Strictly confidential user data or organizational data leakage have different impacts.</p>\n<h4>Vulnerability chaining</h4>\n<p>An attacker not only manipulates a user into browsing an application using a session cookie of their control but also successfully detects and\nexploits a self-XSS on the target application.<br> The victim browses the vulnerable page using the attacker\u00e2\u20ac\u2122s session and is affected by the XSS,\nwhich can then be used for a wide range of attacks including credential stealing using mirrored login pages.</p>\n<h2>How to fix it in Django</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to Session Cookie Injection as it assigns a session cookie using untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom django.shortcuts import render\n\ndef check_cookie(request):\n    response = render(request, \"welcome.html\")\n\n    if not \"sessionid\" in request.COOKIE:\n        cookie = request.GET.get(\"cookie\")\n        response.set_cookie(\"sessionid\", cookie)  # Noncompliant\n\n    return response\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render\n\ndef check_cookie(request):\n    response = render(request, \"welcome.html\")\n\n    if not \"sessionid\" in request.COOKIE:\n        return HttpResponseRedirect(\"/getcookie\")\n\n    return response\n</pre>\n<h3>How does this work?</h3>\n<p>Untrusted data, such as GET or POST request content, should always be considered tainted. Therefore, an application should not blindly assign the\nvalue of a session cookie to untrusted data.</p>\n<p>Session cookies should be generated using the built-in APIs of secure libraries that include session management instead of developing homemade\ntools.<br> Often, these existing solutions benefit from quality maintenance in terms of features, security, or hardening, and it is usually better to\nuse these solutions than to develop your own.</p>\n<h2>How to fix it in FastAPI</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to Session Cookie Injection as it assigns a session cookie using untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom fastapi import APIRouter\nfrom fastapi.responses import Response, RedirectResponse\nfrom fastapi.requests import Request\n\nrouter = APIRouter()\n\n@router.get('/check-cookie')\nasync def check_cookie(request: Request, response: Response, cookie: str | None = None):\n    if \"session\" not in request.cookies.keys():\n        response.set_cookie(\"session\", cookie)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom fastapi import APIRouter\nfrom fastapi.responses import Response, RedirectResponse\nfrom fastapi.requests import Request\n\nrouter = APIRouter()\n\n@router.get('/check-cookie')\nasync def check_cookie(request: Request):\n    if \"session\" not in request.cookies.keys():\n        return RedirectResponse(\"/getcookie\")\n</pre>\n<h3>How does this work?</h3>\n<p>Untrusted data, such as GET or POST request content, should always be considered tainted. Therefore, an application should not blindly assign the\nvalue of a session cookie to untrusted data.</p>\n<p>Session cookies should be generated using the built-in APIs of secure libraries that include session management instead of developing homemade\ntools.<br> Often, these existing solutions benefit from quality maintenance in terms of features, security, or hardening, and it is usually better to\nuse these solutions than to develop your own.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/384\">CWE-384 - Session Fixation</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222582\">Application Security and\n  Development: V-222582</a> - The application must not re-use or recycle session IDs. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S3981",
          "name": "Collection sizes and array length comparisons should make sense",
          "description": "<h2>Why is this an issue?</h2>\n<p>The length of a collection is always greater than or equal to zero. Testing it doesn\u00e2\u20ac\u2122t make sense, since the result is always\n<code>true</code>.</p>\n<pre>\nmylist = []\nif len(myList) &gt;= 0:  # Noncompliant: always true\n    pass\n</pre>\n<p>Similarly testing that it is less than zero will always return <code>false</code>.</p>\n<pre>\nif len(myList) &lt; 0:  # Noncompliant: always false\n    pass\n----\n</pre>\n<p>Fix the code to properly check for emptiness if it was the intent, or remove the redundant code to keep the current behavior.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>The length of a collection is always greater than or equal to zero. Testing it doesn\u00e2\u20ac\u2122t make sense, since the result is always\n<code>true</code>.</p>\n<pre>\nmylist = []\nif len(myList) &gt;= 0:  # Noncompliant: always true\n    pass\n</pre>\n<p>Similarly testing that it is less than zero will always return <code>false</code>.</p>\n<pre>\nif len(myList) &lt; 0:  # Noncompliant: always false\n    pass\n----\n</pre>\n<p>Fix the code to properly check for emptiness if it was the intent, or remove the redundant code to keep the current behavior.</p>\n\n"
        },
        {
          "id": "S6319",
          "name": "Using unencrypted SageMaker notebook instances is security-sensitive",
          "description": "<p>Amazon SageMaker is a managed machine learning service in a hosted production-ready environment. To train machine learning models, SageMaker\ninstances can process potentially sensitive data, such as personal information that should not be stored unencrypted. In the event that adversaries\nphysically access the storage media, they cannot decrypt encrypted data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The instance contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to encrypt SageMaker notebook instances that contain sensitive information. Encryption and decryption are handled transparently by\nSageMaker, so no further modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_sagemaker/CfnNotebookInstance.html\">aws_cdk.aws_sagemaker.CfnNotebookInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sagemaker as sagemaker\n)\n\nclass CfnSagemakerStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        sagemaker.CfnNotebookInstance(\n            self, \"Sensitive\",\n            instance_type=\"instanceType\",\n            role_arn=\"roleArn\"\n        )  # Sensitive, no KMS key is set by default; thus, encryption is disabled\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_sagemaker/CfnNotebookInstance.html\">aws_cdk.aws_sagemaker.CfnNotebookInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sagemaker as sagemaker,\n    aws_kms as kms\n)\n\nclass CfnSagemakerStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        my_key = kms.Key(self, \"Key\")\n        sagemaker.CfnNotebookInstance(\n            self, \"Compliant\",\n            instance_type=\"instanceType\",\n            role_arn=\"roleArn\",\n            kms_key_id=my_key.key_id\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html\">Protect Data at Rest Using Encryption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222588\">Application Security and\n  Development: V-222588</a> - The application must implement approved cryptographic mechanisms to prevent unauthorized modification of information at\n  rest. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Amazon SageMaker is a managed machine learning service in a hosted production-ready environment. To train machine learning models, SageMaker\ninstances can process potentially sensitive data, such as personal information that should not be stored unencrypted. In the event that adversaries\nphysically access the storage media, they cannot decrypt encrypted data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The instance contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to encrypt SageMaker notebook instances that contain sensitive information. Encryption and decryption are handled transparently by\nSageMaker, so no further modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_sagemaker/CfnNotebookInstance.html\">aws_cdk.aws_sagemaker.CfnNotebookInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sagemaker as sagemaker\n)\n\nclass CfnSagemakerStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        sagemaker.CfnNotebookInstance(\n            self, \"Sensitive\",\n            instance_type=\"instanceType\",\n            role_arn=\"roleArn\"\n        )  # Sensitive, no KMS key is set by default; thus, encryption is disabled\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_sagemaker/CfnNotebookInstance.html\">aws_cdk.aws_sagemaker.CfnNotebookInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sagemaker as sagemaker,\n    aws_kms as kms\n)\n\nclass CfnSagemakerStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        my_key = kms.Key(self, \"Key\")\n        sagemaker.CfnNotebookInstance(\n            self, \"Compliant\",\n            instance_type=\"instanceType\",\n            role_arn=\"roleArn\",\n            kms_key_id=my_key.key_id\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html\">Protect Data at Rest Using Encryption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222588\">Application Security and\n  Development: V-222588</a> - The application must implement approved cryptographic mechanisms to prevent unauthorized modification of information at\n  rest. </li>\n</ul>\n\n"
        },
        {
          "id": "S6275",
          "name": "Using unencrypted EBS volumes is security-sensitive",
          "description": "<p>Amazon Elastic Block Store (EBS) is a block-storage service for Amazon Elastic Compute Cloud (EC2). EBS volumes can be encrypted, ensuring the\nsecurity of both data-at-rest and data-in-transit between an instance and its attached EBS storage. In the case that adversaries gain physical access\nto the storage medium they are not able to access the data. Encryption can be enabled for specific volumes or for <a\nhref=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default\">all new volumes and snapshots</a>. Volumes created\nfrom snapshots inherit their encryption configuration. A volume created from an encrypted snapshot will also be encrypted by default.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The disk contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to encrypt EBS volumes that contain sensitive information. Encryption and decryption are handled transparently by EC2, so no\nfurther modifications to the application are necessary. Instead of enabling encryption for every volume, it is also possible to enable encryption\nglobally for a specific region. While creating volumes from encrypted snapshots will result in them being encrypted, explicitly enabling this security\nparameter will prevent any future unexpected security downgrade.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Volume.html\">aws_cdk.aws_ec2.Volume</a>:</p>\n<pre>\nfrom aws_cdk.aws_ec2 import Volume\n\nclass EBSVolumeStack(Stack):\n\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        Volume(self,\n            \"unencrypted-explicit\",\n            availability_zone=\"eu-west-1a\",\n            size=Size.gibibytes(1),\n            encrypted=False  # Sensitive\n        )\n</pre>\n<pre>\nfrom aws_cdk.aws_ec2 import Volume\n\nclass EBSVolumeStack(Stack):\n\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        Volume(self,\n            \"unencrypted-implicit\",\n            availability_zone=\"eu-west-1a\",\n            size=Size.gibibytes(1)\n        ) # Sensitive as encryption is disabled by default\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Volume.html\">aws_cdk.aws_ec2.Volume</a>:</p>\n<pre>\nfrom aws_cdk.aws_ec2 import Volume\n\nclass EBSVolumeStack(Stack):\n\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        Volume(self,\n            \"encrypted-explicit\",\n            availability_zone=\"eu-west-1a\",\n            size=Size.gibibytes(1),\n            encrypted=True\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\">Amazon EBS encryption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Amazon Elastic Block Store (EBS) is a block-storage service for Amazon Elastic Compute Cloud (EC2). EBS volumes can be encrypted, ensuring the\nsecurity of both data-at-rest and data-in-transit between an instance and its attached EBS storage. In the case that adversaries gain physical access\nto the storage medium they are not able to access the data. Encryption can be enabled for specific volumes or for <a\nhref=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default\">all new volumes and snapshots</a>. Volumes created\nfrom snapshots inherit their encryption configuration. A volume created from an encrypted snapshot will also be encrypted by default.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The disk contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It\u00e2\u20ac\u2122s recommended to encrypt EBS volumes that contain sensitive information. Encryption and decryption are handled transparently by EC2, so no\nfurther modifications to the application are necessary. Instead of enabling encryption for every volume, it is also possible to enable encryption\nglobally for a specific region. While creating volumes from encrypted snapshots will result in them being encrypted, explicitly enabling this security\nparameter will prevent any future unexpected security downgrade.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Volume.html\">aws_cdk.aws_ec2.Volume</a>:</p>\n<pre>\nfrom aws_cdk.aws_ec2 import Volume\n\nclass EBSVolumeStack(Stack):\n\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        Volume(self,\n            \"unencrypted-explicit\",\n            availability_zone=\"eu-west-1a\",\n            size=Size.gibibytes(1),\n            encrypted=False  # Sensitive\n        )\n</pre>\n<pre>\nfrom aws_cdk.aws_ec2 import Volume\n\nclass EBSVolumeStack(Stack):\n\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        Volume(self,\n            \"unencrypted-implicit\",\n            availability_zone=\"eu-west-1a\",\n            size=Size.gibibytes(1)\n        ) # Sensitive as encryption is disabled by default\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Volume.html\">aws_cdk.aws_ec2.Volume</a>:</p>\n<pre>\nfrom aws_cdk.aws_ec2 import Volume\n\nclass EBSVolumeStack(Stack):\n\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        Volume(self,\n            \"encrypted-explicit\",\n            availability_zone=\"eu-west-1a\",\n            size=Size.gibibytes(1),\n            encrypted=True\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\">Amazon EBS encryption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2612",
          "name": "Setting loose POSIX file permissions is security-sensitive",
          "description": "<p>In Unix file system permissions, the \"<code>others</code>\" category refers to all users except the owner of the file system resource and the\nmembers of the group assigned to this resource.</p>\n<p>Granting permissions to this category can lead to unintended access to files or directories that could allow attackers to obtain sensitive\ninformation, disrupt services or elevate privileges.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application is designed to be run on a multi-user environment. </li>\n  <li> Corresponding files and directories may contain confidential information. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>The most restrictive possible permissions should be assigned to files and directories.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.umask\">os.umask</a>:</p>\n<pre>\nos.umask(0)  # Sensitive\n</pre>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.chmod\">os.chmod</a>, <a\nhref=\"https://docs.python.org/3/library/os.html#os.lchmod\">os.lchmod</a>, and <a\nhref=\"https://docs.python.org/3/library/os.html#os.fchmod\">os.fchmod</a>:</p>\n<pre>\nos.chmod(\"/tmp/fs\", stat.S_IRWXO)   # Sensitive\nos.lchmod(\"/tmp/fs\", stat.S_IRWXO)  # Sensitive\nos.fchmod(fd, stat.S_IRWXO)         # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.umask\">os.umask</a>:</p>\n<pre>\nos.umask(0o777)\n</pre>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.chmod\">os.chmod</a>, <a\nhref=\"https://docs.python.org/3/library/os.html#os.lchmod\">os.lchmod</a>, and <a\nhref=\"https://docs.python.org/3/library/os.html#os.fchmod\">os.fchmod</a>:</p>\n<pre>\nos.chmod(\"/tmp/fs\", stat.S_IRWXU)\nos.lchmod(\"/tmp/fs\", stat.S_IRWXU)\nos.fchmod(fd, stat.S_IRWXU)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission\">OWASP File Permission</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/266\">CWE-266 - Incorrect Privilege Assignment</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222430\">Application Security and\n  Development: V-222430</a> - The application must execute without excessive account permissions. </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>In Unix file system permissions, the \"<code>others</code>\" category refers to all users except the owner of the file system resource and the\nmembers of the group assigned to this resource.</p>\n<p>Granting permissions to this category can lead to unintended access to files or directories that could allow attackers to obtain sensitive\ninformation, disrupt services or elevate privileges.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application is designed to be run on a multi-user environment. </li>\n  <li> Corresponding files and directories may contain confidential information. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>The most restrictive possible permissions should be assigned to files and directories.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.umask\">os.umask</a>:</p>\n<pre>\nos.umask(0)  # Sensitive\n</pre>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.chmod\">os.chmod</a>, <a\nhref=\"https://docs.python.org/3/library/os.html#os.lchmod\">os.lchmod</a>, and <a\nhref=\"https://docs.python.org/3/library/os.html#os.fchmod\">os.fchmod</a>:</p>\n<pre>\nos.chmod(\"/tmp/fs\", stat.S_IRWXO)   # Sensitive\nos.lchmod(\"/tmp/fs\", stat.S_IRWXO)  # Sensitive\nos.fchmod(fd, stat.S_IRWXO)         # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.umask\">os.umask</a>:</p>\n<pre>\nos.umask(0o777)\n</pre>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.chmod\">os.chmod</a>, <a\nhref=\"https://docs.python.org/3/library/os.html#os.lchmod\">os.lchmod</a>, and <a\nhref=\"https://docs.python.org/3/library/os.html#os.fchmod\">os.fchmod</a>:</p>\n<pre>\nos.chmod(\"/tmp/fs\", stat.S_IRWXU)\nos.lchmod(\"/tmp/fs\", stat.S_IRWXU)\nos.fchmod(fd, stat.S_IRWXU)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission\">OWASP File Permission</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/266\">CWE-266 - Incorrect Privilege Assignment</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222430\">Application Security and\n  Development: V-222430</a> - The application must execute without excessive account permissions. </li>\n</ul>\n\n"
        },
        {
          "id": "S2077",
          "name": "Formatting SQL queries is security-sensitive",
          "description": "<p>Formatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesn\u00e2\u20ac\u2122t detect SQL injections (unlike rule {rule:python:S3649}), the goal is only to highlight complex/formatted\nqueries.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Some parts of the query come from untrusted values (like user inputs). </li>\n  <li> The query is repeated/duplicated in other parts of the code. </li>\n  <li> The application must support different types of relational databases. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html\">parameterized queries, prepared\n  statements, or stored procedures</a> and bind variables to SQL query parameters. </li>\n  <li> Consider using ORM frameworks if there is a need to have an abstract layer to access data. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nfrom django.db import models\nfrom django.db import connection\nfrom django.db import connections\nfrom django.db.models.expressions import RawSQL\n\nvalue = input()\n\n\nclass MyUser(models.Model):\n    name = models.CharField(max_length=200)\n\n\ndef query_my_user(request, params, value):\n    with connection.cursor() as cursor:\n        cursor.execute(\"{0}\".format(value))  # Sensitive\n\n    # https://docs.djangoproject.com/en/2.1/ref/models/expressions/#raw-sql-expressions\n\n    RawSQL(\"select col from %s where mycol = %s and othercol = \" + value, (\"test\",))  # Sensitive\n\n    # https://docs.djangoproject.com/en/2.1/ref/models/querysets/#extra\n\n    MyUser.objects.extra(\n        select={\n            'mycol':  \"select col from sometable here mycol = %s and othercol = \" + value}, # Sensitive\n           select_params=(someparam,),\n        },\n    )\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncursor = connection.cursor(prepared=True)\nsql_insert_query = \"\"\" select col from sometable here mycol = %s and othercol = %s \"\"\"\n\nselect_tuple = (1, value)\n\ncursor.execute(sql_insert_query, select_tuple) # Compliant, the query is parameterized\nconnection.commit()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/89\">CWE-89 - Improper Neutralization of Special Elements used in an SQL Command</a> </li>\n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>Formatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesn\u00e2\u20ac\u2122t detect SQL injections (unlike rule {rule:python:S3649}), the goal is only to highlight complex/formatted\nqueries.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Some parts of the query come from untrusted values (like user inputs). </li>\n  <li> The query is repeated/duplicated in other parts of the code. </li>\n  <li> The application must support different types of relational databases. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html\">parameterized queries, prepared\n  statements, or stored procedures</a> and bind variables to SQL query parameters. </li>\n  <li> Consider using ORM frameworks if there is a need to have an abstract layer to access data. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nfrom django.db import models\nfrom django.db import connection\nfrom django.db import connections\nfrom django.db.models.expressions import RawSQL\n\nvalue = input()\n\n\nclass MyUser(models.Model):\n    name = models.CharField(max_length=200)\n\n\ndef query_my_user(request, params, value):\n    with connection.cursor() as cursor:\n        cursor.execute(\"{0}\".format(value))  # Sensitive\n\n    # https://docs.djangoproject.com/en/2.1/ref/models/expressions/#raw-sql-expressions\n\n    RawSQL(\"select col from %s where mycol = %s and othercol = \" + value, (\"test\",))  # Sensitive\n\n    # https://docs.djangoproject.com/en/2.1/ref/models/querysets/#extra\n\n    MyUser.objects.extra(\n        select={\n            'mycol':  \"select col from sometable here mycol = %s and othercol = \" + value}, # Sensitive\n           select_params=(someparam,),\n        },\n    )\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncursor = connection.cursor(prepared=True)\nsql_insert_query = \"\"\" select col from sometable here mycol = %s and othercol = %s \"\"\"\n\nselect_tuple = (1, value)\n\ncursor.execute(sql_insert_query, select_tuple) # Compliant, the query is parameterized\nconnection.commit()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/89\">CWE-89 - Improper Neutralization of Special Elements used in an SQL Command</a> </li>\n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5899",
          "name": "Test methods should be discoverable",
          "description": "<h2>Why is this an issue?</h2>\n<p>Classes subclassing only <code>unittest.TestCase</code> are considered test cases, otherwise they might be mixins.</p>\n<p>As classes subclassing <code>unittest.TestCase</code> will be executed as tests, they should define test methods and not be used as \"abstract\"\nparent helper. Methods within the class will be discovered by the test runner if their name starts with <code>test</code>. If a method intended to be\na test does not respect this convention, it will not be executed.</p>\n<p>This rule raises an issue when a method is not discoverable as a test and is never used within its test case class.</p>\n<p>This rule will not raise if:</p>\n<ul>\n  <li> The method is called directly from another method. </li>\n  <li> The method overrides an existing one in <code>unittest.TestCase</code> (example: a <code>tearDown</code> method). </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n  def setUp(self): ... # OK (unittest.TestCase method)\n  def something_test(self): ... # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n  def setUp(self): ...\n  def test_something(self): ...\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Classes subclassing only <code>unittest.TestCase</code> are considered test cases, otherwise they might be mixins.</p>\n<p>As classes subclassing <code>unittest.TestCase</code> will be executed as tests, they should define test methods and not be used as \"abstract\"\nparent helper. Methods within the class will be discovered by the test runner if their name starts with <code>test</code>. If a method intended to be\na test does not respect this convention, it will not be executed.</p>\n<p>This rule raises an issue when a method is not discoverable as a test and is never used within its test case class.</p>\n<p>This rule will not raise if:</p>\n<ul>\n  <li> The method is called directly from another method. </li>\n  <li> The method overrides an existing one in <code>unittest.TestCase</code> (example: a <code>tearDown</code> method). </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n  def setUp(self): ... # OK (unittest.TestCase method)\n  def something_test(self): ... # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n  def setUp(self): ...\n  def test_something(self): ...\n</pre>\n\n"
        },
        {
          "id": "S5843",
          "name": "Regular expressions should not be too complicated",
          "description": "<h2>Why is this an issue?</h2>\n<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you\nshould consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>\n<p>The complexity of a regular expression is determined as follows:</p>\n<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting\nlevel by one for its arguments:</p>\n<ul>\n  <li> <code>|</code> - when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1 </li>\n  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>\n  <li> Non-capturing groups that set flags (such as <code>(?i:some_pattern)</code> or <code>(?i)some_pattern</code>) </li>\n  <li> Lookahead and lookbehind assertions </li>\n</ul>\n<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>\n<ul>\n  <li> character classes </li>\n  <li> back references </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\np = re.compile(r\"^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$\")\n\nif p.match($dateString):\n    handleDate($dateString)\n</pre>\n<h3>Compliant solution</h3>\n<pre>\np = re.compile(\"^\\d{1,2}([-/.])\\d{1,2}\\1\\d{1,4}$\")\nif p.match($dateString):\n    dateParts = re.split(r\"[-/.]\", dateString)\n    day = intval(dateParts[0])\n    month = intval(dateParts[1])\n    year = intval($dateParts[2])\n    // Put logic to validate and process the date based on its integer parts here\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you\nshould consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>\n<p>The complexity of a regular expression is determined as follows:</p>\n<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting\nlevel by one for its arguments:</p>\n<ul>\n  <li> <code>|</code> - when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1 </li>\n  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>\n  <li> Non-capturing groups that set flags (such as <code>(?i:some_pattern)</code> or <code>(?i)some_pattern</code>) </li>\n  <li> Lookahead and lookbehind assertions </li>\n</ul>\n<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>\n<ul>\n  <li> character classes </li>\n  <li> back references </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\np = re.compile(r\"^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$\")\n\nif p.match($dateString):\n    handleDate($dateString)\n</pre>\n<h3>Compliant solution</h3>\n<pre>\np = re.compile(\"^\\d{1,2}([-/.])\\d{1,2}\\1\\d{1,4}$\")\nif p.match($dateString):\n    dateParts = re.split(r\"[-/.]\", dateString)\n    day = intval(dateParts[0])\n    month = intval(dateParts[1])\n    year = intval($dateParts[2])\n    // Put logic to validate and process the date based on its integer parts here\n</pre>\n\n"
        },
        {
          "id": "S5145",
          "name": "Logging should not be vulnerable to injection attacks",
          "description": "<h2>Why is this an issue?</h2>\n<p>Log injection occurs when an application fails to sanitize untrusted data used for logging.</p>\n<p>An attacker can forge log content to prevent an organization from being able to trace back malicious activities.</p>\n<h3>What is the potential impact?</h3>\n<p>If an attacker can insert arbitrary data into a log file, the integrity of the chain of events being recorded can be compromised.<br> This\nfrequently occurs because attackers can inject the log entry separator of the logger framework, commonly newlines, and thus insert artificial log\nentries. <br> Other attacks could also occur requiring only field pollution, such as cross-site scripting (XSS) or code injection (for example,\nLog4Shell) if the logged data is fed to other application components, which may interpret the injected data differently.<br></p>\n<p>The focus of this rule is newline character replacement.</p>\n<h4>Log Forge</h4>\n<p>An attacker, able to create independent log entries by injecting log entry separators, inserts bogus data into a log file to conceal his malicious\nactivities. This obscures the content for an incident response team to trace the origin of the breach as the indicators of compromise (IoCs) lead to\nfake application events.</p>\n<h2>How to fix it in Flask</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to log injection as it constructs log entries using untrusted data. An attacker can leverage this to manipulate\nthe chain of events being recorded.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport logging\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    app.logger.critical(\"%s\", data) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport logging\nimport base64\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    if data.isalnum():\n        app.logger.critical(\"%s\", data)\n    else:\n        app.logger.critical(\"Invalid Input: %s\", base64.b64encode(data.encode('UTF-8')))\n</pre>\n<h3>How does this work?</h3>\n<p>Data used for logging should be content-restricted and typed. This can be done by validating the data content or sanitizing it.<br> Validation and\nsanitization mainly revolve around preventing carriage return (CR) and line feed (LF) characters. However, further actions could be required based on\nthe application context and the logged data usage.</p>\n<p>Here, the example compliant code uses the <code>isalnum</code> function to ensure the untrusted data is safe. If not, it performs Base64 encoding\nto protect from log injection.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to log injection as it constructs log entries using untrusted data. An attacker can leverage this to manipulate\nthe chain of events being recorded.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    logger.log(logging.CRITICAL, \"%s\", data) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport logging\nimport base64\n\nlogger = logging.getLogger(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    if data.isalnum():\n        logger.log(logging.CRITICAL, \"%s\", data)\n    else:\n        logger.log(logging.CRITICAL, \"Invalid Input: %s\", base64.b64encode(data.encode('UTF-8')))\n</pre>\n<h3>How does this work?</h3>\n<p>Data used for logging should be content-restricted and typed. This can be done by validating the data content or sanitizing it.<br> Validation and\nsanitization mainly revolve around preventing carriage return (CR) and line feed (LF) characters. However, further actions could be required based on\nthe application context and the logged data usage.</p>\n<p>Here, the example compliant code uses the <code>isalnum</code> function to ensure the untrusted data is safe. If not, it performs Base64 encoding\nto protect from log injection.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/117\">CWE-117 - Improper Output Neutralization for Logs</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Log injection occurs when an application fails to sanitize untrusted data used for logging.</p>\n<p>An attacker can forge log content to prevent an organization from being able to trace back malicious activities.</p>\n<h3>What is the potential impact?</h3>\n<p>If an attacker can insert arbitrary data into a log file, the integrity of the chain of events being recorded can be compromised.<br> This\nfrequently occurs because attackers can inject the log entry separator of the logger framework, commonly newlines, and thus insert artificial log\nentries. <br> Other attacks could also occur requiring only field pollution, such as cross-site scripting (XSS) or code injection (for example,\nLog4Shell) if the logged data is fed to other application components, which may interpret the injected data differently.<br></p>\n<p>The focus of this rule is newline character replacement.</p>\n<h4>Log Forge</h4>\n<p>An attacker, able to create independent log entries by injecting log entry separators, inserts bogus data into a log file to conceal his malicious\nactivities. This obscures the content for an incident response team to trace the origin of the breach as the indicators of compromise (IoCs) lead to\nfake application events.</p>\n<h2>How to fix it in Flask</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to log injection as it constructs log entries using untrusted data. An attacker can leverage this to manipulate\nthe chain of events being recorded.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport logging\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    app.logger.critical(\"%s\", data) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport logging\nimport base64\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    if data.isalnum():\n        app.logger.critical(\"%s\", data)\n    else:\n        app.logger.critical(\"Invalid Input: %s\", base64.b64encode(data.encode('UTF-8')))\n</pre>\n<h3>How does this work?</h3>\n<p>Data used for logging should be content-restricted and typed. This can be done by validating the data content or sanitizing it.<br> Validation and\nsanitization mainly revolve around preventing carriage return (CR) and line feed (LF) characters. However, further actions could be required based on\nthe application context and the logged data usage.</p>\n<p>Here, the example compliant code uses the <code>isalnum</code> function to ensure the untrusted data is safe. If not, it performs Base64 encoding\nto protect from log injection.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to log injection as it constructs log entries using untrusted data. An attacker can leverage this to manipulate\nthe chain of events being recorded.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    logger.log(logging.CRITICAL, \"%s\", data) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport logging\nimport base64\n\nlogger = logging.getLogger(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    if data.isalnum():\n        logger.log(logging.CRITICAL, \"%s\", data)\n    else:\n        logger.log(logging.CRITICAL, \"Invalid Input: %s\", base64.b64encode(data.encode('UTF-8')))\n</pre>\n<h3>How does this work?</h3>\n<p>Data used for logging should be content-restricted and typed. This can be done by validating the data content or sanitizing it.<br> Validation and\nsanitization mainly revolve around preventing carriage return (CR) and line feed (LF) characters. However, further actions could be required based on\nthe application context and the logged data usage.</p>\n<p>Here, the example compliant code uses the <code>isalnum</code> function to ensure the untrusted data is safe. If not, it performs Base64 encoding\nto protect from log injection.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/117\">CWE-117 - Improper Output Neutralization for Logs</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n"
        },
        {
          "id": "S5918",
          "name": "Tests should be skipped explicitly",
          "description": "<h2>Why is this an issue?</h2>\n<p>Test frameworks provide a mechanism to skip tests if their prerequisites are not met, by either calling dedicated methods (e.g:\n<code>unittest.TestCase.skipTest</code>, <code>pytest.skip</code>, \u00e2\u20ac\u00a6\u00e2\u20ac\u2039) or using decorators (e.g: <code>unittest.skip</code>,\n<code>pytest.mark.skip</code>, \u00e2\u20ac\u00a6\u00e2\u20ac\u2039)</p>\n<p>Using a <code>return</code> statement instead will make the test succeed, even though no assertion has been performed. It is therefore better to\nflag the test as <code>skipped</code> in such situation.</p>\n<p>This rule raises an issue when a <code>return</code> is performed conditionally at the beginning of a test method.</p>\n<p>No issue will be raised if the <code>return</code> is unconditional as {rule:python:S1763} already raises an issue in such case.</p>\n<p>The supported frameworks are <code>Pytest</code> and <code>Unittest</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n\n    def test_something(self):\n        if not external_resource_available():\n            return  # Noncompliant\n        self.assertEqual(foo(), 42)\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n\n    def test_something(self):\n        if not external_resource_available():\n            self.skipTest(\"prerequisite not met\")\n        self.assertEqual(foo(), 42)\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.pytest.org/en/latest/how-to/skipping.html\">Pytest: skipping test functions</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures\">Unittest: skipping tests and expected\n  failures</a> </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Test frameworks provide a mechanism to skip tests if their prerequisites are not met, by either calling dedicated methods (e.g:\n<code>unittest.TestCase.skipTest</code>, <code>pytest.skip</code>, \u00e2\u20ac\u00a6\u00e2\u20ac\u2039) or using decorators (e.g: <code>unittest.skip</code>,\n<code>pytest.mark.skip</code>, \u00e2\u20ac\u00a6\u00e2\u20ac\u2039)</p>\n<p>Using a <code>return</code> statement instead will make the test succeed, even though no assertion has been performed. It is therefore better to\nflag the test as <code>skipped</code> in such situation.</p>\n<p>This rule raises an issue when a <code>return</code> is performed conditionally at the beginning of a test method.</p>\n<p>No issue will be raised if the <code>return</code> is unconditional as {rule:python:S1763} already raises an issue in such case.</p>\n<p>The supported frameworks are <code>Pytest</code> and <code>Unittest</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n\n    def test_something(self):\n        if not external_resource_available():\n            return  # Noncompliant\n        self.assertEqual(foo(), 42)\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n\n    def test_something(self):\n        if not external_resource_available():\n            self.skipTest(\"prerequisite not met\")\n        self.assertEqual(foo(), 42)\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.pytest.org/en/latest/how-to/skipping.html\">Pytest: skipping test functions</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures\">Unittest: skipping tests and expected\n  failures</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S4829",
          "name": "Reading the Standard Input is security-sensitive",
          "description": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337\">CVE-2005-2337</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449\">CVE-2017-11449</a> </li>\n</ul>\n<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)\ncan be dangerous and should be validated.</p>\n<p>This rule flags code that reads from the standard input.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> data read from the standard input is not sanitized before being used. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all data read from the standard input before using it.</p>\n<h2>Sensitive Code Example</h2>\n<p>Python 2 and Python 3</p>\n<pre>\nimport sys\nfrom sys import stdin, __stdin__\n\n# Any reference to sys.stdin or sys.__stdin__ without a method call is Sensitive\nsys.stdin  # Sensitive\n\nfor line in sys.stdin:  # Sensitive\n    print(line)\n\nit = iter(sys.stdin)  # Sensitive\nline = next(it)\n\n# Calling the following methods on stdin or __stdin__ is sensitive\nsys.stdin.read()  # Sensitive\nsys.stdin.readline()  # Sensitive\nsys.stdin.readlines()  # Sensitive\n\n# Calling other methods on stdin or __stdin__ does not require a review, thus it is not Sensitive\nsys.stdin.seekable()  # Ok\n# ...\n</pre>\n<p>Python 2 only</p>\n<pre>\nraw_input('What is your password?')  # Sensitive\n</pre>\n<p>Python 3 only</p>\n<pre>\ninput('What is your password?')  # Sensitive\n</pre>\n<p>Function <code>fileinput.input</code> and class <code>fileinput.FileInput</code> read the standard input when the list of files is empty.</p>\n<pre>\nfor line in fileinput.input():  # Sensitive\n    print(line)\n\nfor line in fileinput.FileInput():  # Sensitive\n    print(line)\n\nfor line in fileinput.input(['setup.py']):  # Ok\n    print(line)\n\nfor line in fileinput.FileInput(['setup.py']):  # Ok\n    print(line)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337\">CVE-2005-2337</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449\">CVE-2017-11449</a> </li>\n</ul>\n<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)\ncan be dangerous and should be validated.</p>\n<p>This rule flags code that reads from the standard input.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> data read from the standard input is not sanitized before being used. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all data read from the standard input before using it.</p>\n<h2>Sensitive Code Example</h2>\n<p>Python 2 and Python 3</p>\n<pre>\nimport sys\nfrom sys import stdin, __stdin__\n\n# Any reference to sys.stdin or sys.__stdin__ without a method call is Sensitive\nsys.stdin  # Sensitive\n\nfor line in sys.stdin:  # Sensitive\n    print(line)\n\nit = iter(sys.stdin)  # Sensitive\nline = next(it)\n\n# Calling the following methods on stdin or __stdin__ is sensitive\nsys.stdin.read()  # Sensitive\nsys.stdin.readline()  # Sensitive\nsys.stdin.readlines()  # Sensitive\n\n# Calling other methods on stdin or __stdin__ does not require a review, thus it is not Sensitive\nsys.stdin.seekable()  # Ok\n# ...\n</pre>\n<p>Python 2 only</p>\n<pre>\nraw_input('What is your password?')  # Sensitive\n</pre>\n<p>Python 3 only</p>\n<pre>\ninput('What is your password?')  # Sensitive\n</pre>\n<p>Function <code>fileinput.input</code> and class <code>fileinput.FileInput</code> read the standard input when the list of files is empty.</p>\n<pre>\nfor line in fileinput.input():  # Sensitive\n    print(line)\n\nfor line in fileinput.FileInput():  # Sensitive\n    print(line)\n\nfor line in fileinput.input(['setup.py']):  # Ok\n    print(line)\n\nfor line in fileinput.FileInput(['setup.py']):  # Ok\n    print(line)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S4823",
          "name": "Using command line arguments is security-sensitive",
          "description": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281\">CVE-2018-7281</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326\">CVE-2018-12326</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198\">CVE-2011-3198</a> </li>\n</ul>\n<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>\n<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus\npassing sensitive information via command line arguments should be considered as insecure.</p>\n<p>This rule raises an issue on every reference to <code>sys.argv</code>, call to <code>optparse.OptionParser()</code> or a call to\n<code>argparse.ArgumentParser()</code>. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> any of the command line arguments are used without being sanitized first. </li>\n  <li> your application accepts sensitive information via command line arguments. </li>\n</ul>\n<p>If you answered yes to any of these questions you are at risk.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all command line arguments before using them.</p>\n<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing\nsensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the\npath to a file containing the information.</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/88\">CWE-88 - Argument Injection or Modification</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/214\">CWE-214 - Information Exposure Through Process Environment</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281\">CVE-2018-7281</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326\">CVE-2018-12326</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198\">CVE-2011-3198</a> </li>\n</ul>\n<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>\n<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus\npassing sensitive information via command line arguments should be considered as insecure.</p>\n<p>This rule raises an issue on every reference to <code>sys.argv</code>, call to <code>optparse.OptionParser()</code> or a call to\n<code>argparse.ArgumentParser()</code>. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> any of the command line arguments are used without being sanitized first. </li>\n  <li> your application accepts sensitive information via command line arguments. </li>\n</ul>\n<p>If you answered yes to any of these questions you are at risk.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all command line arguments before using them.</p>\n<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing\nsensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the\npath to a file containing the information.</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/88\">CWE-88 - Argument Injection or Modification</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/214\">CWE-214 - Information Exposure Through Process Environment</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1541",
          "name": "Cyclomatic Complexity of functions should not be too high",
          "description": "<h2>Why is this an issue?</h2>\n<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>\n\n"
        },
        {
          "id": "S134",
          "name": "Control flow statements \"if\", \"for\", \"while\", \"try\" and \"with\" should not be nested too deeply",
          "description": "<h2>Why is this an issue?</h2>\n<p>Nested control flow statements <code>if</code>, <code>for</code>, <code>while</code>, <code>try</code>, and <code>with</code> are often key\ningredients in creating what\u00e2\u20ac\u2122s known as \"Spaghetti code\". This code smell can make your program difficult to understand and maintain.</p>\n<p>When numerous control structures are placed inside one another, the code becomes a tangled, complex web. This significantly reduces the code\u00e2\u20ac\u2122s\nreadability and maintainability, and it also complicates the testing process.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following example demonstrates the behavior of the rule with the default threshold of 4 levels of nesting and one of the potential ways to fix\nthe code smell by introducing guard clauses:</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif condition1:           # Compliant - depth = 1\n  # ...\n  if condition2:         # Compliant - depth = 2\n    # ...\n    for i in range(10):  # Compliant - depth = 3\n      # ...\n      if condition3:     # Compliant - depth = 4\n        if condition4:     # Non-Compliant - depth = 5, which exceeds the limit\n          if condition5:   # Depth = 6, exceeding the limit, but issues are only reported on depth = 5\n            # ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif not condition1:\n  return\n# ...\nif not condition2:\n  return\n  # ...\n  for i in range(10):\n    # ...\n    if condition3:\n      if condition4:\n        if condition5:\n          # ...\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Guard_(computer_science)\">Guard clauses in programming</a> - one of the approaches to reducing the depth\n  of nesting </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Nested control flow statements <code>if</code>, <code>for</code>, <code>while</code>, <code>try</code>, and <code>with</code> are often key\ningredients in creating what\u00e2\u20ac\u2122s known as \"Spaghetti code\". This code smell can make your program difficult to understand and maintain.</p>\n<p>When numerous control structures are placed inside one another, the code becomes a tangled, complex web. This significantly reduces the code\u00e2\u20ac\u2122s\nreadability and maintainability, and it also complicates the testing process.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following example demonstrates the behavior of the rule with the default threshold of 4 levels of nesting and one of the potential ways to fix\nthe code smell by introducing guard clauses:</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif condition1:           # Compliant - depth = 1\n  # ...\n  if condition2:         # Compliant - depth = 2\n    # ...\n    for i in range(10):  # Compliant - depth = 3\n      # ...\n      if condition3:     # Compliant - depth = 4\n        if condition4:     # Non-Compliant - depth = 5, which exceeds the limit\n          if condition5:   # Depth = 6, exceeding the limit, but issues are only reported on depth = 5\n            # ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif not condition1:\n  return\n# ...\nif not condition2:\n  return\n  # ...\n  for i in range(10):\n    # ...\n    if condition3:\n      if condition4:\n        if condition5:\n          # ...\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Guard_(computer_science)\">Guard clauses in programming</a> - one of the approaches to reducing the depth\n  of nesting </li>\n</ul>\n\n"
        },
        {
          "id": "S138",
          "name": "Functions should not have too many lines of code",
          "description": "<h2>Why is this an issue?</h2>\n<p>A function that grows too large tends to aggregate too many responsibilities.</p>\n<p>Such functions inevitably become harder to understand and therefore harder to maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>\n<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>A function that grows too large tends to aggregate too many responsibilities.</p>\n<p>Such functions inevitably become harder to understand and therefore harder to maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>\n<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>\n\n"
        },
        {
          "id": "S104",
          "name": "Files should not have too many lines of code",
          "description": "<h2>Why is this an issue?</h2>\n<p>When a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.</p>\n<p>Above a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.</p>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>When a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.</p>\n<p>Above a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.</p>\n\n"
        },
        {
          "id": "S113",
          "name": "Files should end with a newline",
          "description": "<h2>Why is this an issue?</h2>\n<p>Some tools such as Git work better when files end with an empty line. This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test:\n+    pass\n \\ No newline at end of file\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Some tools such as Git work better when files end with an empty line. This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test:\n+    pass\n \\ No newline at end of file\n</pre>\n\n"
        }
      ]
    },
    {
      "category": "Version Control",
      "rules": [
        {
          "id": "S6418",
          "name": "Hard-coded secrets are security-sensitive",
          "description": "<p>Because it is easy to extract strings from an application source code or binary, secrets should not be hard-coded. This is particularly true for\napplications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-25510\">CVE-2022-25510</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42635\">CVE-2021-42635</a> </li>\n</ul>\n<p>Secrets should be stored outside of the source code in a configuration file or a management service for secrets.</p>\n<p>This rule detects variables/fields having a name matching a list of words (secret, token, credential, auth, api[_.-]?key) being assigned a\npseudorandom hard-coded value. The pseudorandomness of the hard-coded value is based on its entropy and the probability to be human-readable. The\nrandomness sensibility can be adjusted if needed. Lower values will detect less random values, raising potentially more false positives.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The secret allows access to a sensitive component like a database, a file storage, an API, or a service. </li>\n  <li> The secret is used in a production environment. </li>\n  <li> Application re-distribution is required before updating the secret. </li>\n</ul>\n<p>There would be a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the secret in a configuration file that is not pushed to the code repository. </li>\n  <li> Use your cloud provider\u00e2\u20ac\u2122s service for managing secrets. </li>\n  <li> If a secret has been disclosed through the source code: revoke it and create a new one. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport requests\n\nAPI_KEY = \"1234567890abcdef\"  # Hard-coded secret (bad practice)\n\ndef send_api_request(data):\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\"\n    }\n    return requests.post(\"https://api.example.com\", headers=headers, data=data)\n</pre>\n<h2>Compliant Solution</h2>\n<p>Using <a href=\"https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/secretsmanager/scenario_get_secret.py\">AWS Secrets\nManager</a>:</p>\n<pre>\nimport boto3\nimport logging\n\nSECRET_NAME = \"MY_API_KEY\"\n\nclient = boto3.client(\"secretsmanager\")\nsecret = client.get_secret_value(SecretId=SECRET_NAME)\n\ndef send_api_request(data):\n    headers = {\n        \"Authorization \": f\"Bearer {secret}\"\n    }\n    return requests.post(\"https://api.example.com\", headers=headers, data=data)\n</pre>\n<p>Using <a href=\"https://learn.microsoft.com/en-us/azure/key-vault/secrets/quick-create-python?tabs=azure-cli\">Azure Key Vault Secret</a>:</p>\n<pre>\nimport os\nfrom azure.keyvault.secrets import SecretClient\nfrom azure.identity import DefaultAzureCredential\n\nSECRET_NAME = \"MY_API_KEY\"\n\nkeyVaultName = os.environ[\"KEY_VAULT_NAME\"]\nKVUri = f\"https://{keyVaultName}.vault.azure.net\"\n\ncredential = DefaultAzureCredential()\nclient = SecretClient(vault_url=KVUri, credential=credential)\nsecret = client.get_secret(SECRET_NAME)\n\ndef send_api_request(data):\n    headers = {\n        \"Authorization \": f\"Bearer {secret.value}\"\n    }\n    return requests.post(\"https://api.example.com\", headers=headers, data=data)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> AWS Secrets Manager - <a href=\"https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/python/example_code/secretsmanager\">Code Examples</a>\n  </li>\n  <li> Azure Key Vault - <a href=\"https://learn.microsoft.com/en-us/azure/key-vault/secrets/quick-create-python?tabs=azure-cli\">Quickstart</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>Because it is easy to extract strings from an application source code or binary, secrets should not be hard-coded. This is particularly true for\napplications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-25510\">CVE-2022-25510</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42635\">CVE-2021-42635</a> </li>\n</ul>\n<p>Secrets should be stored outside of the source code in a configuration file or a management service for secrets.</p>\n<p>This rule detects variables/fields having a name matching a list of words (secret, token, credential, auth, api[_.-]?key) being assigned a\npseudorandom hard-coded value. The pseudorandomness of the hard-coded value is based on its entropy and the probability to be human-readable. The\nrandomness sensibility can be adjusted if needed. Lower values will detect less random values, raising potentially more false positives.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The secret allows access to a sensitive component like a database, a file storage, an API, or a service. </li>\n  <li> The secret is used in a production environment. </li>\n  <li> Application re-distribution is required before updating the secret. </li>\n</ul>\n<p>There would be a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the secret in a configuration file that is not pushed to the code repository. </li>\n  <li> Use your cloud provider\u00e2\u20ac\u2122s service for managing secrets. </li>\n  <li> If a secret has been disclosed through the source code: revoke it and create a new one. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport requests\n\nAPI_KEY = \"1234567890abcdef\"  # Hard-coded secret (bad practice)\n\ndef send_api_request(data):\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\"\n    }\n    return requests.post(\"https://api.example.com\", headers=headers, data=data)\n</pre>\n<h2>Compliant Solution</h2>\n<p>Using <a href=\"https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/secretsmanager/scenario_get_secret.py\">AWS Secrets\nManager</a>:</p>\n<pre>\nimport boto3\nimport logging\n\nSECRET_NAME = \"MY_API_KEY\"\n\nclient = boto3.client(\"secretsmanager\")\nsecret = client.get_secret_value(SecretId=SECRET_NAME)\n\ndef send_api_request(data):\n    headers = {\n        \"Authorization \": f\"Bearer {secret}\"\n    }\n    return requests.post(\"https://api.example.com\", headers=headers, data=data)\n</pre>\n<p>Using <a href=\"https://learn.microsoft.com/en-us/azure/key-vault/secrets/quick-create-python?tabs=azure-cli\">Azure Key Vault Secret</a>:</p>\n<pre>\nimport os\nfrom azure.keyvault.secrets import SecretClient\nfrom azure.identity import DefaultAzureCredential\n\nSECRET_NAME = \"MY_API_KEY\"\n\nkeyVaultName = os.environ[\"KEY_VAULT_NAME\"]\nKVUri = f\"https://{keyVaultName}.vault.azure.net\"\n\ncredential = DefaultAzureCredential()\nclient = SecretClient(vault_url=KVUri, credential=credential)\nsecret = client.get_secret(SECRET_NAME)\n\ndef send_api_request(data):\n    headers = {\n        \"Authorization \": f\"Bearer {secret.value}\"\n    }\n    return requests.post(\"https://api.example.com\", headers=headers, data=data)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> AWS Secrets Manager - <a href=\"https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/python/example_code/secretsmanager\">Code Examples</a>\n  </li>\n  <li> Azure Key Vault - <a href=\"https://learn.microsoft.com/en-us/azure/key-vault/secrets/quick-create-python?tabs=azure-cli\">Quickstart</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S2068",
          "name": "Hard-coded passwords are security-sensitive",
          "description": "<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466\">CVE-2019-13466</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389\">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider\u00e2\u20ac\u2122s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nusername = 'admin'\npassword = 'admin' # Sensitive\nusernamePassword = 'user=admin&amp;password=admin' # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport os\n\nusername = os.getenv(\"username\") # Compliant\npassword = os.getenv(\"password\") # Compliant\nusernamePassword = 'user=%s&amp;password=%s' % (username, password) # Compliant{code}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466\">CVE-2019-13466</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389\">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider\u00e2\u20ac\u2122s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nusername = 'admin'\npassword = 'admin' # Sensitive\nusernamePassword = 'user=admin&amp;password=admin' # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport os\n\nusername = os.getenv(\"username\") # Compliant\npassword = os.getenv(\"password\") # Compliant\nusernamePassword = 'user=%s&amp;password=%s' % (username, password) # Compliant{code}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5852",
          "name": "Using slow regular expressions is security-sensitive",
          "description": "<p>Most of the regular expression engines use <code>backtracking</code> to try all possible execution paths of the regular expression when evaluating\nan input, in some cases it can cause performance issues, called <code>catastrophic backtracking</code> situations. In the worst case, the complexity\nof the regular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger\n<code>catastrophic backtracking</code> and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too\nwith, in this case, a large carefully-crafted input (thousands chars).</p>\n<p>This rule determines the runtime complexity of a regular expression and informs you of the complexity if it is not linear.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The input is user-controlled. </li>\n  <li> The input size is not restricted to a small number of characters. </li>\n  <li> There is no timeout in place to limit the regex evaluation time. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>To avoid <code>catastrophic backtracking</code> situations, make sure that none of the following conditions apply to your regular expression.</p>\n<p>In all of the following cases, catastrophic backtracking can only happen if the problematic part of the regex is followed by a pattern that can\nfail, causing the backtracking to actually happen. Note that when performing a full match (e.g. using <code>re.fullmatch</code>), the end of the regex\ncounts as a pattern that can fail because it will only succeed when the end of the string is reached.</p>\n<ul>\n  <li> If you have a non-possessive repetition <code>r*</code> or <code>r*?</code>, such that the regex <code>r</code> could produce different\n  possible matches (of possibly different lengths) on the same input, the worst case matching time can be exponential. This can be the case if\n  <code>r</code> contains optional parts, alternations or additional repetitions (but not if the repetition is written in such a way that there\u00e2\u20ac\u2122s only\n  one way to match it). </li>\n  <li> If you have multiple non-possessive repetitions that can match the same contents and are consecutive or are only separated by an optional\n  separator or a separator that can be matched by both of the repetitions, the worst case matching time can be polynomial (O(n^c) where c is the\n  number of problematic repetitions). For example <code>a*b*</code> is not a problem because <code>a*</code> and <code>b*</code> match different\n  things and <code>a*_a*</code> is not a problem because the repetitions are separated by a <code>'_'</code> and can\u00e2\u20ac\u2122t match that <code>'_'</code>.\n  However, <code>a*a*</code> and <code>.*_.*</code> have quadratic runtime. </li>\n  <li> If you\u00e2\u20ac\u2122re performing a partial match (such as by using <code>re.search</code>, <code>re.split</code>, <code>re.findall</code> etc.) and the\n  regex is not anchored to the beginning of the string, quadratic runtime is especially hard to avoid because whenever a match fails, the regex engine\n  will try again starting at the next index. This means that any unbounded repetition (even a possessive one), if it\u00e2\u20ac\u2122s followed by a pattern that can\n  fail, can cause quadratic runtime on some inputs. For example <code>re.split(r\"\\s*,\", my_str)</code> will run in quadratic time on strings that\n  consist entirely of spaces (or at least contain large sequences of spaces, not followed by a comma). </li>\n</ul>\n<p>In order to rewrite your regular expression without these patterns, consider the following strategies:</p>\n<ul>\n  <li> If applicable, define a maximum number of expected repetitions using the bounded quantifiers, like <code>{1,5}</code> instead of <code>+</code>\n  for instance. </li>\n  <li> Refactor <code>nested quantifiers</code> to limit the number of way the inner group can be matched by the outer quantifier, for instance this\n  nested quantifier situation <code>(ba+)+</code> doesn\u00e2\u20ac\u2122t cause performance issues, indeed, the inner group can be matched only if there exists\n  exactly one <code>b</code> char per repetition of the group. </li>\n  <li> Optimize regular expressions with <code>possessive quantifiers</code> and <code>atomic grouping</code> (available since Python 3.11). </li>\n  <li> Use negated character classes instead of <code>.</code> to exclude separators where applicable. For example the quadratic regex\n  <code>.*_.*</code> can be made linear by changing it to <code>[^_]*_.*</code> </li>\n</ul>\n<p>Sometimes it\u00e2\u20ac\u2122s not possible to rewrite the regex to be linear while still matching what you want it to match. Especially when using partial\nmatches, for which it is quite hard to avoid quadratic runtimes. In those cases consider the following approaches:</p>\n<ul>\n  <li> Solve the problem without regular expressions </li>\n  <li> Use an alternative non-backtracking regex implementations such as Google\u00e2\u20ac\u2122s <a href=\"https://github.com/google/re2\">RE2</a>. </li>\n  <li> Use multiple passes. This could mean pre- and/or post-processing the string manually before/after applying the regular expression to it or\n  using multiple regular expressions. One example of this would be to replace <code>re.split(\"\\s*,\\s*\", my_str)</code> with <code>re.split(\",\",\n  my_str)</code> and then trimming the spaces from the strings as a second step. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/400\">CWE-400 - Uncontrolled Resource Consumption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1333\">CWE-1333 - Inefficient Regular Expression Complexity</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">owasp.org</a> - OWASP Regular expression Denial\n  of Service - ReDoS </li>\n  <li> <a\n  href=\"https://web.archive.org/web/20220506215733/https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016\">stackstatus.net(archived)</a> - Outage Postmortem - July 20, 2016 </li>\n  <li> <a href=\"https://www.regular-expressions.info/catastrophic.html\">regular-expressions.info</a> - Runaway Regular Expressions: Catastrophic\n  Backtracking </li>\n  <li> <a\n  href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers\">docs.microsoft.com</a> - Backtracking with Nested Optional Quantifiers </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>Most of the regular expression engines use <code>backtracking</code> to try all possible execution paths of the regular expression when evaluating\nan input, in some cases it can cause performance issues, called <code>catastrophic backtracking</code> situations. In the worst case, the complexity\nof the regular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger\n<code>catastrophic backtracking</code> and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too\nwith, in this case, a large carefully-crafted input (thousands chars).</p>\n<p>This rule determines the runtime complexity of a regular expression and informs you of the complexity if it is not linear.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The input is user-controlled. </li>\n  <li> The input size is not restricted to a small number of characters. </li>\n  <li> There is no timeout in place to limit the regex evaluation time. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>To avoid <code>catastrophic backtracking</code> situations, make sure that none of the following conditions apply to your regular expression.</p>\n<p>In all of the following cases, catastrophic backtracking can only happen if the problematic part of the regex is followed by a pattern that can\nfail, causing the backtracking to actually happen. Note that when performing a full match (e.g. using <code>re.fullmatch</code>), the end of the regex\ncounts as a pattern that can fail because it will only succeed when the end of the string is reached.</p>\n<ul>\n  <li> If you have a non-possessive repetition <code>r*</code> or <code>r*?</code>, such that the regex <code>r</code> could produce different\n  possible matches (of possibly different lengths) on the same input, the worst case matching time can be exponential. This can be the case if\n  <code>r</code> contains optional parts, alternations or additional repetitions (but not if the repetition is written in such a way that there\u00e2\u20ac\u2122s only\n  one way to match it). </li>\n  <li> If you have multiple non-possessive repetitions that can match the same contents and are consecutive or are only separated by an optional\n  separator or a separator that can be matched by both of the repetitions, the worst case matching time can be polynomial (O(n^c) where c is the\n  number of problematic repetitions). For example <code>a*b*</code> is not a problem because <code>a*</code> and <code>b*</code> match different\n  things and <code>a*_a*</code> is not a problem because the repetitions are separated by a <code>'_'</code> and can\u00e2\u20ac\u2122t match that <code>'_'</code>.\n  However, <code>a*a*</code> and <code>.*_.*</code> have quadratic runtime. </li>\n  <li> If you\u00e2\u20ac\u2122re performing a partial match (such as by using <code>re.search</code>, <code>re.split</code>, <code>re.findall</code> etc.) and the\n  regex is not anchored to the beginning of the string, quadratic runtime is especially hard to avoid because whenever a match fails, the regex engine\n  will try again starting at the next index. This means that any unbounded repetition (even a possessive one), if it\u00e2\u20ac\u2122s followed by a pattern that can\n  fail, can cause quadratic runtime on some inputs. For example <code>re.split(r\"\\s*,\", my_str)</code> will run in quadratic time on strings that\n  consist entirely of spaces (or at least contain large sequences of spaces, not followed by a comma). </li>\n</ul>\n<p>In order to rewrite your regular expression without these patterns, consider the following strategies:</p>\n<ul>\n  <li> If applicable, define a maximum number of expected repetitions using the bounded quantifiers, like <code>{1,5}</code> instead of <code>+</code>\n  for instance. </li>\n  <li> Refactor <code>nested quantifiers</code> to limit the number of way the inner group can be matched by the outer quantifier, for instance this\n  nested quantifier situation <code>(ba+)+</code> doesn\u00e2\u20ac\u2122t cause performance issues, indeed, the inner group can be matched only if there exists\n  exactly one <code>b</code> char per repetition of the group. </li>\n  <li> Optimize regular expressions with <code>possessive quantifiers</code> and <code>atomic grouping</code> (available since Python 3.11). </li>\n  <li> Use negated character classes instead of <code>.</code> to exclude separators where applicable. For example the quadratic regex\n  <code>.*_.*</code> can be made linear by changing it to <code>[^_]*_.*</code> </li>\n</ul>\n<p>Sometimes it\u00e2\u20ac\u2122s not possible to rewrite the regex to be linear while still matching what you want it to match. Especially when using partial\nmatches, for which it is quite hard to avoid quadratic runtimes. In those cases consider the following approaches:</p>\n<ul>\n  <li> Solve the problem without regular expressions </li>\n  <li> Use an alternative non-backtracking regex implementations such as Google\u00e2\u20ac\u2122s <a href=\"https://github.com/google/re2\">RE2</a>. </li>\n  <li> Use multiple passes. This could mean pre- and/or post-processing the string manually before/after applying the regular expression to it or\n  using multiple regular expressions. One example of this would be to replace <code>re.split(\"\\s*,\\s*\", my_str)</code> with <code>re.split(\",\",\n  my_str)</code> and then trimming the spaces from the strings as a second step. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/400\">CWE-400 - Uncontrolled Resource Consumption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1333\">CWE-1333 - Inefficient Regular Expression Complexity</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">owasp.org</a> - OWASP Regular expression Denial\n  of Service - ReDoS </li>\n  <li> <a\n  href=\"https://web.archive.org/web/20220506215733/https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016\">stackstatus.net(archived)</a> - Outage Postmortem - July 20, 2016 </li>\n  <li> <a href=\"https://www.regular-expressions.info/catastrophic.html\">regular-expressions.info</a> - Runaway Regular Expressions: Catastrophic\n  Backtracking </li>\n  <li> <a\n  href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers\">docs.microsoft.com</a> - Backtracking with Nested Optional Quantifiers </li>\n</ul>\n\n"
        },
        {
          "id": "S2245",
          "name": "Using pseudorandom number generators (PRNGs) is security-sensitive",
          "description": "<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386\">CVE-2013-6386</a> </li>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419\">CVE-2006-3419</a> </li>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102\">CVE-2008-4102</a> </li>\n</ul>\n<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  <li> the function you use generates a value which can be predicted (pseudo-random). </li>\n  <li> the generated value is used multiple times. </li>\n  <li> an attacker can access the generated value. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Only use random number generators which are <a\n  href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation\">recommended by\n  OWASP</a> or any other trusted organization. </li>\n  <li> Use the generated random values only once. </li>\n  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport random\n\nrandom.getrandbits(1) # Sensitive\nrandom.randint(0,9) # Sensitive\nrandom.random()  # Sensitive\n\n# the following functions are sadly used to generate salt by selecting characters in a string ex: \"abcdefghijk\"...\nrandom.sample(['a', 'b'], 1)  # Sensitive\nrandom.choice(['a', 'b'])  # Sensitive\nrandom.choices(['a', 'b'])  # Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/338\">CWE-338 - Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/330\">CWE-330 - Use of Insufficiently Random Values</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/326\">CWE-326 - Inadequate Encryption Strength</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1241\">CWE-1241 - Use of Predictable Algorithm in Random Number Generator</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386\">CVE-2013-6386</a> </li>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419\">CVE-2006-3419</a> </li>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102\">CVE-2008-4102</a> </li>\n</ul>\n<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  <li> the function you use generates a value which can be predicted (pseudo-random). </li>\n  <li> the generated value is used multiple times. </li>\n  <li> an attacker can access the generated value. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Only use random number generators which are <a\n  href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation\">recommended by\n  OWASP</a> or any other trusted organization. </li>\n  <li> Use the generated random values only once. </li>\n  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport random\n\nrandom.getrandbits(1) # Sensitive\nrandom.randint(0,9) # Sensitive\nrandom.random()  # Sensitive\n\n# the following functions are sadly used to generate salt by selecting characters in a string ex: \"abcdefghijk\"...\nrandom.sample(['a', 'b'], 1)  # Sensitive\nrandom.choice(['a', 'b'])  # Sensitive\nrandom.choices(['a', 'b'])  # Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/338\">CWE-338 - Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/330\">CWE-330 - Use of Insufficiently Random Values</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/326\">CWE-326 - Inadequate Encryption Strength</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1241\">CWE-1241 - Use of Predictable Algorithm in Random Number Generator</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5247",
          "name": "Disabling auto-escaping in template engines is security-sensitive",
          "description": "<p>To reduce the risk of cross-site scripting attacks, templating systems, such as <code>Twig</code>, <code>Django</code>, <code>Smarty</code>,\n<code>Groovy's template engine</code>, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters\nthat make sense to the browser (eg: &lt;a&gt;) will be transformed/replaced with escaped/sanitized values (eg: &amp; lt;a&amp; gt; ).</p>\n<p>Auto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on <a\nhref=\"https://twig.symfony.com/doc/3.x/filters/escape.html\">the strategy applied</a> and the context, for example a \"html auto-escaping\" strategy\n(which only transforms html characters into <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Entity\">html entities</a>) will not be relevant\nwhen variables are used in a <a href=\"https://en.wikipedia.org/wiki/HTML_attribute\">html attribute</a> because '<code>:</code>' character is not\nescaped and thus an attack as below is possible:</p>\n<pre>\n&lt;a href=\"{{ myLink }}\"&gt;link&lt;/a&gt; // myLink = javascript:alert(document.cookie)\n&lt;a href=\"javascript:alert(document.cookie)\"&gt;link&lt;/a&gt; // JS injection (XSS attack)\n</pre>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Templates are used to render web content and\n    <ul>\n      <li> dynamic variables in templates come from untrusted locations or are user-controlled inputs </li>\n      <li> there is no local mechanism in place to sanitize or validate the inputs. </li>\n    </ul>  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Enable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right\none.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nfrom jinja2 import Environment\n\nenv = Environment() # Sensitive: New Jinja2 Environment has autoescape set to false\nenv = Environment(autoescape=False) # Sensitive:\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfrom jinja2 import Environment\nenv = Environment(autoescape=True) # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\">OWASP Cheat\n  Sheet</a> - XSS Prevention Cheat Sheet </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n</ul>\n\n",
          "severity": "Major",
          "recommendation": "<p>To reduce the risk of cross-site scripting attacks, templating systems, such as <code>Twig</code>, <code>Django</code>, <code>Smarty</code>,\n<code>Groovy's template engine</code>, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters\nthat make sense to the browser (eg: &lt;a&gt;) will be transformed/replaced with escaped/sanitized values (eg: &amp; lt;a&amp; gt; ).</p>\n<p>Auto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on <a\nhref=\"https://twig.symfony.com/doc/3.x/filters/escape.html\">the strategy applied</a> and the context, for example a \"html auto-escaping\" strategy\n(which only transforms html characters into <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Entity\">html entities</a>) will not be relevant\nwhen variables are used in a <a href=\"https://en.wikipedia.org/wiki/HTML_attribute\">html attribute</a> because '<code>:</code>' character is not\nescaped and thus an attack as below is possible:</p>\n<pre>\n&lt;a href=\"{{ myLink }}\"&gt;link&lt;/a&gt; // myLink = javascript:alert(document.cookie)\n&lt;a href=\"javascript:alert(document.cookie)\"&gt;link&lt;/a&gt; // JS injection (XSS attack)\n</pre>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Templates are used to render web content and\n    <ul>\n      <li> dynamic variables in templates come from untrusted locations or are user-controlled inputs </li>\n      <li> there is no local mechanism in place to sanitize or validate the inputs. </li>\n    </ul>  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Enable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right\none.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nfrom jinja2 import Environment\n\nenv = Environment() # Sensitive: New Jinja2 Environment has autoescape set to false\nenv = Environment(autoescape=False) # Sensitive:\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfrom jinja2 import Environment\nenv = Environment(autoescape=True) # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\">OWASP Cheat\n  Sheet</a> - XSS Prevention Cheat Sheet </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S5869",
          "name": "Character classes in regular expressions should not contain the same character twice",
          "description": "<h2>Why is this an issue?</h2>\n<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.</p>\n<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.\nAnother common cause is forgetting to escape the <code>-</code> character, creating an unintended range that overlaps with other characters in the\ncharacter class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"[0-99]\" # Noncompliant, this won't actually match strings with two digits\nr\"[0-9.-_]\" # Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"[0-9]{1,2}\"\nr\"[0-9.\\\\-_]\"\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.</p>\n<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.\nAnother common cause is forgetting to escape the <code>-</code> character, creating an unintended range that overlaps with other characters in the\ncharacter class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nr\"[0-99]\" # Noncompliant, this won't actually match strings with two digits\nr\"[0-9.-_]\" # Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nr\"[0-9]{1,2}\"\nr\"[0-9.\\\\-_]\"\n</pre>\n\n"
        },
        {
          "id": "S3330",
          "name": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
          "description": "<p>When a cookie is configured with the <code>HttpOnly</code> attribute set to <em>true</em>, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of <code>HttpOnly</code> is <em>false</em> and it\u00e2\u20ac\u2122s up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the <code>HttpOnly</code> attribute can help to reduce their impact as it won\u00e2\u20ac\u2122t be possible to exploit the XSS\nvulnerability to steal session-cookies.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is sensitive, used to authenticate the user, for instance a <em>session-cookie</em> </li>\n  <li> the <code>HttpOnly</code> attribute offer an additional protection (not the case for an <em>XSRF-TOKEN cookie</em> / CSRF token for example)\n  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> By default the <code>HttpOnly</code> flag should be set to <em>true</em> for most of the cookies and it\u00e2\u20ac\u2122s mandatory for session /\n  sensitive-security cookies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Flask:</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value') # Sensitive\n    return response\n</pre>\n<h2>Compliant Solution</h2>\n<p>Flask:</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value', httponly=True) # Compliant\n    return response\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/HttpOnly\">OWASP HttpOnly</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1004\">CWE-1004 - Sensitive Cookie Without 'HttpOnly' Flag</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\">HTTPONLY_COOKIE</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222575\">Application Security and\n  Development: V-222575</a> - The application must set the HTTPOnly flag on session cookies. </li>\n</ul>\n\n",
          "severity": "Minor",
          "recommendation": "<p>When a cookie is configured with the <code>HttpOnly</code> attribute set to <em>true</em>, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of <code>HttpOnly</code> is <em>false</em> and it\u00e2\u20ac\u2122s up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the <code>HttpOnly</code> attribute can help to reduce their impact as it won\u00e2\u20ac\u2122t be possible to exploit the XSS\nvulnerability to steal session-cookies.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is sensitive, used to authenticate the user, for instance a <em>session-cookie</em> </li>\n  <li> the <code>HttpOnly</code> attribute offer an additional protection (not the case for an <em>XSRF-TOKEN cookie</em> / CSRF token for example)\n  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> By default the <code>HttpOnly</code> flag should be set to <em>true</em> for most of the cookies and it\u00e2\u20ac\u2122s mandatory for session /\n  sensitive-security cookies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Flask:</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value') # Sensitive\n    return response\n</pre>\n<h2>Compliant Solution</h2>\n<p>Flask:</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value', httponly=True) # Compliant\n    return response\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/HttpOnly\">OWASP HttpOnly</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1004\">CWE-1004 - Sensitive Cookie Without 'HttpOnly' Flag</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\">HTTPONLY_COOKIE</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222575\">Application Security and\n  Development: V-222575</a> - The application must set the HTTPOnly flag on session cookies. </li>\n</ul>\n\n"
        },
        {
          "id": "S6353",
          "name": "Regular expression quantifiers and character classes should be used concisely",
          "description": "<h2>Why is this an issue?</h2>\n<p>A regular expression is a sequence of characters that specifies a match pattern in text. Among the most important concepts are:</p>\n<ul>\n  <li> Character classes: defines a set of characters, any one of which can occur in an input string for a match to succeed. </li>\n  <li> Quantifiers: used to specify how many instances of a character, group, or character class must be present in the input for a match. </li>\n  <li> Wildcard (<code>.</code>): matches all characters except line terminators (also matches them if the <code>s</code> flag is set). </li>\n</ul>\n<p>Many of these features include shortcuts of widely used expressions, so there is more than one way to construct a regular expression to achieve the\nsame results. For example, to match a two-digit number, one could write <code>[0-9]{2,2}</code> or <code>\\d{2}</code>. The latter is not only shorter\nbut easier to read and thus to maintain.</p>\n<p>This rule recommends replacing some quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nr\"[0-9]\"        # Noncompliant - same as r\"\\d\"\nr\"[^0-9]\"       # Noncompliant - same as r\"\\D\"\nr\"[A-Za-z0-9_]\" # Noncompliant - same as r\"\\w\"\nr\"[\\w\\W]\"       # Noncompliant - same as r\".\"\nr\"a{0,}\"        # Noncompliant - same as r\"a*\"\n</pre>\n<p>Use the more concise version to make the regex expression more readable.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nr\"\\d\"\nr\"\\D\"\nr\"\\w\"\nr\".\"\nr\"a*\"\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>A regular expression is a sequence of characters that specifies a match pattern in text. Among the most important concepts are:</p>\n<ul>\n  <li> Character classes: defines a set of characters, any one of which can occur in an input string for a match to succeed. </li>\n  <li> Quantifiers: used to specify how many instances of a character, group, or character class must be present in the input for a match. </li>\n  <li> Wildcard (<code>.</code>): matches all characters except line terminators (also matches them if the <code>s</code> flag is set). </li>\n</ul>\n<p>Many of these features include shortcuts of widely used expressions, so there is more than one way to construct a regular expression to achieve the\nsame results. For example, to match a two-digit number, one could write <code>[0-9]{2,2}</code> or <code>\\d{2}</code>. The latter is not only shorter\nbut easier to read and thus to maintain.</p>\n<p>This rule recommends replacing some quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nr\"[0-9]\"        # Noncompliant - same as r\"\\d\"\nr\"[^0-9]\"       # Noncompliant - same as r\"\\D\"\nr\"[A-Za-z0-9_]\" # Noncompliant - same as r\"\\w\"\nr\"[\\w\\W]\"       # Noncompliant - same as r\".\"\nr\"a{0,}\"        # Noncompliant - same as r\"a*\"\n</pre>\n<p>Use the more concise version to make the regex expression more readable.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nr\"\\d\"\nr\"\\D\"\nr\"\\w\"\nr\".\"\nr\"a*\"\n</pre>\n\n"
        },
        {
          "id": "S1129",
          "name": "Long suffix \"L\" should be upper case",
          "description": "<h2>Why is this an issue?</h2>\n<p>The long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nreturn 10l  // Noncompliant; easily confused with one zero one\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nreturn 10L\n</pre>\n\n",
          "severity": "Minor",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>The long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nreturn 10l  // Noncompliant; easily confused with one zero one\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nreturn 10L\n</pre>\n\n"
        }
      ]
    },
    {
      "category": "Separation of Concerns (SoC)",
      "rules": [
        {
          "id": "S1908",
          "name": "Files should not be too complex",
          "description": "<p>This rule is deprecated, and will eventually be removed.</p>\n<h2>Why is this an issue?</h2>\n<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>\n\n",
          "severity": "Major",
          "recommendation": "<p>This rule is deprecated, and will eventually be removed.</p>\n<h2>Why is this an issue?</h2>\n<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>\n\n"
        }
      ]
    },
    {
      "category": "Responsive UI Design",
      "rules": [
        {
          "id": "S2755",
          "name": "XML parsers should not be vulnerable to XXE attacks",
          "description": "<p>This vulnerability allows the usage of external entities in XML.</p>\n<h2>Why is this an issue?</h2>\n<p>External Entity Processing allows for XML parsing with the involvement of external entities. However, when this functionality is enabled without\nproper precautions, it can lead to a vulnerability known as XML External Entity (XXE) attack.</p>\n<h3>What is the potential impact?</h3>\n<h4>Exposing sensitive data</h4>\n<p>One significant danger of XXE vulnerabilities is the potential for sensitive data exposure. By crafting malicious XML payloads, attackers can\nreference external entities that contain sensitive information, such as system files, database credentials, or configuration files. When these\nentities are processed during XML parsing, the attacker can extract the contents and gain unauthorized access to sensitive data. This poses a severe\nthreat to the confidentiality of critical information.</p>\n<h4>Exhausting system resources</h4>\n<p>Another consequence of XXE vulnerabilities is the potential for denial-of-service attacks. By exploiting the ability to include external entities,\nattackers can construct XML payloads that cause resource exhaustion. This can overwhelm the system\u00e2\u20ac\u2122s memory, CPU, or other critical resources, leading\nto system unresponsiveness or crashes. A successful DoS attack can disrupt the availability of services and negatively impact the user experience.</p>\n<h4>Forging requests</h4>\n<p>XXE vulnerabilities can also enable Server-Side Request Forgery (SSRF) attacks. By leveraging the ability to include external entities, an attacker\ncan make the vulnerable application send arbitrary requests to other internal or external systems. This can result in unintended actions, such as\nretrieving data from internal resources, scanning internal networks, or attacking other systems. SSRF attacks can lead to severe consequences,\nincluding unauthorized data access, system compromise, or even further exploitation within the network infrastructure.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport xml.sax\n\nparser = xml.sax.make_parser()\nmyHandler = MyHandler()\nparser.setContentHandler(myHandler)\nparser.setFeature(feature_external_ges, True) # Noncompliant\nparser.parse('xxe.xml')\n</pre>\n<h4>Compliant solution</h4>\n<p>The SAX parser does not process general external entities by default since version 3.7.1.</p>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport xml.sax\n\nparser = xml.sax.make_parser()\nmyHandler = MyHandler()\nparser.setContentHandler(myHandler)\nparser.setFeature(feature_external_ges, False)\nparser.parse('xxe.xml')\n</pre>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>\n<h2>How to fix it in lxml</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<p>When parsing XML:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom lxml import etree\n\nparser = etree.XMLParser() # Noncompliant\ntree = etree.parse('xxe.xml', parser)\nroot = tree1.getroot()\n</pre>\n<p>When validating XML:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom lxml import etree\n\nparser = etree.XMLParser(resolve_entities=True) # Noncompliant\ntreexsd = etree.parse('xxe.xsd', parser)\nrootxsd = treexsd.getroot()\nschema = etree.XMLSchema(rootxsd)\n</pre>\n<p>When transforming XML:</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfrom lxml import etree\n\nac = etree.XSLTAccessControl(read_network=True, write_network=False)  # Noncompliant\ntransform = etree.XSLT(rootxsl, access_control=ac)\n</pre>\n<h4>Compliant solution</h4>\n<p>When parsing XML, disable entity resolving and network access:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom lxml import etree\n\nparser = etree.XMLParser(resolve_entities=False, no_network=True)\ntree1 = etree.parse('xxe.xml', parser)\nroot1 = tree1.getroot()\n</pre>\n<p>When validating XML (note that network access <a href=\"https://bugs.launchpad.net/lxml/+bug/1234114\">cannot be completely disabled</a> when calling\nXMLSchema):</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom lxml import etree\n\nparser = etree.XMLParser(resolve_entities=False)\ntreexsd = etree.parse('xxe.xsd', parser)\nrootxsd = treexsd.getroot()\nschema = etree.XMLSchema(rootxsd)\n</pre>\n<p>When transforming XML, disable access to network and file system:</p>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nfrom lxml import etree\n\nparser = etree.XMLParser(resolve_entities=False)\ntreexsl = etree.parse('xxe.xsl', parser)\nrootxsl = treexsl.getroot()\n\nac = etree.XSLTAccessControl.DENY_ALL\ntransform = etree.XSLT(rootxsl, access_control=ac)\n</pre>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\">Top 10 2017 Category A4 - XML External\n  Entities (XXE)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/611\">CWE-611 - Information Exposure Through XML External Entity Reference</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/827\">CWE-827 - Improper Control of Document Type Definition</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n</ul>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This vulnerability allows the usage of external entities in XML.</p>\n<h2>Why is this an issue?</h2>\n<p>External Entity Processing allows for XML parsing with the involvement of external entities. However, when this functionality is enabled without\nproper precautions, it can lead to a vulnerability known as XML External Entity (XXE) attack.</p>\n<h3>What is the potential impact?</h3>\n<h4>Exposing sensitive data</h4>\n<p>One significant danger of XXE vulnerabilities is the potential for sensitive data exposure. By crafting malicious XML payloads, attackers can\nreference external entities that contain sensitive information, such as system files, database credentials, or configuration files. When these\nentities are processed during XML parsing, the attacker can extract the contents and gain unauthorized access to sensitive data. This poses a severe\nthreat to the confidentiality of critical information.</p>\n<h4>Exhausting system resources</h4>\n<p>Another consequence of XXE vulnerabilities is the potential for denial-of-service attacks. By exploiting the ability to include external entities,\nattackers can construct XML payloads that cause resource exhaustion. This can overwhelm the system\u00e2\u20ac\u2122s memory, CPU, or other critical resources, leading\nto system unresponsiveness or crashes. A successful DoS attack can disrupt the availability of services and negatively impact the user experience.</p>\n<h4>Forging requests</h4>\n<p>XXE vulnerabilities can also enable Server-Side Request Forgery (SSRF) attacks. By leveraging the ability to include external entities, an attacker\ncan make the vulnerable application send arbitrary requests to other internal or external systems. This can result in unintended actions, such as\nretrieving data from internal resources, scanning internal networks, or attacking other systems. SSRF attacks can lead to severe consequences,\nincluding unauthorized data access, system compromise, or even further exploitation within the network infrastructure.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport xml.sax\n\nparser = xml.sax.make_parser()\nmyHandler = MyHandler()\nparser.setContentHandler(myHandler)\nparser.setFeature(feature_external_ges, True) # Noncompliant\nparser.parse('xxe.xml')\n</pre>\n<h4>Compliant solution</h4>\n<p>The SAX parser does not process general external entities by default since version 3.7.1.</p>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport xml.sax\n\nparser = xml.sax.make_parser()\nmyHandler = MyHandler()\nparser.setContentHandler(myHandler)\nparser.setFeature(feature_external_ges, False)\nparser.parse('xxe.xml')\n</pre>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>\n<h2>How to fix it in lxml</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<p>When parsing XML:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom lxml import etree\n\nparser = etree.XMLParser() # Noncompliant\ntree = etree.parse('xxe.xml', parser)\nroot = tree1.getroot()\n</pre>\n<p>When validating XML:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom lxml import etree\n\nparser = etree.XMLParser(resolve_entities=True) # Noncompliant\ntreexsd = etree.parse('xxe.xsd', parser)\nrootxsd = treexsd.getroot()\nschema = etree.XMLSchema(rootxsd)\n</pre>\n<p>When transforming XML:</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfrom lxml import etree\n\nac = etree.XSLTAccessControl(read_network=True, write_network=False)  # Noncompliant\ntransform = etree.XSLT(rootxsl, access_control=ac)\n</pre>\n<h4>Compliant solution</h4>\n<p>When parsing XML, disable entity resolving and network access:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom lxml import etree\n\nparser = etree.XMLParser(resolve_entities=False, no_network=True)\ntree1 = etree.parse('xxe.xml', parser)\nroot1 = tree1.getroot()\n</pre>\n<p>When validating XML (note that network access <a href=\"https://bugs.launchpad.net/lxml/+bug/1234114\">cannot be completely disabled</a> when calling\nXMLSchema):</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom lxml import etree\n\nparser = etree.XMLParser(resolve_entities=False)\ntreexsd = etree.parse('xxe.xsd', parser)\nrootxsd = treexsd.getroot()\nschema = etree.XMLSchema(rootxsd)\n</pre>\n<p>When transforming XML, disable access to network and file system:</p>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nfrom lxml import etree\n\nparser = etree.XMLParser(resolve_entities=False)\ntreexsl = etree.parse('xxe.xsl', parser)\nrootxsl = treexsl.getroot()\n\nac = etree.XSLTAccessControl.DENY_ALL\ntransform = etree.XSLT(rootxsl, access_control=ac)\n</pre>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\">Top 10 2017 Category A4 - XML External\n  Entities (XXE)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/611\">CWE-611 - Information Exposure Through XML External Entity Reference</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/827\">CWE-827 - Improper Control of Document Type Definition</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stig/application_security_and_development/2023-06-08/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n</ul>\n\n"
        }
      ]
    },
    {
      "category": "Design Principles",
      "rules": [
        {
          "id": "S3827",
          "name": "Variables, classes and functions should be defined before being used",
          "description": "<h2>Why is this an issue?</h2>\n<p>Variables, Classes and functions should be defined before they are used, otherwise the code will fail.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef noncompliant():\n    foo()  # Noncompliant\n    foo = sum\n\n    func()  # Noncompliant\n    def func():\n        pass\n\n    MyClass()  # Noncompliant\n    class MyClass:\n        pass\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef compliant():\n    foo = sum\n    foo()\n\n    def func():\n        pass\n    func()\n\n    class MyClass:\n        pass\n    MyClass()\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Variables, Classes and functions should be defined before they are used, otherwise the code will fail.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef noncompliant():\n    foo()  # Noncompliant\n    foo = sum\n\n    func()  # Noncompliant\n    def func():\n        pass\n\n    MyClass()  # Noncompliant\n    class MyClass:\n        pass\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef compliant():\n    foo = sum\n    foo()\n\n    def func():\n        pass\n    func()\n\n    class MyClass:\n        pass\n    MyClass()\n</pre>\n\n"
        },
        {
          "id": "S2190",
          "name": "Recursion should not be infinite",
          "description": "<h2>Why is this an issue?</h2>\n<p>Recursion happens when control enters a loop that has no exit. This can happen when a method invokes itself or when a pair of methods invoke each\nother. It can be a useful tool, but unless the method includes a provision to break out of the recursion and <code>return</code>, the recursion will\ncontinue until the stack overflows and the program crashes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef my_pow(num, exponent):  # Noncompliant\n    num = num * my_pow(num, exponent - 1)\n    return num  # this is never reached\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef my_pow(num, exponent):  # Compliant\n    if exponent &gt; 1:\n      num = num * my_pow(num, exponent - 1)\n    return num\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Recursion happens when control enters a loop that has no exit. This can happen when a method invokes itself or when a pair of methods invoke each\nother. It can be a useful tool, but unless the method includes a provision to break out of the recursion and <code>return</code>, the recursion will\ncontinue until the stack overflows and the program crashes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef my_pow(num, exponent):  # Noncompliant\n    num = num * my_pow(num, exponent - 1)\n    return num  # this is never reached\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ndef my_pow(num, exponent):  # Compliant\n    if exponent &gt; 1:\n      num = num * my_pow(num, exponent - 1)\n    return num\n</pre>\n\n"
        },
        {
          "id": "S2159",
          "name": "Unnecessary equality checks should not be made",
          "description": "<h2>Why is this an issue?</h2>\n<p>In some cases a comparison with operators <code>==</code>, or <code>!=</code> will always return True or always return False. When this happens,\nthe comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing unrelated builtin types such as string and integer. </li>\n  <li> comparing class instances which do not implement <code>__eq__</code> or <code>__ne__</code> to an object of a different type (builtin or from\n  an unrelated class which also doesn\u00e2\u20ac\u2122t implement <code>__eq__</code> or <code>__ne__</code>). </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nfoo = 1 == \"1\"  # Noncompliant. Always False.\n\nfoo = 1 != \"1\"  # Noncompliant. Always True.\n\nclass A:\n    pass\n\nmyvar = A() == 1  # Noncompliant. Always False.\nmyvar = A() != 1  # Noncompliant. Always True.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfoo = 1 == int(\"1\")\n\nfoo = str(1) != \"1\"\n\nclass Eq:\n    def __eq__(self, other):\n        return True\n\nmyvar = Eq() == 1\nmyvar = 1 == Eq()\nmyvar = Eq() != 1  # Ok. \"__ne__\" calls \"__eq__\" by default\nmyvar = 1 != Eq()\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>In some cases a comparison with operators <code>==</code>, or <code>!=</code> will always return True or always return False. When this happens,\nthe comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing unrelated builtin types such as string and integer. </li>\n  <li> comparing class instances which do not implement <code>__eq__</code> or <code>__ne__</code> to an object of a different type (builtin or from\n  an unrelated class which also doesn\u00e2\u20ac\u2122t implement <code>__eq__</code> or <code>__ne__</code>). </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nfoo = 1 == \"1\"  # Noncompliant. Always False.\n\nfoo = 1 != \"1\"  # Noncompliant. Always True.\n\nclass A:\n    pass\n\nmyvar = A() == 1  # Noncompliant. Always False.\nmyvar = A() != 1  # Noncompliant. Always True.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfoo = 1 == int(\"1\")\n\nfoo = str(1) != \"1\"\n\nclass Eq:\n    def __eq__(self, other):\n        return True\n\nmyvar = Eq() == 1\nmyvar = 1 == Eq()\nmyvar = Eq() != 1  # Ok. \"__ne__\" calls \"__eq__\" by default\nmyvar = 1 != Eq()\n</pre>\n\n"
        },
        {
          "id": "S3516",
          "name": "Functions returns should not be invariant",
          "description": "<h2>Why is this an issue?</h2>\n<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn\u00e2\u20ac\u2122t adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a function contains several return statements that all return the same value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef foo(a):  # NonCompliant\n    b = 12\n    if a == 1:\n        return b\n    return b\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn\u00e2\u20ac\u2122t adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a function contains several return statements that all return the same value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ndef foo(a):  # NonCompliant\n    b = 12\n    if a == 1:\n        return b\n    return b\n</pre>\n\n"
        },
        {
          "id": "S2316",
          "name": "Backticks should not be used",
          "description": "<p>This rule raises an issue when backticks are used instead of <code>repr</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python 2, backticks are a deprecated alias for <code>repr()</code>. The syntax was removed in Python 3. To make the transition to Python 3\neasier, they should not be used anymore.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nreturn `num`  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nreturn repr(num)\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when backticks are used instead of <code>repr</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>In Python 2, backticks are a deprecated alias for <code>repr()</code>. The syntax was removed in Python 3. To make the transition to Python 3\neasier, they should not be used anymore.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nreturn `num`  # Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nreturn repr(num)\n</pre>\n\n"
        },
        {
          "id": "S1845",
          "name": "Methods and field names should not differ only by capitalization",
          "description": "<p>This rule raises an issue when there is a method and a field in a class with names that differ only by capitalization.</p>\n<h2>Why is this an issue?</h2>\n<p>Looking at the set of methods and fields in a <code>class</code> and finding two that differ only by capitalization is confusing to users of the\nclass.</p>\n<p>This situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case\nwhere both a method and a field have the same name (with or without capitalization differences). However, renaming a public method could be disruptive\nto callers. Therefore renaming the member is the recommended action.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass SomeClass:\n    lookUp = false\n    def lookup():       # Non-compliant; method name differs from field name only by capitalization\n        pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass SomeClass:\n    lookUp = false\n    def getLookUp():\n        pass\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<p>This rule raises an issue when there is a method and a field in a class with names that differ only by capitalization.</p>\n<h2>Why is this an issue?</h2>\n<p>Looking at the set of methods and fields in a <code>class</code> and finding two that differ only by capitalization is confusing to users of the\nclass.</p>\n<p>This situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case\nwhere both a method and a field have the same name (with or without capitalization differences). However, renaming a public method could be disruptive\nto callers. Therefore renaming the member is the recommended action.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass SomeClass:\n    lookUp = false\n    def lookup():       # Non-compliant; method name differs from field name only by capitalization\n        pass\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass SomeClass:\n    lookUp = false\n    def getLookUp():\n        pass\n</pre>\n\n"
        },
        {
          "id": "S4423",
          "name": "Weak SSL/TLS protocols should not be used",
          "description": "<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<p>To provide communication security over a network, SSL and TLS are generally used. However, it is important to note that the following protocols are\nall considered weak by the cryptographic community, and are officially deprecated:</p>\n<ul>\n  <li> SSL versions 1.0, 2.0 and 3.0 </li>\n  <li> TLS versions 1.0 and 1.1 </li>\n</ul>\n<p>When these unsecured protocols are used, it is best practice to expect a breach: that a user or organization with malicious intent will perform\nmathematical attacks on this data after obtaining it by other means.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, the company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization\u00e2\u20ac\u2122s ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport ssl\n\nssl.SSLContext(ssl.PROTOCOL_SSLv3) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport ssl\n\ncontext = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\ncontext.minimum_version = ssl.TLSVersion.TLSv1_2\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.</p>\n<p>The best choices at the moment are the following.</p>\n<h4>Use TLS v1.2 or TLS v1.3</h4>\n<p>Even though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.<br></p>\n<p>The use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.</p>\n<p>The only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.</p>\n<p>On the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.</p>\n<h2>How to fix it in OpenSSL</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom OpenSSL import SSL\n\nSSL.Context(SSL.SSLv3_METHOD)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom OpenSSL import SSL\n\ncontext = SSL.Context(SSL.TLS_SERVER_METHOD)\ncontext.set_min_proto_version(SSL.TLS1_2_VERSION)\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.</p>\n<p>The best choices at the moment are the following.</p>\n<h4>Use TLS v1.2 or TLS v1.3</h4>\n<p>Even though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.<br></p>\n<p>The use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.</p>\n<p>The only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.</p>\n<p>On the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.</p>\n<h2>How to fix it in AWS CDK</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom aws_cdk.aws_apigateway import DomainName, SecurityPolicy\n\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        DomainName(self, \"example\",\n            domain_name=\"example.com\",\n            certificate=certificate,\n            security_policy=SecurityPolicy.TLS_1_0 # Noncompliant\n        )\n</pre>\n<p>By default, AWS\u00e2\u20ac\u2122s OpenSearch service <code>CfnDomains</code> enables TLS 1.0, a weak cryptographic algorithm.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom aws_cdk.aws_opensearchservice import CfnDomain, EngineVersion\n\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        CfnDomain(self, \"example\",\n            version=EngineVersion.OPENSEARCH_1_3\n        ) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom aws_cdk.aws_apigateway import DomainName, SecurityPolicy\n\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        DomainName(self, \"example\",\n            domain_name=\"example.com\",\n            certificate=certificate,\n            security_policy=SecurityPolicy.TLS_1_2\n        )\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom aws_cdk.aws_opensearchservice import CfnDomain, EngineVersion\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        CfnDomain(self, \"example\",\n            version=EngineVersion.OPENSEARCH_1_3\n            domain_endpoint_options=CfnDomain.DomainEndpointOptionsProperty(\n                tls_security_policy=\"Policy-Min-TLS-1-2-2019-07\"\n            )\n        )\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.</p>\n<p>The best choices at the moment are the following.</p>\n<h4>Use TLS v1.2 or TLS v1.3</h4>\n<p>Even though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.<br></p>\n<p>The use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.</p>\n<p>The only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.</p>\n<p>On the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n</ul>\n\n",
          "severity": "Critical",
          "recommendation": "<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<p>To provide communication security over a network, SSL and TLS are generally used. However, it is important to note that the following protocols are\nall considered weak by the cryptographic community, and are officially deprecated:</p>\n<ul>\n  <li> SSL versions 1.0, 2.0 and 3.0 </li>\n  <li> TLS versions 1.0 and 1.1 </li>\n</ul>\n<p>When these unsecured protocols are used, it is best practice to expect a breach: that a user or organization with malicious intent will perform\nmathematical attacks on this data after obtaining it by other means.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, the company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization\u00e2\u20ac\u2122s ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>\n<h2>How to fix it in Python Standard Library</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport ssl\n\nssl.SSLContext(ssl.PROTOCOL_SSLv3) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport ssl\n\ncontext = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\ncontext.minimum_version = ssl.TLSVersion.TLSv1_2\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.</p>\n<p>The best choices at the moment are the following.</p>\n<h4>Use TLS v1.2 or TLS v1.3</h4>\n<p>Even though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.<br></p>\n<p>The use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.</p>\n<p>The only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.</p>\n<p>On the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.</p>\n<h2>How to fix it in OpenSSL</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nfrom OpenSSL import SSL\n\nSSL.Context(SSL.SSLv3_METHOD)  # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nfrom OpenSSL import SSL\n\ncontext = SSL.Context(SSL.TLS_SERVER_METHOD)\ncontext.set_min_proto_version(SSL.TLS1_2_VERSION)\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.</p>\n<p>The best choices at the moment are the following.</p>\n<h4>Use TLS v1.2 or TLS v1.3</h4>\n<p>Even though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.<br></p>\n<p>The use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.</p>\n<p>The only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.</p>\n<p>On the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.</p>\n<h2>How to fix it in AWS CDK</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom aws_cdk.aws_apigateway import DomainName, SecurityPolicy\n\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        DomainName(self, \"example\",\n            domain_name=\"example.com\",\n            certificate=certificate,\n            security_policy=SecurityPolicy.TLS_1_0 # Noncompliant\n        )\n</pre>\n<p>By default, AWS\u00e2\u20ac\u2122s OpenSearch service <code>CfnDomains</code> enables TLS 1.0, a weak cryptographic algorithm.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfrom aws_cdk.aws_opensearchservice import CfnDomain, EngineVersion\n\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        CfnDomain(self, \"example\",\n            version=EngineVersion.OPENSEARCH_1_3\n        ) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom aws_cdk.aws_apigateway import DomainName, SecurityPolicy\n\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        DomainName(self, \"example\",\n            domain_name=\"example.com\",\n            certificate=certificate,\n            security_policy=SecurityPolicy.TLS_1_2\n        )\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfrom aws_cdk.aws_opensearchservice import CfnDomain, EngineVersion\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        CfnDomain(self, \"example\",\n            version=EngineVersion.OPENSEARCH_1_3\n            domain_endpoint_options=CfnDomain.DomainEndpointOptionsProperty(\n                tls_security_policy=\"Policy-Min-TLS-1-2-2019-07\"\n            )\n        )\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.</p>\n<p>The best choices at the moment are the following.</p>\n<h4>Use TLS v1.2 or TLS v1.3</h4>\n<p>Even though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.<br></p>\n<p>The use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.</p>\n<p>The only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.</p>\n<p>On the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n</ul>\n\n"
        },
        {
          "id": "S1700",
          "name": "A field should not duplicate the name of its containing class",
          "description": "<h2>Why is this an issue?</h2>\n<p>It\u00e2\u20ac\u2122s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Foo:\n  foo = ''\n\n  def getFoo(self):\n    ...\n\nfoo = Foo()\nfoo.getFoo() # what does this return?\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass Foo:\n  name = ''\n\n  def getName(self):\n    ...\n\nfoo = Foo()\nfoo.getName()\n</pre>\n\n",
          "severity": "Major",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>It\u00e2\u20ac\u2122s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Foo:\n  foo = ''\n\n  def getFoo(self):\n    ...\n\nfoo = Foo()\nfoo.getFoo() # what does this return?\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass Foo:\n  name = ''\n\n  def getName(self):\n    ...\n\nfoo = Foo()\nfoo.getName()\n</pre>\n\n"
        },
        {
          "id": "S1451",
          "name": "Track lack of copyright and license headers",
          "description": "<h2>Why is this an issue?</h2>\n<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application.</p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h3>Compliant solution</h3>\n<pre>\n#\n# SonarQube, open source software quality management tool.\n# Copyright (C) 2008-2018 SonarSource\n# mailto:contact AT sonarsource DOT com\n#\n# SonarQube is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 3 of the License, or (at your option) any later version.\n#\n# SonarQube is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this program; if not, write to the Free Software Foundation,\n# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n#\n</pre>\n\n",
          "severity": "Blocker",
          "recommendation": "<h2>Why is this an issue?</h2>\n<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application.</p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h3>Compliant solution</h3>\n<pre>\n#\n# SonarQube, open source software quality management tool.\n# Copyright (C) 2008-2018 SonarSource\n# mailto:contact AT sonarsource DOT com\n#\n# SonarQube is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 3 of the License, or (at your option) any later version.\n#\n# SonarQube is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this program; if not, write to the Free Software Foundation,\n# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n#\n</pre>\n\n"
        }
      ]
    },

    {
      "category": "Security",
      "rules": [
        {
          "id": "E9101",
          "name": "Use HTTPS for Secure Communication",
          "description": "Detects usage of HTTP instead of HTTPS for secure data transmission.",
          "severity": "Error",
          "recommendation": "Ensure all communications use HTTPS for security."
        },
        {
          "id": "E9102",
          "name": "Encryption of Sensitive Data at Rest",
          "description": "Sensitive data should be encrypted at rest using secure encryption algorithms.",
          "severity": "Error",
          "recommendation": "Encrypt sensitive data before storing it."
        },
        {
          "id": "E9103",
          "name": "Encryption of Sensitive Data in Transit",
          "description": "Encrypt sensitive data during transmission to prevent interception.",
          "severity": "Error",
          "recommendation": "Use TLS or similar protocols for data encryption in transit."
        },
        {
          "id": "E9104",
          "name": "Input Validation to Prevent Malicious Injection",
          "description": "Validates user input to prevent injection attacks, ensuring data integrity.",
          "severity": "Error",
          "recommendation": "Validate all user inputs for security."
        },
        {
          "id": "W9105",
          "name": "Input Sanitization to Prevent XSS",
          "description": "Sanitize user input to prevent XSS and similar attacks.",
          "severity": "Warning",
          "recommendation": "Sanitize inputs, especially for web-based interfaces."
        },
        {
          "id": "E9106",
          "name": "Strong Authentication Mechanism",
          "description": "Verifies presence of strong authentication mechanisms.",
          "severity": "Error",
          "recommendation": "Use multi-factor authentication for secure access."
        },
        {
          "id": "E9107",
          "name": "Authorization Checks for Resource Access",
          "description": "Ensures authorization checks are implemented for restricted resources.",
          "severity": "Error",
          "recommendation": "Ensure authorization checks protect all critical resources."
        },
        {
          "id": "E9108",
          "name": "SQL Injection Prevention",
          "description": "Detects potential SQL injection risks and recommends parameterized queries.",
          "severity": "Error",
          "recommendation": "Use parameterized queries to avoid SQL injection."
        },
        {
          "id": "E9109",
          "name": "XSS Prevention",
          "description": "Detects Cross-site scripting (XSS) risk and recommends Sanitize output to prevent XSS attacks.",
          "severity": "Error",
          "recommendation": "Sanitize output to prevent XSS attacks."
        },
        {
          "id": "E9110",
          "name": "CSRF Prevention",
          "description": "Detects Cross-site request forgery (CSRF) risk and Ensure CSRF tokens are used.",
          "severity": "Error",
          "recommendation": "Ensure to use CSRF tokens."
        }
      ]
    },
    {
      "category": "Safety Features",
      "rules": [
        {
          "id": "W9701",
          "name": "Geofencing Features Missing",
          "description": "Geofencing must include customizable zones and alerts to prevent unauthorized flights.",
          "severity": "Warning",
          "recommendation": "Implement geofencing with zone customization and alerts."
        },
        {
          "id": "E9702",
          "name": "Return-to-Home Functionality with Obstacle Avoidance",
          "description": "The return-to-home feature should include obstacle avoidance for safe retrieval.",
          "severity": "Error",
          "recommendation": "Ensure return-to-home includes collision avoidance."
        },
        {
          "id": "E9703",
          "name": "Emergency Landing Trigger Mechanisms",
          "description": "Emergency landing must include safety triggers to initiate a safe landing in critical situations.",
          "severity": "Error",
          "recommendation": "Implement robust emergency landing features."
        }
      ]
    },
    {
      "category": "Drone Control",
      "rules": [
        {
          "id": "E9301",
          "name": "Emergency Landing Capability",
          "description": "Ensures the emergency landing functionality is implemented.",
          "severity": "Error",
          "recommendation": "Implement emergency landing for safe drone operation."
        },
        {
          "id": "W9302",
          "name": "Geofencing Boundaries",
          "description": "Checks if geofencing boundaries are implemented to prevent unauthorized flights.",
          "severity": "Warning",
          "recommendation": "Implement geofencing for secure flight zones."
        },
        {
          "id": "W9303",
          "name": "Control Algorithm Precision",
          "description": "Verifies the use of precise control algorithms (e.g., PID controllers) for accurate drone movements.",
          "severity": "Warning",
          "recommendation": "Use precise algorithms for better control."
        },
        {
          "id": "E9304",
          "name": "Continuous Telemetry Monitoring",
          "description": "Ensures telemetry is continuously monitored to detect anomalies in real-time.",
          "severity": "Error",
          "recommendation": "Ensure telemetry monitoring is enabled."
        },
        {
          "id": "C9305",
          "name": "Numerical Precision Checks",
          "description": "Verifies numerical precision within control algorithms to prevent floating-point errors.",
          "severity": "Convention",
          "recommendation": "Add precision checks in control algorithms."
        }
      ]
    },

    {
      "category": "Payload Integration",
      "rules": [
        {
          "id": "C4001",
          "name": "Payload integration must ensure compatibility between the drone and the payload",
          "description": "Payload integration must ensure compatibility between the drone and the payload.",
          "severity": "Convention",
          "recommendation": "Ensure that the payload is compatible with the drone by verifying size, type, or operational constraints."
        },
        {
          "description": "# Look for functions that should check payload compatibility (e.g., 'check_payload', 'validate_payload",
          "name": "# Look for functions that should check payload compatibility (e"
        },
        {
          "id": "C4002",
          "name": "Efficient data acquisition methods must be implemented for payload operations",
          "description": "Efficient data acquisition methods must be implemented for payload operations.",
          "severity": "Convention",
          "recommendation": "Ensure efficient methods for acquiring payload data are implemented."
        },
        {
          "id": "C4003",
          "name": "Precise control over payload operations must be implemented",
          "description": "Precise control over payload operations must be implemented.",
          "severity": "Convention",
          "recommendation": "Ensure precise control over payload deployment, release, or operations is implemented."
        },
        {
          "id": "C9601",
          "name": "Critical safety features must have redundant systems",
          "description": "Critical safety features must have redundant systems.",
          "severity": "Convention",
          "recommendation": "Ensure that critical safety features have redundancy, such as backup sensors or duplicate systems."
        },
        {
          "id": "C9602",
          "name": "Safety features must be thoroughly tested under various conditions",
          "description": "Safety features must be thoroughly tested under various conditions.",
          "severity": "Convention",
          "recommendation": "Ensure that safety features are tested under different operational conditions."
        },
        {
          "id": "C9603",
          "name": "",
          "description": "",
          "severity": "Convention",
          "recommendation": "Ensure the code follows relevant safety regulations and standards, with appropriate documentation."
        }
      ]
    },
    {
      "category": "Autonomous Flight Safety",
      "rules": [
        {
          "id": "C9501",
          "name": "Autonomous flight code must include robust safety protocols like emergency stop or pre-flight checks",
          "description": "Autonomous flight code must include robust safety protocols like emergency stop or pre-flight checks.",
          "severity": "Convention",
          "recommendation": "Ensure robust safety protocols are implemented to prevent accidents."
        },
        {
          "id": "C9502",
          "name": "Obstacle avoidance algorithms are missing or unreliable",
          "description": "Obstacle avoidance algorithms are missing or unreliable. Implement reliable detection and avoidance algorithms.",
          "severity": "Convention",
          "recommendation": "Ensure reliable obstacle detection and avoidance algorithms are implemented for safe autonomous navigation."
        },
        {
          "id": "C9503",
          "name": "Efficient path planning algorithms are missing",
          "description": "Efficient path planning algorithms are missing. Ensure path planning algorithms are implemented and optimized.",
          "severity": "Convention",
          "recommendation": "Ensure efficient path planning algorithms are implemented for autonomous navigation."
        }
      ]
    }
  ]
}
